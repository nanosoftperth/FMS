'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FMSDev")>
Partial Public Class LINQtoSQLClassesDataContext
    Inherits System.Data.Linq.DataContext

    Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
    Partial Private Sub UpdateAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
    Partial Private Sub DeleteAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
    Partial Private Sub InsertWorkRequest(instance As WorkRequest)
    End Sub
    Partial Private Sub UpdateWorkRequest(instance As WorkRequest)
    End Sub
    Partial Private Sub DeleteWorkRequest(instance As WorkRequest)
    End Sub
    Partial Private Sub InsertAlertType(instance As AlertType)
    End Sub
    Partial Private Sub UpdateAlertType(instance As AlertType)
    End Sub
    Partial Private Sub DeleteAlertType(instance As AlertType)
    End Sub
    Partial Private Sub InsertAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
    Partial Private Sub UpdateAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
    Partial Private Sub DeleteAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
    Partial Private Sub InsertAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
    Partial Private Sub UpdateAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
    Partial Private Sub DeleteAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
    Partial Private Sub InsertApplicationDriver(instance As ApplicationDriver)
    End Sub
    Partial Private Sub UpdateApplicationDriver(instance As ApplicationDriver)
    End Sub
    Partial Private Sub DeleteApplicationDriver(instance As ApplicationDriver)
    End Sub
    Partial Private Sub InsertApplicationFeature(instance As ApplicationFeature)
    End Sub
    Partial Private Sub UpdateApplicationFeature(instance As ApplicationFeature)
    End Sub
    Partial Private Sub DeleteApplicationFeature(instance As ApplicationFeature)
    End Sub
    Partial Private Sub InsertApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
    Partial Private Sub UpdateApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
    Partial Private Sub DeleteApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
    Partial Private Sub InsertApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
    Partial Private Sub UpdateApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
    Partial Private Sub DeleteApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
    Partial Private Sub InsertApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
    Partial Private Sub UpdateApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
    Partial Private Sub DeleteApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
    Partial Private Sub InsertApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
    Partial Private Sub UpdateApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
    Partial Private Sub DeleteApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
    Partial Private Sub InsertApplicationImage(instance As ApplicationImage)
    End Sub
    Partial Private Sub UpdateApplicationImage(instance As ApplicationImage)
    End Sub
    Partial Private Sub DeleteApplicationImage(instance As ApplicationImage)
    End Sub
    Partial Private Sub InsertApplicationLocation(instance As ApplicationLocation)
    End Sub
    Partial Private Sub UpdateApplicationLocation(instance As ApplicationLocation)
    End Sub
    Partial Private Sub DeleteApplicationLocation(instance As ApplicationLocation)
    End Sub
    Partial Private Sub InsertApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
    Partial Private Sub UpdateApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
    Partial Private Sub DeleteApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
    Partial Private Sub InsertApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
    Partial Private Sub UpdateApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
    Partial Private Sub DeleteApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
    Partial Private Sub InsertApplicationVehicle(instance As ApplicationVehicle)
    End Sub
    Partial Private Sub UpdateApplicationVehicle(instance As ApplicationVehicle)
    End Sub
    Partial Private Sub DeleteApplicationVehicle(instance As ApplicationVehicle)
    End Sub
    Partial Private Sub InsertApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
    Partial Private Sub UpdateApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
    Partial Private Sub DeleteApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
    Partial Private Sub InsertApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
    Partial Private Sub UpdateApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
    Partial Private Sub DeleteApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
    Partial Private Sub Insertaspnet_Application(instance As aspnet_Application)
    End Sub
    Partial Private Sub Updateaspnet_Application(instance As aspnet_Application)
    End Sub
    Partial Private Sub Deleteaspnet_Application(instance As aspnet_Application)
    End Sub
    Partial Private Sub Insertaspnet_Membership(instance As aspnet_Membership)
    End Sub
    Partial Private Sub Updateaspnet_Membership(instance As aspnet_Membership)
    End Sub
    Partial Private Sub Deleteaspnet_Membership(instance As aspnet_Membership)
    End Sub
    Partial Private Sub Insertaspnet_Path(instance As aspnet_Path)
    End Sub
    Partial Private Sub Updateaspnet_Path(instance As aspnet_Path)
    End Sub
    Partial Private Sub Deleteaspnet_Path(instance As aspnet_Path)
    End Sub
    Partial Private Sub Insertaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
    Partial Private Sub Updateaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
    Partial Private Sub Deleteaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
    Partial Private Sub Insertaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
    Partial Private Sub Updateaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
    Partial Private Sub Deleteaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
    Partial Private Sub Insertaspnet_Profile(instance As aspnet_Profile)
    End Sub
    Partial Private Sub Updateaspnet_Profile(instance As aspnet_Profile)
    End Sub
    Partial Private Sub Deleteaspnet_Profile(instance As aspnet_Profile)
    End Sub
    Partial Private Sub Insertaspnet_Role(instance As aspnet_Role)
    End Sub
    Partial Private Sub Updateaspnet_Role(instance As aspnet_Role)
    End Sub
    Partial Private Sub Deleteaspnet_Role(instance As aspnet_Role)
    End Sub
    Partial Private Sub Insertaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
    Partial Private Sub Updateaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
    Partial Private Sub Deleteaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
    Partial Private Sub Insertaspnet_User(instance As aspnet_User)
    End Sub
    Partial Private Sub Updateaspnet_User(instance As aspnet_User)
    End Sub
    Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
    End Sub
    Partial Private Sub Insertaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
    Partial Private Sub Updateaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
    Partial Private Sub Deleteaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
    Partial Private Sub Insertaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
    Partial Private Sub Updateaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
    Partial Private Sub Deleteaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
    Partial Private Sub InsertAuthenticationToken(instance As AuthenticationToken)
    End Sub
    Partial Private Sub UpdateAuthenticationToken(instance As AuthenticationToken)
    End Sub
    Partial Private Sub DeleteAuthenticationToken(instance As AuthenticationToken)
    End Sub
    Partial Private Sub InsertCAN_Data(instance As CAN_Data)
    End Sub
    Partial Private Sub UpdateCAN_Data(instance As CAN_Data)
    End Sub
    Partial Private Sub DeleteCAN_Data(instance As CAN_Data)
    End Sub
    Partial Private Sub InsertCannonData(instance As CannonData)
    End Sub
    Partial Private Sub UpdateCannonData(instance As CannonData)
    End Sub
    Partial Private Sub DeleteCannonData(instance As CannonData)
    End Sub
    Partial Private Sub InsertContact(instance As Contact)
    End Sub
    Partial Private Sub UpdateContact(instance As Contact)
    End Sub
    Partial Private Sub DeleteContact(instance As Contact)
    End Sub
    Partial Private Sub InsertDevelopment(instance As Development)
    End Sub
    Partial Private Sub UpdateDevelopment(instance As Development)
    End Sub
    Partial Private Sub DeleteDevelopment(instance As Development)
    End Sub
    Partial Private Sub InsertDevice(instance As Device)
    End Sub
    Partial Private Sub UpdateDevice(instance As Device)
    End Sub
    Partial Private Sub DeleteDevice(instance As Device)
    End Sub
    Partial Private Sub InsertFeature(instance As Feature)
    End Sub
    Partial Private Sub UpdateFeature(instance As Feature)
    End Sub
    Partial Private Sub DeleteFeature(instance As Feature)
    End Sub
    Partial Private Sub InsertFleetMapMarker(instance As FleetMapMarker)
    End Sub
    Partial Private Sub UpdateFleetMapMarker(instance As FleetMapMarker)
    End Sub
    Partial Private Sub DeleteFleetMapMarker(instance As FleetMapMarker)
    End Sub
    Partial Private Sub InsertGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
    Partial Private Sub UpdateGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
    Partial Private Sub DeleteGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
    Partial Private Sub InsertGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
    Partial Private Sub UpdateGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
    Partial Private Sub DeleteGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
    Partial Private Sub InsertGroup(instance As [Group])
    End Sub
    Partial Private Sub UpdateGroup(instance As [Group])
    End Sub
    Partial Private Sub DeleteGroup(instance As [Group])
    End Sub
    Partial Private Sub InsertGroupSubscriber(instance As GroupSubscriber)
    End Sub
    Partial Private Sub UpdateGroupSubscriber(instance As GroupSubscriber)
    End Sub
    Partial Private Sub DeleteGroupSubscriber(instance As GroupSubscriber)
    End Sub
    Partial Private Sub InsertPaidFeature(instance As PaidFeature)
    End Sub
    Partial Private Sub UpdatePaidFeature(instance As PaidFeature)
    End Sub
    Partial Private Sub DeletePaidFeature(instance As PaidFeature)
    End Sub
    Partial Private Sub InsertSetting(instance As Setting)
    End Sub
    Partial Private Sub UpdateSetting(instance As Setting)
    End Sub
    Partial Private Sub DeleteSetting(instance As Setting)
    End Sub
    Partial Private Sub InsertSimulatorSetting(instance As SimulatorSetting)
    End Sub
    Partial Private Sub UpdateSimulatorSetting(instance As SimulatorSetting)
    End Sub
    Partial Private Sub DeleteSimulatorSetting(instance As SimulatorSetting)
    End Sub
    Partial Private Sub InsertWebServiceLog(instance As WebServiceLog)
    End Sub
    Partial Private Sub UpdateWebServiceLog(instance As WebServiceLog)
    End Sub
    Partial Private Sub DeleteWebServiceLog(instance As WebServiceLog)
    End Sub
    Partial Private Sub InsertReportSchdeule(instance As ReportSchdeule)
    End Sub
    Partial Private Sub UpdateReportSchdeule(instance As ReportSchdeule)
    End Sub
    Partial Private Sub DeleteReportSchdeule(instance As ReportSchdeule)
    End Sub
    Partial Private Sub InsertApplicationBooking(instance As ApplicationBooking)
    End Sub
    Partial Private Sub UpdateApplicationBooking(instance As ApplicationBooking)
    End Sub
    Partial Private Sub DeleteApplicationBooking(instance As ApplicationBooking)
    End Sub
    Partial Private Sub InsertCAN_EventDefinition(instance As CAN_EventDefinition)
    End Sub
    Partial Private Sub UpdateCAN_EventDefinition(instance As CAN_EventDefinition)
    End Sub
    Partial Private Sub DeleteCAN_EventDefinition(instance As CAN_EventDefinition)
    End Sub
    Partial Private Sub InsertCAN_AlertDefinition(instance As CAN_AlertDefinition)
    End Sub
    Partial Private Sub UpdateCAN_AlertDefinition(instance As CAN_AlertDefinition)
    End Sub
    Partial Private Sub DeleteCAN_AlertDefinition(instance As CAN_AlertDefinition)
    End Sub
    Partial Private Sub InsertCAN_EventOccuranceAlert(instance As CAN_EventOccuranceAlert)
    End Sub
    Partial Private Sub UpdateCAN_EventOccuranceAlert(instance As CAN_EventOccuranceAlert)
    End Sub
    Partial Private Sub DeleteCAN_EventOccuranceAlert(instance As CAN_EventOccuranceAlert)
    End Sub
    Partial Private Sub InsertCanBusLog(instance As CanBusLog)
    End Sub
    Partial Private Sub UpdateCanBusLog(instance As CanBusLog)
    End Sub
    Partial Private Sub DeleteCanBusLog(instance As CanBusLog)
    End Sub
    Partial Private Sub InsertCAN_EventOccurance(instance As CAN_EventOccurance)
    End Sub
    Partial Private Sub UpdateCAN_EventOccurance(instance As CAN_EventOccurance)
    End Sub
    Partial Private Sub DeleteCAN_EventOccurance(instance As CAN_EventOccurance)
    End Sub
    Partial Private Sub InsertCanBusEventOccuranceLog(instance As CanBusEventOccuranceLog)
    End Sub
    Partial Private Sub UpdateCanBusEventOccuranceLog(instance As CanBusEventOccuranceLog)
    End Sub
    Partial Private Sub DeleteCanBusEventOccuranceLog(instance As CanBusEventOccuranceLog)
    End Sub
    Partial Private Sub InserttblContractPeriod(instance As tblContractPeriod)
    End Sub
    Partial Private Sub UpdatetblContractPeriod(instance As tblContractPeriod)
    End Sub
    Partial Private Sub DeletetblContractPeriod(instance As tblContractPeriod)
    End Sub
    Partial Private Sub InserttblState(instance As tblState)
    End Sub
    Partial Private Sub UpdatetblState(instance As tblState)
    End Sub
    Partial Private Sub DeletetblState(instance As tblState)
    End Sub
    Partial Private Sub InserttblMonth(instance As tblMonth)
    End Sub
    Partial Private Sub UpdatetblMonth(instance As tblMonth)
    End Sub
    Partial Private Sub DeletetblMonth(instance As tblMonth)
    End Sub
    Partial Private Sub InserttblSiteComment(instance As tblSiteComment)
    End Sub
    Partial Private Sub UpdatetblSiteComment(instance As tblSiteComment)
    End Sub
    Partial Private Sub DeletetblSiteComment(instance As tblSiteComment)
    End Sub
    Partial Private Sub InsertFleetClient(instance As FleetClient)
    End Sub
    Partial Private Sub UpdateFleetClient(instance As FleetClient)
    End Sub
    Partial Private Sub DeleteFleetClient(instance As FleetClient)
    End Sub
    Partial Private Sub InsertFleetDocument(instance As FleetDocument)
    End Sub
    Partial Private Sub UpdateFleetDocument(instance As FleetDocument)
    End Sub
    Partial Private Sub DeleteFleetDocument(instance As FleetDocument)
    End Sub
    Partial Private Sub InsertFleetRun(instance As FleetRun)
    End Sub
    Partial Private Sub UpdateFleetRun(instance As FleetRun)
    End Sub
    Partial Private Sub DeleteFleetRun(instance As FleetRun)
    End Sub
    Partial Private Sub InsertFleetRunClient(instance As FleetRunClient)
    End Sub
    Partial Private Sub UpdateFleetRunClient(instance As FleetRunClient)
    End Sub
    Partial Private Sub DeleteFleetRunClient(instance As FleetRunClient)
    End Sub
    Partial Private Sub InsertFleetRunCompletion(instance As FleetRunCompletion)
    End Sub
    Partial Private Sub UpdateFleetRunCompletion(instance As FleetRunCompletion)
    End Sub
    Partial Private Sub DeleteFleetRunCompletion(instance As FleetRunCompletion)
    End Sub
    Partial Private Sub InsertVehicleLocation(instance As VehicleLocation)
    End Sub
    Partial Private Sub UpdateVehicleLocation(instance As VehicleLocation)
    End Sub
    Partial Private Sub DeleteVehicleLocation(instance As VehicleLocation)
    End Sub
    Partial Private Sub InserttblzGenerateRunSheet(instance As tblzGenerateRunSheet)
    End Sub
    Partial Private Sub UpdatetblzGenerateRunSheet(instance As tblzGenerateRunSheet)
    End Sub
    Partial Private Sub DeletetblzGenerateRunSheet(instance As tblzGenerateRunSheet)
    End Sub
    Partial Private Sub InserttblMYOBMatch(instance As tblMYOBMatch)
    End Sub
    Partial Private Sub UpdatetblMYOBMatch(instance As tblMYOBMatch)
    End Sub
    Partial Private Sub DeletetblMYOBMatch(instance As tblMYOBMatch)
    End Sub
    Partial Private Sub InserttbZone(instance As tbZone)
    End Sub
    Partial Private Sub UpdatetbZone(instance As tbZone)
    End Sub
    Partial Private Sub DeletetbZone(instance As tbZone)
    End Sub
    Partial Private Sub InserttblCustomerAgent(instance As tblCustomerAgent)
    End Sub
    Partial Private Sub UpdatetblCustomerAgent(instance As tblCustomerAgent)
    End Sub
    Partial Private Sub DeletetblCustomerAgent(instance As tblCustomerAgent)
    End Sub
    Partial Private Sub InserttblRateIncreaseReference(instance As tblRateIncreaseReference)
    End Sub
    Partial Private Sub UpdatetblRateIncreaseReference(instance As tblRateIncreaseReference)
    End Sub
    Partial Private Sub DeletetblRateIncreaseReference(instance As tblRateIncreaseReference)
    End Sub
    Partial Private Sub InserttblService(instance As tblService)
    End Sub
    Partial Private Sub UpdatetblService(instance As tblService)
    End Sub
    Partial Private Sub DeletetblService(instance As tblService)
    End Sub
    Partial Private Sub InserttblIndustryGroup(instance As tblIndustryGroup)
    End Sub
    Partial Private Sub UpdatetblIndustryGroup(instance As tblIndustryGroup)
    End Sub
    Partial Private Sub DeletetblIndustryGroup(instance As tblIndustryGroup)
    End Sub
    Partial Private Sub InserttblPublicHolidayRegister(instance As tblPublicHolidayRegister)
    End Sub
    Partial Private Sub UpdatetblPublicHolidayRegister(instance As tblPublicHolidayRegister)
    End Sub
    Partial Private Sub DeletetblPublicHolidayRegister(instance As tblPublicHolidayRegister)
    End Sub
    Partial Private Sub InserttblUserGroup(instance As tblUserGroup)
    End Sub
    Partial Private Sub UpdatetblUserGroup(instance As tblUserGroup)
    End Sub
    Partial Private Sub DeletetblUserGroup(instance As tblUserGroup)
    End Sub
    Partial Private Sub InserttblParameter(instance As tblParameter)
    End Sub
    Partial Private Sub UpdatetblParameter(instance As tblParameter)
    End Sub
    Partial Private Sub DeletetblParameter(instance As tblParameter)
    End Sub
    Partial Private Sub InserttblUserSecurity(instance As tblUserSecurity)
    End Sub
    Partial Private Sub UpdatetblUserSecurity(instance As tblUserSecurity)
    End Sub
    Partial Private Sub DeletetblUserSecurity(instance As tblUserSecurity)
    End Sub
    Partial Private Sub InserttblDriver(instance As tblDriver)
    End Sub
    Partial Private Sub UpdatetblDriver(instance As tblDriver)
    End Sub
    Partial Private Sub DeletetblDriver(instance As tblDriver)
    End Sub
    Partial Private Sub InserttblDriverCommentsReason(instance As tblDriverCommentsReason)
    End Sub
    Partial Private Sub UpdatetblDriverCommentsReason(instance As tblDriverCommentsReason)
    End Sub
    Partial Private Sub DeletetblDriverCommentsReason(instance As tblDriverCommentsReason)
    End Sub
    Partial Private Sub InserttblDriverComment(instance As tblDriverComment)
    End Sub
    Partial Private Sub UpdatetblDriverComment(instance As tblDriverComment)
    End Sub
    Partial Private Sub DeletetblDriverComment(instance As tblDriverComment)
    End Sub
    Partial Private Sub InserttblMYOBInvoicing(instance As tblMYOBInvoicing)
    End Sub
    Partial Private Sub UpdatetblMYOBInvoicing(instance As tblMYOBInvoicing)
    End Sub
    Partial Private Sub DeletetblMYOBInvoicing(instance As tblMYOBInvoicing)
    End Sub
    Partial Private Sub InserttblCustomer(instance As tblCustomer)
    End Sub
    Partial Private Sub UpdatetblCustomer(instance As tblCustomer)
    End Sub
    Partial Private Sub DeletetblCustomer(instance As tblCustomer)
    End Sub
    Partial Private Sub InserttblFuelLevy(instance As tblFuelLevy)
    End Sub
    Partial Private Sub UpdatetblFuelLevy(instance As tblFuelLevy)
    End Sub
    Partial Private Sub DeletetblFuelLevy(instance As tblFuelLevy)
    End Sub
    Partial Private Sub InserttblInvoicingFrequency(instance As tblInvoicingFrequency)
    End Sub
    Partial Private Sub UpdatetblInvoicingFrequency(instance As tblInvoicingFrequency)
    End Sub
    Partial Private Sub DeletetblInvoicingFrequency(instance As tblInvoicingFrequency)
    End Sub
    Partial Private Sub InserttblSite(instance As tblSite)
    End Sub
    Partial Private Sub UpdatetblSite(instance As tblSite)
    End Sub
    Partial Private Sub DeletetblSite(instance As tblSite)
    End Sub
    Partial Private Sub InserttblCustomerRating(instance As tblCustomerRating)
    End Sub
    Partial Private Sub UpdatetblCustomerRating(instance As tblCustomerRating)
    End Sub
    Partial Private Sub DeletetblCustomerRating(instance As tblCustomerRating)
    End Sub
    Partial Private Sub InserttblSalesPerson(instance As tblSalesPerson)
    End Sub
    Partial Private Sub UpdatetblSalesPerson(instance As tblSalesPerson)
    End Sub
    Partial Private Sub DeletetblSalesPerson(instance As tblSalesPerson)
    End Sub
    Partial Private Sub InserttblContractCeaseReason(instance As tblContractCeaseReason)
    End Sub
    Partial Private Sub UpdatetblContractCeaseReason(instance As tblContractCeaseReason)
    End Sub
    Partial Private Sub DeletetblContractCeaseReason(instance As tblContractCeaseReason)
    End Sub
    Partial Private Sub InserttblRun(instance As tblRun)
    End Sub
    Partial Private Sub UpdatetblRun(instance As tblRun)
    End Sub
    Partial Private Sub DeletetblRun(instance As tblRun)
    End Sub
    Partial Private Sub InserttblPreviousSupplier(instance As tblPreviousSupplier)
    End Sub
    Partial Private Sub UpdatetblPreviousSupplier(instance As tblPreviousSupplier)
    End Sub
    Partial Private Sub DeletetblPreviousSupplier(instance As tblPreviousSupplier)
    End Sub
    Partial Private Sub InserttblCIRReason(instance As tblCIRReason)
    End Sub
    Partial Private Sub UpdatetblCIRReason(instance As tblCIRReason)
    End Sub
    Partial Private Sub DeletetblCIRReason(instance As tblCIRReason)
    End Sub
    Partial Private Sub InserttblRunFortnightlyCycle(instance As tblRunFortnightlyCycle)
    End Sub
    Partial Private Sub UpdatetblRunFortnightlyCycle(instance As tblRunFortnightlyCycle)
    End Sub
    Partial Private Sub DeletetblRunFortnightlyCycle(instance As tblRunFortnightlyCycle)
    End Sub
    Partial Private Sub InserttblRevenueChangeReason(instance As tblRevenueChangeReason)
    End Sub
    Partial Private Sub UpdatetblRevenueChangeReason(instance As tblRevenueChangeReason)
    End Sub
    Partial Private Sub DeletetblRevenueChangeReason(instance As tblRevenueChangeReason)
    End Sub
    Partial Private Sub InserttblServiceFrequency(instance As tblServiceFrequency)
    End Sub
    Partial Private Sub UpdatetblServiceFrequency(instance As tblServiceFrequency)
    End Sub
    Partial Private Sub DeletetblServiceFrequency(instance As tblServiceFrequency)
    End Sub
    Partial Private Sub InserttblSiteReSignDetail(instance As tblSiteReSignDetail)
    End Sub
    Partial Private Sub UpdatetblSiteReSignDetail(instance As tblSiteReSignDetail)
    End Sub
    Partial Private Sub DeletetblSiteReSignDetail(instance As tblSiteReSignDetail)
    End Sub
    Partial Private Sub InserttblCIRHistory(instance As tblCIRHistory)
    End Sub
    Partial Private Sub UpdatetblCIRHistory(instance As tblCIRHistory)
    End Sub
    Partial Private Sub DeletetblCIRHistory(instance As tblCIRHistory)
    End Sub
    Partial Private Sub InserttblProjectID(instance As tblProjectID)
    End Sub
    Partial Private Sub UpdatetblProjectID(instance As tblProjectID)
    End Sub
    Partial Private Sub DeletetblProjectID(instance As tblProjectID)
    End Sub
    Partial Private Sub InserttblCustomerService(instance As tblCustomerService)
    End Sub
    Partial Private Sub UpdatetblCustomerService(instance As tblCustomerService)
    End Sub
    Partial Private Sub DeletetblCustomerService(instance As tblCustomerService)
    End Sub
#End Region

    Public Sub New()
        MyBase.New(Global.FMS.Business.My.MySettings.Default.FMSDevConnectionString, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public ReadOnly Property AlertSubscriber_deletemes() As System.Data.Linq.Table(Of AlertSubscriber_deleteme)
        Get
            Return Me.GetTable(Of AlertSubscriber_deleteme)
        End Get
    End Property

    Public ReadOnly Property WorkRequests() As System.Data.Linq.Table(Of WorkRequest)
        Get
            Return Me.GetTable(Of WorkRequest)
        End Get
    End Property

    Public ReadOnly Property AlertTypes() As System.Data.Linq.Table(Of AlertType)
        Get
            Return Me.GetTable(Of AlertType)
        End Get
    End Property

    Public ReadOnly Property AlertTypeOccurances() As System.Data.Linq.Table(Of AlertTypeOccurance)
        Get
            Return Me.GetTable(Of AlertTypeOccurance)
        End Get
    End Property

    Public ReadOnly Property AlertTypeSubscriber_deletemes() As System.Data.Linq.Table(Of AlertTypeSubscriber_deleteme)
        Get
            Return Me.GetTable(Of AlertTypeSubscriber_deleteme)
        End Get
    End Property

    Public ReadOnly Property ApplicationBooking_20170222s() As System.Data.Linq.Table(Of ApplicationBooking_20170222)
        Get
            Return Me.GetTable(Of ApplicationBooking_20170222)
        End Get
    End Property

    Public ReadOnly Property ApplicationDrivers() As System.Data.Linq.Table(Of ApplicationDriver)
        Get
            Return Me.GetTable(Of ApplicationDriver)
        End Get
    End Property

    Public ReadOnly Property ApplicationFeatures() As System.Data.Linq.Table(Of ApplicationFeature)
        Get
            Return Me.GetTable(Of ApplicationFeature)
        End Get
    End Property

    Public ReadOnly Property ApplicationFeatureRoles() As System.Data.Linq.Table(Of ApplicationFeatureRole)
        Get
            Return Me.GetTable(Of ApplicationFeatureRole)
        End Get
    End Property

    Public ReadOnly Property ApplicationGeoFences() As System.Data.Linq.Table(Of ApplicationGeoFence)
        Get
            Return Me.GetTable(Of ApplicationGeoFence)
        End Get
    End Property

    Public ReadOnly Property ApplicationGeoFence_20160615s() As System.Data.Linq.Table(Of ApplicationGeoFence_20160615)
        Get
            Return Me.GetTable(Of ApplicationGeoFence_20160615)
        End Get
    End Property

    Public ReadOnly Property ApplicationGeoFence_20160842s() As System.Data.Linq.Table(Of ApplicationGeoFence_20160842)
        Get
            Return Me.GetTable(Of ApplicationGeoFence_20160842)
        End Get
    End Property

    Public ReadOnly Property ApplicationGeofenceProperties() As System.Data.Linq.Table(Of ApplicationGeofenceProperty)
        Get
            Return Me.GetTable(Of ApplicationGeofenceProperty)
        End Get
    End Property

    Public ReadOnly Property ApplicationGeoFenceSides() As System.Data.Linq.Table(Of ApplicationGeoFenceSide)
        Get
            Return Me.GetTable(Of ApplicationGeoFenceSide)
        End Get
    End Property

    Public ReadOnly Property ApplicationGeoFenceSide_20160615s() As System.Data.Linq.Table(Of ApplicationGeoFenceSide_20160615)
        Get
            Return Me.GetTable(Of ApplicationGeoFenceSide_20160615)
        End Get
    End Property

    Public ReadOnly Property ApplicationImages() As System.Data.Linq.Table(Of ApplicationImage)
        Get
            Return Me.GetTable(Of ApplicationImage)
        End Get
    End Property

    Public ReadOnly Property ApplicationLocations() As System.Data.Linq.Table(Of ApplicationLocation)
        Get
            Return Me.GetTable(Of ApplicationLocation)
        End Get
    End Property

    Public ReadOnly Property ApplicationSettingValues() As System.Data.Linq.Table(Of ApplicationSettingValue)
        Get
            Return Me.GetTable(Of ApplicationSettingValue)
        End Get
    End Property

    Public ReadOnly Property ApplicationTimeZones() As System.Data.Linq.Table(Of ApplicationTimeZone)
        Get
            Return Me.GetTable(Of ApplicationTimeZone)
        End Get
    End Property

    Public ReadOnly Property ApplicationVehicles() As System.Data.Linq.Table(Of ApplicationVehicle)
        Get
            Return Me.GetTable(Of ApplicationVehicle)
        End Get
    End Property

    Public ReadOnly Property ApplicationVehicleDriverTimes() As System.Data.Linq.Table(Of ApplicationVehicleDriverTime)
        Get
            Return Me.GetTable(Of ApplicationVehicleDriverTime)
        End Get
    End Property

    Public ReadOnly Property ApplicationVehicleOdometerReadings() As System.Data.Linq.Table(Of ApplicationVehicleOdometerReading)
        Get
            Return Me.GetTable(Of ApplicationVehicleOdometerReading)
        End Get
    End Property

    Public ReadOnly Property aspnet_Applications() As System.Data.Linq.Table(Of aspnet_Application)
        Get
            Return Me.GetTable(Of aspnet_Application)
        End Get
    End Property

    Public ReadOnly Property aspnet_Memberships() As System.Data.Linq.Table(Of aspnet_Membership)
        Get
            Return Me.GetTable(Of aspnet_Membership)
        End Get
    End Property

    Public ReadOnly Property aspnet_Paths() As System.Data.Linq.Table(Of aspnet_Path)
        Get
            Return Me.GetTable(Of aspnet_Path)
        End Get
    End Property

    Public ReadOnly Property aspnet_PersonalizationAllUsers() As System.Data.Linq.Table(Of aspnet_PersonalizationAllUser)
        Get
            Return Me.GetTable(Of aspnet_PersonalizationAllUser)
        End Get
    End Property

    Public ReadOnly Property aspnet_PersonalizationPerUsers() As System.Data.Linq.Table(Of aspnet_PersonalizationPerUser)
        Get
            Return Me.GetTable(Of aspnet_PersonalizationPerUser)
        End Get
    End Property

    Public ReadOnly Property aspnet_Profiles() As System.Data.Linq.Table(Of aspnet_Profile)
        Get
            Return Me.GetTable(Of aspnet_Profile)
        End Get
    End Property

    Public ReadOnly Property aspnet_Roles() As System.Data.Linq.Table(Of aspnet_Role)
        Get
            Return Me.GetTable(Of aspnet_Role)
        End Get
    End Property

    Public ReadOnly Property aspnet_SchemaVersions() As System.Data.Linq.Table(Of aspnet_SchemaVersion)
        Get
            Return Me.GetTable(Of aspnet_SchemaVersion)
        End Get
    End Property

    Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
        Get
            Return Me.GetTable(Of aspnet_User)
        End Get
    End Property

    Public ReadOnly Property aspnet_UsersInRoles() As System.Data.Linq.Table(Of aspnet_UsersInRole)
        Get
            Return Me.GetTable(Of aspnet_UsersInRole)
        End Get
    End Property

    Public ReadOnly Property aspnet_WebEvent_Events() As System.Data.Linq.Table(Of aspnet_WebEvent_Event)
        Get
            Return Me.GetTable(Of aspnet_WebEvent_Event)
        End Get
    End Property

    Public ReadOnly Property AuthenticationTokens() As System.Data.Linq.Table(Of AuthenticationToken)
        Get
            Return Me.GetTable(Of AuthenticationToken)
        End Get
    End Property

    Public ReadOnly Property CAN_Datas() As System.Data.Linq.Table(Of CAN_Data)
        Get
            Return Me.GetTable(Of CAN_Data)
        End Get
    End Property

    Public ReadOnly Property CAN_MessageDefinitions() As System.Data.Linq.Table(Of CAN_MessageDefinition)
        Get
            Return Me.GetTable(Of CAN_MessageDefinition)
        End Get
    End Property

    Public ReadOnly Property CannonDatas() As System.Data.Linq.Table(Of CannonData)
        Get
            Return Me.GetTable(Of CannonData)
        End Get
    End Property

    Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
        Get
            Return Me.GetTable(Of Contact)
        End Get
    End Property

    Public ReadOnly Property Developments() As System.Data.Linq.Table(Of Development)
        Get
            Return Me.GetTable(Of Development)
        End Get
    End Property

    Public ReadOnly Property Devices() As System.Data.Linq.Table(Of Device)
        Get
            Return Me.GetTable(Of Device)
        End Get
    End Property

    Public ReadOnly Property Features() As System.Data.Linq.Table(Of Feature)
        Get
            Return Me.GetTable(Of Feature)
        End Get
    End Property

    Public ReadOnly Property FleetMapMarkers() As System.Data.Linq.Table(Of FleetMapMarker)
        Get
            Return Me.GetTable(Of FleetMapMarker)
        End Get
    End Property

    Public ReadOnly Property GeoFenceDeviceCollisionAlerts() As System.Data.Linq.Table(Of GeoFenceDeviceCollisionAlert)
        Get
            Return Me.GetTable(Of GeoFenceDeviceCollisionAlert)
        End Get
    End Property

    Public ReadOnly Property GeoFenceDeviceCollissions() As System.Data.Linq.Table(Of GeoFenceDeviceCollission)
        Get
            Return Me.GetTable(Of GeoFenceDeviceCollission)
        End Get
    End Property

    Public ReadOnly Property GeoFenceDeviceCollission_20160604s() As System.Data.Linq.Table(Of GeoFenceDeviceCollission_20160604)
        Get
            Return Me.GetTable(Of GeoFenceDeviceCollission_20160604)
        End Get
    End Property

    Public ReadOnly Property Groups() As System.Data.Linq.Table(Of [Group])
        Get
            Return Me.GetTable(Of [Group])
        End Get
    End Property

    Public ReadOnly Property GroupMember_olds() As System.Data.Linq.Table(Of GroupMember_old)
        Get
            Return Me.GetTable(Of GroupMember_old)
        End Get
    End Property

    Public ReadOnly Property GroupSubscribers() As System.Data.Linq.Table(Of GroupSubscriber)
        Get
            Return Me.GetTable(Of GroupSubscriber)
        End Get
    End Property

    Public ReadOnly Property j1939s() As System.Data.Linq.Table(Of j1939)
        Get
            Return Me.GetTable(Of j1939)
        End Get
    End Property

    Public ReadOnly Property PaidFeatures() As System.Data.Linq.Table(Of PaidFeature)
        Get
            Return Me.GetTable(Of PaidFeature)
        End Get
    End Property

    Public ReadOnly Property Settings() As System.Data.Linq.Table(Of Setting)
        Get
            Return Me.GetTable(Of Setting)
        End Get
    End Property

    Public ReadOnly Property SimulatorSettings() As System.Data.Linq.Table(Of SimulatorSetting)
        Get
            Return Me.GetTable(Of SimulatorSetting)
        End Get
    End Property

    Public ReadOnly Property WebServiceLogs() As System.Data.Linq.Table(Of WebServiceLog)
        Get
            Return Me.GetTable(Of WebServiceLog)
        End Get
    End Property

    Public ReadOnly Property ReportSchdeules() As System.Data.Linq.Table(Of ReportSchdeule)
        Get
            Return Me.GetTable(Of ReportSchdeule)
        End Get
    End Property

    Public ReadOnly Property ApplicationBookings() As System.Data.Linq.Table(Of ApplicationBooking)
        Get
            Return Me.GetTable(Of ApplicationBooking)
        End Get
    End Property

    Public ReadOnly Property CAN_EventDefinitions() As System.Data.Linq.Table(Of CAN_EventDefinition)
        Get
            Return Me.GetTable(Of CAN_EventDefinition)
        End Get
    End Property

    Public ReadOnly Property CAN_AlertDefinitions() As System.Data.Linq.Table(Of CAN_AlertDefinition)
        Get
            Return Me.GetTable(Of CAN_AlertDefinition)
        End Get
    End Property

    Public ReadOnly Property CAN_EventOccuranceAlerts() As System.Data.Linq.Table(Of CAN_EventOccuranceAlert)
        Get
            Return Me.GetTable(Of CAN_EventOccuranceAlert)
        End Get
    End Property

    Public ReadOnly Property CanBusLogs() As System.Data.Linq.Table(Of CanBusLog)
        Get
            Return Me.GetTable(Of CanBusLog)
        End Get
    End Property

    Public ReadOnly Property CAN_EventOccurances() As System.Data.Linq.Table(Of CAN_EventOccurance)
        Get
            Return Me.GetTable(Of CAN_EventOccurance)
        End Get
    End Property

    Public ReadOnly Property CanBusEventOccuranceLogs() As System.Data.Linq.Table(Of CanBusEventOccuranceLog)
        Get
            Return Me.GetTable(Of CanBusEventOccuranceLog)
        End Get
    End Property

    Public ReadOnly Property tblContractPeriods() As System.Data.Linq.Table(Of tblContractPeriod)
        Get
            Return Me.GetTable(Of tblContractPeriod)
        End Get
    End Property

    Public ReadOnly Property tblStates() As System.Data.Linq.Table(Of tblState)
        Get
            Return Me.GetTable(Of tblState)
        End Get
    End Property

    Public ReadOnly Property tblMonths() As System.Data.Linq.Table(Of tblMonth)
        Get
            Return Me.GetTable(Of tblMonth)
        End Get
    End Property

    Public ReadOnly Property tblSiteComments() As System.Data.Linq.Table(Of tblSiteComment)
        Get
            Return Me.GetTable(Of tblSiteComment)
        End Get
    End Property

    Public ReadOnly Property FleetClients() As System.Data.Linq.Table(Of FleetClient)
        Get
            Return Me.GetTable(Of FleetClient)
        End Get
    End Property

    Public ReadOnly Property FleetDocuments() As System.Data.Linq.Table(Of FleetDocument)
        Get
            Return Me.GetTable(Of FleetDocument)
        End Get
    End Property

    Public ReadOnly Property FleetRuns() As System.Data.Linq.Table(Of FleetRun)
        Get
            Return Me.GetTable(Of FleetRun)
        End Get
    End Property

    Public ReadOnly Property FleetRunClients() As System.Data.Linq.Table(Of FleetRunClient)
        Get
            Return Me.GetTable(Of FleetRunClient)
        End Get
    End Property

    Public ReadOnly Property FleetRunCompletions() As System.Data.Linq.Table(Of FleetRunCompletion)
        Get
            Return Me.GetTable(Of FleetRunCompletion)
        End Get
    End Property

    Public ReadOnly Property VehicleLocations() As System.Data.Linq.Table(Of VehicleLocation)
        Get
            Return Me.GetTable(Of VehicleLocation)
        End Get
    End Property

    Public ReadOnly Property vw_GetVehicleLocations() As System.Data.Linq.Table(Of vw_GetVehicleLocation)
        Get
            Return Me.GetTable(Of vw_GetVehicleLocation)
        End Get
    End Property

    Public ReadOnly Property tblzGenerateRunSheets() As System.Data.Linq.Table(Of tblzGenerateRunSheet)
        Get
            Return Me.GetTable(Of tblzGenerateRunSheet)
        End Get
    End Property

    Public ReadOnly Property CUSTs() As System.Data.Linq.Table(Of CUST)
        Get
            Return Me.GetTable(Of CUST)
        End Get
    End Property

    Public ReadOnly Property tblMYOBMatches() As System.Data.Linq.Table(Of tblMYOBMatch)
        Get
            Return Me.GetTable(Of tblMYOBMatch)
        End Get
    End Property

    Public ReadOnly Property tbZones() As System.Data.Linq.Table(Of tbZone)
        Get
            Return Me.GetTable(Of tbZone)
        End Get
    End Property

    Public ReadOnly Property tblCustomerAgents() As System.Data.Linq.Table(Of tblCustomerAgent)
        Get
            Return Me.GetTable(Of tblCustomerAgent)
        End Get
    End Property

    Public ReadOnly Property tblRateIncreaseReferences() As System.Data.Linq.Table(Of tblRateIncreaseReference)
        Get
            Return Me.GetTable(Of tblRateIncreaseReference)
        End Get
    End Property

    Public ReadOnly Property tblServices() As System.Data.Linq.Table(Of tblService)
        Get
            Return Me.GetTable(Of tblService)
        End Get
    End Property

    Public ReadOnly Property tblIndustryGroups() As System.Data.Linq.Table(Of tblIndustryGroup)
        Get
            Return Me.GetTable(Of tblIndustryGroup)
        End Get
    End Property

    Public ReadOnly Property tblPublicHolidayRegisters() As System.Data.Linq.Table(Of tblPublicHolidayRegister)
        Get
            Return Me.GetTable(Of tblPublicHolidayRegister)
        End Get
    End Property

    Public ReadOnly Property tblUserGroups() As System.Data.Linq.Table(Of tblUserGroup)
        Get
            Return Me.GetTable(Of tblUserGroup)
        End Get
    End Property

    Public ReadOnly Property tblParameters() As System.Data.Linq.Table(Of tblParameter)
        Get
            Return Me.GetTable(Of tblParameter)
        End Get
    End Property

    Public ReadOnly Property tblUserSecurities() As System.Data.Linq.Table(Of tblUserSecurity)
        Get
            Return Me.GetTable(Of tblUserSecurity)
        End Get
    End Property

    Public ReadOnly Property tblDrivers() As System.Data.Linq.Table(Of tblDriver)
        Get
            Return Me.GetTable(Of tblDriver)
        End Get
    End Property

    Public ReadOnly Property tblDriverCommentsReasons() As System.Data.Linq.Table(Of tblDriverCommentsReason)
        Get
            Return Me.GetTable(Of tblDriverCommentsReason)
        End Get
    End Property

    Public ReadOnly Property tblDriverComments() As System.Data.Linq.Table(Of tblDriverComment)
        Get
            Return Me.GetTable(Of tblDriverComment)
        End Get
    End Property

    Public ReadOnly Property tblMYOBInvoicings() As System.Data.Linq.Table(Of tblMYOBInvoicing)
        Get
            Return Me.GetTable(Of tblMYOBInvoicing)
        End Get
    End Property

    Public ReadOnly Property tblCustomers() As System.Data.Linq.Table(Of tblCustomer)
        Get
            Return Me.GetTable(Of tblCustomer)
        End Get
    End Property

    Public ReadOnly Property tblFuelLevies() As System.Data.Linq.Table(Of tblFuelLevy)
        Get
            Return Me.GetTable(Of tblFuelLevy)
        End Get
    End Property

    Public ReadOnly Property tblInvoicingFrequencies() As System.Data.Linq.Table(Of tblInvoicingFrequency)
        Get
            Return Me.GetTable(Of tblInvoicingFrequency)
        End Get
    End Property

    Public ReadOnly Property tblSites() As System.Data.Linq.Table(Of tblSite)
        Get
            Return Me.GetTable(Of tblSite)
        End Get
    End Property

    Public ReadOnly Property tblCustomerRatings() As System.Data.Linq.Table(Of tblCustomerRating)
        Get
            Return Me.GetTable(Of tblCustomerRating)
        End Get
    End Property

    Public ReadOnly Property tblSalesPersons() As System.Data.Linq.Table(Of tblSalesPerson)
        Get
            Return Me.GetTable(Of tblSalesPerson)
        End Get
    End Property

    Public ReadOnly Property tblContractCeaseReasons() As System.Data.Linq.Table(Of tblContractCeaseReason)
        Get
            Return Me.GetTable(Of tblContractCeaseReason)
        End Get
    End Property

    Public ReadOnly Property tblRuns() As System.Data.Linq.Table(Of tblRun)
        Get
            Return Me.GetTable(Of tblRun)
        End Get
    End Property

    Public ReadOnly Property tblPreviousSuppliers() As System.Data.Linq.Table(Of tblPreviousSupplier)
        Get
            Return Me.GetTable(Of tblPreviousSupplier)
        End Get
    End Property

    Public ReadOnly Property tblCIRReasons() As System.Data.Linq.Table(Of tblCIRReason)
        Get
            Return Me.GetTable(Of tblCIRReason)
        End Get
    End Property

    Public ReadOnly Property tblRunFortnightlyCycles() As System.Data.Linq.Table(Of tblRunFortnightlyCycle)
        Get
            Return Me.GetTable(Of tblRunFortnightlyCycle)
        End Get
    End Property

    Public ReadOnly Property tblRevenueChangeReasons() As System.Data.Linq.Table(Of tblRevenueChangeReason)
        Get
            Return Me.GetTable(Of tblRevenueChangeReason)
        End Get
    End Property

    Public ReadOnly Property tblServiceFrequencies() As System.Data.Linq.Table(Of tblServiceFrequency)
        Get
            Return Me.GetTable(Of tblServiceFrequency)
        End Get
    End Property

    Public ReadOnly Property tblSiteReSignDetails() As System.Data.Linq.Table(Of tblSiteReSignDetail)
        Get
            Return Me.GetTable(Of tblSiteReSignDetail)
        End Get
    End Property

    Public ReadOnly Property tblCIRHistories() As System.Data.Linq.Table(Of tblCIRHistory)
        Get
            Return Me.GetTable(Of tblCIRHistory)
        End Get
    End Property

    Public ReadOnly Property tblProjectIDs() As System.Data.Linq.Table(Of tblProjectID)
        Get
            Return Me.GetTable(Of tblProjectID)
        End Get
    End Property

    Public ReadOnly Property tblCustomerServices() As System.Data.Linq.Table(Of tblCustomerService)
        Get
            Return Me.GetTable(Of tblCustomerService)
        End Get
    End Property

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Membership_CreateUser")>
    Public Function aspnet_Membership_CreateUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(256)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Password", DbType:="NVarChar(128)")> ByVal password As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordSalt", DbType:="NVarChar(128)")> ByVal passwordSalt As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NVarChar(256)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordQuestion", DbType:="NVarChar(256)")> ByVal passwordQuestion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordAnswer", DbType:="NVarChar(128)")> ByVal passwordAnswer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsApproved", DbType:="Bit")> ByVal isApproved As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentTimeUtc", DbType:="DateTime")> ByVal currentTimeUtc As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CreateDate", DbType:="DateTime")> ByVal createDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueEmail", DbType:="Int")> ByVal uniqueEmail As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordFormat", DbType:="Int")> ByVal passwordFormat As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserId", DbType:="UniqueIdentifier")> ByRef userId As System.Nullable(Of System.Guid)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName, userName, password, passwordSalt, email, passwordQuestion, passwordAnswer, isApproved, currentTimeUtc, createDate, uniqueEmail, passwordFormat, userId)
        userId = CType(result.GetParameterValue(12), System.Nullable(Of System.Guid))
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_GetAllRoles")>
    Public Function aspnet_Roles_GetAllRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String) As ISingleResult(Of aspnet_Roles_GetAllRolesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName)
        Return CType(result.ReturnValue, ISingleResult(Of aspnet_Roles_GetAllRolesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_UsersInRoles_AddUsersToRoles")>
    Public Function aspnet_UsersInRoles_AddUsersToRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserNames", DbType:="NVarChar(4000)")> ByVal userNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleNames", DbType:="NVarChar(4000)")> ByVal roleNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentTimeUtc", DbType:="DateTime")> ByVal currentTimeUtc As System.Nullable(Of Date)) As ISingleResult(Of aspnet_UsersInRoles_AddUsersToRolesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName, userNames, roleNames, currentTimeUtc)
        Return CType(result.ReturnValue, ISingleResult(Of aspnet_UsersInRoles_AddUsersToRolesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_UsersInRoles_RemoveUsersFromRoles")>
    Public Function aspnet_UsersInRoles_RemoveUsersFromRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserNames", DbType:="NVarChar(4000)")> ByVal userNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleNames", DbType:="NVarChar(4000)")> ByVal roleNames As String) As ISingleResult(Of aspnet_UsersInRoles_RemoveUsersFromRolesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName, userNames, roleNames)
        Return CType(result.ReturnValue, ISingleResult(Of aspnet_UsersInRoles_RemoveUsersFromRolesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_RemoveAllrolesForUserAndAssignRole")>
    Public Function usp_RemoveAllrolesForUserAndAssignRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="UniqueIdentifier")> ByVal userID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleID", DbType:="UniqueIdentifier")> ByVal roleID As System.Nullable(Of System.Guid)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), userID, roleID)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_deleteGeoFenceCollisions")>
    Public Function usp_deleteGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal deviceid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), deviceid, startDate, endDate)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetVehiclesAndDriversFortimePeriod")>
    Public Function usp_GetVehiclesAndDriversFortimePeriod(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateStart", DbType:="DateTime")> ByVal dateStart As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateEnd", DbType:="DateTime")> ByVal dateEnd As System.Nullable(Of Date)) As ISingleResult(Of usp_GetVehiclesAndDriversFortimePeriodResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID, dateStart, dateEnd)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetVehiclesAndDriversFortimePeriodResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSettingsForApplication")>
    Public Function usp_GetSettingsForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="VarChar(MAX)")> ByVal applicationName As String) As ISingleResult(Of usp_GetSettingsForApplicationResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSettingsForApplicationResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSubscribersForApplication")>
    Public Function usp_GetSubscribersForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSubscribersForApplicationResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSubscribersForApplicationResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_CreateRole")>
    Public Function aspnet_Roles_CreateRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleName", DbType:="NVarChar(256)")> ByVal roleName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(256)")> ByVal description As String) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName, roleName, description)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGeoFenceCollisions")>
    Public Function usp_GetGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGeoFenceCollisionsResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID, startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGeoFenceCollisionsResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAssignedVehiclestoDrivers")>
    Public Function usp_GetAssignedVehiclestoDrivers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetAssignedVehiclestoDriversResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAssignedVehiclestoDriversResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetUnprocessedCollissionsForAlertType")>
    Public Function usp_GetUnprocessedCollissionsForAlertType(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AlertTypeID", DbType:="UniqueIdentifier")> ByVal alertTypeID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetUnprocessedCollissionsForAlertTypeResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID, startDate, endDate, alertTypeID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetUnprocessedCollissionsForAlertTypeResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerUpdateValue")>
    Public Function usp_GetCustomerUpdateValue(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cid", DbType:="Int")> ByVal cid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetCustomerUpdateValueResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), cid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerUpdateValueResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAllDrivers")>
    Public Function usp_GetAllDrivers() As ISingleResult(Of usp_GetAllDriversResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAllDriversResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomers")>
    Public Function usp_GetCustomers() As ISingleResult(Of usp_GetCustomersResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomersResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIndustryListReport")>
    Public Function usp_GetIndustryListReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IndustryID", DbType:="Int")> ByVal industryID As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetIndustryListReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), industryID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetIndustryListReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetDriversLicenseExpiryReport")>
    Public Function usp_GetDriversLicenseExpiryReport() As ISingleResult(Of usp_GetDriversLicenseExpiryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetDriversLicenseExpiryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetContractRenewalsReport")>
    Public Function usp_GetContractRenewalsReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetContractRenewalsReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetContractRenewalsReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetServiceSummaryReport")>
    Public Function usp_GetServiceSummaryReport() As ISingleResult(Of usp_GetServiceSummaryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetServiceSummaryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetLengthOfServicesReport")>
    Public Function usp_GetLengthOfServicesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="GreaterThanYears", DbType:="Int")> ByVal greaterThanYears As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetLengthOfServicesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), greaterThanYears)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetLengthOfServicesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerByCustZone")>
    Public Function usp_GetCustomerByCustZone() As ISingleResult(Of usp_GetCustomerByCustZoneResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerByCustZoneResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerContactDetailsReport")>
    Public Function usp_GetCustomerContactDetailsReport() As ISingleResult(Of usp_GetCustomerContactDetailsReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerContactDetailsReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesWithNoContractsReport")>
    Public Function usp_GetSitesWithNoContractsReport() As ISingleResult(Of usp_GetSitesWithNoContractsReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesWithNoContractsReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetInvoiceBasicCheckReport")>
    Public Function usp_GetInvoiceBasicCheckReport() As ISingleResult(Of usp_GetInvoiceBasicCheckReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetInvoiceBasicCheckReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetMYOBCustomerInvoiceReport")>
    Public Function usp_GetMYOBCustomerInvoiceReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerName", DbType:="NVarChar(50)")> ByVal customerName As String) As ISingleResult(Of usp_GetMYOBCustomerInvoiceReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), customerName)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetMYOBCustomerInvoiceReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainsAndLossesReport")>
    Public Function usp_GetGainsAndLossesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainsAndLossesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGainsAndLossesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainsAndLossesPerAnnumReport")>
    Public Function usp_GetGainsAndLossesPerAnnumReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainsAndLossesPerAnnumReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGainsAndLossesPerAnnumReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetStandardAuditReport")>
    Public Function usp_GetStandardAuditReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetStandardAuditReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetStandardAuditReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAuditContractReport")>
    Public Function usp_GetAuditContractReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetAuditContractReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAuditContractReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAuditOfSiteDetailReport")>
    Public Function usp_GetAuditOfSiteDetailReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetAuditOfSiteDetailReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAuditOfSiteDetailReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesBySiteZoneReport")>
    Public Function usp_GetSitesBySiteZoneReport() As ISingleResult(Of usp_GetSitesBySiteZoneReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesBySiteZoneReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunValuesReport")>
    Public Function usp_GetRunValuesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ServiceRun", DbType:="VarChar(20)")> ByVal serviceRun As String) As ISingleResult(Of usp_GetRunValuesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), serviceRun)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunValuesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunValueSummaryReport")>
    Public Function usp_GetRunValueSummaryReport() As ISingleResult(Of usp_GetRunValueSummaryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunValueSummaryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunListingReport")>
    Public Function usp_GetRunListingReport() As ISingleResult(Of usp_GetRunListingReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunListingReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunDates")>
    Public Function usp_GetRunDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="Int")> ByVal rid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetRunDatesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), rid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunDatesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunListByRunNumberReport")>
    Public Function usp_GetRunListByRunNumberReport() As ISingleResult(Of usp_GetRunListByRunNumberReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunListByRunNumberReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetVehiclesForUser")>
    Public Function usp_GetVehiclesForUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="UniqueIdentifier")> ByVal userid As System.Nullable(Of System.Guid)) As ISingleResult(Of ApplicationVehicle)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), userid)
        Return CType(result.ReturnValue, ISingleResult(Of ApplicationVehicle))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetsDetail")>
    Public Function usp_GetGenerateRunSheetsDetail() As ISingleResult(Of usp_GetGenerateRunSheetsDetailResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGenerateRunSheetsDetailResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetsDetailSub")>
    Public Function usp_GetGenerateRunSheetsDetailSub() As ISingleResult(Of usp_GetGenerateRunSheetsDetailSubResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGenerateRunSheetsDetailSubResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetTblRuns")>
    Public Function usp_GetTblRuns(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecificRun", DbType:="VarChar(10)")> ByVal specificRun As String) As ISingleResult(Of usp_GetTblRunsResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), specificRun)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetTblRunsResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSpecificDates")>
    Public Function usp_GetSpecificDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SqlDate", DbType:="VarChar(20)")> ByVal sqlDate As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="VarChar(10)")> ByVal rid As String) As ISingleResult(Of usp_GetSpecificDatesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), sqlDate, rid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSpecificDatesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesAndCustomerServices")>
    Public Function usp_GetSitesAndCustomerServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="Int")> ByVal rid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetSitesAndCustomerServicesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), rid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesAndCustomerServicesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetSummary")>
    Public Function usp_GetGenerateRunSheetSummary() As ISingleResult(Of usp_GetGenerateRunSheetSummaryResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGenerateRunSheetSummaryResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateCustomersBaseOnCardID")>
    Public Function usp_UpdateCustomersBaseOnCardID() As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIndustryGroup")>
    Public Function usp_GetIndustryGroup() As ISingleResult(Of usp_GetIndustryGroupResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetIndustryGroupResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateRunsBasedOnRunDriver")>
    Public Function usp_UpdateRunsBasedOnRunDriver(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OldRunDriver", DbType:="Int")> ByVal oldRunDriver As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NewRunDriver", DbType:="Int")> ByVal newRunDriver As System.Nullable(Of Integer)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), oldRunDriver, newRunDriver)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPreviousInvoiceSummaryReport")>
    Public Function usp_GetPreviousInvoiceSummaryReport() As ISingleResult(Of usp_GetPreviousInvoiceSummaryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetPreviousInvoiceSummaryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetMYOBFileList")>
    Public Function usp_GetMYOBFileList() As ISingleResult(Of usp_GetMYOBFileListResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetMYOBFileListResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSiteListReport")>
    Public Function usp_GetSiteListReport() As ISingleResult(Of usp_GetSiteListReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSiteListReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIncludeServiceInformationReport")>
    Public Function usp_GetIncludeServiceInformationReport() As ISingleResult(Of usp_GetIncludeServiceInformationReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetIncludeServiceInformationReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAnnualAnalysisReport")>
    Public Function usp_GetAnnualAnalysisReport() As ISingleResult(Of usp_GetAnnualAnalysisReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAnnualAnalysisReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRevenueReportByZone")>
    Public Function usp_GetRevenueReportByZone() As ISingleResult(Of usp_GetRevenueReportByZoneResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRevenueReportByZoneResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSalesReportSuburb")>
    Public Function usp_GetSalesReportSuburb() As ISingleResult(Of usp_GetSalesReportSuburbResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSalesReportSuburbResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetContractCeaseReasons")>
    Public Function usp_GetContractCeaseReasons(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetContractCeaseReasonsResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetContractCeaseReasonsResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPreviousSupplier")>
    Public Function usp_GetPreviousSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetPreviousSupplierResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetPreviousSupplierResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetFortNightlyCycles")>
    Public Function usp_GetFortNightlyCycles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetFortNightlyCyclesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetFortNightlyCyclesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRevenueChangeReason")>
    Public Function usp_GetRevenueChangeReason(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRevenueChangeReasonResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRevenueChangeReasonResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateCustomeRating")>
    Public Function usp_UpdateCustomeRating(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPerAnnumValuesReport")>
    Public Function usp_GetPerAnnumValuesReport() As ISingleResult(Of usp_GetPerAnnumValuesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetPerAnnumValuesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainAndLossesBySalesPersonReport")>
    Public Function usp_GetGainAndLossesBySalesPersonReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainAndLossesBySalesPersonReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGainAndLossesBySalesPersonReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSites")>
    Public Function usp_GetSites(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSitesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerServices")>
    Public Function usp_GetCustomerServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetCustomerServicesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerServicesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCIRHistory")>
    Public Function usp_GetCIRHistory(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetCIRHistoryResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCIRHistoryResult))
    End Function
    Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName)
    Return CType(result.ReturnValue, ISingleResult(Of usp_GetSettingsForApplicationResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSubscribersForApplication")>
    Public Function usp_GetSubscribersForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSubscribersForApplicationResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSubscribersForApplicationResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_CreateRole")>
    Public Function aspnet_Roles_CreateRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleName", DbType:="NVarChar(256)")> ByVal roleName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(256)")> ByVal description As String) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationName, roleName, description)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGeoFenceCollisions")>
    Public Function usp_GetGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGeoFenceCollisionsResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID, startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGeoFenceCollisionsResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAssignedVehiclestoDrivers")>
    Public Function usp_GetAssignedVehiclestoDrivers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetAssignedVehiclestoDriversResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAssignedVehiclestoDriversResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetUnprocessedCollissionsForAlertType")>
    Public Function usp_GetUnprocessedCollissionsForAlertType(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AlertTypeID", DbType:="UniqueIdentifier")> ByVal alertTypeID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetUnprocessedCollissionsForAlertTypeResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID, startDate, endDate, alertTypeID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetUnprocessedCollissionsForAlertTypeResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerUpdateValue")>
    Public Function usp_GetCustomerUpdateValue(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cid", DbType:="Int")> ByVal cid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetCustomerUpdateValueResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), cid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerUpdateValueResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAllDrivers")>
    Public Function usp_GetAllDrivers() As ISingleResult(Of usp_GetAllDriversResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAllDriversResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomers")>
    Public Function usp_GetCustomers() As ISingleResult(Of usp_GetCustomersResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomersResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerServices")>
    Public Function usp_GetCustomerServices() As ISingleResult(Of usp_GetCustomerServicesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerServicesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCIRHistory")>
    Public Function usp_GetCIRHistory() As ISingleResult(Of usp_GetCIRHistoryResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCIRHistoryResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSites")>
    Public Function usp_GetSites() As ISingleResult(Of usp_GetSitesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIndustryListReport")>
    Public Function usp_GetIndustryListReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IndustryID", DbType:="Int")> ByVal industryID As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetIndustryListReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), industryID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetIndustryListReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetDriversLicenseExpiryReport")>
    Public Function usp_GetDriversLicenseExpiryReport() As ISingleResult(Of usp_GetDriversLicenseExpiryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetDriversLicenseExpiryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetContractRenewalsReport")>
    Public Function usp_GetContractRenewalsReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetContractRenewalsReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetContractRenewalsReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetServiceSummaryReport")>
    Public Function usp_GetServiceSummaryReport() As ISingleResult(Of usp_GetServiceSummaryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetServiceSummaryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetLengthOfServicesReport")>
    Public Function usp_GetLengthOfServicesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="GreaterThanYears", DbType:="Int")> ByVal greaterThanYears As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetLengthOfServicesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), greaterThanYears)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetLengthOfServicesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerByCustZone")>
    Public Function usp_GetCustomerByCustZone() As ISingleResult(Of usp_GetCustomerByCustZoneResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerByCustZoneResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerContactDetailsReport")>
    Public Function usp_GetCustomerContactDetailsReport() As ISingleResult(Of usp_GetCustomerContactDetailsReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetCustomerContactDetailsReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesWithNoContractsReport")>
    Public Function usp_GetSitesWithNoContractsReport() As ISingleResult(Of usp_GetSitesWithNoContractsReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesWithNoContractsReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetInvoiceBasicCheckReport")>
    Public Function usp_GetInvoiceBasicCheckReport() As ISingleResult(Of usp_GetInvoiceBasicCheckReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetInvoiceBasicCheckReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetMYOBCustomerInvoiceReport")>
    Public Function usp_GetMYOBCustomerInvoiceReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerName", DbType:="NVarChar(50)")> ByVal customerName As String) As ISingleResult(Of usp_GetMYOBCustomerInvoiceReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), customerName)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetMYOBCustomerInvoiceReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainsAndLossesReport")>
    Public Function usp_GetGainsAndLossesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainsAndLossesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGainsAndLossesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainsAndLossesPerAnnumReport")>
    Public Function usp_GetGainsAndLossesPerAnnumReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainsAndLossesPerAnnumReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGainsAndLossesPerAnnumReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetStandardAuditReport")>
    Public Function usp_GetStandardAuditReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetStandardAuditReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetStandardAuditReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAuditContractReport")>
    Public Function usp_GetAuditContractReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetAuditContractReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAuditContractReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAuditOfSiteDetailReport")>
    Public Function usp_GetAuditOfSiteDetailReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetAuditOfSiteDetailReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAuditOfSiteDetailReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesBySiteZoneReport")>
    Public Function usp_GetSitesBySiteZoneReport() As ISingleResult(Of usp_GetSitesBySiteZoneReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesBySiteZoneReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunValuesReport")>
    Public Function usp_GetRunValuesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ServiceRun", DbType:="VarChar(20)")> ByVal serviceRun As String) As ISingleResult(Of usp_GetRunValuesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), serviceRun)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunValuesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunValueSummaryReport")>
    Public Function usp_GetRunValueSummaryReport() As ISingleResult(Of usp_GetRunValueSummaryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunValueSummaryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunListingReport")>
    Public Function usp_GetRunListingReport() As ISingleResult(Of usp_GetRunListingReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunListingReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunDates")>
    Public Function usp_GetRunDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="Int")> ByVal rid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetRunDatesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), rid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunDatesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunListByRunNumberReport")>
    Public Function usp_GetRunListByRunNumberReport() As ISingleResult(Of usp_GetRunListByRunNumberReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRunListByRunNumberReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetVehiclesForUser")>
    Public Function usp_GetVehiclesForUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="UniqueIdentifier")> ByVal userid As System.Nullable(Of System.Guid)) As ISingleResult(Of ApplicationVehicle)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), userid)
        Return CType(result.ReturnValue, ISingleResult(Of ApplicationVehicle))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetsDetail")>
    Public Function usp_GetGenerateRunSheetsDetail() As ISingleResult(Of usp_GetGenerateRunSheetsDetailResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGenerateRunSheetsDetailResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetsDetailSub")>
    Public Function usp_GetGenerateRunSheetsDetailSub() As ISingleResult(Of usp_GetGenerateRunSheetsDetailSubResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGenerateRunSheetsDetailSubResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetTblRuns")>
    Public Function usp_GetTblRuns(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecificRun", DbType:="VarChar(10)")> ByVal specificRun As String) As ISingleResult(Of usp_GetTblRunsResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), specificRun)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetTblRunsResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSpecificDates")>
    Public Function usp_GetSpecificDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SqlDate", DbType:="VarChar(20)")> ByVal sqlDate As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="VarChar(10)")> ByVal rid As String) As ISingleResult(Of usp_GetSpecificDatesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), sqlDate, rid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSpecificDatesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesAndCustomerServices")>
    Public Function usp_GetSitesAndCustomerServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="Int")> ByVal rid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetSitesAndCustomerServicesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), rid)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSitesAndCustomerServicesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetSummary")>
    Public Function usp_GetGenerateRunSheetSummary() As ISingleResult(Of usp_GetGenerateRunSheetSummaryResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGenerateRunSheetSummaryResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateCustomersBaseOnCardID")>
    Public Function usp_UpdateCustomersBaseOnCardID() As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIndustryGroup")>
    Public Function usp_GetIndustryGroup() As ISingleResult(Of usp_GetIndustryGroupResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetIndustryGroupResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateRunsBasedOnRunDriver")>
    Public Function usp_UpdateRunsBasedOnRunDriver(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OldRunDriver", DbType:="Int")> ByVal oldRunDriver As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NewRunDriver", DbType:="Int")> ByVal newRunDriver As System.Nullable(Of Integer)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), oldRunDriver, newRunDriver)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPreviousInvoiceSummaryReport")>
    Public Function usp_GetPreviousInvoiceSummaryReport() As ISingleResult(Of usp_GetPreviousInvoiceSummaryReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetPreviousInvoiceSummaryReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetMYOBFileList")>
    Public Function usp_GetMYOBFileList() As ISingleResult(Of usp_GetMYOBFileListResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetMYOBFileListResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSiteListReport")>
    Public Function usp_GetSiteListReport() As ISingleResult(Of usp_GetSiteListReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSiteListReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIncludeServiceInformationReport")>
    Public Function usp_GetIncludeServiceInformationReport() As ISingleResult(Of usp_GetIncludeServiceInformationReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetIncludeServiceInformationReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAnnualAnalysisReport")>
    Public Function usp_GetAnnualAnalysisReport() As ISingleResult(Of usp_GetAnnualAnalysisReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetAnnualAnalysisReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRevenueReportByZone")>
    Public Function usp_GetRevenueReportByZone() As ISingleResult(Of usp_GetRevenueReportByZoneResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRevenueReportByZoneResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSalesReportSuburb")>
    Public Function usp_GetSalesReportSuburb() As ISingleResult(Of usp_GetSalesReportSuburbResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetSalesReportSuburbResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetContractCeaseReasons")>
    Public Function usp_GetContractCeaseReasons(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetContractCeaseReasonsResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetContractCeaseReasonsResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPreviousSupplier")>
    Public Function usp_GetPreviousSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetPreviousSupplierResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetPreviousSupplierResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetFortNightlyCycles")>
    Public Function usp_GetFortNightlyCycles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetFortNightlyCyclesResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetFortNightlyCyclesResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRevenueChangeReason")>
    Public Function usp_GetRevenueChangeReason(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRevenueChangeReasonResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), appID)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetRevenueChangeReasonResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateCustomeRating")>
    Public Function usp_UpdateCustomeRating(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As Integer
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), applicationID)
        Return CType(result.ReturnValue, Integer)
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPerAnnumValuesReport")>
    Public Function usp_GetPerAnnumValuesReport() As ISingleResult(Of usp_GetPerAnnumValuesReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo))
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetPerAnnumValuesReportResult))
    End Function

    <Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainAndLossesBySalesPersonReport")>
    Public Function usp_GetGainAndLossesBySalesPersonReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainAndLossesBySalesPersonReportResult)
        Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), startDate, endDate)
        Return CType(result.ReturnValue, ISingleResult(Of usp_GetGainAndLossesBySalesPersonReportResult))
    End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[AlertSubscriber.deleteme]")>
Partial Public Class AlertSubscriber_deleteme
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _AlertSubscriberID As System.Guid

    Private _SubscriberTypeID As System.Nullable(Of Integer)

    Private _SubscriberID As System.Guid

    Private _AlertTypeID As System.Guid

    Private _Email As System.Nullable(Of Boolean)

    Private _Text As System.Nullable(Of Boolean)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertSubscriberIDChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanged()
    End Sub
    Partial Private Sub OnSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubscriberIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property AlertSubscriberID() As System.Guid
        Get
            Return Me._AlertSubscriberID
        End Get
        Set
            If ((Me._AlertSubscriberID = Value) _
                        = False) Then
                Me.OnAlertSubscriberIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertSubscriberID = Value
                Me.SendPropertyChanged("AlertSubscriberID")
                Me.OnAlertSubscriberIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeID", DbType:="Int")>
    Public Property SubscriberTypeID() As System.Nullable(Of Integer)
        Get
            Return Me._SubscriberTypeID
        End Get
        Set
            If (Me._SubscriberTypeID.Equals(Value) = False) Then
                Me.OnSubscriberTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberTypeID = Value
                Me.SendPropertyChanged("SubscriberTypeID")
                Me.OnSubscriberTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property SubscriberID() As System.Guid
        Get
            Return Me._SubscriberID
        End Get
        Set
            If ((Me._SubscriberID = Value) _
                        = False) Then
                Me.OnSubscriberIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberID = Value
                Me.SendPropertyChanged("SubscriberID")
                Me.OnSubscriberIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property AlertTypeID() As System.Guid
        Get
            Return Me._AlertTypeID
        End Get
        Set
            If ((Me._AlertTypeID = Value) _
                        = False) Then
                Me.OnAlertTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertTypeID = Value
                Me.SendPropertyChanged("AlertTypeID")
                Me.OnAlertTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="Bit")>
    Public Property Email() As System.Nullable(Of Boolean)
        Get
            Return Me._Email
        End Get
        Set
            If (Me._Email.Equals(Value) = False) Then
                Me.OnEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._Email = Value
                Me.SendPropertyChanged("Email")
                Me.OnEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Bit")>
    Public Property Text() As System.Nullable(Of Boolean)
        Get
            Return Me._Text
        End Get
        Set
            If (Me._Text.Equals(Value) = False) Then
                Me.OnTextChanging(Value)
                Me.SendPropertyChanging()
                Me._Text = Value
                Me.SendPropertyChanged("Text")
                Me.OnTextChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WorkRequest")>
Partial Public Class WorkRequest
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _WorkRequestID As Integer

    Private _isBug As System.Nullable(Of Boolean)

    Private _Name As String

    Private _Description As String

    Private _LoggedDate As System.Nullable(Of Date)

    Private _EstimateDeliveryDate As System.Nullable(Of Date)

    Private _DeveloperComment As String

    Private _Complete As System.Nullable(Of Boolean)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWorkRequestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkRequestIDChanged()
    End Sub
    Partial Private Sub OnisBugChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBugChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnLoggedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLoggedDateChanged()
    End Sub
    Partial Private Sub OnEstimateDeliveryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstimateDeliveryDateChanged()
    End Sub
    Partial Private Sub OnDeveloperCommentChanging(value As String)
    End Sub
    Partial Private Sub OnDeveloperCommentChanged()
    End Sub
    Partial Private Sub OnCompleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCompleteChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkRequestID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property WorkRequestID() As Integer
        Get
            Return Me._WorkRequestID
        End Get
        Set
            If ((Me._WorkRequestID = Value) _
                        = False) Then
                Me.OnWorkRequestIDChanging(Value)
                Me.SendPropertyChanging()
                Me._WorkRequestID = Value
                Me.SendPropertyChanged("WorkRequestID")
                Me.OnWorkRequestIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBug", DbType:="Bit")>
    Public Property isBug() As System.Nullable(Of Boolean)
        Get
            Return Me._isBug
        End Get
        Set
            If (Me._isBug.Equals(Value) = False) Then
                Me.OnisBugChanging(Value)
                Me.SendPropertyChanging()
                Me._isBug = Value
                Me.SendPropertyChanged("isBug")
                Me.OnisBugChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(1000)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoggedDate", DbType:="DateTime")>
    Public Property LoggedDate() As System.Nullable(Of Date)
        Get
            Return Me._LoggedDate
        End Get
        Set
            If (Me._LoggedDate.Equals(Value) = False) Then
                Me.OnLoggedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LoggedDate = Value
                Me.SendPropertyChanged("LoggedDate")
                Me.OnLoggedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimateDeliveryDate", DbType:="DateTime")>
    Public Property EstimateDeliveryDate() As System.Nullable(Of Date)
        Get
            Return Me._EstimateDeliveryDate
        End Get
        Set
            If (Me._EstimateDeliveryDate.Equals(Value) = False) Then
                Me.OnEstimateDeliveryDateChanging(Value)
                Me.SendPropertyChanging()
                Me._EstimateDeliveryDate = Value
                Me.SendPropertyChanged("EstimateDeliveryDate")
                Me.OnEstimateDeliveryDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeveloperComment", DbType:="NChar(10)")>
    Public Property DeveloperComment() As String
        Get
            Return Me._DeveloperComment
        End Get
        Set
            If (String.Equals(Me._DeveloperComment, Value) = False) Then
                Me.OnDeveloperCommentChanging(Value)
                Me.SendPropertyChanging()
                Me._DeveloperComment = Value
                Me.SendPropertyChanged("DeveloperComment")
                Me.OnDeveloperCommentChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complete", DbType:="Bit")>
    Public Property Complete() As System.Nullable(Of Boolean)
        Get
            Return Me._Complete
        End Get
        Set
            If (Me._Complete.Equals(Value) = False) Then
                Me.OnCompleteChanging(Value)
                Me.SendPropertyChanging()
                Me._Complete = Value
                Me.SendPropertyChanged("Complete")
                Me.OnCompleteChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AlertType")>
Partial Public Class AlertType
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationAlertTypeID As System.Guid

    Private _ApplicationID As System.Guid

    Private _DriverId As System.Nullable(Of System.Guid)

    Private _GeoFenceID As System.Nullable(Of System.Guid)

    Private _Timespan_seconds As System.Nullable(Of Integer)

    Private _DeliveryGroup As System.Nullable(Of System.Guid)

    Private _Action As Integer

    Private _SubscriberNativeID As System.Nullable(Of System.Guid)

    Private _SendEmail As System.Nullable(Of Boolean)

    Private _SendText As System.Nullable(Of Boolean)

    Private _isBooking As System.Nullable(Of Boolean)

    Private _isSent As System.Nullable(Of Boolean)

    Private _BookingID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDriverIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDriverIdChanged()
    End Sub
    Partial Private Sub OnGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnTimespan_secondsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimespan_secondsChanged()
    End Sub
    Partial Private Sub OnDeliveryGroupChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDeliveryGroupChanged()
    End Sub
    Partial Private Sub OnActionChanging(value As Integer)
    End Sub
    Partial Private Sub OnActionChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnisBookingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBookingChanged()
    End Sub
    Partial Private Sub OnisSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisSentChanged()
    End Sub
    Partial Private Sub OnBookingIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBookingIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationAlertTypeID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationAlertTypeID() As System.Guid
        Get
            Return Me._ApplicationAlertTypeID
        End Get
        Set
            If ((Me._ApplicationAlertTypeID = Value) _
                        = False) Then
                Me.OnApplicationAlertTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationAlertTypeID = Value
                Me.SendPropertyChanged("ApplicationAlertTypeID")
                Me.OnApplicationAlertTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverId", DbType:="UniqueIdentifier")>
    Public Property DriverId() As System.Nullable(Of System.Guid)
        Get
            Return Me._DriverId
        End Get
        Set
            If (Me._DriverId.Equals(Value) = False) Then
                Me.OnDriverIdChanging(Value)
                Me.SendPropertyChanging()
                Me._DriverId = Value
                Me.SendPropertyChanged("DriverId")
                Me.OnDriverIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceID", DbType:="UniqueIdentifier")>
    Public Property GeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._GeoFenceID
        End Get
        Set
            If (Me._GeoFenceID.Equals(Value) = False) Then
                Me.OnGeoFenceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GeoFenceID = Value
                Me.SendPropertyChanged("GeoFenceID")
                Me.OnGeoFenceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timespan_seconds", DbType:="Int")>
    Public Property Timespan_seconds() As System.Nullable(Of Integer)
        Get
            Return Me._Timespan_seconds
        End Get
        Set
            If (Me._Timespan_seconds.Equals(Value) = False) Then
                Me.OnTimespan_secondsChanging(Value)
                Me.SendPropertyChanging()
                Me._Timespan_seconds = Value
                Me.SendPropertyChanged("Timespan_seconds")
                Me.OnTimespan_secondsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryGroup", DbType:="UniqueIdentifier")>
    Public Property DeliveryGroup() As System.Nullable(Of System.Guid)
        Get
            Return Me._DeliveryGroup
        End Get
        Set
            If (Me._DeliveryGroup.Equals(Value) = False) Then
                Me.OnDeliveryGroupChanging(Value)
                Me.SendPropertyChanging()
                Me._DeliveryGroup = Value
                Me.SendPropertyChanged("DeliveryGroup")
                Me.OnDeliveryGroupChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Action", DbType:="Int NOT NULL")>
    Public Property Action() As Integer
        Get
            Return Me._Action
        End Get
        Set
            If ((Me._Action = Value) _
                        = False) Then
                Me.OnActionChanging(Value)
                Me.SendPropertyChanging()
                Me._Action = Value
                Me.SendPropertyChanged("Action")
                Me.OnActionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier")>
    Public Property SubscriberNativeID() As System.Nullable(Of System.Guid)
        Get
            Return Me._SubscriberNativeID
        End Get
        Set
            If (Me._SubscriberNativeID.Equals(Value) = False) Then
                Me.OnSubscriberNativeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberNativeID = Value
                Me.SendPropertyChanged("SubscriberNativeID")
                Me.OnSubscriberNativeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>
    Public Property SendEmail() As System.Nullable(Of Boolean)
        Get
            Return Me._SendEmail
        End Get
        Set
            If (Me._SendEmail.Equals(Value) = False) Then
                Me.OnSendEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._SendEmail = Value
                Me.SendPropertyChanged("SendEmail")
                Me.OnSendEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>
    Public Property SendText() As System.Nullable(Of Boolean)
        Get
            Return Me._SendText
        End Get
        Set
            If (Me._SendText.Equals(Value) = False) Then
                Me.OnSendTextChanging(Value)
                Me.SendPropertyChanging()
                Me._SendText = Value
                Me.SendPropertyChanged("SendText")
                Me.OnSendTextChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBooking", DbType:="Bit")>
    Public Property isBooking() As System.Nullable(Of Boolean)
        Get
            Return Me._isBooking
        End Get
        Set
            If (Me._isBooking.Equals(Value) = False) Then
                Me.OnisBookingChanging(Value)
                Me.SendPropertyChanging()
                Me._isBooking = Value
                Me.SendPropertyChanged("isBooking")
                Me.OnisBookingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isSent", DbType:="Bit")>
    Public Property isSent() As System.Nullable(Of Boolean)
        Get
            Return Me._isSent
        End Get
        Set
            If (Me._isSent.Equals(Value) = False) Then
                Me.OnisSentChanging(Value)
                Me.SendPropertyChanging()
                Me._isSent = Value
                Me.SendPropertyChanged("isSent")
                Me.OnisSentChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingID", DbType:="UniqueIdentifier")>
    Public Property BookingID() As System.Nullable(Of System.Guid)
        Get
            Return Me._BookingID
        End Get
        Set
            If (Me._BookingID.Equals(Value) = False) Then
                Me.OnBookingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._BookingID = Value
                Me.SendPropertyChanged("BookingID")
                Me.OnBookingIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AlertTypeOccurance")>
Partial Public Class AlertTypeOccurance
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _AlertTypeOccuranceID As System.Guid

    Private _AlertTypeID As System.Guid

    Private _GeoFenceCollisionID As System.Guid

    Private _SubscriberTypeStr As String

    Private _SubscriberTypeName As String

    Private _SubscriberNativeID As System.Nullable(Of System.Guid)

    Private _Emails As String

    Private _Texts As String

    Private _DateSend As System.Nullable(Of Date)

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Private _ApplicationGeoFenceName As String

    Private _MessageContent As String

    Private _DriverName As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertTypeOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeOccuranceIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnGeoFenceCollisionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceCollisionIDChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeStrChanging(value As String)
    End Sub
    Partial Private Sub OnSubscriberTypeStrChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubscriberTypeNameChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnEmailsChanging(value As String)
    End Sub
    Partial Private Sub OnEmailsChanged()
    End Sub
    Partial Private Sub OnTextsChanging(value As String)
    End Sub
    Partial Private Sub OnTextsChanged()
    End Sub
    Partial Private Sub OnDateSendChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSendChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationGeoFenceNameChanged()
    End Sub
    Partial Private Sub OnMessageContentChanging(value As String)
    End Sub
    Partial Private Sub OnMessageContentChanged()
    End Sub
    Partial Private Sub OnDriverNameChanging(value As String)
    End Sub
    Partial Private Sub OnDriverNameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeOccuranceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property AlertTypeOccuranceID() As System.Guid
        Get
            Return Me._AlertTypeOccuranceID
        End Get
        Set
            If ((Me._AlertTypeOccuranceID = Value) _
                        = False) Then
                Me.OnAlertTypeOccuranceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertTypeOccuranceID = Value
                Me.SendPropertyChanged("AlertTypeOccuranceID")
                Me.OnAlertTypeOccuranceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property AlertTypeID() As System.Guid
        Get
            Return Me._AlertTypeID
        End Get
        Set
            If ((Me._AlertTypeID = Value) _
                        = False) Then
                Me.OnAlertTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertTypeID = Value
                Me.SendPropertyChanged("AlertTypeID")
                Me.OnAlertTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceCollisionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeoFenceCollisionID() As System.Guid
        Get
            Return Me._GeoFenceCollisionID
        End Get
        Set
            If ((Me._GeoFenceCollisionID = Value) _
                        = False) Then
                Me.OnGeoFenceCollisionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GeoFenceCollisionID = Value
                Me.SendPropertyChanged("GeoFenceCollisionID")
                Me.OnGeoFenceCollisionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeStr", DbType:="VarChar(200)")>
    Public Property SubscriberTypeStr() As String
        Get
            Return Me._SubscriberTypeStr
        End Get
        Set
            If (String.Equals(Me._SubscriberTypeStr, Value) = False) Then
                Me.OnSubscriberTypeStrChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberTypeStr = Value
                Me.SendPropertyChanged("SubscriberTypeStr")
                Me.OnSubscriberTypeStrChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeName", DbType:="VarChar(500)")>
    Public Property SubscriberTypeName() As String
        Get
            Return Me._SubscriberTypeName
        End Get
        Set
            If (String.Equals(Me._SubscriberTypeName, Value) = False) Then
                Me.OnSubscriberTypeNameChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberTypeName = Value
                Me.SendPropertyChanged("SubscriberTypeName")
                Me.OnSubscriberTypeNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier")>
    Public Property SubscriberNativeID() As System.Nullable(Of System.Guid)
        Get
            Return Me._SubscriberNativeID
        End Get
        Set
            If (Me._SubscriberNativeID.Equals(Value) = False) Then
                Me.OnSubscriberNativeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberNativeID = Value
                Me.SendPropertyChanged("SubscriberNativeID")
                Me.OnSubscriberNativeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Emails", DbType:="VarChar(MAX)")>
    Public Property Emails() As String
        Get
            Return Me._Emails
        End Get
        Set
            If (String.Equals(Me._Emails, Value) = False) Then
                Me.OnEmailsChanging(Value)
                Me.SendPropertyChanging()
                Me._Emails = Value
                Me.SendPropertyChanged("Emails")
                Me.OnEmailsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Texts", DbType:="VarChar(MAX)")>
    Public Property Texts() As String
        Get
            Return Me._Texts
        End Get
        Set
            If (String.Equals(Me._Texts, Value) = False) Then
                Me.OnTextsChanging(Value)
                Me.SendPropertyChanging()
                Me._Texts = Value
                Me.SendPropertyChanged("Texts")
                Me.OnTextsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="DateTime")>
    Public Property DateSend() As System.Nullable(Of Date)
        Get
            Return Me._DateSend
        End Get
        Set
            If (Me._DateSend.Equals(Value) = False) Then
                Me.OnDateSendChanging(Value)
                Me.SendPropertyChanging()
                Me._DateSend = Value
                Me.SendPropertyChanged("DateSend")
                Me.OnDateSendChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me.OnApplicationGeoFenceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceID = Value
                Me.SendPropertyChanged("ApplicationGeoFenceID")
                Me.OnApplicationGeoFenceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceName", DbType:="VarChar(1000)")>
    Public Property ApplicationGeoFenceName() As String
        Get
            Return Me._ApplicationGeoFenceName
        End Get
        Set
            If (String.Equals(Me._ApplicationGeoFenceName, Value) = False) Then
                Me.OnApplicationGeoFenceNameChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceName = Value
                Me.SendPropertyChanged("ApplicationGeoFenceName")
                Me.OnApplicationGeoFenceNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>
    Public Property MessageContent() As String
        Get
            Return Me._MessageContent
        End Get
        Set
            If (String.Equals(Me._MessageContent, Value) = False) Then
                Me.OnMessageContentChanging(Value)
                Me.SendPropertyChanging()
                Me._MessageContent = Value
                Me.SendPropertyChanged("MessageContent")
                Me.OnMessageContentChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="VarChar(500)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me.OnDriverNameChanging(Value)
                Me.SendPropertyChanging()
                Me._DriverName = Value
                Me.SendPropertyChanged("DriverName")
                Me.OnDriverNameChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[AlertTypeSubscriber.deleteme]")>
Partial Public Class AlertTypeSubscriber_deleteme
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _AlertTypeSubscriberID As System.Guid

    Private _AlertTypeID As System.Guid

    Private _SendEmail As System.Nullable(Of Boolean)

    Private _SendText As System.Nullable(Of Boolean)

    Private _SubscriberTypeID As Integer

    Private _NativeID As System.Guid

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertTypeSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeSubscriberIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanged()
    End Sub
    Partial Private Sub OnNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNativeIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property AlertTypeSubscriberID() As System.Guid
        Get
            Return Me._AlertTypeSubscriberID
        End Get
        Set
            If ((Me._AlertTypeSubscriberID = Value) _
                        = False) Then
                Me.OnAlertTypeSubscriberIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertTypeSubscriberID = Value
                Me.SendPropertyChanged("AlertTypeSubscriberID")
                Me.OnAlertTypeSubscriberIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property AlertTypeID() As System.Guid
        Get
            Return Me._AlertTypeID
        End Get
        Set
            If ((Me._AlertTypeID = Value) _
                        = False) Then
                Me.OnAlertTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertTypeID = Value
                Me.SendPropertyChanged("AlertTypeID")
                Me.OnAlertTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>
    Public Property SendEmail() As System.Nullable(Of Boolean)
        Get
            Return Me._SendEmail
        End Get
        Set
            If (Me._SendEmail.Equals(Value) = False) Then
                Me.OnSendEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._SendEmail = Value
                Me.SendPropertyChanged("SendEmail")
                Me.OnSendEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>
    Public Property SendText() As System.Nullable(Of Boolean)
        Get
            Return Me._SendText
        End Get
        Set
            If (Me._SendText.Equals(Value) = False) Then
                Me.OnSendTextChanging(Value)
                Me.SendPropertyChanging()
                Me._SendText = Value
                Me.SendPropertyChanged("SendText")
                Me.OnSendTextChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeID", DbType:="Int NOT NULL")>
    Public Property SubscriberTypeID() As Integer
        Get
            Return Me._SubscriberTypeID
        End Get
        Set
            If ((Me._SubscriberTypeID = Value) _
                        = False) Then
                Me.OnSubscriberTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberTypeID = Value
                Me.SendPropertyChanged("SubscriberTypeID")
                Me.OnSubscriberTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property NativeID() As System.Guid
        Get
            Return Me._NativeID
        End Get
        Set
            If ((Me._NativeID = Value) _
                        = False) Then
                Me.OnNativeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._NativeID = Value
                Me.SendPropertyChanged("NativeID")
                Me.OnNativeIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationBooking_20170222")>
Partial Public Class ApplicationBooking_20170222

    Private _ApplicationBookingId As System.Guid

    Private _ApplicationDriverID As System.Guid

    Private _ApplicationId As System.Guid

    Private _ArrivalTime As System.Nullable(Of Date)

    Private _GeofenceLeaveId As System.Guid

    Private _GeofenceDestinationId As System.Guid

    Private _IsAlert5min As System.Nullable(Of Boolean)

    Private _IsAlertLeaveForPickup As System.Nullable(Of Boolean)

    Private _ContactID As System.Guid

    Private _CustomerPhone As String

    Private _CustomerEmail As String

    Private _GeofenceLeave As String

    Private _GeofenceDestination As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationBookingId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationBookingId() As System.Guid
        Get
            Return Me._ApplicationBookingId
        End Get
        Set
            If ((Me._ApplicationBookingId = Value) _
                        = False) Then
                Me._ApplicationBookingId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationDriverID() As System.Guid
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If ((Me._ApplicationDriverID = Value) _
                        = False) Then
                Me._ApplicationDriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                Me._ApplicationId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime")>
    Public Property ArrivalTime() As System.Nullable(Of Date)
        Get
            Return Me._ArrivalTime
        End Get
        Set
            If (Me._ArrivalTime.Equals(Value) = False) Then
                Me._ArrivalTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeaveId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeofenceLeaveId() As System.Guid
        Get
            Return Me._GeofenceLeaveId
        End Get
        Set
            If ((Me._GeofenceLeaveId = Value) _
                        = False) Then
                Me._GeofenceLeaveId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestinationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeofenceDestinationId() As System.Guid
        Get
            Return Me._GeofenceDestinationId
        End Get
        Set
            If ((Me._GeofenceDestinationId = Value) _
                        = False) Then
                Me._GeofenceDestinationId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlert5min", DbType:="Bit")>
    Public Property IsAlert5min() As System.Nullable(Of Boolean)
        Get
            Return Me._IsAlert5min
        End Get
        Set
            If (Me._IsAlert5min.Equals(Value) = False) Then
                Me._IsAlert5min = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlertLeaveForPickup", DbType:="Bit")>
    Public Property IsAlertLeaveForPickup() As System.Nullable(Of Boolean)
        Get
            Return Me._IsAlertLeaveForPickup
        End Get
        Set
            If (Me._IsAlertLeaveForPickup.Equals(Value) = False) Then
                Me._IsAlertLeaveForPickup = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ContactID() As System.Guid
        Get
            Return Me._ContactID
        End Get
        Set
            If ((Me._ContactID = Value) _
                        = False) Then
                Me._ContactID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(MAX)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me._CustomerPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(MAX)")>
    Public Property CustomerEmail() As String
        Get
            Return Me._CustomerEmail
        End Get
        Set
            If (String.Equals(Me._CustomerEmail, Value) = False) Then
                Me._CustomerEmail = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeave", DbType:="NVarChar(MAX)")>
    Public Property GeofenceLeave() As String
        Get
            Return Me._GeofenceLeave
        End Get
        Set
            If (String.Equals(Me._GeofenceLeave, Value) = False) Then
                Me._GeofenceLeave = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestination", DbType:="NVarChar(MAX)")>
    Public Property GeofenceDestination() As String
        Get
            Return Me._GeofenceDestination
        End Get
        Set
            If (String.Equals(Me._GeofenceDestination, Value) = False) Then
                Me._GeofenceDestination = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationDriver")>
Partial Public Class ApplicationDriver
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationDriverID As System.Guid

    Private _FirstName As String

    Private _Surname As String

    Private _PhoneNumber As String

    Private _photo As String

    Private _photoBinary As System.Data.Linq.Binary

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Notes As String

    Private _emailaddress As String

    Private _ApplicationLocationID As System.Nullable(Of System.Guid)

    Private _ApplicationBookings As EntitySet(Of ApplicationBooking)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnphotoChanging(value As String)
    End Sub
    Partial Private Sub OnphotoChanged()
    End Sub
    Partial Private Sub OnphotoBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnphotoBinaryChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnemailaddressChanging(value As String)
    End Sub
    Partial Private Sub OnemailaddressChanged()
    End Sub
    Partial Private Sub OnApplicationLocationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationLocationIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationBookings = New EntitySet(Of ApplicationBooking)(AddressOf Me.attach_ApplicationBookings, AddressOf Me.detach_ApplicationBookings)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationDriverID() As System.Guid
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If ((Me._ApplicationDriverID = Value) _
                        = False) Then
                Me.OnApplicationDriverIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationDriverID = Value
                Me.SendPropertyChanged("ApplicationDriverID")
                Me.OnApplicationDriverIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(MAX)")>
    Public Property FirstName() As String
        Get
            Return Me._FirstName
        End Get
        Set
            If (String.Equals(Me._FirstName, Value) = False) Then
                Me.OnFirstNameChanging(Value)
                Me.SendPropertyChanging()
                Me._FirstName = Value
                Me.SendPropertyChanged("FirstName")
                Me.OnFirstNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(MAX)")>
    Public Property Surname() As String
        Get
            Return Me._Surname
        End Get
        Set
            If (String.Equals(Me._Surname, Value) = False) Then
                Me.OnSurnameChanging(Value)
                Me.SendPropertyChanging()
                Me._Surname = Value
                Me.SendPropertyChanged("Surname")
                Me.OnSurnameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>
    Public Property PhoneNumber() As String
        Get
            Return Me._PhoneNumber
        End Get
        Set
            If (String.Equals(Me._PhoneNumber, Value) = False) Then
                Me.OnPhoneNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._PhoneNumber = Value
                Me.SendPropertyChanged("PhoneNumber")
                Me.OnPhoneNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photo", DbType:="VarChar(MAX)")>
    Public Property photo() As String
        Get
            Return Me._photo
        End Get
        Set
            If (String.Equals(Me._photo, Value) = False) Then
                Me.OnphotoChanging(Value)
                Me.SendPropertyChanging()
                Me._photo = Value
                Me.SendPropertyChanged("photo")
                Me.OnphotoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoBinary", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>
    Public Property photoBinary() As System.Data.Linq.Binary
        Get
            Return Me._photoBinary
        End Get
        Set
            If (Object.Equals(Me._photoBinary, Value) = False) Then
                Me.OnphotoBinaryChanging(Value)
                Me.SendPropertyChanging()
                Me._photoBinary = Value
                Me.SendPropertyChanged("photoBinary")
                Me.OnphotoBinaryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emailaddress", DbType:="VarChar(500)")>
    Public Property emailaddress() As String
        Get
            Return Me._emailaddress
        End Get
        Set
            If (String.Equals(Me._emailaddress, Value) = False) Then
                Me.OnemailaddressChanging(Value)
                Me.SendPropertyChanging()
                Me._emailaddress = Value
                Me.SendPropertyChanged("emailaddress")
                Me.OnemailaddressChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationLocationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationLocationID
        End Get
        Set
            If (Me._ApplicationLocationID.Equals(Value) = False) Then
                Me.OnApplicationLocationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationLocationID = Value
                Me.SendPropertyChanged("ApplicationLocationID")
                Me.OnApplicationLocationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationDriver_ApplicationBooking", Storage:="_ApplicationBookings", ThisKey:="ApplicationDriverID", OtherKey:="ApplicationDriverID")>
    Public Property ApplicationBookings() As EntitySet(Of ApplicationBooking)
        Get
            Return Me._ApplicationBookings
        End Get
        Set
            Me._ApplicationBookings.Assign(Value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_ApplicationBookings(ByVal entity As ApplicationBooking)
        Me.SendPropertyChanging()
        entity.ApplicationDriver = Me
    End Sub

    Private Sub detach_ApplicationBookings(ByVal entity As ApplicationBooking)
        Me.SendPropertyChanging()
        entity.ApplicationDriver = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationFeature")>
Partial Public Class ApplicationFeature
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationFeatureID As System.Guid

    Private _ApplicationID As System.Guid

    Private _FeatureID As System.Guid

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

    Private _Feature As EntityRef(Of Feature)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationFeatureIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        Me._Feature = CType(Nothing, EntityRef(Of Feature))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFeatureID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationFeatureID() As System.Guid
        Get
            Return Me._ApplicationFeatureID
        End Get
        Set
            If ((Me._ApplicationFeatureID = Value) _
                        = False) Then
                Me.OnApplicationFeatureIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationFeatureID = Value
                Me.SendPropertyChanged("ApplicationFeatureID")
                Me.OnApplicationFeatureIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property FeatureID() As System.Guid
        Get
            Return Me._FeatureID
        End Get
        Set
            If ((Me._FeatureID = Value) _
                        = False) Then
                If Me._Feature.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnFeatureIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FeatureID = Value
                Me.SendPropertyChanged("FeatureID")
                Me.OnFeatureIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeature", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.ApplicationFeatures.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationFeatures.Add(Me)
                    Me._ApplicationID = Value.ApplicationId
                Else
                    Me._ApplicationID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeature", Storage:="_Feature", ThisKey:="FeatureID", OtherKey:="FeatureID", IsForeignKey:=True)>
    Public Property Feature() As Feature
        Get
            Return Me._Feature.Entity
        End Get
        Set
            Dim previousValue As Feature = Me._Feature.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._Feature.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._Feature.Entity = Nothing
                    previousValue.ApplicationFeatures.Remove(Me)
                End If
                Me._Feature.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationFeatures.Add(Me)
                    Me._FeatureID = Value.FeatureID
                Else
                    Me._FeatureID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("Feature")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationFeatureRole")>
Partial Public Class ApplicationFeatureRole
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationFeatureRoledID As System.Guid

    Private _ApplicationID As System.Guid

    Private _FeatureID As System.Guid

    Private _RoleID As System.Guid

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

    Private _aspnet_Role As EntityRef(Of aspnet_Role)

    Private _Feature As EntityRef(Of Feature)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationFeatureRoledIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationFeatureRoledIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
        Me._Feature = CType(Nothing, EntityRef(Of Feature))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFeatureRoledID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationFeatureRoledID() As System.Guid
        Get
            Return Me._ApplicationFeatureRoledID
        End Get
        Set
            If ((Me._ApplicationFeatureRoledID = Value) _
                        = False) Then
                Me.OnApplicationFeatureRoledIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationFeatureRoledID = Value
                Me.SendPropertyChanged("ApplicationFeatureRoledID")
                Me.OnApplicationFeatureRoledIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property FeatureID() As System.Guid
        Get
            Return Me._FeatureID
        End Get
        Set
            If ((Me._FeatureID = Value) _
                        = False) Then
                If Me._Feature.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnFeatureIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FeatureID = Value
                Me.SendPropertyChanged("FeatureID")
                Me.OnFeatureIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property RoleID() As System.Guid
        Get
            Return Me._RoleID
        End Get
        Set
            If ((Me._RoleID = Value) _
                        = False) Then
                If Me._aspnet_Role.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnRoleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RoleID = Value
                Me.SendPropertyChanged("RoleID")
                Me.OnRoleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeatureRole", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.ApplicationFeatureRoles.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationFeatureRoles.Add(Me)
                    Me._ApplicationID = Value.ApplicationId
                Else
                    Me._ApplicationID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_ApplicationFeatureRole", Storage:="_aspnet_Role", ThisKey:="RoleID", OtherKey:="RoleId", IsForeignKey:=True)>
    Public Property aspnet_Role() As aspnet_Role
        Get
            Return Me._aspnet_Role.Entity
        End Get
        Set
            Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Role.Entity = Nothing
                    previousValue.ApplicationFeatureRoles.Remove(Me)
                End If
                Me._aspnet_Role.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationFeatureRoles.Add(Me)
                    Me._RoleID = Value.RoleId
                Else
                    Me._RoleID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Role")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeatureRole", Storage:="_Feature", ThisKey:="FeatureID", OtherKey:="FeatureID", IsForeignKey:=True)>
    Public Property Feature() As Feature
        Get
            Return Me._Feature.Entity
        End Get
        Set
            Dim previousValue As Feature = Me._Feature.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._Feature.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._Feature.Entity = Nothing
                    previousValue.ApplicationFeatureRoles.Remove(Me)
                End If
                Me._Feature.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationFeatureRoles.Add(Me)
                    Me._FeatureID = Value.FeatureID
                Else
                    Me._FeatureID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("Feature")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence")>
Partial Public Class ApplicationGeoFence
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationGeoFenceID As System.Guid

    Private _ApplictionID As System.Guid

    Private _Name As String

    Private _Description As String

    Private _UserID As System.Nullable(Of System.Guid)

    Private _DateCreated As System.Nullable(Of Date)

    Private _Colour As String

    Private _isCircular As System.Nullable(Of Boolean)

    Private _CircleRadiusMetres As System.Nullable(Of Double)

    Private _CircleCentre As String

    Private _isBooking As System.Nullable(Of Boolean)

    Private _ApplicationGeoFenceSides As EntitySet(Of ApplicationGeoFenceSide)

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnApplictionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplictionIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnColourChanging(value As String)
    End Sub
    Partial Private Sub OnColourChanged()
    End Sub
    Partial Private Sub OnisCircularChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisCircularChanged()
    End Sub
    Partial Private Sub OnCircleRadiusMetresChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircleRadiusMetresChanged()
    End Sub
    Partial Private Sub OnCircleCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCircleCentreChanged()
    End Sub
    Partial Private Sub OnisBookingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBookingChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationGeoFenceSides = New EntitySet(Of ApplicationGeoFenceSide)(AddressOf Me.attach_ApplicationGeoFenceSides, AddressOf Me.detach_ApplicationGeoFenceSides)
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationGeoFenceID() As System.Guid
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If ((Me._ApplicationGeoFenceID = Value) _
                        = False) Then
                Me.OnApplicationGeoFenceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceID = Value
                Me.SendPropertyChanged("ApplicationGeoFenceID")
                Me.OnApplicationGeoFenceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplictionID() As System.Guid
        Get
            Return Me._ApplictionID
        End Get
        Set
            If ((Me._ApplictionID = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplictionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplictionID = Value
                Me.SendPropertyChanged("ApplictionID")
                Me.OnApplictionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>
    Public Property UserID() As System.Nullable(Of System.Guid)
        Get
            Return Me._UserID
        End Get
        Set
            If (Me._UserID.Equals(Value) = False) Then
                Me.OnUserIDChanging(Value)
                Me.SendPropertyChanging()
                Me._UserID = Value
                Me.SendPropertyChanged("UserID")
                Me.OnUserIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>
    Public Property DateCreated() As System.Nullable(Of Date)
        Get
            Return Me._DateCreated
        End Get
        Set
            If (Me._DateCreated.Equals(Value) = False) Then
                Me.OnDateCreatedChanging(Value)
                Me.SendPropertyChanging()
                Me._DateCreated = Value
                Me.SendPropertyChanged("DateCreated")
                Me.OnDateCreatedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>
    Public Property Colour() As String
        Get
            Return Me._Colour
        End Get
        Set
            If (String.Equals(Me._Colour, Value) = False) Then
                Me.OnColourChanging(Value)
                Me.SendPropertyChanging()
                Me._Colour = Value
                Me.SendPropertyChanged("Colour")
                Me.OnColourChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>
    Public Property isCircular() As System.Nullable(Of Boolean)
        Get
            Return Me._isCircular
        End Get
        Set
            If (Me._isCircular.Equals(Value) = False) Then
                Me.OnisCircularChanging(Value)
                Me.SendPropertyChanging()
                Me._isCircular = Value
                Me.SendPropertyChanged("isCircular")
                Me.OnisCircularChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>
    Public Property CircleRadiusMetres() As System.Nullable(Of Double)
        Get
            Return Me._CircleRadiusMetres
        End Get
        Set
            If (Me._CircleRadiusMetres.Equals(Value) = False) Then
                Me.OnCircleRadiusMetresChanging(Value)
                Me.SendPropertyChanging()
                Me._CircleRadiusMetres = Value
                Me.SendPropertyChanged("CircleRadiusMetres")
                Me.OnCircleRadiusMetresChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>
    Public Property CircleCentre() As String
        Get
            Return Me._CircleCentre
        End Get
        Set
            If (String.Equals(Me._CircleCentre, Value) = False) Then
                Me.OnCircleCentreChanging(Value)
                Me.SendPropertyChanging()
                Me._CircleCentre = Value
                Me.SendPropertyChanged("CircleCentre")
                Me.OnCircleCentreChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBooking", DbType:="Bit")>
    Public Property isBooking() As System.Nullable(Of Boolean)
        Get
            Return Me._isBooking
        End Get
        Set
            If (Me._isBooking.Equals(Value) = False) Then
                Me.OnisBookingChanging(Value)
                Me.SendPropertyChanging()
                Me._isBooking = Value
                Me.SendPropertyChanged("isBooking")
                Me.OnisBookingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationGeoFence_ApplicationGeoFenceSide", Storage:="_ApplicationGeoFenceSides", ThisKey:="ApplicationGeoFenceID", OtherKey:="ApplicationGeoFenceID")>
    Public Property ApplicationGeoFenceSides() As EntitySet(Of ApplicationGeoFenceSide)
        Get
            Return Me._ApplicationGeoFenceSides
        End Get
        Set
            Me._ApplicationGeoFenceSides.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationGeoFence", Storage:="_aspnet_Application", ThisKey:="ApplictionID", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.ApplicationGeoFences.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationGeoFences.Add(Me)
                    Me._ApplictionID = Value.ApplicationId
                Else
                    Me._ApplictionID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_ApplicationGeoFenceSides(ByVal entity As ApplicationGeoFenceSide)
        Me.SendPropertyChanging()
        entity.ApplicationGeoFence = Me
    End Sub

    Private Sub detach_ApplicationGeoFenceSides(ByVal entity As ApplicationGeoFenceSide)
        Me.SendPropertyChanging()
        entity.ApplicationGeoFence = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence_20160615")>
Partial Public Class ApplicationGeoFence_20160615

    Private _ApplicationGeoFenceID As System.Guid

    Private _ApplictionID As System.Guid

    Private _Name As String

    Private _Description As String

    Private _UserID As System.Nullable(Of System.Guid)

    Private _DateCreated As System.Nullable(Of Date)

    Private _Colour As String

    Private _isCircular As System.Nullable(Of Boolean)

    Private _CircleRadiusMetres As System.Nullable(Of Double)

    Private _CircleCentre As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationGeoFenceID() As System.Guid
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If ((Me._ApplicationGeoFenceID = Value) _
                        = False) Then
                Me._ApplicationGeoFenceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplictionID() As System.Guid
        Get
            Return Me._ApplictionID
        End Get
        Set
            If ((Me._ApplictionID = Value) _
                        = False) Then
                Me._ApplictionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me._Description = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>
    Public Property UserID() As System.Nullable(Of System.Guid)
        Get
            Return Me._UserID
        End Get
        Set
            If (Me._UserID.Equals(Value) = False) Then
                Me._UserID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>
    Public Property DateCreated() As System.Nullable(Of Date)
        Get
            Return Me._DateCreated
        End Get
        Set
            If (Me._DateCreated.Equals(Value) = False) Then
                Me._DateCreated = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>
    Public Property Colour() As String
        Get
            Return Me._Colour
        End Get
        Set
            If (String.Equals(Me._Colour, Value) = False) Then
                Me._Colour = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>
    Public Property isCircular() As System.Nullable(Of Boolean)
        Get
            Return Me._isCircular
        End Get
        Set
            If (Me._isCircular.Equals(Value) = False) Then
                Me._isCircular = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>
    Public Property CircleRadiusMetres() As System.Nullable(Of Double)
        Get
            Return Me._CircleRadiusMetres
        End Get
        Set
            If (Me._CircleRadiusMetres.Equals(Value) = False) Then
                Me._CircleRadiusMetres = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>
    Public Property CircleCentre() As String
        Get
            Return Me._CircleCentre
        End Get
        Set
            If (String.Equals(Me._CircleCentre, Value) = False) Then
                Me._CircleCentre = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence_20160842")>
Partial Public Class ApplicationGeoFence_20160842

    Private _ApplicationGeoFenceID As System.Guid

    Private _ApplictionID As System.Guid

    Private _Name As String

    Private _Description As String

    Private _UserID As System.Nullable(Of System.Guid)

    Private _DateCreated As System.Nullable(Of Date)

    Private _Colour As String

    Private _isCircular As System.Nullable(Of Boolean)

    Private _CircleRadiusMetres As System.Nullable(Of Double)

    Private _CircleCentre As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationGeoFenceID() As System.Guid
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If ((Me._ApplicationGeoFenceID = Value) _
                        = False) Then
                Me._ApplicationGeoFenceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplictionID() As System.Guid
        Get
            Return Me._ApplictionID
        End Get
        Set
            If ((Me._ApplictionID = Value) _
                        = False) Then
                Me._ApplictionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me._Description = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>
    Public Property UserID() As System.Nullable(Of System.Guid)
        Get
            Return Me._UserID
        End Get
        Set
            If (Me._UserID.Equals(Value) = False) Then
                Me._UserID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>
    Public Property DateCreated() As System.Nullable(Of Date)
        Get
            Return Me._DateCreated
        End Get
        Set
            If (Me._DateCreated.Equals(Value) = False) Then
                Me._DateCreated = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>
    Public Property Colour() As String
        Get
            Return Me._Colour
        End Get
        Set
            If (String.Equals(Me._Colour, Value) = False) Then
                Me._Colour = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>
    Public Property isCircular() As System.Nullable(Of Boolean)
        Get
            Return Me._isCircular
        End Get
        Set
            If (Me._isCircular.Equals(Value) = False) Then
                Me._isCircular = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>
    Public Property CircleRadiusMetres() As System.Nullable(Of Double)
        Get
            Return Me._CircleRadiusMetres
        End Get
        Set
            If (Me._CircleRadiusMetres.Equals(Value) = False) Then
                Me._CircleRadiusMetres = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>
    Public Property CircleCentre() As String
        Get
            Return Me._CircleCentre
        End Get
        Set
            If (String.Equals(Me._CircleCentre, Value) = False) Then
                Me._CircleCentre = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeofenceProperty")>
Partial Public Class ApplicationGeofenceProperty
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationGeoFencePropertyID As Integer

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Private _PropertyName As String

    Private _PropertyValue As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFencePropertyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApplicationGeoFencePropertyIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFencePropertyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property ApplicationGeoFencePropertyID() As Integer
        Get
            Return Me._ApplicationGeoFencePropertyID
        End Get
        Set
            If ((Me._ApplicationGeoFencePropertyID = Value) _
                        = False) Then
                Me.OnApplicationGeoFencePropertyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFencePropertyID = Value
                Me.SendPropertyChanged("ApplicationGeoFencePropertyID")
                Me.OnApplicationGeoFencePropertyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me.OnApplicationGeoFenceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceID = Value
                Me.SendPropertyChanged("ApplicationGeoFenceID")
                Me.OnApplicationGeoFenceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(1000)")>
    Public Property PropertyName() As String
        Get
            Return Me._PropertyName
        End Get
        Set
            If (String.Equals(Me._PropertyName, Value) = False) Then
                Me.OnPropertyNameChanging(Value)
                Me.SendPropertyChanging()
                Me._PropertyName = Value
                Me.SendPropertyChanged("PropertyName")
                Me.OnPropertyNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="VarChar(1000)")>
    Public Property PropertyValue() As String
        Get
            Return Me._PropertyValue
        End Get
        Set
            If (String.Equals(Me._PropertyValue, Value) = False) Then
                Me.OnPropertyValueChanging(Value)
                Me.SendPropertyChanging()
                Me._PropertyValue = Value
                Me.SendPropertyChanged("PropertyValue")
                Me.OnPropertyValueChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFenceSide")>
Partial Public Class ApplicationGeoFenceSide
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationGeoFenceSideID As System.Guid

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Private _Latitude As String

    Private _Longitude As String

    Private _loadOrder As Integer

    Private _ApplicationGeoFence As EntityRef(Of ApplicationGeoFence)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFenceSideIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationGeoFenceSideIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnloadOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnloadOrderChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationGeoFence = CType(Nothing, EntityRef(Of ApplicationGeoFence))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceSideID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationGeoFenceSideID() As System.Guid
        Get
            Return Me._ApplicationGeoFenceSideID
        End Get
        Set
            If ((Me._ApplicationGeoFenceSideID = Value) _
                        = False) Then
                Me.OnApplicationGeoFenceSideIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceSideID = Value
                Me.SendPropertyChanged("ApplicationGeoFenceSideID")
                Me.OnApplicationGeoFenceSideIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                If Me._ApplicationGeoFence.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationGeoFenceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceID = Value
                Me.SendPropertyChanged("ApplicationGeoFenceID")
                Me.OnApplicationGeoFenceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=False)>
    Public Property Latitude() As String
        Get
            Return Me._Latitude
        End Get
        Set
            If (String.Equals(Me._Latitude, Value) = False) Then
                Me.OnLatitudeChanging(Value)
                Me.SendPropertyChanging()
                Me._Latitude = Value
                Me.SendPropertyChanged("Latitude")
                Me.OnLatitudeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=False)>
    Public Property Longitude() As String
        Get
            Return Me._Longitude
        End Get
        Set
            If (String.Equals(Me._Longitude, Value) = False) Then
                Me.OnLongitudeChanging(Value)
                Me.SendPropertyChanging()
                Me._Longitude = Value
                Me.SendPropertyChanged("Longitude")
                Me.OnLongitudeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadOrder", DbType:="Int NOT NULL")>
    Public Property loadOrder() As Integer
        Get
            Return Me._loadOrder
        End Get
        Set
            If ((Me._loadOrder = Value) _
                        = False) Then
                Me.OnloadOrderChanging(Value)
                Me.SendPropertyChanging()
                Me._loadOrder = Value
                Me.SendPropertyChanged("loadOrder")
                Me.OnloadOrderChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationGeoFence_ApplicationGeoFenceSide", Storage:="_ApplicationGeoFence", ThisKey:="ApplicationGeoFenceID", OtherKey:="ApplicationGeoFenceID", IsForeignKey:=True)>
    Public Property ApplicationGeoFence() As ApplicationGeoFence
        Get
            Return Me._ApplicationGeoFence.Entity
        End Get
        Set
            Dim previousValue As ApplicationGeoFence = Me._ApplicationGeoFence.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._ApplicationGeoFence.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._ApplicationGeoFence.Entity = Nothing
                    previousValue.ApplicationGeoFenceSides.Remove(Me)
                End If
                Me._ApplicationGeoFence.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationGeoFenceSides.Add(Me)
                    Me._ApplicationGeoFenceID = Value.ApplicationGeoFenceID
                Else
                    Me._ApplicationGeoFenceID = CType(Nothing, Nullable(Of System.Guid))
                End If
                Me.SendPropertyChanged("ApplicationGeoFence")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFenceSide_20160615")>
Partial Public Class ApplicationGeoFenceSide_20160615

    Private _ApplicationGeoFenceSideID As System.Guid

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Private _Latitude As String

    Private _Longitude As String

    Private _loadOrder As Integer

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceSideID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationGeoFenceSideID() As System.Guid
        Get
            Return Me._ApplicationGeoFenceSideID
        End Get
        Set
            If ((Me._ApplicationGeoFenceSideID = Value) _
                        = False) Then
                Me._ApplicationGeoFenceSideID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me._ApplicationGeoFenceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=False)>
    Public Property Latitude() As String
        Get
            Return Me._Latitude
        End Get
        Set
            If (String.Equals(Me._Latitude, Value) = False) Then
                Me._Latitude = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=False)>
    Public Property Longitude() As String
        Get
            Return Me._Longitude
        End Get
        Set
            If (String.Equals(Me._Longitude, Value) = False) Then
                Me._Longitude = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadOrder", DbType:="Int NOT NULL")>
    Public Property loadOrder() As Integer
        Get
            Return Me._loadOrder
        End Get
        Set
            If ((Me._loadOrder = Value) _
                        = False) Then
                Me._loadOrder = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationImage")>
Partial Public Class ApplicationImage
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationImageID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Img As System.Data.Linq.Binary

    Private _Name As String

    Private _Type As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationImageID() As System.Guid
        Get
            Return Me._ApplicationImageID
        End Get
        Set
            If ((Me._ApplicationImageID = Value) _
                        = False) Then
                Me.OnApplicationImageIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationImageID = Value
                Me.SendPropertyChanged("ApplicationImageID")
                Me.OnApplicationImageIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Img", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>
    Public Property Img() As System.Data.Linq.Binary
        Get
            Return Me._Img
        End Get
        Set
            If (Object.Equals(Me._Img, Value) = False) Then
                Me.OnImgChanging(Value)
                Me.SendPropertyChanging()
                Me._Img = Value
                Me.SendPropertyChanged("Img")
                Me.OnImgChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(350)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(350)")>
    Public Property Type() As String
        Get
            Return Me._Type
        End Get
        Set
            If (String.Equals(Me._Type, Value) = False) Then
                Me.OnTypeChanging(Value)
                Me.SendPropertyChanging()
                Me._Type = Value
                Me.SendPropertyChanged("Type")
                Me.OnTypeChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationLocation")>
Partial Public Class ApplicationLocation
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationLocationID As System.Guid

    Private _ApplicationID As System.Guid

    Private _Name As String

    Private _Longitude As String

    Private _Lattitude As String

    Private _Address As String

    Private _ApplicationImageID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationLocationIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnLattitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLattitudeChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationLocationID() As System.Guid
        Get
            Return Me._ApplicationLocationID
        End Get
        Set
            If ((Me._ApplicationLocationID = Value) _
                        = False) Then
                Me.OnApplicationLocationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationLocationID = Value
                Me.SendPropertyChanged("ApplicationLocationID")
                Me.OnApplicationLocationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(100)")>
    Public Property Longitude() As String
        Get
            Return Me._Longitude
        End Get
        Set
            If (String.Equals(Me._Longitude, Value) = False) Then
                Me.OnLongitudeChanging(Value)
                Me.SendPropertyChanging()
                Me._Longitude = Value
                Me.SendPropertyChanged("Longitude")
                Me.OnLongitudeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lattitude", DbType:="VarChar(100)")>
    Public Property Lattitude() As String
        Get
            Return Me._Lattitude
        End Get
        Set
            If (String.Equals(Me._Lattitude, Value) = False) Then
                Me.OnLattitudeChanging(Value)
                Me.SendPropertyChanging()
                Me._Lattitude = Value
                Me.SendPropertyChanged("Lattitude")
                Me.OnLattitudeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>
    Public Property Address() As String
        Get
            Return Me._Address
        End Get
        Set
            If (String.Equals(Me._Address, Value) = False) Then
                Me.OnAddressChanging(Value)
                Me.SendPropertyChanging()
                Me._Address = Value
                Me.SendPropertyChanged("Address")
                Me.OnAddressChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier")>
    Public Property ApplicationImageID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationImageID
        End Get
        Set
            If (Me._ApplicationImageID.Equals(Value) = False) Then
                Me.OnApplicationImageIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationImageID = Value
                Me.SendPropertyChanged("ApplicationImageID")
                Me.OnApplicationImageIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationSettingValue")>
Partial Public Class ApplicationSettingValue
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _SettingID As System.Nullable(Of System.Guid)

    Private _Value As String

    Private _ApplicationSettingValueID As System.Guid

    Private _ValueObj As System.Data.Linq.Binary

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

    Private _Setting As EntityRef(Of Setting)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnApplicationSettingValueIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationSettingValueIDChanged()
    End Sub
    Partial Private Sub OnValueObjChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnValueObjChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        Me._Setting = CType(Nothing, EntityRef(Of Setting))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier")>
    Public Property SettingID() As System.Nullable(Of System.Guid)
        Get
            Return Me._SettingID
        End Get
        Set
            If (Me._SettingID.Equals(Value) = False) Then
                If Me._Setting.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnSettingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SettingID = Value
                Me.SendPropertyChanged("SettingID")
                Me.OnSettingIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(MAX)")>
    Public Property Value() As String
        Get
            Return Me._Value
        End Get
        Set
            If (String.Equals(Me._Value, Value) = False) Then
                Me.OnValueChanging(Value)
                Me.SendPropertyChanging()
                Me._Value = Value
                Me.SendPropertyChanged("Value")
                Me.OnValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationSettingValueID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationSettingValueID() As System.Guid
        Get
            Return Me._ApplicationSettingValueID
        End Get
        Set
            If ((Me._ApplicationSettingValueID = Value) _
                        = False) Then
                Me.OnApplicationSettingValueIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationSettingValueID = Value
                Me.SendPropertyChanged("ApplicationSettingValueID")
                Me.OnApplicationSettingValueIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueObj", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>
    Public Property ValueObj() As System.Data.Linq.Binary
        Get
            Return Me._ValueObj
        End Get
        Set
            If (Object.Equals(Me._ValueObj, Value) = False) Then
                Me.OnValueObjChanging(Value)
                Me.SendPropertyChanging()
                Me._ValueObj = Value
                Me.SendPropertyChanged("ValueObj")
                Me.OnValueObjChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationSettingValue", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.ApplicationSettingValues.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationSettingValues.Add(Me)
                    Me._ApplicationID = Value.ApplicationId
                Else
                    Me._ApplicationID = CType(Nothing, Nullable(Of System.Guid))
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Setting_ApplicationSettingValue", Storage:="_Setting", ThisKey:="SettingID", OtherKey:="SettingID", IsForeignKey:=True)>
    Public Property Setting() As Setting
        Get
            Return Me._Setting.Entity
        End Get
        Set
            Dim previousValue As Setting = Me._Setting.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._Setting.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._Setting.Entity = Nothing
                    previousValue.ApplicationSettingValues.Remove(Me)
                End If
                Me._Setting.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationSettingValues.Add(Me)
                    Me._SettingID = Value.SettingID
                Else
                    Me._SettingID = CType(Nothing, Nullable(Of System.Guid))
                End If
                Me.SendPropertyChanged("Setting")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationTimeZone")>
Partial Public Class ApplicationTimeZone
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationID As System.Guid

    Private _timeZoneID As String

    Private _timeZoneDesc As String

    Private _TimeZoneSerialzed As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OntimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneIDChanged()
    End Sub
    Partial Private Sub OntimeZoneDescChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneDescChanged()
    End Sub
    Partial Private Sub OnTimeZoneSerialzedChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSerialzedChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZoneID", DbType:="VarChar(500)")>
    Public Property timeZoneID() As String
        Get
            Return Me._timeZoneID
        End Get
        Set
            If (String.Equals(Me._timeZoneID, Value) = False) Then
                Me.OntimeZoneIDChanging(Value)
                Me.SendPropertyChanging()
                Me._timeZoneID = Value
                Me.SendPropertyChanged("timeZoneID")
                Me.OntimeZoneIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZoneDesc", DbType:="VarChar(500)")>
    Public Property timeZoneDesc() As String
        Get
            Return Me._timeZoneDesc
        End Get
        Set
            If (String.Equals(Me._timeZoneDesc, Value) = False) Then
                Me.OntimeZoneDescChanging(Value)
                Me.SendPropertyChanging()
                Me._timeZoneDesc = Value
                Me.SendPropertyChanged("timeZoneDesc")
                Me.OntimeZoneDescChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSerialzed", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=False)>
    Public Property TimeZoneSerialzed() As String
        Get
            Return Me._TimeZoneSerialzed
        End Get
        Set
            If (String.Equals(Me._TimeZoneSerialzed, Value) = False) Then
                Me.OnTimeZoneSerialzedChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneSerialzed = Value
                Me.SendPropertyChanged("TimeZoneSerialzed")
                Me.OnTimeZoneSerialzedChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicle")>
Partial Public Class ApplicationVehicle
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationVehicleID As System.Guid

    Private _Name As String

    Private _Registration As String

    Private _Notes As String

    Private _DeviceID As String

    Private _ApplicationID As System.Guid

    Private _VINNumber As String

    Private _ApplicationImageID As System.Nullable(Of System.Guid)

    Private _CAN_Protocol_Type As String

    Private _BusinessLocation As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRegistrationChanging(value As String)
    End Sub
    Partial Private Sub OnRegistrationChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnVINNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVINNumberChanged()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    Partial Private Sub OnCAN_Protocol_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnCAN_Protocol_TypeChanged()
    End Sub
    Partial Private Sub OnBusinessLocationChanging(value As String)
    End Sub
    Partial Private Sub OnBusinessLocationChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationVehicleID() As System.Guid
        Get
            Return Me._ApplicationVehicleID
        End Get
        Set
            If ((Me._ApplicationVehicleID = Value) _
                        = False) Then
                Me.OnApplicationVehicleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationVehicleID = Value
                Me.SendPropertyChanged("ApplicationVehicleID")
                Me.OnApplicationVehicleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Registration", DbType:="VarChar(50)")>
    Public Property Registration() As String
        Get
            Return Me._Registration
        End Get
        Set
            If (String.Equals(Me._Registration, Value) = False) Then
                Me.OnRegistrationChanging(Value)
                Me.SendPropertyChanging()
                Me._Registration = Value
                Me.SendPropertyChanged("Registration")
                Me.OnRegistrationChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me.OnDeviceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DeviceID = Value
                Me.SendPropertyChanged("DeviceID")
                Me.OnDeviceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VINNumber", DbType:="VarChar(100)")>
    Public Property VINNumber() As String
        Get
            Return Me._VINNumber
        End Get
        Set
            If (String.Equals(Me._VINNumber, Value) = False) Then
                Me.OnVINNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._VINNumber = Value
                Me.SendPropertyChanged("VINNumber")
                Me.OnVINNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier")>
    Public Property ApplicationImageID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationImageID
        End Get
        Set
            If (Me._ApplicationImageID.Equals(Value) = False) Then
                Me.OnApplicationImageIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationImageID = Value
                Me.SendPropertyChanged("ApplicationImageID")
                Me.OnApplicationImageIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_Protocol_Type", DbType:="VarChar(100)")>
    Public Property CAN_Protocol_Type() As String
        Get
            Return Me._CAN_Protocol_Type
        End Get
        Set
            If (String.Equals(Me._CAN_Protocol_Type, Value) = False) Then
                Me.OnCAN_Protocol_TypeChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_Protocol_Type = Value
                Me.SendPropertyChanged("CAN_Protocol_Type")
                Me.OnCAN_Protocol_TypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessLocation", DbType:="VarChar(MAX)")>
    Public Property BusinessLocation() As String
        Get
            Return Me._BusinessLocation
        End Get
        Set
            If (String.Equals(Me._BusinessLocation, Value) = False) Then
                Me.OnBusinessLocationChanging(Value)
                Me.SendPropertyChanging()
                Me._BusinessLocation = Value
                Me.SendPropertyChanged("BusinessLocation")
                Me.OnBusinessLocationChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicleDriverTime")>
Partial Public Class ApplicationVehicleDriverTime
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationVehicleDriverTimeID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _VehicleID As System.Nullable(Of System.Guid)

    Private _StartDateTime As System.Nullable(Of Date)

    Private _EndDateTime As System.Nullable(Of Date)

    Private _Notes As String

    Private _ApplicationDriverID As System.Guid

    Private _PassengerID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationVehicleDriverTimeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleDriverTimeIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
    Partial Private Sub OnStartDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateTimeChanged()
    End Sub
    Partial Private Sub OnEndDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateTimeChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnPassengerIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPassengerIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationVehicleDriverTimeID() As System.Guid
        Get
            Return Me._ApplicationVehicleDriverTimeID
        End Get
        Set
            If ((Me._ApplicationVehicleDriverTimeID = Value) _
                        = False) Then
                Me.OnApplicationVehicleDriverTimeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationVehicleDriverTimeID = Value
                Me.SendPropertyChanged("ApplicationVehicleDriverTimeID")
                Me.OnApplicationVehicleDriverTimeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier")>
    Public Property VehicleID() As System.Nullable(Of System.Guid)
        Get
            Return Me._VehicleID
        End Get
        Set
            If (Me._VehicleID.Equals(Value) = False) Then
                Me.OnVehicleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._VehicleID = Value
                Me.SendPropertyChanged("VehicleID")
                Me.OnVehicleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>
    Public Property StartDateTime() As System.Nullable(Of Date)
        Get
            Return Me._StartDateTime
        End Get
        Set
            If (Me._StartDateTime.Equals(Value) = False) Then
                Me.OnStartDateTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._StartDateTime = Value
                Me.SendPropertyChanged("StartDateTime")
                Me.OnStartDateTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>
    Public Property EndDateTime() As System.Nullable(Of Date)
        Get
            Return Me._EndDateTime
        End Get
        Set
            If (Me._EndDateTime.Equals(Value) = False) Then
                Me.OnEndDateTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._EndDateTime = Value
                Me.SendPropertyChanged("EndDateTime")
                Me.OnEndDateTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationDriverID() As System.Guid
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If ((Me._ApplicationDriverID = Value) _
                        = False) Then
                Me.OnApplicationDriverIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationDriverID = Value
                Me.SendPropertyChanged("ApplicationDriverID")
                Me.OnApplicationDriverIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>
    Public Property PassengerID() As System.Nullable(Of System.Guid)
        Get
            Return Me._PassengerID
        End Get
        Set
            If (Me._PassengerID.Equals(Value) = False) Then
                Me.OnPassengerIDChanging(Value)
                Me.SendPropertyChanging()
                Me._PassengerID = Value
                Me.SendPropertyChanged("PassengerID")
                Me.OnPassengerIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicleOdometerReading")>
Partial Public Class ApplicationVehicleOdometerReading
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _AppliationVehicleOdometerReadingID As System.Guid

    Private _OdometerReading As System.Nullable(Of Decimal)

    Private _ApplicationVehicleID As System.Guid

    Private _TimeReadingTaken As System.Nullable(Of Date)

    Private _RecordCreatedDate As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAppliationVehicleOdometerReadingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAppliationVehicleOdometerReadingIDChanged()
    End Sub
    Partial Private Sub OnOdometerReadingChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOdometerReadingChanged()
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanged()
    End Sub
    Partial Private Sub OnTimeReadingTakenChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTimeReadingTakenChanged()
    End Sub
    Partial Private Sub OnRecordCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRecordCreatedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppliationVehicleOdometerReadingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property AppliationVehicleOdometerReadingID() As System.Guid
        Get
            Return Me._AppliationVehicleOdometerReadingID
        End Get
        Set
            If ((Me._AppliationVehicleOdometerReadingID = Value) _
                        = False) Then
                Me.OnAppliationVehicleOdometerReadingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AppliationVehicleOdometerReadingID = Value
                Me.SendPropertyChanged("AppliationVehicleOdometerReadingID")
                Me.OnAppliationVehicleOdometerReadingIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdometerReading", DbType:="Decimal(18,2)")>
    Public Property OdometerReading() As System.Nullable(Of Decimal)
        Get
            Return Me._OdometerReading
        End Get
        Set
            If (Me._OdometerReading.Equals(Value) = False) Then
                Me.OnOdometerReadingChanging(Value)
                Me.SendPropertyChanging()
                Me._OdometerReading = Value
                Me.SendPropertyChanged("OdometerReading")
                Me.OnOdometerReadingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationVehicleID() As System.Guid
        Get
            Return Me._ApplicationVehicleID
        End Get
        Set
            If ((Me._ApplicationVehicleID = Value) _
                        = False) Then
                Me.OnApplicationVehicleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationVehicleID = Value
                Me.SendPropertyChanged("ApplicationVehicleID")
                Me.OnApplicationVehicleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeReadingTaken", DbType:="DateTime")>
    Public Property TimeReadingTaken() As System.Nullable(Of Date)
        Get
            Return Me._TimeReadingTaken
        End Get
        Set
            If (Me._TimeReadingTaken.Equals(Value) = False) Then
                Me.OnTimeReadingTakenChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeReadingTaken = Value
                Me.SendPropertyChanged("TimeReadingTaken")
                Me.OnTimeReadingTakenChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordCreatedDate", DbType:="DateTime")>
    Public Property RecordCreatedDate() As System.Nullable(Of Date)
        Get
            Return Me._RecordCreatedDate
        End Get
        Set
            If (Me._RecordCreatedDate.Equals(Value) = False) Then
                Me.OnRecordCreatedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._RecordCreatedDate = Value
                Me.SendPropertyChanged("RecordCreatedDate")
                Me.OnRecordCreatedDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Applications")>
Partial Public Class aspnet_Application
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationName As String

    Private _LoweredApplicationName As String

    Private _ApplicationId As System.Guid

    Private _Description As String

    Private _TimeZoneSerialisedObj As String

    Private _TimeZoneID As String

    Private _TimeZoneOffset As String

    Private _TimeZoneDSTOffset As String

    Private _TimezoneDescription As String

    Private _DefaultApplicationLocationID As System.Nullable(Of System.Guid)

    Private _ApplicationFeatures As EntitySet(Of ApplicationFeature)

    Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)

    Private _ApplicationGeoFences As EntitySet(Of ApplicationGeoFence)

    Private _ApplicationSettingValues As EntitySet(Of ApplicationSettingValue)

    Private _aspnet_Memberships As EntitySet(Of aspnet_Membership)

    Private _aspnet_Paths As EntitySet(Of aspnet_Path)

    Private _aspnet_Roles As EntitySet(Of aspnet_Role)

    Private _aspnet_Users As EntitySet(Of aspnet_User)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTimeZoneSerialisedObjChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSerialisedObjChanged()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanged()
    End Sub
    Partial Private Sub OnTimeZoneDSTOffsetChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneDSTOffsetChanged()
    End Sub
    Partial Private Sub OnTimezoneDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnTimezoneDescriptionChanged()
    End Sub
    Partial Private Sub OnDefaultApplicationLocationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDefaultApplicationLocationIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationFeatures = New EntitySet(Of ApplicationFeature)(AddressOf Me.attach_ApplicationFeatures, AddressOf Me.detach_ApplicationFeatures)
        Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
        Me._ApplicationGeoFences = New EntitySet(Of ApplicationGeoFence)(AddressOf Me.attach_ApplicationGeoFences, AddressOf Me.detach_ApplicationGeoFences)
        Me._ApplicationSettingValues = New EntitySet(Of ApplicationSettingValue)(AddressOf Me.attach_ApplicationSettingValues, AddressOf Me.detach_ApplicationSettingValues)
        Me._aspnet_Memberships = New EntitySet(Of aspnet_Membership)(AddressOf Me.attach_aspnet_Memberships, AddressOf Me.detach_aspnet_Memberships)
        Me._aspnet_Paths = New EntitySet(Of aspnet_Path)(AddressOf Me.attach_aspnet_Paths, AddressOf Me.detach_aspnet_Paths)
        Me._aspnet_Roles = New EntitySet(Of aspnet_Role)(AddressOf Me.attach_aspnet_Roles, AddressOf Me.detach_aspnet_Roles)
        Me._aspnet_Users = New EntitySet(Of aspnet_User)(AddressOf Me.attach_aspnet_Users, AddressOf Me.detach_aspnet_Users)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property ApplicationName() As String
        Get
            Return Me._ApplicationName
        End Get
        Set
            If (String.Equals(Me._ApplicationName, Value) = False) Then
                Me.OnApplicationNameChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationName = Value
                Me.SendPropertyChanged("ApplicationName")
                Me.OnApplicationNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property LoweredApplicationName() As String
        Get
            Return Me._LoweredApplicationName
        End Get
        Set
            If (String.Equals(Me._LoweredApplicationName, Value) = False) Then
                Me.OnLoweredApplicationNameChanging(Value)
                Me.SendPropertyChanging()
                Me._LoweredApplicationName = Value
                Me.SendPropertyChanged("LoweredApplicationName")
                Me.OnLoweredApplicationNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSerialisedObj", DbType:="VarChar(MAX)")>
    Public Property TimeZoneSerialisedObj() As String
        Get
            Return Me._TimeZoneSerialisedObj
        End Get
        Set
            If (String.Equals(Me._TimeZoneSerialisedObj, Value) = False) Then
                Me.OnTimeZoneSerialisedObjChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneSerialisedObj = Value
                Me.SendPropertyChanged("TimeZoneSerialisedObj")
                Me.OnTimeZoneSerialisedObjChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", DbType:="VarChar(100)")>
    Public Property TimeZoneID() As String
        Get
            Return Me._TimeZoneID
        End Get
        Set
            If (String.Equals(Me._TimeZoneID, Value) = False) Then
                Me.OnTimeZoneIDChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneID = Value
                Me.SendPropertyChanged("TimeZoneID")
                Me.OnTimeZoneIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneOffset", DbType:="NChar(10)")>
    Public Property TimeZoneOffset() As String
        Get
            Return Me._TimeZoneOffset
        End Get
        Set
            If (String.Equals(Me._TimeZoneOffset, Value) = False) Then
                Me.OnTimeZoneOffsetChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneOffset = Value
                Me.SendPropertyChanged("TimeZoneOffset")
                Me.OnTimeZoneOffsetChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneDSTOffset", DbType:="NChar(10)")>
    Public Property TimeZoneDSTOffset() As String
        Get
            Return Me._TimeZoneDSTOffset
        End Get
        Set
            If (String.Equals(Me._TimeZoneDSTOffset, Value) = False) Then
                Me.OnTimeZoneDSTOffsetChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneDSTOffset = Value
                Me.SendPropertyChanged("TimeZoneDSTOffset")
                Me.OnTimeZoneDSTOffsetChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimezoneDescription", DbType:="VarChar(500)")>
    Public Property TimezoneDescription() As String
        Get
            Return Me._TimezoneDescription
        End Get
        Set
            If (String.Equals(Me._TimezoneDescription, Value) = False) Then
                Me.OnTimezoneDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._TimezoneDescription = Value
                Me.SendPropertyChanged("TimezoneDescription")
                Me.OnTimezoneDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultApplicationLocationID", DbType:="UniqueIdentifier")>
    Public Property DefaultApplicationLocationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._DefaultApplicationLocationID
        End Get
        Set
            If (Me._DefaultApplicationLocationID.Equals(Value) = False) Then
                Me.OnDefaultApplicationLocationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DefaultApplicationLocationID = Value
                Me.SendPropertyChanged("DefaultApplicationLocationID")
                Me.OnDefaultApplicationLocationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeature", Storage:="_ApplicationFeatures", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>
    Public Property ApplicationFeatures() As EntitySet(Of ApplicationFeature)
        Get
            Return Me._ApplicationFeatures
        End Get
        Set
            Me._ApplicationFeatures.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>
    Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
        Get
            Return Me._ApplicationFeatureRoles
        End Get
        Set
            Me._ApplicationFeatureRoles.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationGeoFence", Storage:="_ApplicationGeoFences", ThisKey:="ApplicationId", OtherKey:="ApplictionID")>
    Public Property ApplicationGeoFences() As EntitySet(Of ApplicationGeoFence)
        Get
            Return Me._ApplicationGeoFences
        End Get
        Set
            Me._ApplicationGeoFences.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationSettingValue", Storage:="_ApplicationSettingValues", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>
    Public Property ApplicationSettingValues() As EntitySet(Of ApplicationSettingValue)
        Get
            Return Me._ApplicationSettingValues
        End Get
        Set
            Me._ApplicationSettingValues.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Memberships", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>
    Public Property aspnet_Memberships() As EntitySet(Of aspnet_Membership)
        Get
            Return Me._aspnet_Memberships
        End Get
        Set
            Me._aspnet_Memberships.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Path", Storage:="_aspnet_Paths", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>
    Public Property aspnet_Paths() As EntitySet(Of aspnet_Path)
        Get
            Return Me._aspnet_Paths
        End Get
        Set
            Me._aspnet_Paths.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Roles", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>
    Public Property aspnet_Roles() As EntitySet(Of aspnet_Role)
        Get
            Return Me._aspnet_Roles
        End Get
        Set
            Me._aspnet_Roles.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Users", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>
    Public Property aspnet_Users() As EntitySet(Of aspnet_User)
        Get
            Return Me._aspnet_Users
        End Get
        Set
            Me._aspnet_Users.Assign(Value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_ApplicationFeatures(ByVal entity As ApplicationFeature)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_ApplicationFeatures(ByVal entity As ApplicationFeature)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_ApplicationGeoFences(ByVal entity As ApplicationGeoFence)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_ApplicationGeoFences(ByVal entity As ApplicationGeoFence)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_aspnet_Memberships(ByVal entity As aspnet_Membership)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_aspnet_Memberships(ByVal entity As aspnet_Membership)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_aspnet_Paths(ByVal entity As aspnet_Path)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_aspnet_Paths(ByVal entity As aspnet_Path)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_aspnet_Roles(ByVal entity As aspnet_Role)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_aspnet_Roles(ByVal entity As aspnet_Role)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub

    Private Sub attach_aspnet_Users(ByVal entity As aspnet_User)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Me
    End Sub

    Private Sub detach_aspnet_Users(ByVal entity As aspnet_User)
        Me.SendPropertyChanging()
        entity.aspnet_Application = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Membership")>
Partial Public Class aspnet_Membership
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Guid

    Private _UserId As System.Guid

    Private _Password As String

    Private _PasswordFormat As Integer

    Private _PasswordSalt As String

    Private _MobilePIN As String

    Private _Email As String

    Private _LoweredEmail As String

    Private _PasswordQuestion As String

    Private _PasswordAnswer As String

    Private _IsApproved As Boolean

    Private _IsLockedOut As Boolean

    Private _CreateDate As Date

    Private _LastLoginDate As Date

    Private _LastPasswordChangedDate As Date

    Private _LastLockoutDate As Date

    Private _FailedPasswordAttemptCount As Integer

    Private _FailedPasswordAttemptWindowStart As Date

    Private _FailedPasswordAnswerAttemptCount As Integer

    Private _FailedPasswordAnswerAttemptWindowStart As Date

    Private _Comment As String

    Private _Mobile As String

    Private _TimeZoneSyncObj As String

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

    Private _aspnet_User As EntityRef(Of aspnet_User)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPasswordFormatChanging(value As Integer)
    End Sub
    Partial Private Sub OnPasswordFormatChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnMobilePINChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePINChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnLoweredEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredEmailChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnIsLockedOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLockedOutChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnLastLockoutDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLockoutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnTimeZoneSyncObjChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSyncObjChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property UserId() As System.Guid
        Get
            Return Me._UserId
        End Get
        Set
            If ((Me._UserId = Value) _
                        = False) Then
                If Me._aspnet_User.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnUserIdChanging(Value)
                Me.SendPropertyChanging()
                Me._UserId = Value
                Me.SendPropertyChanged("UserId")
                Me.OnUserIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128) NOT NULL", CanBeNull:=False)>
    Public Property Password() As String
        Get
            Return Me._Password
        End Get
        Set
            If (String.Equals(Me._Password, Value) = False) Then
                Me.OnPasswordChanging(Value)
                Me.SendPropertyChanging()
                Me._Password = Value
                Me.SendPropertyChanged("Password")
                Me.OnPasswordChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordFormat", DbType:="Int NOT NULL")>
    Public Property PasswordFormat() As Integer
        Get
            Return Me._PasswordFormat
        End Get
        Set
            If ((Me._PasswordFormat = Value) _
                        = False) Then
                Me.OnPasswordFormatChanging(Value)
                Me.SendPropertyChanging()
                Me._PasswordFormat = Value
                Me.SendPropertyChanged("PasswordFormat")
                Me.OnPasswordFormatChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="NVarChar(128) NOT NULL", CanBeNull:=False)>
    Public Property PasswordSalt() As String
        Get
            Return Me._PasswordSalt
        End Get
        Set
            If (String.Equals(Me._PasswordSalt, Value) = False) Then
                Me.OnPasswordSaltChanging(Value)
                Me.SendPropertyChanging()
                Me._PasswordSalt = Value
                Me.SendPropertyChanged("PasswordSalt")
                Me.OnPasswordSaltChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePIN", DbType:="NVarChar(16)")>
    Public Property MobilePIN() As String
        Get
            Return Me._MobilePIN
        End Get
        Set
            If (String.Equals(Me._MobilePIN, Value) = False) Then
                Me.OnMobilePINChanging(Value)
                Me.SendPropertyChanging()
                Me._MobilePIN = Value
                Me.SendPropertyChanged("MobilePIN")
                Me.OnMobilePINChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>
    Public Property Email() As String
        Get
            Return Me._Email
        End Get
        Set
            If (String.Equals(Me._Email, Value) = False) Then
                Me.OnEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._Email = Value
                Me.SendPropertyChanged("Email")
                Me.OnEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredEmail", DbType:="NVarChar(256)")>
    Public Property LoweredEmail() As String
        Get
            Return Me._LoweredEmail
        End Get
        Set
            If (String.Equals(Me._LoweredEmail, Value) = False) Then
                Me.OnLoweredEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._LoweredEmail = Value
                Me.SendPropertyChanged("LoweredEmail")
                Me.OnLoweredEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>
    Public Property PasswordQuestion() As String
        Get
            Return Me._PasswordQuestion
        End Get
        Set
            If (String.Equals(Me._PasswordQuestion, Value) = False) Then
                Me.OnPasswordQuestionChanging(Value)
                Me.SendPropertyChanging()
                Me._PasswordQuestion = Value
                Me.SendPropertyChanged("PasswordQuestion")
                Me.OnPasswordQuestionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>
    Public Property PasswordAnswer() As String
        Get
            Return Me._PasswordAnswer
        End Get
        Set
            If (String.Equals(Me._PasswordAnswer, Value) = False) Then
                Me.OnPasswordAnswerChanging(Value)
                Me.SendPropertyChanging()
                Me._PasswordAnswer = Value
                Me.SendPropertyChanged("PasswordAnswer")
                Me.OnPasswordAnswerChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit NOT NULL")>
    Public Property IsApproved() As Boolean
        Get
            Return Me._IsApproved
        End Get
        Set
            If ((Me._IsApproved = Value) _
                        = False) Then
                Me.OnIsApprovedChanging(Value)
                Me.SendPropertyChanging()
                Me._IsApproved = Value
                Me.SendPropertyChanged("IsApproved")
                Me.OnIsApprovedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLockedOut", DbType:="Bit NOT NULL")>
    Public Property IsLockedOut() As Boolean
        Get
            Return Me._IsLockedOut
        End Get
        Set
            If ((Me._IsLockedOut = Value) _
                        = False) Then
                Me.OnIsLockedOutChanging(Value)
                Me.SendPropertyChanging()
                Me._IsLockedOut = Value
                Me.SendPropertyChanged("IsLockedOut")
                Me.OnIsLockedOutChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>
    Public Property CreateDate() As Date
        Get
            Return Me._CreateDate
        End Get
        Set
            If ((Me._CreateDate = Value) _
                        = False) Then
                Me.OnCreateDateChanging(Value)
                Me.SendPropertyChanging()
                Me._CreateDate = Value
                Me.SendPropertyChanged("CreateDate")
                Me.OnCreateDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>
    Public Property LastLoginDate() As Date
        Get
            Return Me._LastLoginDate
        End Get
        Set
            If ((Me._LastLoginDate = Value) _
                        = False) Then
                Me.OnLastLoginDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastLoginDate = Value
                Me.SendPropertyChanged("LastLoginDate")
                Me.OnLastLoginDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime NOT NULL")>
    Public Property LastPasswordChangedDate() As Date
        Get
            Return Me._LastPasswordChangedDate
        End Get
        Set
            If ((Me._LastPasswordChangedDate = Value) _
                        = False) Then
                Me.OnLastPasswordChangedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastPasswordChangedDate = Value
                Me.SendPropertyChanged("LastPasswordChangedDate")
                Me.OnLastPasswordChangedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockoutDate", DbType:="DateTime NOT NULL")>
    Public Property LastLockoutDate() As Date
        Get
            Return Me._LastLockoutDate
        End Get
        Set
            If ((Me._LastLockoutDate = Value) _
                        = False) Then
                Me.OnLastLockoutDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastLockoutDate = Value
                Me.SendPropertyChanged("LastLockoutDate")
                Me.OnLastLockoutDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int NOT NULL")>
    Public Property FailedPasswordAttemptCount() As Integer
        Get
            Return Me._FailedPasswordAttemptCount
        End Get
        Set
            If ((Me._FailedPasswordAttemptCount = Value) _
                        = False) Then
                Me.OnFailedPasswordAttemptCountChanging(Value)
                Me.SendPropertyChanging()
                Me._FailedPasswordAttemptCount = Value
                Me.SendPropertyChanged("FailedPasswordAttemptCount")
                Me.OnFailedPasswordAttemptCountChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime NOT NULL")>
    Public Property FailedPasswordAttemptWindowStart() As Date
        Get
            Return Me._FailedPasswordAttemptWindowStart
        End Get
        Set
            If ((Me._FailedPasswordAttemptWindowStart = Value) _
                        = False) Then
                Me.OnFailedPasswordAttemptWindowStartChanging(Value)
                Me.SendPropertyChanging()
                Me._FailedPasswordAttemptWindowStart = Value
                Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
                Me.OnFailedPasswordAttemptWindowStartChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int NOT NULL")>
    Public Property FailedPasswordAnswerAttemptCount() As Integer
        Get
            Return Me._FailedPasswordAnswerAttemptCount
        End Get
        Set
            If ((Me._FailedPasswordAnswerAttemptCount = Value) _
                        = False) Then
                Me.OnFailedPasswordAnswerAttemptCountChanging(Value)
                Me.SendPropertyChanging()
                Me._FailedPasswordAnswerAttemptCount = Value
                Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
                Me.OnFailedPasswordAnswerAttemptCountChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowStart", DbType:="DateTime NOT NULL")>
    Public Property FailedPasswordAnswerAttemptWindowStart() As Date
        Get
            Return Me._FailedPasswordAnswerAttemptWindowStart
        End Get
        Set
            If ((Me._FailedPasswordAnswerAttemptWindowStart = Value) _
                        = False) Then
                Me.OnFailedPasswordAnswerAttemptWindowStartChanging(Value)
                Me.SendPropertyChanging()
                Me._FailedPasswordAnswerAttemptWindowStart = Value
                Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart")
                Me.OnFailedPasswordAnswerAttemptWindowStartChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
    Public Property Comment() As String
        Get
            Return Me._Comment
        End Get
        Set
            If (String.Equals(Me._Comment, Value) = False) Then
                Me.OnCommentChanging(Value)
                Me.SendPropertyChanging()
                Me._Comment = Value
                Me.SendPropertyChanged("Comment")
                Me.OnCommentChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(100)")>
    Public Property Mobile() As String
        Get
            Return Me._Mobile
        End Get
        Set
            If (String.Equals(Me._Mobile, Value) = False) Then
                Me.OnMobileChanging(Value)
                Me.SendPropertyChanging()
                Me._Mobile = Value
                Me.SendPropertyChanged("Mobile")
                Me.OnMobileChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSyncObj", DbType:="VarChar(8000)")>
    Public Property TimeZoneSyncObj() As String
        Get
            Return Me._TimeZoneSyncObj
        End Get
        Set
            If (String.Equals(Me._TimeZoneSyncObj, Value) = False) Then
                Me.OnTimeZoneSyncObjChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneSyncObj = Value
                Me.SendPropertyChanged("TimeZoneSyncObj")
                Me.OnTimeZoneSyncObjChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.aspnet_Memberships.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_Memberships.Add(Me)
                    Me._ApplicationId = Value.ApplicationId
                Else
                    Me._ApplicationId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=True)>
    Public Property aspnet_User() As aspnet_User
        Get
            Return Me._aspnet_User.Entity
        End Get
        Set
            Dim previousValue As aspnet_User = Me._aspnet_User.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_User.Entity = Nothing
                    previousValue.aspnet_Membership = Nothing
                End If
                Me._aspnet_User.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_Membership = Me
                    Me._UserId = Value.UserId
                Else
                    Me._UserId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_User")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Paths")>
Partial Public Class aspnet_Path
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Guid

    Private _PathId As System.Guid

    Private _Path As String

    Private _LoweredPath As String

    Private _aspnet_PersonalizationAllUser As EntityRef(Of aspnet_PersonalizationAllUser)

    Private _aspnet_PersonalizationPerUsers As EntitySet(Of aspnet_PersonalizationPerUser)

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnLoweredPathChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredPathChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_PersonalizationAllUser = CType(Nothing, EntityRef(Of aspnet_PersonalizationAllUser))
        Me._aspnet_PersonalizationPerUsers = New EntitySet(Of aspnet_PersonalizationPerUser)(AddressOf Me.attach_aspnet_PersonalizationPerUsers, AddressOf Me.detach_aspnet_PersonalizationPerUsers)
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property PathId() As System.Guid
        Get
            Return Me._PathId
        End Get
        Set
            If ((Me._PathId = Value) _
                        = False) Then
                Me.OnPathIdChanging(Value)
                Me.SendPropertyChanging()
                Me._PathId = Value
                Me.SendPropertyChanged("PathId")
                Me.OnPathIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property Path() As String
        Get
            Return Me._Path
        End Get
        Set
            If (String.Equals(Me._Path, Value) = False) Then
                Me.OnPathChanging(Value)
                Me.SendPropertyChanging()
                Me._Path = Value
                Me.SendPropertyChanged("Path")
                Me.OnPathChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredPath", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property LoweredPath() As String
        Get
            Return Me._LoweredPath
        End Get
        Set
            If (String.Equals(Me._LoweredPath, Value) = False) Then
                Me.OnLoweredPathChanging(Value)
                Me.SendPropertyChanging()
                Me._LoweredPath = Value
                Me.SendPropertyChanged("LoweredPath")
                Me.OnLoweredPathChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationAllUser", Storage:="_aspnet_PersonalizationAllUser", ThisKey:="PathId", OtherKey:="PathId", IsUnique:=True, IsForeignKey:=False)>
    Public Property aspnet_PersonalizationAllUser() As aspnet_PersonalizationAllUser
        Get
            Return Me._aspnet_PersonalizationAllUser.Entity
        End Get
        Set
            Dim previousValue As aspnet_PersonalizationAllUser = Me._aspnet_PersonalizationAllUser.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_PersonalizationAllUser.Entity = Nothing
                    previousValue.aspnet_Path = Nothing
                End If
                Me._aspnet_PersonalizationAllUser.Entity = Value
                If (Object.Equals(Value, Nothing) = False) Then
                    Value.aspnet_Path = Me
                End If
                Me.SendPropertyChanged("aspnet_PersonalizationAllUser")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationPerUser", Storage:="_aspnet_PersonalizationPerUsers", ThisKey:="PathId", OtherKey:="PathId")>
    Public Property aspnet_PersonalizationPerUsers() As EntitySet(Of aspnet_PersonalizationPerUser)
        Get
            Return Me._aspnet_PersonalizationPerUsers
        End Get
        Set
            Me._aspnet_PersonalizationPerUsers.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Path", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.aspnet_Paths.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_Paths.Add(Me)
                    Me._ApplicationId = Value.ApplicationId
                Else
                    Me._ApplicationId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
        Me.SendPropertyChanging()
        entity.aspnet_Path = Me
    End Sub

    Private Sub detach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
        Me.SendPropertyChanging()
        entity.aspnet_Path = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_PersonalizationAllUsers")>
Partial Public Class aspnet_PersonalizationAllUser
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _PathId As System.Guid

    Private _PageSettings As System.Data.Linq.Binary

    Private _LastUpdatedDate As Date

    Private _aspnet_Path As EntityRef(Of aspnet_Path)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnPageSettingsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPageSettingsChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Path = CType(Nothing, EntityRef(Of aspnet_Path))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property PathId() As System.Guid
        Get
            Return Me._PathId
        End Get
        Set
            If ((Me._PathId = Value) _
                        = False) Then
                If Me._aspnet_Path.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnPathIdChanging(Value)
                Me.SendPropertyChanging()
                Me._PathId = Value
                Me.SendPropertyChanged("PathId")
                Me.OnPathIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageSettings", DbType:="Image NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)>
    Public Property PageSettings() As System.Data.Linq.Binary
        Get
            Return Me._PageSettings
        End Get
        Set
            If (Object.Equals(Me._PageSettings, Value) = False) Then
                Me.OnPageSettingsChanging(Value)
                Me.SendPropertyChanging()
                Me._PageSettings = Value
                Me.SendPropertyChanged("PageSettings")
                Me.OnPageSettingsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>
    Public Property LastUpdatedDate() As Date
        Get
            Return Me._LastUpdatedDate
        End Get
        Set
            If ((Me._LastUpdatedDate = Value) _
                        = False) Then
                Me.OnLastUpdatedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastUpdatedDate = Value
                Me.SendPropertyChanged("LastUpdatedDate")
                Me.OnLastUpdatedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationAllUser", Storage:="_aspnet_Path", ThisKey:="PathId", OtherKey:="PathId", IsForeignKey:=True)>
    Public Property aspnet_Path() As aspnet_Path
        Get
            Return Me._aspnet_Path.Entity
        End Get
        Set
            Dim previousValue As aspnet_Path = Me._aspnet_Path.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Path.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Path.Entity = Nothing
                    previousValue.aspnet_PersonalizationAllUser = Nothing
                End If
                Me._aspnet_Path.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_PersonalizationAllUser = Me
                    Me._PathId = Value.PathId
                Else
                    Me._PathId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Path")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_PersonalizationPerUser")>
Partial Public Class aspnet_PersonalizationPerUser
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _Id As System.Guid

    Private _PathId As System.Nullable(Of System.Guid)

    Private _UserId As System.Nullable(Of System.Guid)

    Private _PageSettings As System.Data.Linq.Binary

    Private _LastUpdatedDate As Date

    Private _aspnet_Path As EntityRef(Of aspnet_Path)

    Private _aspnet_User As EntityRef(Of aspnet_User)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPageSettingsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPageSettingsChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Path = CType(Nothing, EntityRef(Of aspnet_Path))
        Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property Id() As System.Guid
        Get
            Return Me._Id
        End Get
        Set
            If ((Me._Id = Value) _
                        = False) Then
                Me.OnIdChanging(Value)
                Me.SendPropertyChanging()
                Me._Id = Value
                Me.SendPropertyChanged("Id")
                Me.OnIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier")>
    Public Property PathId() As System.Nullable(Of System.Guid)
        Get
            Return Me._PathId
        End Get
        Set
            If (Me._PathId.Equals(Value) = False) Then
                If Me._aspnet_Path.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnPathIdChanging(Value)
                Me.SendPropertyChanging()
                Me._PathId = Value
                Me.SendPropertyChanged("PathId")
                Me.OnPathIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier")>
    Public Property UserId() As System.Nullable(Of System.Guid)
        Get
            Return Me._UserId
        End Get
        Set
            If (Me._UserId.Equals(Value) = False) Then
                If Me._aspnet_User.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnUserIdChanging(Value)
                Me.SendPropertyChanging()
                Me._UserId = Value
                Me.SendPropertyChanged("UserId")
                Me.OnUserIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageSettings", DbType:="Image NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)>
    Public Property PageSettings() As System.Data.Linq.Binary
        Get
            Return Me._PageSettings
        End Get
        Set
            If (Object.Equals(Me._PageSettings, Value) = False) Then
                Me.OnPageSettingsChanging(Value)
                Me.SendPropertyChanging()
                Me._PageSettings = Value
                Me.SendPropertyChanged("PageSettings")
                Me.OnPageSettingsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>
    Public Property LastUpdatedDate() As Date
        Get
            Return Me._LastUpdatedDate
        End Get
        Set
            If ((Me._LastUpdatedDate = Value) _
                        = False) Then
                Me.OnLastUpdatedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastUpdatedDate = Value
                Me.SendPropertyChanged("LastUpdatedDate")
                Me.OnLastUpdatedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationPerUser", Storage:="_aspnet_Path", ThisKey:="PathId", OtherKey:="PathId", IsForeignKey:=True)>
    Public Property aspnet_Path() As aspnet_Path
        Get
            Return Me._aspnet_Path.Entity
        End Get
        Set
            Dim previousValue As aspnet_Path = Me._aspnet_Path.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Path.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Path.Entity = Nothing
                    previousValue.aspnet_PersonalizationPerUsers.Remove(Me)
                End If
                Me._aspnet_Path.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_PersonalizationPerUsers.Add(Me)
                    Me._PathId = Value.PathId
                Else
                    Me._PathId = CType(Nothing, Nullable(Of System.Guid))
                End If
                Me.SendPropertyChanged("aspnet_Path")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_PersonalizationPerUser", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=True)>
    Public Property aspnet_User() As aspnet_User
        Get
            Return Me._aspnet_User.Entity
        End Get
        Set
            Dim previousValue As aspnet_User = Me._aspnet_User.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_User.Entity = Nothing
                    previousValue.aspnet_PersonalizationPerUsers.Remove(Me)
                End If
                Me._aspnet_User.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_PersonalizationPerUsers.Add(Me)
                    Me._UserId = Value.UserId
                Else
                    Me._UserId = CType(Nothing, Nullable(Of System.Guid))
                End If
                Me.SendPropertyChanged("aspnet_User")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Profile")>
Partial Public Class aspnet_Profile
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _UserId As System.Guid

    Private _PropertyNames As String

    Private _PropertyValuesString As String

    Private _PropertyValuesBinary As System.Data.Linq.Binary

    Private _LastUpdatedDate As Date

    Private _aspnet_User As EntityRef(Of aspnet_User)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPropertyNamesChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNamesChanged()
    End Sub
    Partial Private Sub OnPropertyValuesStringChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValuesStringChanged()
    End Sub
    Partial Private Sub OnPropertyValuesBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPropertyValuesBinaryChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property UserId() As System.Guid
        Get
            Return Me._UserId
        End Get
        Set
            If ((Me._UserId = Value) _
                        = False) Then
                If Me._aspnet_User.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnUserIdChanging(Value)
                Me.SendPropertyChanging()
                Me._UserId = Value
                Me.SendPropertyChanged("UserId")
                Me.OnUserIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyNames", DbType:="NText NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)>
    Public Property PropertyNames() As String
        Get
            Return Me._PropertyNames
        End Get
        Set
            If (String.Equals(Me._PropertyNames, Value) = False) Then
                Me.OnPropertyNamesChanging(Value)
                Me.SendPropertyChanging()
                Me._PropertyNames = Value
                Me.SendPropertyChanged("PropertyNames")
                Me.OnPropertyNamesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValuesString", DbType:="NText NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)>
    Public Property PropertyValuesString() As String
        Get
            Return Me._PropertyValuesString
        End Get
        Set
            If (String.Equals(Me._PropertyValuesString, Value) = False) Then
                Me.OnPropertyValuesStringChanging(Value)
                Me.SendPropertyChanging()
                Me._PropertyValuesString = Value
                Me.SendPropertyChanged("PropertyValuesString")
                Me.OnPropertyValuesStringChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValuesBinary", DbType:="Image NOT NULL", CanBeNull:=False, UpdateCheck:=UpdateCheck.Never)>
    Public Property PropertyValuesBinary() As System.Data.Linq.Binary
        Get
            Return Me._PropertyValuesBinary
        End Get
        Set
            If (Object.Equals(Me._PropertyValuesBinary, Value) = False) Then
                Me.OnPropertyValuesBinaryChanging(Value)
                Me.SendPropertyChanging()
                Me._PropertyValuesBinary = Value
                Me.SendPropertyChanged("PropertyValuesBinary")
                Me.OnPropertyValuesBinaryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>
    Public Property LastUpdatedDate() As Date
        Get
            Return Me._LastUpdatedDate
        End Get
        Set
            If ((Me._LastUpdatedDate = Value) _
                        = False) Then
                Me.OnLastUpdatedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastUpdatedDate = Value
                Me.SendPropertyChanged("LastUpdatedDate")
                Me.OnLastUpdatedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Profile", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=True)>
    Public Property aspnet_User() As aspnet_User
        Get
            Return Me._aspnet_User.Entity
        End Get
        Set
            Dim previousValue As aspnet_User = Me._aspnet_User.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_User.Entity = Nothing
                    previousValue.aspnet_Profile = Nothing
                End If
                Me._aspnet_User.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_Profile = Me
                    Me._UserId = Value.UserId
                Else
                    Me._UserId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_User")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Roles")>
Partial Public Class aspnet_Role
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Guid

    Private _RoleId As System.Guid

    Private _RoleName As String

    Private _LoweredRoleName As String

    Private _Description As String

    Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)

    Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnLoweredRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredRoleNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
        Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RoleId() As System.Guid
        Get
            Return Me._RoleId
        End Get
        Set
            If ((Me._RoleId = Value) _
                        = False) Then
                Me.OnRoleIdChanging(Value)
                Me.SendPropertyChanging()
                Me._RoleId = Value
                Me.SendPropertyChanged("RoleId")
                Me.OnRoleIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property RoleName() As String
        Get
            Return Me._RoleName
        End Get
        Set
            If (String.Equals(Me._RoleName, Value) = False) Then
                Me.OnRoleNameChanging(Value)
                Me.SendPropertyChanging()
                Me._RoleName = Value
                Me.SendPropertyChanged("RoleName")
                Me.OnRoleNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredRoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property LoweredRoleName() As String
        Get
            Return Me._LoweredRoleName
        End Get
        Set
            If (String.Equals(Me._LoweredRoleName, Value) = False) Then
                Me.OnLoweredRoleNameChanging(Value)
                Me.SendPropertyChanging()
                Me._LoweredRoleName = Value
                Me.SendPropertyChanged("LoweredRoleName")
                Me.OnLoweredRoleNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="RoleId", OtherKey:="RoleID")>
    Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
        Get
            Return Me._ApplicationFeatureRoles
        End Get
        Set
            Me._ApplicationFeatureRoles.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="RoleId", OtherKey:="RoleId")>
    Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
        Get
            Return Me._aspnet_UsersInRoles
        End Get
        Set
            Me._aspnet_UsersInRoles.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.aspnet_Roles.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_Roles.Add(Me)
                    Me._ApplicationId = Value.ApplicationId
                Else
                    Me._ApplicationId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
        Me.SendPropertyChanging()
        entity.aspnet_Role = Me
    End Sub

    Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
        Me.SendPropertyChanging()
        entity.aspnet_Role = Nothing
    End Sub

    Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
        Me.SendPropertyChanging()
        entity.aspnet_Role = Me
    End Sub

    Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
        Me.SendPropertyChanging()
        entity.aspnet_Role = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_SchemaVersions")>
Partial Public Class aspnet_SchemaVersion
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _Feature As String

    Private _CompatibleSchemaVersion As String

    Private _IsCurrentVersion As Boolean

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureChanged()
    End Sub
    Partial Private Sub OnCompatibleSchemaVersionChanging(value As String)
    End Sub
    Partial Private Sub OnCompatibleSchemaVersionChanged()
    End Sub
    Partial Private Sub OnIsCurrentVersionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsCurrentVersionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feature", DbType:="NVarChar(128) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
    Public Property Feature() As String
        Get
            Return Me._Feature
        End Get
        Set
            If (String.Equals(Me._Feature, Value) = False) Then
                Me.OnFeatureChanging(Value)
                Me.SendPropertyChanging()
                Me._Feature = Value
                Me.SendPropertyChanged("Feature")
                Me.OnFeatureChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompatibleSchemaVersion", DbType:="NVarChar(128) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
    Public Property CompatibleSchemaVersion() As String
        Get
            Return Me._CompatibleSchemaVersion
        End Get
        Set
            If (String.Equals(Me._CompatibleSchemaVersion, Value) = False) Then
                Me.OnCompatibleSchemaVersionChanging(Value)
                Me.SendPropertyChanging()
                Me._CompatibleSchemaVersion = Value
                Me.SendPropertyChanged("CompatibleSchemaVersion")
                Me.OnCompatibleSchemaVersionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCurrentVersion", DbType:="Bit NOT NULL")>
    Public Property IsCurrentVersion() As Boolean
        Get
            Return Me._IsCurrentVersion
        End Get
        Set
            If ((Me._IsCurrentVersion = Value) _
                        = False) Then
                Me.OnIsCurrentVersionChanging(Value)
                Me.SendPropertyChanging()
                Me._IsCurrentVersion = Value
                Me.SendPropertyChanged("IsCurrentVersion")
                Me.OnIsCurrentVersionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")>
Partial Public Class aspnet_User
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Guid

    Private _UserId As System.Guid

    Private _UserName As String

    Private _LoweredUserName As String

    Private _MobileAlias As String

    Private _IsAnonymous As Boolean

    Private _LastActivityDate As Date

    Private _TimeZoneID As String

    Private _ApplicationLocation As System.Nullable(Of System.Guid)

    Private _aspnet_Membership As EntityRef(Of aspnet_Membership)

    Private _aspnet_PersonalizationPerUsers As EntitySet(Of aspnet_PersonalizationPerUser)

    Private _aspnet_Profile As EntityRef(Of aspnet_Profile)

    Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)

    Private _aspnet_Application As EntityRef(Of aspnet_Application)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLoweredUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredUserNameChanged()
    End Sub
    Partial Private Sub OnMobileAliasChanging(value As String)
    End Sub
    Partial Private Sub OnMobileAliasChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnApplicationLocationChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationLocationChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Membership = CType(Nothing, EntityRef(Of aspnet_Membership))
        Me._aspnet_PersonalizationPerUsers = New EntitySet(Of aspnet_PersonalizationPerUser)(AddressOf Me.attach_aspnet_PersonalizationPerUsers, AddressOf Me.detach_aspnet_PersonalizationPerUsers)
        Me._aspnet_Profile = CType(Nothing, EntityRef(Of aspnet_Profile))
        Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
        Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property UserId() As System.Guid
        Get
            Return Me._UserId
        End Get
        Set
            If ((Me._UserId = Value) _
                        = False) Then
                Me.OnUserIdChanging(Value)
                Me.SendPropertyChanging()
                Me._UserId = Value
                Me.SendPropertyChanged("UserId")
                Me.OnUserIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property UserName() As String
        Get
            Return Me._UserName
        End Get
        Set
            If (String.Equals(Me._UserName, Value) = False) Then
                Me.OnUserNameChanging(Value)
                Me.SendPropertyChanging()
                Me._UserName = Value
                Me.SendPropertyChanged("UserName")
                Me.OnUserNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property LoweredUserName() As String
        Get
            Return Me._LoweredUserName
        End Get
        Set
            If (String.Equals(Me._LoweredUserName, Value) = False) Then
                Me.OnLoweredUserNameChanging(Value)
                Me.SendPropertyChanging()
                Me._LoweredUserName = Value
                Me.SendPropertyChanged("LoweredUserName")
                Me.OnLoweredUserNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>
    Public Property MobileAlias() As String
        Get
            Return Me._MobileAlias
        End Get
        Set
            If (String.Equals(Me._MobileAlias, Value) = False) Then
                Me.OnMobileAliasChanging(Value)
                Me.SendPropertyChanging()
                Me._MobileAlias = Value
                Me.SendPropertyChanged("MobileAlias")
                Me.OnMobileAliasChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>
    Public Property IsAnonymous() As Boolean
        Get
            Return Me._IsAnonymous
        End Get
        Set
            If ((Me._IsAnonymous = Value) _
                        = False) Then
                Me.OnIsAnonymousChanging(Value)
                Me.SendPropertyChanging()
                Me._IsAnonymous = Value
                Me.SendPropertyChanged("IsAnonymous")
                Me.OnIsAnonymousChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>
    Public Property LastActivityDate() As Date
        Get
            Return Me._LastActivityDate
        End Get
        Set
            If ((Me._LastActivityDate = Value) _
                        = False) Then
                Me.OnLastActivityDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LastActivityDate = Value
                Me.SendPropertyChanged("LastActivityDate")
                Me.OnLastActivityDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", DbType:="VarChar(100)")>
    Public Property TimeZoneID() As String
        Get
            Return Me._TimeZoneID
        End Get
        Set
            If (String.Equals(Me._TimeZoneID, Value) = False) Then
                Me.OnTimeZoneIDChanging(Value)
                Me.SendPropertyChanging()
                Me._TimeZoneID = Value
                Me.SendPropertyChanged("TimeZoneID")
                Me.OnTimeZoneIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocation", DbType:="UniqueIdentifier")>
    Public Property ApplicationLocation() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationLocation
        End Get
        Set
            If (Me._ApplicationLocation.Equals(Value) = False) Then
                Me.OnApplicationLocationChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationLocation = Value
                Me.SendPropertyChanged("ApplicationLocation")
                Me.OnApplicationLocationChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_Membership", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=True, IsForeignKey:=False)>
    Public Property aspnet_Membership() As aspnet_Membership
        Get
            Return Me._aspnet_Membership.Entity
        End Get
        Set
            Dim previousValue As aspnet_Membership = Me._aspnet_Membership.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Membership.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Membership.Entity = Nothing
                    previousValue.aspnet_User = Nothing
                End If
                Me._aspnet_Membership.Entity = Value
                If (Object.Equals(Value, Nothing) = False) Then
                    Value.aspnet_User = Me
                End If
                Me.SendPropertyChanged("aspnet_Membership")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_PersonalizationPerUser", Storage:="_aspnet_PersonalizationPerUsers", ThisKey:="UserId", OtherKey:="UserId")>
    Public Property aspnet_PersonalizationPerUsers() As EntitySet(Of aspnet_PersonalizationPerUser)
        Get
            Return Me._aspnet_PersonalizationPerUsers
        End Get
        Set
            Me._aspnet_PersonalizationPerUsers.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Profile", Storage:="_aspnet_Profile", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=True, IsForeignKey:=False)>
    Public Property aspnet_Profile() As aspnet_Profile
        Get
            Return Me._aspnet_Profile.Entity
        End Get
        Set
            Dim previousValue As aspnet_Profile = Me._aspnet_Profile.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Profile.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Profile.Entity = Nothing
                    previousValue.aspnet_User = Nothing
                End If
                Me._aspnet_Profile.Entity = Value
                If (Object.Equals(Value, Nothing) = False) Then
                    Value.aspnet_User = Me
                End If
                Me.SendPropertyChanged("aspnet_Profile")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="UserId", OtherKey:="UserId")>
    Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
        Get
            Return Me._aspnet_UsersInRoles
        End Get
        Set
            Me._aspnet_UsersInRoles.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=True)>
    Public Property aspnet_Application() As aspnet_Application
        Get
            Return Me._aspnet_Application.Entity
        End Get
        Set
            Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Application.Entity = Nothing
                    previousValue.aspnet_Users.Remove(Me)
                End If
                Me._aspnet_Application.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_Users.Add(Me)
                    Me._ApplicationId = Value.ApplicationId
                Else
                    Me._ApplicationId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Application")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
        Me.SendPropertyChanging()
        entity.aspnet_User = Me
    End Sub

    Private Sub detach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
        Me.SendPropertyChanging()
        entity.aspnet_User = Nothing
    End Sub

    Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
        Me.SendPropertyChanging()
        entity.aspnet_User = Me
    End Sub

    Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
        Me.SendPropertyChanging()
        entity.aspnet_User = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_UsersInRoles")>
Partial Public Class aspnet_UsersInRole
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _UserId As System.Guid

    Private _RoleId As System.Guid

    Private _aspnet_Role As EntityRef(Of aspnet_Role)

    Private _aspnet_User As EntityRef(Of aspnet_User)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
        Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property UserId() As System.Guid
        Get
            Return Me._UserId
        End Get
        Set
            If ((Me._UserId = Value) _
                        = False) Then
                If Me._aspnet_User.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnUserIdChanging(Value)
                Me.SendPropertyChanging()
                Me._UserId = Value
                Me.SendPropertyChanged("UserId")
                Me.OnUserIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RoleId() As System.Guid
        Get
            Return Me._RoleId
        End Get
        Set
            If ((Me._RoleId = Value) _
                        = False) Then
                If Me._aspnet_Role.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnRoleIdChanging(Value)
                Me.SendPropertyChanging()
                Me._RoleId = Value
                Me.SendPropertyChanged("RoleId")
                Me.OnRoleIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_Role", ThisKey:="RoleId", OtherKey:="RoleId", IsForeignKey:=True)>
    Public Property aspnet_Role() As aspnet_Role
        Get
            Return Me._aspnet_Role.Entity
        End Get
        Set
            Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_Role.Entity = Nothing
                    previousValue.aspnet_UsersInRoles.Remove(Me)
                End If
                Me._aspnet_Role.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_UsersInRoles.Add(Me)
                    Me._RoleId = Value.RoleId
                Else
                    Me._RoleId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_Role")
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=True)>
    Public Property aspnet_User() As aspnet_User
        Get
            Return Me._aspnet_User.Entity
        End Get
        Set
            Dim previousValue As aspnet_User = Me._aspnet_User.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._aspnet_User.Entity = Nothing
                    previousValue.aspnet_UsersInRoles.Remove(Me)
                End If
                Me._aspnet_User.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.aspnet_UsersInRoles.Add(Me)
                    Me._UserId = Value.UserId
                Else
                    Me._UserId = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("aspnet_User")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_WebEvent_Events")>
Partial Public Class aspnet_WebEvent_Event
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _EventId As String

    Private _EventTimeUtc As Date

    Private _EventTime As Date

    Private _EventType As String

    Private _EventSequence As Decimal

    Private _EventOccurrence As Decimal

    Private _EventCode As Integer

    Private _EventDetailCode As Integer

    Private _Message As String

    Private _ApplicationPath As String

    Private _ApplicationVirtualPath As String

    Private _MachineName As String

    Private _RequestUrl As String

    Private _ExceptionType As String

    Private _Details As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventIdChanging(value As String)
    End Sub
    Partial Private Sub OnEventIdChanged()
    End Sub
    Partial Private Sub OnEventTimeUtcChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeUtcChanged()
    End Sub
    Partial Private Sub OnEventTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeChanged()
    End Sub
    Partial Private Sub OnEventTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEventTypeChanged()
    End Sub
    Partial Private Sub OnEventSequenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventSequenceChanged()
    End Sub
    Partial Private Sub OnEventOccurrenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventOccurrenceChanged()
    End Sub
    Partial Private Sub OnEventCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventCodeChanged()
    End Sub
    Partial Private Sub OnEventDetailCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventDetailCodeChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnApplicationPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationPathChanged()
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanged()
    End Sub
    Partial Private Sub OnMachineNameChanging(value As String)
    End Sub
    Partial Private Sub OnMachineNameChanged()
    End Sub
    Partial Private Sub OnRequestUrlChanging(value As String)
    End Sub
    Partial Private Sub OnRequestUrlChanged()
    End Sub
    Partial Private Sub OnExceptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnExceptionTypeChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventId", DbType:="Char(32) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
    Public Property EventId() As String
        Get
            Return Me._EventId
        End Get
        Set
            If (String.Equals(Me._EventId, Value) = False) Then
                Me.OnEventIdChanging(Value)
                Me.SendPropertyChanging()
                Me._EventId = Value
                Me.SendPropertyChanged("EventId")
                Me.OnEventIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTimeUtc", DbType:="DateTime NOT NULL")>
    Public Property EventTimeUtc() As Date
        Get
            Return Me._EventTimeUtc
        End Get
        Set
            If ((Me._EventTimeUtc = Value) _
                        = False) Then
                Me.OnEventTimeUtcChanging(Value)
                Me.SendPropertyChanging()
                Me._EventTimeUtc = Value
                Me.SendPropertyChanged("EventTimeUtc")
                Me.OnEventTimeUtcChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTime", DbType:="DateTime NOT NULL")>
    Public Property EventTime() As Date
        Get
            Return Me._EventTime
        End Get
        Set
            If ((Me._EventTime = Value) _
                        = False) Then
                Me.OnEventTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._EventTime = Value
                Me.SendPropertyChanged("EventTime")
                Me.OnEventTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property EventType() As String
        Get
            Return Me._EventType
        End Get
        Set
            If (String.Equals(Me._EventType, Value) = False) Then
                Me.OnEventTypeChanging(Value)
                Me.SendPropertyChanging()
                Me._EventType = Value
                Me.SendPropertyChanged("EventType")
                Me.OnEventTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventSequence", DbType:="Decimal(19,0) NOT NULL")>
    Public Property EventSequence() As Decimal
        Get
            Return Me._EventSequence
        End Get
        Set
            If ((Me._EventSequence = Value) _
                        = False) Then
                Me.OnEventSequenceChanging(Value)
                Me.SendPropertyChanging()
                Me._EventSequence = Value
                Me.SendPropertyChanged("EventSequence")
                Me.OnEventSequenceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventOccurrence", DbType:="Decimal(19,0) NOT NULL")>
    Public Property EventOccurrence() As Decimal
        Get
            Return Me._EventOccurrence
        End Get
        Set
            If ((Me._EventOccurrence = Value) _
                        = False) Then
                Me.OnEventOccurrenceChanging(Value)
                Me.SendPropertyChanging()
                Me._EventOccurrence = Value
                Me.SendPropertyChanged("EventOccurrence")
                Me.OnEventOccurrenceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventCode", DbType:="Int NOT NULL")>
    Public Property EventCode() As Integer
        Get
            Return Me._EventCode
        End Get
        Set
            If ((Me._EventCode = Value) _
                        = False) Then
                Me.OnEventCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._EventCode = Value
                Me.SendPropertyChanged("EventCode")
                Me.OnEventCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDetailCode", DbType:="Int NOT NULL")>
    Public Property EventDetailCode() As Integer
        Get
            Return Me._EventDetailCode
        End Get
        Set
            If ((Me._EventDetailCode = Value) _
                        = False) Then
                Me.OnEventDetailCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._EventDetailCode = Value
                Me.SendPropertyChanged("EventDetailCode")
                Me.OnEventDetailCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NVarChar(1024)")>
    Public Property Message() As String
        Get
            Return Me._Message
        End Get
        Set
            If (String.Equals(Me._Message, Value) = False) Then
                Me.OnMessageChanging(Value)
                Me.SendPropertyChanging()
                Me._Message = Value
                Me.SendPropertyChanged("Message")
                Me.OnMessageChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPath", DbType:="NVarChar(256)")>
    Public Property ApplicationPath() As String
        Get
            Return Me._ApplicationPath
        End Get
        Set
            If (String.Equals(Me._ApplicationPath, Value) = False) Then
                Me.OnApplicationPathChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationPath = Value
                Me.SendPropertyChanged("ApplicationPath")
                Me.OnApplicationPathChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVirtualPath", DbType:="NVarChar(256)")>
    Public Property ApplicationVirtualPath() As String
        Get
            Return Me._ApplicationVirtualPath
        End Get
        Set
            If (String.Equals(Me._ApplicationVirtualPath, Value) = False) Then
                Me.OnApplicationVirtualPathChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationVirtualPath = Value
                Me.SendPropertyChanged("ApplicationVirtualPath")
                Me.OnApplicationVirtualPathChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MachineName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property MachineName() As String
        Get
            Return Me._MachineName
        End Get
        Set
            If (String.Equals(Me._MachineName, Value) = False) Then
                Me.OnMachineNameChanging(Value)
                Me.SendPropertyChanging()
                Me._MachineName = Value
                Me.SendPropertyChanged("MachineName")
                Me.OnMachineNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestUrl", DbType:="NVarChar(1024)")>
    Public Property RequestUrl() As String
        Get
            Return Me._RequestUrl
        End Get
        Set
            If (String.Equals(Me._RequestUrl, Value) = False) Then
                Me.OnRequestUrlChanging(Value)
                Me.SendPropertyChanging()
                Me._RequestUrl = Value
                Me.SendPropertyChanged("RequestUrl")
                Me.OnRequestUrlChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionType", DbType:="NVarChar(256)")>
    Public Property ExceptionType() As String
        Get
            Return Me._ExceptionType
        End Get
        Set
            If (String.Equals(Me._ExceptionType, Value) = False) Then
                Me.OnExceptionTypeChanging(Value)
                Me.SendPropertyChanging()
                Me._ExceptionType = Value
                Me.SendPropertyChanged("ExceptionType")
                Me.OnExceptionTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
    Public Property Details() As String
        Get
            Return Me._Details
        End Get
        Set
            If (String.Equals(Me._Details, Value) = False) Then
                Me.OnDetailsChanging(Value)
                Me.SendPropertyChanging()
                Me._Details = Value
                Me.SendPropertyChanged("Details")
                Me.OnDetailsChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuthenticationToken")>
Partial Public Class AuthenticationToken
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _TokenId As System.Guid

    Private _ApplicationID As System.Guid

    Private _UserID As System.Guid

    Private _ExpiryDate As Date

    Private _StartDate As Date

    Private _TokenType As String

    Private _isUsedForChangePassword As System.Nullable(Of Boolean)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTokenIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTokenIdChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnTokenTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTokenTypeChanged()
    End Sub
    Partial Private Sub OnisUsedForChangePasswordChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisUsedForChangePasswordChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TokenId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property TokenId() As System.Guid
        Get
            Return Me._TokenId
        End Get
        Set
            If ((Me._TokenId = Value) _
                        = False) Then
                Me.OnTokenIdChanging(Value)
                Me.SendPropertyChanging()
                Me._TokenId = Value
                Me.SendPropertyChanged("TokenId")
                Me.OnTokenIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property UserID() As System.Guid
        Get
            Return Me._UserID
        End Get
        Set
            If ((Me._UserID = Value) _
                        = False) Then
                Me.OnUserIDChanging(Value)
                Me.SendPropertyChanging()
                Me._UserID = Value
                Me.SendPropertyChanged("UserID")
                Me.OnUserIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="DateTime NOT NULL")>
    Public Property ExpiryDate() As Date
        Get
            Return Me._ExpiryDate
        End Get
        Set
            If ((Me._ExpiryDate = Value) _
                        = False) Then
                Me.OnExpiryDateChanging(Value)
                Me.SendPropertyChanging()
                Me._ExpiryDate = Value
                Me.SendPropertyChanged("ExpiryDate")
                Me.OnExpiryDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>
    Public Property StartDate() As Date
        Get
            Return Me._StartDate
        End Get
        Set
            If ((Me._StartDate = Value) _
                        = False) Then
                Me.OnStartDateChanging(Value)
                Me.SendPropertyChanging()
                Me._StartDate = Value
                Me.SendPropertyChanged("StartDate")
                Me.OnStartDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TokenType", DbType:="NVarChar(150)")>
    Public Property TokenType() As String
        Get
            Return Me._TokenType
        End Get
        Set
            If (String.Equals(Me._TokenType, Value) = False) Then
                Me.OnTokenTypeChanging(Value)
                Me.SendPropertyChanging()
                Me._TokenType = Value
                Me.SendPropertyChanged("TokenType")
                Me.OnTokenTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isUsedForChangePassword", DbType:="Bit")>
    Public Property isUsedForChangePassword() As System.Nullable(Of Boolean)
        Get
            Return Me._isUsedForChangePassword
        End Get
        Set
            If (Me._isUsedForChangePassword.Equals(Value) = False) Then
                Me.OnisUsedForChangePasswordChanging(Value)
                Me.SendPropertyChanging()
                Me._isUsedForChangePassword = Value
                Me.SendPropertyChanged("isUsedForChangePassword")
                Me.OnisUsedForChangePasswordChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_Data")>
Partial Public Class CAN_Data
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _arbritration_id As String

    Private _data As String

    Private _dlc As System.Nullable(Of Integer)

    Private _is_extended_id As System.Nullable(Of Integer)

    Private _is_error_frame As System.Nullable(Of Integer)

    Private _is_remote_frame As System.Nullable(Of Integer)

    Private _timestamp As System.Nullable(Of Date)

    Private _Id As Integer

    Private _DeviceID As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onarbritration_idChanging(value As String)
    End Sub
    Partial Private Sub Onarbritration_idChanged()
    End Sub
    Partial Private Sub OndataChanging(value As String)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OndlcChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndlcChanged()
    End Sub
    Partial Private Sub Onis_extended_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_extended_idChanged()
    End Sub
    Partial Private Sub Onis_error_frameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_error_frameChanged()
    End Sub
    Partial Private Sub Onis_remote_frameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_remote_frameChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arbritration_id", DbType:="NChar(10)")>
    Public Property arbritration_id() As String
        Get
            Return Me._arbritration_id
        End Get
        Set
            If (String.Equals(Me._arbritration_id, Value) = False) Then
                Me.Onarbritration_idChanging(Value)
                Me.SendPropertyChanging()
                Me._arbritration_id = Value
                Me.SendPropertyChanged("arbritration_id")
                Me.Onarbritration_idChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarChar(200)")>
    Public Property data() As String
        Get
            Return Me._data
        End Get
        Set
            If (String.Equals(Me._data, Value) = False) Then
                Me.OndataChanging(Value)
                Me.SendPropertyChanging()
                Me._data = Value
                Me.SendPropertyChanged("data")
                Me.OndataChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dlc", DbType:="Int")>
    Public Property dlc() As System.Nullable(Of Integer)
        Get
            Return Me._dlc
        End Get
        Set
            If (Me._dlc.Equals(Value) = False) Then
                Me.OndlcChanging(Value)
                Me.SendPropertyChanging()
                Me._dlc = Value
                Me.SendPropertyChanged("dlc")
                Me.OndlcChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_extended_id", DbType:="Int")>
    Public Property is_extended_id() As System.Nullable(Of Integer)
        Get
            Return Me._is_extended_id
        End Get
        Set
            If (Me._is_extended_id.Equals(Value) = False) Then
                Me.Onis_extended_idChanging(Value)
                Me.SendPropertyChanging()
                Me._is_extended_id = Value
                Me.SendPropertyChanged("is_extended_id")
                Me.Onis_extended_idChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_error_frame", DbType:="Int")>
    Public Property is_error_frame() As System.Nullable(Of Integer)
        Get
            Return Me._is_error_frame
        End Get
        Set
            If (Me._is_error_frame.Equals(Value) = False) Then
                Me.Onis_error_frameChanging(Value)
                Me.SendPropertyChanging()
                Me._is_error_frame = Value
                Me.SendPropertyChanged("is_error_frame")
                Me.Onis_error_frameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_remote_frame", DbType:="Int")>
    Public Property is_remote_frame() As System.Nullable(Of Integer)
        Get
            Return Me._is_remote_frame
        End Get
        Set
            If (Me._is_remote_frame.Equals(Value) = False) Then
                Me.Onis_remote_frameChanging(Value)
                Me.SendPropertyChanging()
                Me._is_remote_frame = Value
                Me.SendPropertyChanged("is_remote_frame")
                Me.Onis_remote_frameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timestamp", DbType:="DateTime")>
    Public Property timestamp() As System.Nullable(Of Date)
        Get
            Return Me._timestamp
        End Get
        Set
            If (Me._timestamp.Equals(Value) = False) Then
                Me.OntimestampChanging(Value)
                Me.SendPropertyChanging()
                Me._timestamp = Value
                Me.SendPropertyChanged("timestamp")
                Me.OntimestampChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property Id() As Integer
        Get
            Return Me._Id
        End Get
        Set
            If ((Me._Id = Value) _
                        = False) Then
                Me.OnIdChanging(Value)
                Me.SendPropertyChanging()
                Me._Id = Value
                Me.SendPropertyChanged("Id")
                Me.OnIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me.OnDeviceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DeviceID = Value
                Me.SendPropertyChanged("DeviceID")
                Me.OnDeviceIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_MessageDefinitions")>
Partial Public Class CAN_MessageDefinition

    Private _Standard As String

    Private _PGN As System.Nullable(Of Double)

    Private _Parameter_Group_Label As String

    Private _PGN_Length As String

    Private _Transmission_Rate As String

    Private _Acronym As String

    Private _pos As String

    Private _SPN_length As System.Nullable(Of Double)

    Private _SPN As System.Nullable(Of Double)

    Private __51_CAT_793F_Haul_Trucks As String

    Private __0_CAT_16M_Grader As String

    Private __0_Komatsu_1200_Wheel_Loaders As String

    Private __0_Liebherr_R9400_Excavators As String

    Private __0_Liebherr_R996B_Excavators As String

    Private __0_Atlas_Copco_PV271_Drills As String

    Private __0_Atlas_Copco_D65_Drills As String

    Private _Name As String

    Private _Description As String

    Private _Data_Range As String

    Private _Operational_Range As String

    Private _Resolution As String

    Private _Offset As System.Nullable(Of Double)

    Private _Units As String

    Private _Date_SPN_was_added_to_PGN As System.Nullable(Of Date)

    Private _Status_of_SPN_addition_to_PGN As String

    Private _Date_SPN_was_added_modified As System.Nullable(Of Date)

    Private _Status_of_SPN As String

    Private _SPN_Doc As String

    Private _PGN_Doc As String

    Private _F30 As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>
    Public Property Standard() As String
        Get
            Return Me._Standard
        End Get
        Set
            If (String.Equals(Me._Standard, Value) = False) Then
                Me._Standard = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>
    Public Property PGN() As System.Nullable(Of Double)
        Get
            Return Me._PGN
        End Get
        Set
            If (Me._PGN.Equals(Value) = False) Then
                Me._PGN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Parameter Group Label]", Storage:="_Parameter_Group_Label", DbType:="NVarChar(255)")>
    Public Property Parameter_Group_Label() As String
        Get
            Return Me._Parameter_Group_Label
        End Get
        Set
            If (String.Equals(Me._Parameter_Group_Label, Value) = False) Then
                Me._Parameter_Group_Label = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Length]", Storage:="_PGN_Length", DbType:="NVarChar(255)")>
    Public Property PGN_Length() As String
        Get
            Return Me._PGN_Length
        End Get
        Set
            If (String.Equals(Me._PGN_Length, Value) = False) Then
                Me._PGN_Length = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Transmission Rate]", Storage:="_Transmission_Rate", DbType:="NVarChar(255)")>
    Public Property Transmission_Rate() As String
        Get
            Return Me._Transmission_Rate
        End Get
        Set
            If (String.Equals(Me._Transmission_Rate, Value) = False) Then
                Me._Transmission_Rate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acronym", DbType:="NVarChar(255)")>
    Public Property Acronym() As String
        Get
            Return Me._Acronym
        End Get
        Set
            If (String.Equals(Me._Acronym, Value) = False) Then
                Me._Acronym = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(255)")>
    Public Property pos() As String
        Get
            Return Me._pos
        End Get
        Set
            If (String.Equals(Me._pos, Value) = False) Then
                Me._pos = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN length]", Storage:="_SPN_length", DbType:="Float")>
    Public Property SPN_length() As System.Nullable(Of Double)
        Get
            Return Me._SPN_length
        End Get
        Set
            If (Me._SPN_length.Equals(Value) = False) Then
                Me._SPN_length = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>
    Public Property SPN() As System.Nullable(Of Double)
        Get
            Return Me._SPN
        End Get
        Set
            If (Me._SPN.Equals(Value) = False) Then
                Me._SPN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[51 CAT 793F Haul Trucks]", Storage:="__51_CAT_793F_Haul_Trucks", DbType:="NVarChar(255)")>
    Public Property _51_CAT_793F_Haul_Trucks() As String
        Get
            Return Me.__51_CAT_793F_Haul_Trucks
        End Get
        Set
            If (String.Equals(Me.__51_CAT_793F_Haul_Trucks, Value) = False) Then
                Me.__51_CAT_793F_Haul_Trucks = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 CAT 16M Grader]", Storage:="__0_CAT_16M_Grader", DbType:="NVarChar(255)")>
    Public Property _0_CAT_16M_Grader() As String
        Get
            Return Me.__0_CAT_16M_Grader
        End Get
        Set
            If (String.Equals(Me.__0_CAT_16M_Grader, Value) = False) Then
                Me.__0_CAT_16M_Grader = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Komatsu 1200 Wheel Loaders]", Storage:="__0_Komatsu_1200_Wheel_Loaders", DbType:="NVarChar(255)")>
    Public Property _0_Komatsu_1200_Wheel_Loaders() As String
        Get
            Return Me.__0_Komatsu_1200_Wheel_Loaders
        End Get
        Set
            If (String.Equals(Me.__0_Komatsu_1200_Wheel_Loaders, Value) = False) Then
                Me.__0_Komatsu_1200_Wheel_Loaders = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R9400 Excavators]", Storage:="__0_Liebherr_R9400_Excavators", DbType:="NVarChar(255)")>
    Public Property _0_Liebherr_R9400_Excavators() As String
        Get
            Return Me.__0_Liebherr_R9400_Excavators
        End Get
        Set
            If (String.Equals(Me.__0_Liebherr_R9400_Excavators, Value) = False) Then
                Me.__0_Liebherr_R9400_Excavators = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R996B Excavators]", Storage:="__0_Liebherr_R996B_Excavators", DbType:="NVarChar(255)")>
    Public Property _0_Liebherr_R996B_Excavators() As String
        Get
            Return Me.__0_Liebherr_R996B_Excavators
        End Get
        Set
            If (String.Equals(Me.__0_Liebherr_R996B_Excavators, Value) = False) Then
                Me.__0_Liebherr_R996B_Excavators = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco PV271 Drills]", Storage:="__0_Atlas_Copco_PV271_Drills", DbType:="NVarChar(255)")>
    Public Property _0_Atlas_Copco_PV271_Drills() As String
        Get
            Return Me.__0_Atlas_Copco_PV271_Drills
        End Get
        Set
            If (String.Equals(Me.__0_Atlas_Copco_PV271_Drills, Value) = False) Then
                Me.__0_Atlas_Copco_PV271_Drills = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco D65 Drills]", Storage:="__0_Atlas_Copco_D65_Drills", DbType:="NVarChar(255)")>
    Public Property _0_Atlas_Copco_D65_Drills() As String
        Get
            Return Me.__0_Atlas_Copco_D65_Drills
        End Get
        Set
            If (String.Equals(Me.__0_Atlas_Copco_D65_Drills, Value) = False) Then
                Me.__0_Atlas_Copco_D65_Drills = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me._Description = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Data Range]", Storage:="_Data_Range", DbType:="NVarChar(255)")>
    Public Property Data_Range() As String
        Get
            Return Me._Data_Range
        End Get
        Set
            If (String.Equals(Me._Data_Range, Value) = False) Then
                Me._Data_Range = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Operational Range]", Storage:="_Operational_Range", DbType:="NVarChar(255)")>
    Public Property Operational_Range() As String
        Get
            Return Me._Operational_Range
        End Get
        Set
            If (String.Equals(Me._Operational_Range, Value) = False) Then
                Me._Operational_Range = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolution", DbType:="NVarChar(255)")>
    Public Property Resolution() As String
        Get
            Return Me._Resolution
        End Get
        Set
            If (String.Equals(Me._Resolution, Value) = False) Then
                Me._Resolution = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offset", DbType:="Float")>
    Public Property Offset() As System.Nullable(Of Double)
        Get
            Return Me._Offset
        End Get
        Set
            If (Me._Offset.Equals(Value) = False) Then
                Me._Offset = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units", DbType:="NVarChar(255)")>
    Public Property Units() As String
        Get
            Return Me._Units
        End Get
        Set
            If (String.Equals(Me._Units, Value) = False) Then
                Me._Units = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added to PGN]", Storage:="_Date_SPN_was_added_to_PGN", DbType:="DateTime")>
    Public Property Date_SPN_was_added_to_PGN() As System.Nullable(Of Date)
        Get
            Return Me._Date_SPN_was_added_to_PGN
        End Get
        Set
            If (Me._Date_SPN_was_added_to_PGN.Equals(Value) = False) Then
                Me._Date_SPN_was_added_to_PGN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN addition to PGN]", Storage:="_Status_of_SPN_addition_to_PGN", DbType:="NVarChar(255)")>
    Public Property Status_of_SPN_addition_to_PGN() As String
        Get
            Return Me._Status_of_SPN_addition_to_PGN
        End Get
        Set
            If (String.Equals(Me._Status_of_SPN_addition_to_PGN, Value) = False) Then
                Me._Status_of_SPN_addition_to_PGN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added/modified]", Storage:="_Date_SPN_was_added_modified", DbType:="DateTime")>
    Public Property Date_SPN_was_added_modified() As System.Nullable(Of Date)
        Get
            Return Me._Date_SPN_was_added_modified
        End Get
        Set
            If (Me._Date_SPN_was_added_modified.Equals(Value) = False) Then
                Me._Date_SPN_was_added_modified = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN]", Storage:="_Status_of_SPN", DbType:="NVarChar(255)")>
    Public Property Status_of_SPN() As String
        Get
            Return Me._Status_of_SPN
        End Get
        Set
            If (String.Equals(Me._Status_of_SPN, Value) = False) Then
                Me._Status_of_SPN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN Doc]", Storage:="_SPN_Doc", DbType:="NVarChar(255)")>
    Public Property SPN_Doc() As String
        Get
            Return Me._SPN_Doc
        End Get
        Set
            If (String.Equals(Me._SPN_Doc, Value) = False) Then
                Me._SPN_Doc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Doc]", Storage:="_PGN_Doc", DbType:="NVarChar(255)")>
    Public Property PGN_Doc() As String
        Get
            Return Me._PGN_Doc
        End Get
        Set
            If (String.Equals(Me._PGN_Doc, Value) = False) Then
                Me._PGN_Doc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F30", DbType:="NVarChar(255)")>
    Public Property F30() As String
        Get
            Return Me._F30
        End Get
        Set
            If (String.Equals(Me._F30, Value) = False) Then
                Me._F30 = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CannonData")>
Partial Public Class CannonData
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CustomerName As String

    Private _SiteName As String

    Private _RunNUmber As System.Nullable(Of Double)

    Private _RunDescription As String

    Private _RunDriver As System.Nullable(Of Double)

    Private _ServiceComments As String

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _InactiveRun As Boolean

    Private _ServiceCode As String

    Private _ServiceDescription As String

    Private _ServiceUnits As System.Nullable(Of Double)

    Private _ServicePrice As System.Nullable(Of Double)

    Private _PerAnnumCharge As System.Nullable(Of Double)

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddressLine3 As String

    Private _AddressLine4 As String

    Private _Suburb As String

    Private _State As String

    Private _PostCode As System.Nullable(Of Double)

    Private _PhoneNo As String

    Private _FaxNo As String

    Private _SiteCeaseDate As String

    Private _calc_lat As String

    Private _calc_lng As String

    Private _calc_field1 As String

    Private _pk As Integer

    Private _NW_latlng As String

    Private _NE_latlng As String

    Private _SE_latlng As String

    Private _SW_latlng As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnRunNUmberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRunNUmberChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanged()
    End Sub
    Partial Private Sub OnInactiveRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveRunChanged()
    End Sub
    Partial Private Sub OnServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeChanged()
    End Sub
    Partial Private Sub OnServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceDescriptionChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnServicePriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServicePriceChanged()
    End Sub
    Partial Private Sub OnPerAnnumChargeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPerAnnumChargeChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnAddressLine3Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine3Changed()
    End Sub
    Partial Private Sub OnAddressLine4Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine4Changed()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFaxNoChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNoChanged()
    End Sub
    Partial Private Sub OnSiteCeaseDateChanging(value As String)
    End Sub
    Partial Private Sub OnSiteCeaseDateChanged()
    End Sub
    Partial Private Sub Oncalc_latChanging(value As String)
    End Sub
    Partial Private Sub Oncalc_latChanged()
    End Sub
    Partial Private Sub Oncalc_lngChanging(value As String)
    End Sub
    Partial Private Sub Oncalc_lngChanged()
    End Sub
    Partial Private Sub Oncalc_field1Changing(value As String)
    End Sub
    Partial Private Sub Oncalc_field1Changed()
    End Sub
    Partial Private Sub OnpkChanging(value As Integer)
    End Sub
    Partial Private Sub OnpkChanged()
    End Sub
    Partial Private Sub OnNW_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnNW_latlngChanged()
    End Sub
    Partial Private Sub OnNE_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnNE_latlngChanged()
    End Sub
    Partial Private Sub OnSE_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnSE_latlngChanged()
    End Sub
    Partial Private Sub OnSW_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnSW_latlngChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me.OnCustomerNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerName = Value
                Me.SendPropertyChanged("CustomerName")
                Me.OnCustomerNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me.OnSiteNameChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteName = Value
                Me.SendPropertyChanged("SiteName")
                Me.OnSiteNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Float")>
    Public Property RunNUmber() As System.Nullable(Of Double)
        Get
            Return Me._RunNUmber
        End Get
        Set
            If (Me._RunNUmber.Equals(Value) = False) Then
                Me.OnRunNUmberChanging(Value)
                Me.SendPropertyChanging()
                Me._RunNUmber = Value
                Me.SendPropertyChanged("RunNUmber")
                Me.OnRunNUmberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me.OnRunDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDescription = Value
                Me.SendPropertyChanged("RunDescription")
                Me.OnRunDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Float")>
    Public Property RunDriver() As System.Nullable(Of Double)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me.OnRunDriverChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDriver = Value
                Me.SendPropertyChanged("RunDriver")
                Me.OnRunDriverChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(255)")>
    Public Property ServiceComments() As String
        Get
            Return Me._ServiceComments
        End Get
        Set
            If (String.Equals(Me._ServiceComments, Value) = False) Then
                Me.OnServiceCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceComments = Value
                Me.SendPropertyChanged("ServiceComments")
                Me.OnServiceCommentsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me.OnUnitsHaveMoreThanOneRunChanging(Value)
                Me.SendPropertyChanging()
                Me._UnitsHaveMoreThanOneRun = Value
                Me.SendPropertyChanged("UnitsHaveMoreThanOneRun")
                Me.OnUnitsHaveMoreThanOneRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>
    Public Property InactiveRun() As Boolean
        Get
            Return Me._InactiveRun
        End Get
        Set
            If ((Me._InactiveRun = Value) _
                        = False) Then
                Me.OnInactiveRunChanging(Value)
                Me.SendPropertyChanging()
                Me._InactiveRun = Value
                Me.SendPropertyChanged("InactiveRun")
                Me.OnInactiveRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(255)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me.OnServiceCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceCode = Value
                Me.SendPropertyChanged("ServiceCode")
                Me.OnServiceCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(255)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me.OnServiceDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceDescription = Value
                Me.SendPropertyChanged("ServiceDescription")
                Me.OnServiceDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>
    Public Property ServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me.OnServiceUnitsChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceUnits = Value
                Me.SendPropertyChanged("ServiceUnits")
                Me.OnServiceUnitsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Float")>
    Public Property ServicePrice() As System.Nullable(Of Double)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me.OnServicePriceChanging(Value)
                Me.SendPropertyChanging()
                Me._ServicePrice = Value
                Me.SendPropertyChanged("ServicePrice")
                Me.OnServicePriceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Float")>
    Public Property PerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me.OnPerAnnumChargeChanging(Value)
                Me.SendPropertyChanging()
                Me._PerAnnumCharge = Value
                Me.SendPropertyChanged("PerAnnumCharge")
                Me.OnPerAnnumChargeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(255)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me.OnAddressLine1Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine1 = Value
                Me.SendPropertyChanged("AddressLine1")
                Me.OnAddressLine1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(255)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me.OnAddressLine2Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine2 = Value
                Me.SendPropertyChanged("AddressLine2")
                Me.OnAddressLine2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(255)")>
    Public Property AddressLine3() As String
        Get
            Return Me._AddressLine3
        End Get
        Set
            If (String.Equals(Me._AddressLine3, Value) = False) Then
                Me.OnAddressLine3Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine3 = Value
                Me.SendPropertyChanged("AddressLine3")
                Me.OnAddressLine3Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(255)")>
    Public Property AddressLine4() As String
        Get
            Return Me._AddressLine4
        End Get
        Set
            If (String.Equals(Me._AddressLine4, Value) = False) Then
                Me.OnAddressLine4Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine4 = Value
                Me.SendPropertyChanged("AddressLine4")
                Me.OnAddressLine4Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(255)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me.OnSuburbChanging(Value)
                Me.SendPropertyChanging()
                Me._Suburb = Value
                Me.SendPropertyChanged("Suburb")
                Me.OnSuburbChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(255)")>
    Public Property State() As String
        Get
            Return Me._State
        End Get
        Set
            If (String.Equals(Me._State, Value) = False) Then
                Me.OnStateChanging(Value)
                Me.SendPropertyChanging()
                Me._State = Value
                Me.SendPropertyChanged("State")
                Me.OnStateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="Float")>
    Public Property PostCode() As System.Nullable(Of Double)
        Get
            Return Me._PostCode
        End Get
        Set
            If (Me._PostCode.Equals(Value) = False) Then
                Me.OnPostCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._PostCode = Value
                Me.SendPropertyChanged("PostCode")
                Me.OnPostCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(255)")>
    Public Property PhoneNo() As String
        Get
            Return Me._PhoneNo
        End Get
        Set
            If (String.Equals(Me._PhoneNo, Value) = False) Then
                Me.OnPhoneNoChanging(Value)
                Me.SendPropertyChanging()
                Me._PhoneNo = Value
                Me.SendPropertyChanged("PhoneNo")
                Me.OnPhoneNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(255)")>
    Public Property FaxNo() As String
        Get
            Return Me._FaxNo
        End Get
        Set
            If (String.Equals(Me._FaxNo, Value) = False) Then
                Me.OnFaxNoChanging(Value)
                Me.SendPropertyChanging()
                Me._FaxNo = Value
                Me.SendPropertyChanged("FaxNo")
                Me.OnFaxNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="NVarChar(255)")>
    Public Property SiteCeaseDate() As String
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (String.Equals(Me._SiteCeaseDate, Value) = False) Then
                Me.OnSiteCeaseDateChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteCeaseDate = Value
                Me.SendPropertyChanged("SiteCeaseDate")
                Me.OnSiteCeaseDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_lat", DbType:="VarChar(200)")>
    Public Property calc_lat() As String
        Get
            Return Me._calc_lat
        End Get
        Set
            If (String.Equals(Me._calc_lat, Value) = False) Then
                Me.Oncalc_latChanging(Value)
                Me.SendPropertyChanging()
                Me._calc_lat = Value
                Me.SendPropertyChanged("calc_lat")
                Me.Oncalc_latChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_lng", DbType:="VarChar(200)")>
    Public Property calc_lng() As String
        Get
            Return Me._calc_lng
        End Get
        Set
            If (String.Equals(Me._calc_lng, Value) = False) Then
                Me.Oncalc_lngChanging(Value)
                Me.SendPropertyChanging()
                Me._calc_lng = Value
                Me.SendPropertyChanged("calc_lng")
                Me.Oncalc_lngChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_field1", DbType:="VarChar(200)")>
    Public Property calc_field1() As String
        Get
            Return Me._calc_field1
        End Get
        Set
            If (String.Equals(Me._calc_field1, Value) = False) Then
                Me.Oncalc_field1Changing(Value)
                Me.SendPropertyChanging()
                Me._calc_field1 = Value
                Me.SendPropertyChanged("calc_field1")
                Me.Oncalc_field1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pk", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property pk() As Integer
        Get
            Return Me._pk
        End Get
        Set
            If ((Me._pk = Value) _
                        = False) Then
                Me.OnpkChanging(Value)
                Me.SendPropertyChanging()
                Me._pk = Value
                Me.SendPropertyChanged("pk")
                Me.OnpkChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NW_latlng", DbType:="VarChar(500)")>
    Public Property NW_latlng() As String
        Get
            Return Me._NW_latlng
        End Get
        Set
            If (String.Equals(Me._NW_latlng, Value) = False) Then
                Me.OnNW_latlngChanging(Value)
                Me.SendPropertyChanging()
                Me._NW_latlng = Value
                Me.SendPropertyChanged("NW_latlng")
                Me.OnNW_latlngChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NE_latlng", DbType:="VarChar(500)")>
    Public Property NE_latlng() As String
        Get
            Return Me._NE_latlng
        End Get
        Set
            If (String.Equals(Me._NE_latlng, Value) = False) Then
                Me.OnNE_latlngChanging(Value)
                Me.SendPropertyChanging()
                Me._NE_latlng = Value
                Me.SendPropertyChanged("NE_latlng")
                Me.OnNE_latlngChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SE_latlng", DbType:="VarChar(500)")>
    Public Property SE_latlng() As String
        Get
            Return Me._SE_latlng
        End Get
        Set
            If (String.Equals(Me._SE_latlng, Value) = False) Then
                Me.OnSE_latlngChanging(Value)
                Me.SendPropertyChanging()
                Me._SE_latlng = Value
                Me.SendPropertyChanged("SE_latlng")
                Me.OnSE_latlngChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SW_latlng", DbType:="VarChar(500)")>
    Public Property SW_latlng() As String
        Get
            Return Me._SW_latlng
        End Get
        Set
            If (String.Equals(Me._SW_latlng, Value) = False) Then
                Me.OnSW_latlngChanging(Value)
                Me.SendPropertyChanging()
                Me._SW_latlng = Value
                Me.SendPropertyChanged("SW_latlng")
                Me.OnSW_latlngChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contact")>
Partial Public Class Contact
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationID As System.Guid

    Private _Forname As String

    Private _Surname As String

    Private _EmailAddress As String

    Private _MobileNumber As String

    Private _CompanyName As String

    Private _ContactID As System.Guid

    Private _Notes As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFornameChanging(value As String)
    End Sub
    Partial Private Sub OnFornameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnMobileNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNumberChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Forname", DbType:="VarChar(250)")>
    Public Property Forname() As String
        Get
            Return Me._Forname
        End Get
        Set
            If (String.Equals(Me._Forname, Value) = False) Then
                Me.OnFornameChanging(Value)
                Me.SendPropertyChanging()
                Me._Forname = Value
                Me.SendPropertyChanged("Forname")
                Me.OnFornameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(250)")>
    Public Property Surname() As String
        Get
            Return Me._Surname
        End Get
        Set
            If (String.Equals(Me._Surname, Value) = False) Then
                Me.OnSurnameChanging(Value)
                Me.SendPropertyChanging()
                Me._Surname = Value
                Me.SendPropertyChanged("Surname")
                Me.OnSurnameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(250)")>
    Public Property EmailAddress() As String
        Get
            Return Me._EmailAddress
        End Get
        Set
            If (String.Equals(Me._EmailAddress, Value) = False) Then
                Me.OnEmailAddressChanging(Value)
                Me.SendPropertyChanging()
                Me._EmailAddress = Value
                Me.SendPropertyChanged("EmailAddress")
                Me.OnEmailAddressChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNumber", DbType:="VarChar(50)")>
    Public Property MobileNumber() As String
        Get
            Return Me._MobileNumber
        End Get
        Set
            If (String.Equals(Me._MobileNumber, Value) = False) Then
                Me.OnMobileNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._MobileNumber = Value
                Me.SendPropertyChanged("MobileNumber")
                Me.OnMobileNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="VarChar(300)")>
    Public Property CompanyName() As String
        Get
            Return Me._CompanyName
        End Get
        Set
            If (String.Equals(Me._CompanyName, Value) = False) Then
                Me.OnCompanyNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CompanyName = Value
                Me.SendPropertyChanged("CompanyName")
                Me.OnCompanyNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ContactID() As System.Guid
        Get
            Return Me._ContactID
        End Get
        Set
            If ((Me._ContactID = Value) _
                        = False) Then
                Me.OnContactIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ContactID = Value
                Me.SendPropertyChanged("ContactID")
                Me.OnContactIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Development")>
Partial Public Class Development
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _DevelopmentID As Integer

    Private _Title As String

    Private _Description As String

    Private _Notes As String

    Private _EstimateReleaseDate As System.Nullable(Of Date)

    Private _Released As System.Nullable(Of Date)

    Private _Status As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDevelopmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDevelopmentIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnEstimateReleaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstimateReleaseDateChanged()
    End Sub
    Partial Private Sub OnReleasedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReleasedChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DevelopmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property DevelopmentID() As Integer
        Get
            Return Me._DevelopmentID
        End Get
        Set
            If ((Me._DevelopmentID = Value) _
                        = False) Then
                Me.OnDevelopmentIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DevelopmentID = Value
                Me.SendPropertyChanged("DevelopmentID")
                Me.OnDevelopmentIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=False)>
    Public Property Title() As String
        Get
            Return Me._Title
        End Get
        Set
            If (String.Equals(Me._Title, Value) = False) Then
                Me.OnTitleChanging(Value)
                Me.SendPropertyChanging()
                Me._Title = Value
                Me.SendPropertyChanged("Title")
                Me.OnTitleChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NChar(10)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimateReleaseDate", DbType:="DateTime")>
    Public Property EstimateReleaseDate() As System.Nullable(Of Date)
        Get
            Return Me._EstimateReleaseDate
        End Get
        Set
            If (Me._EstimateReleaseDate.Equals(Value) = False) Then
                Me.OnEstimateReleaseDateChanging(Value)
                Me.SendPropertyChanging()
                Me._EstimateReleaseDate = Value
                Me.SendPropertyChanged("EstimateReleaseDate")
                Me.OnEstimateReleaseDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Released", DbType:="DateTime")>
    Public Property Released() As System.Nullable(Of Date)
        Get
            Return Me._Released
        End Get
        Set
            If (Me._Released.Equals(Value) = False) Then
                Me.OnReleasedChanging(Value)
                Me.SendPropertyChanging()
                Me._Released = Value
                Me.SendPropertyChanged("Released")
                Me.OnReleasedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(MAX)")>
    Public Property Status() As String
        Get
            Return Me._Status
        End Get
        Set
            If (String.Equals(Me._Status, Value) = False) Then
                Me.OnStatusChanging(Value)
                Me.SendPropertyChanging()
                Me._Status = Value
                Me.SendPropertyChanged("Status")
                Me.OnStatusChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Device")>
Partial Public Class Device
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _DeviceID As String

    Private _PhoneNumber As String

    Private _IMEI As String

    Private _notes As String

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _CreationDate As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnIMEIChanging(value As String)
    End Sub
    Partial Private Sub OnIMEIChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me.OnDeviceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DeviceID = Value
                Me.SendPropertyChanged("DeviceID")
                Me.OnDeviceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(50)")>
    Public Property PhoneNumber() As String
        Get
            Return Me._PhoneNumber
        End Get
        Set
            If (String.Equals(Me._PhoneNumber, Value) = False) Then
                Me.OnPhoneNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._PhoneNumber = Value
                Me.SendPropertyChanged("PhoneNumber")
                Me.OnPhoneNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMEI", DbType:="VarChar(50)")>
    Public Property IMEI() As String
        Get
            Return Me._IMEI
        End Get
        Set
            If (String.Equals(Me._IMEI, Value) = False) Then
                Me.OnIMEIChanging(Value)
                Me.SendPropertyChanging()
                Me._IMEI = Value
                Me.SendPropertyChanged("IMEI")
                Me.OnIMEIChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="VarChar(MAX)")>
    Public Property notes() As String
        Get
            Return Me._notes
        End Get
        Set
            If (String.Equals(Me._notes, Value) = False) Then
                Me.OnnotesChanging(Value)
                Me.SendPropertyChanging()
                Me._notes = Value
                Me.SendPropertyChanged("notes")
                Me.OnnotesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>
    Public Property CreationDate() As System.Nullable(Of Date)
        Get
            Return Me._CreationDate
        End Get
        Set
            If (Me._CreationDate.Equals(Value) = False) Then
                Me.OnCreationDateChanging(Value)
                Me.SendPropertyChanging()
                Me._CreationDate = Value
                Me.SendPropertyChanged("CreationDate")
                Me.OnCreationDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Feature")>
Partial Public Class Feature
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _FeatureID As System.Guid

    Private _FeatureName As String

    Private _FeatureDescription As String

    Private _ApplicationFeatures As EntitySet(Of ApplicationFeature)

    Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    Partial Private Sub OnFeatureNameChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureNameChanged()
    End Sub
    Partial Private Sub OnFeatureDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationFeatures = New EntitySet(Of ApplicationFeature)(AddressOf Me.attach_ApplicationFeatures, AddressOf Me.detach_ApplicationFeatures)
        Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property FeatureID() As System.Guid
        Get
            Return Me._FeatureID
        End Get
        Set
            If ((Me._FeatureID = Value) _
                        = False) Then
                Me.OnFeatureIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FeatureID = Value
                Me.SendPropertyChanged("FeatureID")
                Me.OnFeatureIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureName", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=False)>
    Public Property FeatureName() As String
        Get
            Return Me._FeatureName
        End Get
        Set
            If (String.Equals(Me._FeatureName, Value) = False) Then
                Me.OnFeatureNameChanging(Value)
                Me.SendPropertyChanging()
                Me._FeatureName = Value
                Me.SendPropertyChanged("FeatureName")
                Me.OnFeatureNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureDescription", DbType:="VarChar(MAX)")>
    Public Property FeatureDescription() As String
        Get
            Return Me._FeatureDescription
        End Get
        Set
            If (String.Equals(Me._FeatureDescription, Value) = False) Then
                Me.OnFeatureDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._FeatureDescription = Value
                Me.SendPropertyChanged("FeatureDescription")
                Me.OnFeatureDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeature", Storage:="_ApplicationFeatures", ThisKey:="FeatureID", OtherKey:="FeatureID")>
    Public Property ApplicationFeatures() As EntitySet(Of ApplicationFeature)
        Get
            Return Me._ApplicationFeatures
        End Get
        Set
            Me._ApplicationFeatures.Assign(Value)
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="FeatureID", OtherKey:="FeatureID")>
    Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
        Get
            Return Me._ApplicationFeatureRoles
        End Get
        Set
            Me._ApplicationFeatureRoles.Assign(Value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_ApplicationFeatures(ByVal entity As ApplicationFeature)
        Me.SendPropertyChanging()
        entity.Feature = Me
    End Sub

    Private Sub detach_ApplicationFeatures(ByVal entity As ApplicationFeature)
        Me.SendPropertyChanging()
        entity.Feature = Nothing
    End Sub

    Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
        Me.SendPropertyChanging()
        entity.Feature = Me
    End Sub

    Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
        Me.SendPropertyChanging()
        entity.Feature = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetMapMarker")>
Partial Public Class FleetMapMarker
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _FleetMapMarkerId As System.Guid

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _Vehicle_ApplicationImageId As System.Nullable(Of System.Guid)

    Private _Home_ApplicationImageId As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFleetMapMarkerIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFleetMapMarkerIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnVehicle_ApplicationImageIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVehicle_ApplicationImageIdChanged()
    End Sub
    Partial Private Sub OnHome_ApplicationImageIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnHome_ApplicationImageIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FleetMapMarkerId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property FleetMapMarkerId() As System.Guid
        Get
            Return Me._FleetMapMarkerId
        End Get
        Set
            If ((Me._FleetMapMarkerId = Value) _
                        = False) Then
                Me.OnFleetMapMarkerIdChanging(Value)
                Me.SendPropertyChanging()
                Me._FleetMapMarkerId = Value
                Me.SendPropertyChanged("FleetMapMarkerId")
                Me.OnFleetMapMarkerIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_ApplicationImageId", DbType:="UniqueIdentifier")>
    Public Property Vehicle_ApplicationImageId() As System.Nullable(Of System.Guid)
        Get
            Return Me._Vehicle_ApplicationImageId
        End Get
        Set
            If (Me._Vehicle_ApplicationImageId.Equals(Value) = False) Then
                Me.OnVehicle_ApplicationImageIdChanging(Value)
                Me.SendPropertyChanging()
                Me._Vehicle_ApplicationImageId = Value
                Me.SendPropertyChanged("Vehicle_ApplicationImageId")
                Me.OnVehicle_ApplicationImageIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Home_ApplicationImageId", DbType:="UniqueIdentifier")>
    Public Property Home_ApplicationImageId() As System.Nullable(Of System.Guid)
        Get
            Return Me._Home_ApplicationImageId
        End Get
        Set
            If (Me._Home_ApplicationImageId.Equals(Value) = False) Then
                Me.OnHome_ApplicationImageIdChanging(Value)
                Me.SendPropertyChanging()
                Me._Home_ApplicationImageId = Value
                Me.SendPropertyChanged("Home_ApplicationImageId")
                Me.OnHome_ApplicationImageIdChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollisionAlert")>
Partial Public Class GeoFenceDeviceCollisionAlert
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _GeoFenceDeviceCollisionAlertID As System.Guid

    Private _GeoFenceDeviceCollisionID As System.Guid

    Private _MessageSentEmail As String

    Private _MessageSendText As String

    Private _DeliveryEmailAddresses As String

    Private _DeliveryTexts As String

    Private _DeliveryGroups As String

    Private _MessageSent As System.Nullable(Of Date)

    Private _AlertTypeID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionAlertIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionAlertIDChanged()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionIDChanged()
    End Sub
    Partial Private Sub OnMessageSentEmailChanging(value As String)
    End Sub
    Partial Private Sub OnMessageSentEmailChanged()
    End Sub
    Partial Private Sub OnMessageSendTextChanging(value As String)
    End Sub
    Partial Private Sub OnMessageSendTextChanged()
    End Sub
    Partial Private Sub OnDeliveryEmailAddressesChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryEmailAddressesChanged()
    End Sub
    Partial Private Sub OnDeliveryTextsChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryTextsChanged()
    End Sub
    Partial Private Sub OnDeliveryGroupsChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryGroupsChanged()
    End Sub
    Partial Private Sub OnMessageSentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMessageSentChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollisionAlertID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property GeoFenceDeviceCollisionAlertID() As System.Guid
        Get
            Return Me._GeoFenceDeviceCollisionAlertID
        End Get
        Set
            If ((Me._GeoFenceDeviceCollisionAlertID = Value) _
                        = False) Then
                Me.OnGeoFenceDeviceCollisionAlertIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GeoFenceDeviceCollisionAlertID = Value
                Me.SendPropertyChanged("GeoFenceDeviceCollisionAlertID")
                Me.OnGeoFenceDeviceCollisionAlertIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollisionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeoFenceDeviceCollisionID() As System.Guid
        Get
            Return Me._GeoFenceDeviceCollisionID
        End Get
        Set
            If ((Me._GeoFenceDeviceCollisionID = Value) _
                        = False) Then
                Me.OnGeoFenceDeviceCollisionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GeoFenceDeviceCollisionID = Value
                Me.SendPropertyChanged("GeoFenceDeviceCollisionID")
                Me.OnGeoFenceDeviceCollisionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSentEmail", DbType:="VarChar(MAX)")>
    Public Property MessageSentEmail() As String
        Get
            Return Me._MessageSentEmail
        End Get
        Set
            If (String.Equals(Me._MessageSentEmail, Value) = False) Then
                Me.OnMessageSentEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._MessageSentEmail = Value
                Me.SendPropertyChanged("MessageSentEmail")
                Me.OnMessageSentEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSendText", DbType:="VarChar(MAX)")>
    Public Property MessageSendText() As String
        Get
            Return Me._MessageSendText
        End Get
        Set
            If (String.Equals(Me._MessageSendText, Value) = False) Then
                Me.OnMessageSendTextChanging(Value)
                Me.SendPropertyChanging()
                Me._MessageSendText = Value
                Me.SendPropertyChanged("MessageSendText")
                Me.OnMessageSendTextChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryEmailAddresses", DbType:="VarChar(MAX)")>
    Public Property DeliveryEmailAddresses() As String
        Get
            Return Me._DeliveryEmailAddresses
        End Get
        Set
            If (String.Equals(Me._DeliveryEmailAddresses, Value) = False) Then
                Me.OnDeliveryEmailAddressesChanging(Value)
                Me.SendPropertyChanging()
                Me._DeliveryEmailAddresses = Value
                Me.SendPropertyChanged("DeliveryEmailAddresses")
                Me.OnDeliveryEmailAddressesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryTexts", DbType:="VarChar(MAX)")>
    Public Property DeliveryTexts() As String
        Get
            Return Me._DeliveryTexts
        End Get
        Set
            If (String.Equals(Me._DeliveryTexts, Value) = False) Then
                Me.OnDeliveryTextsChanging(Value)
                Me.SendPropertyChanging()
                Me._DeliveryTexts = Value
                Me.SendPropertyChanged("DeliveryTexts")
                Me.OnDeliveryTextsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryGroups", DbType:="VarChar(1000)")>
    Public Property DeliveryGroups() As String
        Get
            Return Me._DeliveryGroups
        End Get
        Set
            If (String.Equals(Me._DeliveryGroups, Value) = False) Then
                Me.OnDeliveryGroupsChanging(Value)
                Me.SendPropertyChanging()
                Me._DeliveryGroups = Value
                Me.SendPropertyChanged("DeliveryGroups")
                Me.OnDeliveryGroupsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSent", DbType:="Date")>
    Public Property MessageSent() As System.Nullable(Of Date)
        Get
            Return Me._MessageSent
        End Get
        Set
            If (Me._MessageSent.Equals(Value) = False) Then
                Me.OnMessageSentChanging(Value)
                Me.SendPropertyChanging()
                Me._MessageSent = Value
                Me.SendPropertyChanged("MessageSent")
                Me.OnMessageSentChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier")>
    Public Property AlertTypeID() As System.Nullable(Of System.Guid)
        Get
            Return Me._AlertTypeID
        End Get
        Set
            If (Me._AlertTypeID.Equals(Value) = False) Then
                Me.OnAlertTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AlertTypeID = Value
                Me.SendPropertyChanged("AlertTypeID")
                Me.OnAlertTypeIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollission")>
Partial Public Class GeoFenceDeviceCollission
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _GeoFenceDeviceCollissionID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _DeviceID As String

    Private _StartTime As System.Nullable(Of Date)

    Private _EndTime As System.Nullable(Of Date)

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollissionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollissionIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property GeoFenceDeviceCollissionID() As System.Guid
        Get
            Return Me._GeoFenceDeviceCollissionID
        End Get
        Set
            If ((Me._GeoFenceDeviceCollissionID = Value) _
                        = False) Then
                Me.OnGeoFenceDeviceCollissionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GeoFenceDeviceCollissionID = Value
                Me.SendPropertyChanged("GeoFenceDeviceCollissionID")
                Me.OnGeoFenceDeviceCollissionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me.OnDeviceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DeviceID = Value
                Me.SendPropertyChanged("DeviceID")
                Me.OnDeviceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>
    Public Property StartTime() As System.Nullable(Of Date)
        Get
            Return Me._StartTime
        End Get
        Set
            If (Me._StartTime.Equals(Value) = False) Then
                Me.OnStartTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._StartTime = Value
                Me.SendPropertyChanged("StartTime")
                Me.OnStartTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>
    Public Property EndTime() As System.Nullable(Of Date)
        Get
            Return Me._EndTime
        End Get
        Set
            If (Me._EndTime.Equals(Value) = False) Then
                Me.OnEndTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._EndTime = Value
                Me.SendPropertyChanged("EndTime")
                Me.OnEndTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me.OnApplicationGeoFenceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationGeoFenceID = Value
                Me.SendPropertyChanged("ApplicationGeoFenceID")
                Me.OnApplicationGeoFenceIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollission_20160604")>
Partial Public Class GeoFenceDeviceCollission_20160604

    Private _GeoFenceDeviceCollissionID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _DeviceID As String

    Private _StartTime As System.Nullable(Of Date)

    Private _EndTime As System.Nullable(Of Date)

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeoFenceDeviceCollissionID() As System.Guid
        Get
            Return Me._GeoFenceDeviceCollissionID
        End Get
        Set
            If ((Me._GeoFenceDeviceCollissionID = Value) _
                        = False) Then
                Me._GeoFenceDeviceCollissionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me._DeviceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>
    Public Property StartTime() As System.Nullable(Of Date)
        Get
            Return Me._StartTime
        End Get
        Set
            If (Me._StartTime.Equals(Value) = False) Then
                Me._StartTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>
    Public Property EndTime() As System.Nullable(Of Date)
        Get
            Return Me._EndTime
        End Get
        Set
            If (Me._EndTime.Equals(Value) = False) Then
                Me._EndTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me._ApplicationGeoFenceID = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Group]")>
Partial Public Class [Group]
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _GroupID As System.Guid

    Private _GroupName As String

    Private _ApplicationID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property GroupID() As System.Guid
        Get
            Return Me._GroupID
        End Get
        Set
            If ((Me._GroupID = Value) _
                        = False) Then
                Me.OnGroupIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GroupID = Value
                Me.SendPropertyChanged("GroupID")
                Me.OnGroupIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(200)")>
    Public Property GroupName() As String
        Get
            Return Me._GroupName
        End Get
        Set
            If (String.Equals(Me._GroupName, Value) = False) Then
                Me.OnGroupNameChanging(Value)
                Me.SendPropertyChanging()
                Me._GroupName = Value
                Me.SendPropertyChanged("GroupName")
                Me.OnGroupNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[GroupMember.old]")>
Partial Public Class GroupMember_old

    Private _GroupMemberID As System.Guid

    Private _GroupID As System.Guid

    Private _MemberType As Integer

    Private _MemberID As System.Guid

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupMemberID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GroupMemberID() As System.Guid
        Get
            Return Me._GroupMemberID
        End Get
        Set
            If ((Me._GroupMemberID = Value) _
                        = False) Then
                Me._GroupMemberID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GroupID() As System.Guid
        Get
            Return Me._GroupID
        End Get
        Set
            If ((Me._GroupID = Value) _
                        = False) Then
                Me._GroupID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberType", DbType:="Int NOT NULL")>
    Public Property MemberType() As Integer
        Get
            Return Me._MemberType
        End Get
        Set
            If ((Me._MemberType = Value) _
                        = False) Then
                Me._MemberType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property MemberID() As System.Guid
        Get
            Return Me._MemberID
        End Get
        Set
            If ((Me._MemberID = Value) _
                        = False) Then
                Me._MemberID = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GroupSubscriber")>
Partial Public Class GroupSubscriber
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _GroupSubscriberID As System.Guid

    Private _GroupID As System.Guid

    Private _SubsciberTypeID As Integer

    Private _SendEmail As System.Nullable(Of Boolean)

    Private _SendText As System.Nullable(Of Boolean)

    Private _NativeID As System.Guid

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupSubscriberIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnSubsciberTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubsciberTypeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNativeIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property GroupSubscriberID() As System.Guid
        Get
            Return Me._GroupSubscriberID
        End Get
        Set
            If ((Me._GroupSubscriberID = Value) _
                        = False) Then
                Me.OnGroupSubscriberIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GroupSubscriberID = Value
                Me.SendPropertyChanged("GroupSubscriberID")
                Me.OnGroupSubscriberIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GroupID() As System.Guid
        Get
            Return Me._GroupID
        End Get
        Set
            If ((Me._GroupID = Value) _
                        = False) Then
                Me.OnGroupIDChanging(Value)
                Me.SendPropertyChanging()
                Me._GroupID = Value
                Me.SendPropertyChanged("GroupID")
                Me.OnGroupIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsciberTypeID", DbType:="Int NOT NULL")>
    Public Property SubsciberTypeID() As Integer
        Get
            Return Me._SubsciberTypeID
        End Get
        Set
            If ((Me._SubsciberTypeID = Value) _
                        = False) Then
                Me.OnSubsciberTypeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubsciberTypeID = Value
                Me.SendPropertyChanged("SubsciberTypeID")
                Me.OnSubsciberTypeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>
    Public Property SendEmail() As System.Nullable(Of Boolean)
        Get
            Return Me._SendEmail
        End Get
        Set
            If (Me._SendEmail.Equals(Value) = False) Then
                Me.OnSendEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._SendEmail = Value
                Me.SendPropertyChanged("SendEmail")
                Me.OnSendEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>
    Public Property SendText() As System.Nullable(Of Boolean)
        Get
            Return Me._SendText
        End Get
        Set
            If (Me._SendText.Equals(Value) = False) Then
                Me.OnSendTextChanging(Value)
                Me.SendPropertyChanging()
                Me._SendText = Value
                Me.SendPropertyChanged("SendText")
                Me.OnSendTextChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property NativeID() As System.Guid
        Get
            Return Me._NativeID
        End Get
        Set
            If ((Me._NativeID = Value) _
                        = False) Then
                Me.OnNativeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._NativeID = Value
                Me.SendPropertyChanged("NativeID")
                Me.OnNativeIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.j1939")>
Partial Public Class j1939

    Private _PGN As System.Nullable(Of Double)

    Private _Parameter_Group_Label As String

    Private _PGN_Length As String

    Private _Transmission_Rate As String

    Private _Acronym As String

    Private _pos As String

    Private _SPN_length As System.Nullable(Of Double)

    Private _SPN As System.Nullable(Of Double)

    Private __51_CAT_793F_Haul_Trucks As String

    Private __0_CAT_16M_Grader As String

    Private __0_Komatsu_1200_Wheel_Loaders As String

    Private __0_Liebherr_R9400_Excavators As String

    Private __0_Liebherr_R996B_Excavators As String

    Private __0_Atlas_Copco_PV271_Drills As String

    Private __0_Atlas_Copco_D65_Drills As String

    Private _Name As String

    Private _Description As String

    Private _Data_Range As String

    Private _Operational_Range As String

    Private _Resolution As String

    Private _Offset As System.Nullable(Of Double)

    Private _Units As String

    Private _Date_SPN_was_added_to_PGN As System.Nullable(Of Date)

    Private _Status_of_SPN_addition_to_PGN As String

    Private _Date_SPN_was_added_modified As System.Nullable(Of Date)

    Private _Status_of_SPN As String

    Private _SPN_Doc As String

    Private _PGN_Doc As String

    Private _F29 As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>
    Public Property PGN() As System.Nullable(Of Double)
        Get
            Return Me._PGN
        End Get
        Set
            If (Me._PGN.Equals(Value) = False) Then
                Me._PGN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Parameter Group Label]", Storage:="_Parameter_Group_Label", DbType:="NVarChar(255)")>
    Public Property Parameter_Group_Label() As String
        Get
            Return Me._Parameter_Group_Label
        End Get
        Set
            If (String.Equals(Me._Parameter_Group_Label, Value) = False) Then
                Me._Parameter_Group_Label = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Length]", Storage:="_PGN_Length", DbType:="NVarChar(255)")>
    Public Property PGN_Length() As String
        Get
            Return Me._PGN_Length
        End Get
        Set
            If (String.Equals(Me._PGN_Length, Value) = False) Then
                Me._PGN_Length = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Transmission Rate]", Storage:="_Transmission_Rate", DbType:="NVarChar(255)")>
    Public Property Transmission_Rate() As String
        Get
            Return Me._Transmission_Rate
        End Get
        Set
            If (String.Equals(Me._Transmission_Rate, Value) = False) Then
                Me._Transmission_Rate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acronym", DbType:="NVarChar(255)")>
    Public Property Acronym() As String
        Get
            Return Me._Acronym
        End Get
        Set
            If (String.Equals(Me._Acronym, Value) = False) Then
                Me._Acronym = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(255)")>
    Public Property pos() As String
        Get
            Return Me._pos
        End Get
        Set
            If (String.Equals(Me._pos, Value) = False) Then
                Me._pos = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN length]", Storage:="_SPN_length", DbType:="Float")>
    Public Property SPN_length() As System.Nullable(Of Double)
        Get
            Return Me._SPN_length
        End Get
        Set
            If (Me._SPN_length.Equals(Value) = False) Then
                Me._SPN_length = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>
    Public Property SPN() As System.Nullable(Of Double)
        Get
            Return Me._SPN
        End Get
        Set
            If (Me._SPN.Equals(Value) = False) Then
                Me._SPN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[51 CAT 793F Haul Trucks]", Storage:="__51_CAT_793F_Haul_Trucks", DbType:="NVarChar(255)")>
    Public Property _51_CAT_793F_Haul_Trucks() As String
        Get
            Return Me.__51_CAT_793F_Haul_Trucks
        End Get
        Set
            If (String.Equals(Me.__51_CAT_793F_Haul_Trucks, Value) = False) Then
                Me.__51_CAT_793F_Haul_Trucks = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 CAT 16M Grader]", Storage:="__0_CAT_16M_Grader", DbType:="NVarChar(255)")>
    Public Property _0_CAT_16M_Grader() As String
        Get
            Return Me.__0_CAT_16M_Grader
        End Get
        Set
            If (String.Equals(Me.__0_CAT_16M_Grader, Value) = False) Then
                Me.__0_CAT_16M_Grader = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Komatsu 1200 Wheel Loaders]", Storage:="__0_Komatsu_1200_Wheel_Loaders", DbType:="NVarChar(255)")>
    Public Property _0_Komatsu_1200_Wheel_Loaders() As String
        Get
            Return Me.__0_Komatsu_1200_Wheel_Loaders
        End Get
        Set
            If (String.Equals(Me.__0_Komatsu_1200_Wheel_Loaders, Value) = False) Then
                Me.__0_Komatsu_1200_Wheel_Loaders = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R9400 Excavators]", Storage:="__0_Liebherr_R9400_Excavators", DbType:="NVarChar(255)")>
    Public Property _0_Liebherr_R9400_Excavators() As String
        Get
            Return Me.__0_Liebherr_R9400_Excavators
        End Get
        Set
            If (String.Equals(Me.__0_Liebherr_R9400_Excavators, Value) = False) Then
                Me.__0_Liebherr_R9400_Excavators = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R996B Excavators]", Storage:="__0_Liebherr_R996B_Excavators", DbType:="NVarChar(255)")>
    Public Property _0_Liebherr_R996B_Excavators() As String
        Get
            Return Me.__0_Liebherr_R996B_Excavators
        End Get
        Set
            If (String.Equals(Me.__0_Liebherr_R996B_Excavators, Value) = False) Then
                Me.__0_Liebherr_R996B_Excavators = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco PV271 Drills]", Storage:="__0_Atlas_Copco_PV271_Drills", DbType:="NVarChar(255)")>
    Public Property _0_Atlas_Copco_PV271_Drills() As String
        Get
            Return Me.__0_Atlas_Copco_PV271_Drills
        End Get
        Set
            If (String.Equals(Me.__0_Atlas_Copco_PV271_Drills, Value) = False) Then
                Me.__0_Atlas_Copco_PV271_Drills = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco D65 Drills]", Storage:="__0_Atlas_Copco_D65_Drills", DbType:="NVarChar(255)")>
    Public Property _0_Atlas_Copco_D65_Drills() As String
        Get
            Return Me.__0_Atlas_Copco_D65_Drills
        End Get
        Set
            If (String.Equals(Me.__0_Atlas_Copco_D65_Drills, Value) = False) Then
                Me.__0_Atlas_Copco_D65_Drills = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me._Description = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Data Range]", Storage:="_Data_Range", DbType:="NVarChar(255)")>
    Public Property Data_Range() As String
        Get
            Return Me._Data_Range
        End Get
        Set
            If (String.Equals(Me._Data_Range, Value) = False) Then
                Me._Data_Range = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Operational Range]", Storage:="_Operational_Range", DbType:="NVarChar(255)")>
    Public Property Operational_Range() As String
        Get
            Return Me._Operational_Range
        End Get
        Set
            If (String.Equals(Me._Operational_Range, Value) = False) Then
                Me._Operational_Range = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolution", DbType:="NVarChar(255)")>
    Public Property Resolution() As String
        Get
            Return Me._Resolution
        End Get
        Set
            If (String.Equals(Me._Resolution, Value) = False) Then
                Me._Resolution = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offset", DbType:="Float")>
    Public Property Offset() As System.Nullable(Of Double)
        Get
            Return Me._Offset
        End Get
        Set
            If (Me._Offset.Equals(Value) = False) Then
                Me._Offset = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units", DbType:="NVarChar(255)")>
    Public Property Units() As String
        Get
            Return Me._Units
        End Get
        Set
            If (String.Equals(Me._Units, Value) = False) Then
                Me._Units = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added to PGN]", Storage:="_Date_SPN_was_added_to_PGN", DbType:="DateTime")>
    Public Property Date_SPN_was_added_to_PGN() As System.Nullable(Of Date)
        Get
            Return Me._Date_SPN_was_added_to_PGN
        End Get
        Set
            If (Me._Date_SPN_was_added_to_PGN.Equals(Value) = False) Then
                Me._Date_SPN_was_added_to_PGN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN addition to PGN]", Storage:="_Status_of_SPN_addition_to_PGN", DbType:="NVarChar(255)")>
    Public Property Status_of_SPN_addition_to_PGN() As String
        Get
            Return Me._Status_of_SPN_addition_to_PGN
        End Get
        Set
            If (String.Equals(Me._Status_of_SPN_addition_to_PGN, Value) = False) Then
                Me._Status_of_SPN_addition_to_PGN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added/modified]", Storage:="_Date_SPN_was_added_modified", DbType:="DateTime")>
    Public Property Date_SPN_was_added_modified() As System.Nullable(Of Date)
        Get
            Return Me._Date_SPN_was_added_modified
        End Get
        Set
            If (Me._Date_SPN_was_added_modified.Equals(Value) = False) Then
                Me._Date_SPN_was_added_modified = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN]", Storage:="_Status_of_SPN", DbType:="NVarChar(255)")>
    Public Property Status_of_SPN() As String
        Get
            Return Me._Status_of_SPN
        End Get
        Set
            If (String.Equals(Me._Status_of_SPN, Value) = False) Then
                Me._Status_of_SPN = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN Doc]", Storage:="_SPN_Doc", DbType:="NVarChar(255)")>
    Public Property SPN_Doc() As String
        Get
            Return Me._SPN_Doc
        End Get
        Set
            If (String.Equals(Me._SPN_Doc, Value) = False) Then
                Me._SPN_Doc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Doc]", Storage:="_PGN_Doc", DbType:="NVarChar(255)")>
    Public Property PGN_Doc() As String
        Get
            Return Me._PGN_Doc
        End Get
        Set
            If (String.Equals(Me._PGN_Doc, Value) = False) Then
                Me._PGN_Doc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F29", DbType:="NVarChar(255)")>
    Public Property F29() As String
        Get
            Return Me._F29
        End Get
        Set
            If (String.Equals(Me._F29, Value) = False) Then
                Me._F29 = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaidFeatures")>
Partial Public Class PaidFeature
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationPaidFeaturesID As System.Guid

    Private _ApplicationID As System.Guid

    Private _PaidFeatureDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationPaidFeaturesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationPaidFeaturesIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnPaidFeatureDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPaidFeatureDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPaidFeaturesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationPaidFeaturesID() As System.Guid
        Get
            Return Me._ApplicationPaidFeaturesID
        End Get
        Set
            If ((Me._ApplicationPaidFeaturesID = Value) _
                        = False) Then
                Me.OnApplicationPaidFeaturesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationPaidFeaturesID = Value
                Me.SendPropertyChanged("ApplicationPaidFeaturesID")
                Me.OnApplicationPaidFeaturesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaidFeatureDescription", DbType:="NVarChar(MAX)")>
    Public Property PaidFeatureDescription() As String
        Get
            Return Me._PaidFeatureDescription
        End Get
        Set
            If (String.Equals(Me._PaidFeatureDescription, Value) = False) Then
                Me.OnPaidFeatureDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._PaidFeatureDescription = Value
                Me.SendPropertyChanged("PaidFeatureDescription")
                Me.OnPaidFeatureDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Setting")>
Partial Public Class Setting
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _SettingID As System.Guid

    Private _Name As String

    Private _ApplicationSettingValues As EntitySet(Of ApplicationSettingValue)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationSettingValues = New EntitySet(Of ApplicationSettingValue)(AddressOf Me.attach_ApplicationSettingValues, AddressOf Me.detach_ApplicationSettingValues)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property SettingID() As System.Guid
        Get
            Return Me._SettingID
        End Get
        Set
            If ((Me._SettingID = Value) _
                        = False) Then
                Me.OnSettingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SettingID = Value
                Me.SendPropertyChanged("SettingID")
                Me.OnSettingIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Setting_ApplicationSettingValue", Storage:="_ApplicationSettingValues", ThisKey:="SettingID", OtherKey:="SettingID")>
    Public Property ApplicationSettingValues() As EntitySet(Of ApplicationSettingValue)
        Get
            Return Me._ApplicationSettingValues
        End Get
        Set
            Me._ApplicationSettingValues.Assign(Value)
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

    Private Sub attach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
        Me.SendPropertyChanging()
        entity.Setting = Me
    End Sub

    Private Sub detach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
        Me.SendPropertyChanging()
        entity.Setting = Nothing
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SimulatorSetting")>
Partial Public Class SimulatorSetting
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _SimulatorSettingID As System.Guid

    Private _SourceDeviceID As String

    Private _StartTime As Date

    Private _EndTime As Date

    Private _DestinationDeviceID As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSimulatorSettingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSimulatorSettingIDChanged()
    End Sub
    Partial Private Sub OnSourceDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnSourceDeviceIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnDestinationDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDestinationDeviceIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SimulatorSettingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property SimulatorSettingID() As System.Guid
        Get
            Return Me._SimulatorSettingID
        End Get
        Set
            If ((Me._SimulatorSettingID = Value) _
                        = False) Then
                Me.OnSimulatorSettingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SimulatorSettingID = Value
                Me.SendPropertyChanged("SimulatorSettingID")
                Me.OnSimulatorSettingIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDeviceID", DbType:="VarChar(200) NOT NULL", CanBeNull:=False)>
    Public Property SourceDeviceID() As String
        Get
            Return Me._SourceDeviceID
        End Get
        Set
            If (String.Equals(Me._SourceDeviceID, Value) = False) Then
                Me.OnSourceDeviceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SourceDeviceID = Value
                Me.SendPropertyChanged("SourceDeviceID")
                Me.OnSourceDeviceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime NOT NULL")>
    Public Property StartTime() As Date
        Get
            Return Me._StartTime
        End Get
        Set
            If ((Me._StartTime = Value) _
                        = False) Then
                Me.OnStartTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._StartTime = Value
                Me.SendPropertyChanged("StartTime")
                Me.OnStartTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime NOT NULL")>
    Public Property EndTime() As Date
        Get
            Return Me._EndTime
        End Get
        Set
            If ((Me._EndTime = Value) _
                        = False) Then
                Me.OnEndTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._EndTime = Value
                Me.SendPropertyChanged("EndTime")
                Me.OnEndTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DestinationDeviceID", DbType:="VarChar(200) NOT NULL", CanBeNull:=False)>
    Public Property DestinationDeviceID() As String
        Get
            Return Me._DestinationDeviceID
        End Get
        Set
            If (String.Equals(Me._DestinationDeviceID, Value) = False) Then
                Me.OnDestinationDeviceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DestinationDeviceID = Value
                Me.SendPropertyChanged("DestinationDeviceID")
                Me.OnDestinationDeviceIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WebServiceLog")>
Partial Public Class WebServiceLog
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _WebServiceLog As Integer

    Private _RequestMethod As String

    Private _login As String

    Private _XMLRequest As String

    Private _company As String

    Private _XMLResponse As String

    Private _DateLogged As Date

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWebServiceLogChanging(value As Integer)
    End Sub
    Partial Private Sub OnWebServiceLogChanged()
    End Sub
    Partial Private Sub OnRequestMethodChanging(value As String)
    End Sub
    Partial Private Sub OnRequestMethodChanged()
    End Sub
    Partial Private Sub OnloginChanging(value As String)
    End Sub
    Partial Private Sub OnloginChanged()
    End Sub
    Partial Private Sub OnXMLRequestChanging(value As String)
    End Sub
    Partial Private Sub OnXMLRequestChanged()
    End Sub
    Partial Private Sub OncompanyChanging(value As String)
    End Sub
    Partial Private Sub OncompanyChanged()
    End Sub
    Partial Private Sub OnXMLResponseChanging(value As String)
    End Sub
    Partial Private Sub OnXMLResponseChanged()
    End Sub
    Partial Private Sub OnDateLoggedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateLoggedChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebServiceLog", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property WebServiceLog() As Integer
        Get
            Return Me._WebServiceLog
        End Get
        Set
            If ((Me._WebServiceLog = Value) _
                        = False) Then
                Me.OnWebServiceLogChanging(Value)
                Me.SendPropertyChanging()
                Me._WebServiceLog = Value
                Me.SendPropertyChanged("WebServiceLog")
                Me.OnWebServiceLogChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestMethod", DbType:="NVarChar(200)")>
    Public Property RequestMethod() As String
        Get
            Return Me._RequestMethod
        End Get
        Set
            If (String.Equals(Me._RequestMethod, Value) = False) Then
                Me.OnRequestMethodChanging(Value)
                Me.SendPropertyChanging()
                Me._RequestMethod = Value
                Me.SendPropertyChanged("RequestMethod")
                Me.OnRequestMethodChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_login", DbType:="VarChar(200)")>
    Public Property login() As String
        Get
            Return Me._login
        End Get
        Set
            If (String.Equals(Me._login, Value) = False) Then
                Me.OnloginChanging(Value)
                Me.SendPropertyChanging()
                Me._login = Value
                Me.SendPropertyChanged("login")
                Me.OnloginChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLRequest", DbType:="VarChar(MAX)")>
    Public Property XMLRequest() As String
        Get
            Return Me._XMLRequest
        End Get
        Set
            If (String.Equals(Me._XMLRequest, Value) = False) Then
                Me.OnXMLRequestChanging(Value)
                Me.SendPropertyChanging()
                Me._XMLRequest = Value
                Me.SendPropertyChanged("XMLRequest")
                Me.OnXMLRequestChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="VarChar(200)")>
    Public Property company() As String
        Get
            Return Me._company
        End Get
        Set
            If (String.Equals(Me._company, Value) = False) Then
                Me.OncompanyChanging(Value)
                Me.SendPropertyChanging()
                Me._company = Value
                Me.SendPropertyChanged("company")
                Me.OncompanyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLResponse", DbType:="VarChar(MAX)")>
    Public Property XMLResponse() As String
        Get
            Return Me._XMLResponse
        End Get
        Set
            If (String.Equals(Me._XMLResponse, Value) = False) Then
                Me.OnXMLResponseChanging(Value)
                Me.SendPropertyChanging()
                Me._XMLResponse = Value
                Me.SendPropertyChanged("XMLResponse")
                Me.OnXMLResponseChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLogged", DbType:="DateTime NOT NULL")>
    Public Property DateLogged() As Date
        Get
            Return Me._DateLogged
        End Get
        Set
            If ((Me._DateLogged = Value) _
                        = False) Then
                Me.OnDateLoggedChanging(Value)
                Me.SendPropertyChanging()
                Me._DateLogged = Value
                Me.SendPropertyChanged("DateLogged")
                Me.OnDateLoggedChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ReportSchdeule")>
Partial Public Class ReportSchdeule
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ReportScheduleID As System.Guid

    Private _ApplicationID As System.Guid

    Private _ReportName As String

    Private _ReportType As String

    Private _ReportTypeSpecific As String

    Private _ReportTime As System.Nullable(Of Date)

    Private _Enabled As System.Nullable(Of Boolean)

    Private _DateCreated As System.Nullable(Of Date)

    Private _Creator As String

    Private _ReportParams As String

    Private _SubscriberID As System.Nullable(Of System.Guid)

    Private _Schedule As String

    Private _Recipients As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReportScheduleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnReportScheduleIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnReportNameChanging(value As String)
    End Sub
    Partial Private Sub OnReportNameChanged()
    End Sub
    Partial Private Sub OnReportTypeChanging(value As String)
    End Sub
    Partial Private Sub OnReportTypeChanged()
    End Sub
    Partial Private Sub OnReportTypeSpecificChanging(value As String)
    End Sub
    Partial Private Sub OnReportTypeSpecificChanged()
    End Sub
    Partial Private Sub OnReportTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReportTimeChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnCreatorChanging(value As String)
    End Sub
    Partial Private Sub OnCreatorChanged()
    End Sub
    Partial Private Sub OnReportParamsChanging(value As String)
    End Sub
    Partial Private Sub OnReportParamsChanged()
    End Sub
    Partial Private Sub OnSubscriberIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberIDChanged()
    End Sub
    Partial Private Sub OnScheduleChanging(value As String)
    End Sub
    Partial Private Sub OnScheduleChanged()
    End Sub
    Partial Private Sub OnRecipientsChanging(value As String)
    End Sub
    Partial Private Sub OnRecipientsChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportScheduleID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ReportScheduleID() As System.Guid
        Get
            Return Me._ReportScheduleID
        End Get
        Set
            If ((Me._ReportScheduleID = Value) _
                        = False) Then
                Me.OnReportScheduleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ReportScheduleID = Value
                Me.SendPropertyChanged("ReportScheduleID")
                Me.OnReportScheduleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportName", DbType:="VarChar(100)")>
    Public Property ReportName() As String
        Get
            Return Me._ReportName
        End Get
        Set
            If (String.Equals(Me._ReportName, Value) = False) Then
                Me.OnReportNameChanging(Value)
                Me.SendPropertyChanging()
                Me._ReportName = Value
                Me.SendPropertyChanged("ReportName")
                Me.OnReportNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportType", DbType:="VarChar(100)")>
    Public Property ReportType() As String
        Get
            Return Me._ReportType
        End Get
        Set
            If (String.Equals(Me._ReportType, Value) = False) Then
                Me.OnReportTypeChanging(Value)
                Me.SendPropertyChanging()
                Me._ReportType = Value
                Me.SendPropertyChanged("ReportType")
                Me.OnReportTypeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportTypeSpecific", DbType:="VarChar(100)")>
    Public Property ReportTypeSpecific() As String
        Get
            Return Me._ReportTypeSpecific
        End Get
        Set
            If (String.Equals(Me._ReportTypeSpecific, Value) = False) Then
                Me.OnReportTypeSpecificChanging(Value)
                Me.SendPropertyChanging()
                Me._ReportTypeSpecific = Value
                Me.SendPropertyChanged("ReportTypeSpecific")
                Me.OnReportTypeSpecificChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportTime", DbType:="DateTime")>
    Public Property ReportTime() As System.Nullable(Of Date)
        Get
            Return Me._ReportTime
        End Get
        Set
            If (Me._ReportTime.Equals(Value) = False) Then
                Me.OnReportTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._ReportTime = Value
                Me.SendPropertyChanged("ReportTime")
                Me.OnReportTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>
    Public Property Enabled() As System.Nullable(Of Boolean)
        Get
            Return Me._Enabled
        End Get
        Set
            If (Me._Enabled.Equals(Value) = False) Then
                Me.OnEnabledChanging(Value)
                Me.SendPropertyChanging()
                Me._Enabled = Value
                Me.SendPropertyChanged("Enabled")
                Me.OnEnabledChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>
    Public Property DateCreated() As System.Nullable(Of Date)
        Get
            Return Me._DateCreated
        End Get
        Set
            If (Me._DateCreated.Equals(Value) = False) Then
                Me.OnDateCreatedChanging(Value)
                Me.SendPropertyChanging()
                Me._DateCreated = Value
                Me.SendPropertyChanged("DateCreated")
                Me.OnDateCreatedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Creator", DbType:="VarChar(500)")>
    Public Property Creator() As String
        Get
            Return Me._Creator
        End Get
        Set
            If (String.Equals(Me._Creator, Value) = False) Then
                Me.OnCreatorChanging(Value)
                Me.SendPropertyChanging()
                Me._Creator = Value
                Me.SendPropertyChanged("Creator")
                Me.OnCreatorChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportParams", DbType:="VarChar(MAX)")>
    Public Property ReportParams() As String
        Get
            Return Me._ReportParams
        End Get
        Set
            If (String.Equals(Me._ReportParams, Value) = False) Then
                Me.OnReportParamsChanging(Value)
                Me.SendPropertyChanging()
                Me._ReportParams = Value
                Me.SendPropertyChanged("ReportParams")
                Me.OnReportParamsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberID", DbType:="UniqueIdentifier")>
    Public Property SubscriberID() As System.Nullable(Of System.Guid)
        Get
            Return Me._SubscriberID
        End Get
        Set
            If (Me._SubscriberID.Equals(Value) = False) Then
                Me.OnSubscriberIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberID = Value
                Me.SendPropertyChanged("SubscriberID")
                Me.OnSubscriberIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule", DbType:="VarChar(MAX)")>
    Public Property Schedule() As String
        Get
            Return Me._Schedule
        End Get
        Set
            If (String.Equals(Me._Schedule, Value) = False) Then
                Me.OnScheduleChanging(Value)
                Me.SendPropertyChanging()
                Me._Schedule = Value
                Me.SendPropertyChanged("Schedule")
                Me.OnScheduleChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Recipients", DbType:="VarChar(MAX)")>
    Public Property Recipients() As String
        Get
            Return Me._Recipients
        End Get
        Set
            If (String.Equals(Me._Recipients, Value) = False) Then
                Me.OnRecipientsChanging(Value)
                Me.SendPropertyChanging()
                Me._Recipients = Value
                Me.SendPropertyChanged("Recipients")
                Me.OnRecipientsChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationBooking")>
Partial Public Class ApplicationBooking
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationBookingId As System.Guid

    Private _ApplicationDriverID As System.Guid

    Private _ApplicationId As System.Guid

    Private _ArrivalTime As System.Nullable(Of Date)

    Private _GeofenceLeaveId As System.Guid

    Private _GeofenceDestinationId As System.Guid

    Private _IsAlert5min As System.Nullable(Of Boolean)

    Private _IsAlertLeaveForPickup As System.Nullable(Of Boolean)

    Private _ContactID As System.Guid

    Private _CustomerPhone As String

    Private _CustomerEmail As String

    Private _GeofenceLeave As String

    Private _GeofenceDestination As String

    Private _DateCreated As System.Nullable(Of Date)

    Private _ApplicationDriver As EntityRef(Of ApplicationDriver)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationBookingIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationBookingIdChanged()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnArrivalTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnArrivalTimeChanged()
    End Sub
    Partial Private Sub OnGeofenceLeaveIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeofenceLeaveIdChanged()
    End Sub
    Partial Private Sub OnGeofenceDestinationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeofenceDestinationIdChanged()
    End Sub
    Partial Private Sub OnIsAlert5minChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlert5minChanged()
    End Sub
    Partial Private Sub OnIsAlertLeaveForPickupChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlertLeaveForPickupChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnCustomerPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPhoneChanged()
    End Sub
    Partial Private Sub OnCustomerEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerEmailChanged()
    End Sub
    Partial Private Sub OnGeofenceLeaveChanging(value As String)
    End Sub
    Partial Private Sub OnGeofenceLeaveChanged()
    End Sub
    Partial Private Sub OnGeofenceDestinationChanging(value As String)
    End Sub
    Partial Private Sub OnGeofenceDestinationChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        Me._ApplicationDriver = CType(Nothing, EntityRef(Of ApplicationDriver))
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationBookingId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ApplicationBookingId() As System.Guid
        Get
            Return Me._ApplicationBookingId
        End Get
        Set
            If ((Me._ApplicationBookingId = Value) _
                        = False) Then
                Me.OnApplicationBookingIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationBookingId = Value
                Me.SendPropertyChanged("ApplicationBookingId")
                Me.OnApplicationBookingIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationDriverID() As System.Guid
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If ((Me._ApplicationDriverID = Value) _
                        = False) Then
                If Me._ApplicationDriver.HasLoadedOrAssignedValue Then
                    Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                End If
                Me.OnApplicationDriverIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationDriverID = Value
                Me.SendPropertyChanged("ApplicationDriverID")
                Me.OnApplicationDriverIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime")>
    Public Property ArrivalTime() As System.Nullable(Of Date)
        Get
            Return Me._ArrivalTime
        End Get
        Set
            If (Me._ArrivalTime.Equals(Value) = False) Then
                Me.OnArrivalTimeChanging(Value)
                Me.SendPropertyChanging()
                Me._ArrivalTime = Value
                Me.SendPropertyChanged("ArrivalTime")
                Me.OnArrivalTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeaveId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeofenceLeaveId() As System.Guid
        Get
            Return Me._GeofenceLeaveId
        End Get
        Set
            If ((Me._GeofenceLeaveId = Value) _
                        = False) Then
                Me.OnGeofenceLeaveIdChanging(Value)
                Me.SendPropertyChanging()
                Me._GeofenceLeaveId = Value
                Me.SendPropertyChanged("GeofenceLeaveId")
                Me.OnGeofenceLeaveIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestinationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeofenceDestinationId() As System.Guid
        Get
            Return Me._GeofenceDestinationId
        End Get
        Set
            If ((Me._GeofenceDestinationId = Value) _
                        = False) Then
                Me.OnGeofenceDestinationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._GeofenceDestinationId = Value
                Me.SendPropertyChanged("GeofenceDestinationId")
                Me.OnGeofenceDestinationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlert5min", DbType:="Bit")>
    Public Property IsAlert5min() As System.Nullable(Of Boolean)
        Get
            Return Me._IsAlert5min
        End Get
        Set
            If (Me._IsAlert5min.Equals(Value) = False) Then
                Me.OnIsAlert5minChanging(Value)
                Me.SendPropertyChanging()
                Me._IsAlert5min = Value
                Me.SendPropertyChanged("IsAlert5min")
                Me.OnIsAlert5minChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlertLeaveForPickup", DbType:="Bit")>
    Public Property IsAlertLeaveForPickup() As System.Nullable(Of Boolean)
        Get
            Return Me._IsAlertLeaveForPickup
        End Get
        Set
            If (Me._IsAlertLeaveForPickup.Equals(Value) = False) Then
                Me.OnIsAlertLeaveForPickupChanging(Value)
                Me.SendPropertyChanging()
                Me._IsAlertLeaveForPickup = Value
                Me.SendPropertyChanged("IsAlertLeaveForPickup")
                Me.OnIsAlertLeaveForPickupChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ContactID() As System.Guid
        Get
            Return Me._ContactID
        End Get
        Set
            If ((Me._ContactID = Value) _
                        = False) Then
                Me.OnContactIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ContactID = Value
                Me.SendPropertyChanged("ContactID")
                Me.OnContactIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(MAX)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me.OnCustomerPhoneChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerPhone = Value
                Me.SendPropertyChanged("CustomerPhone")
                Me.OnCustomerPhoneChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(MAX)")>
    Public Property CustomerEmail() As String
        Get
            Return Me._CustomerEmail
        End Get
        Set
            If (String.Equals(Me._CustomerEmail, Value) = False) Then
                Me.OnCustomerEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerEmail = Value
                Me.SendPropertyChanged("CustomerEmail")
                Me.OnCustomerEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeave", DbType:="NVarChar(MAX)")>
    Public Property GeofenceLeave() As String
        Get
            Return Me._GeofenceLeave
        End Get
        Set
            If (String.Equals(Me._GeofenceLeave, Value) = False) Then
                Me.OnGeofenceLeaveChanging(Value)
                Me.SendPropertyChanging()
                Me._GeofenceLeave = Value
                Me.SendPropertyChanged("GeofenceLeave")
                Me.OnGeofenceLeaveChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestination", DbType:="NVarChar(MAX)")>
    Public Property GeofenceDestination() As String
        Get
            Return Me._GeofenceDestination
        End Get
        Set
            If (String.Equals(Me._GeofenceDestination, Value) = False) Then
                Me.OnGeofenceDestinationChanging(Value)
                Me.SendPropertyChanging()
                Me._GeofenceDestination = Value
                Me.SendPropertyChanged("GeofenceDestination")
                Me.OnGeofenceDestinationChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>
    Public Property DateCreated() As System.Nullable(Of Date)
        Get
            Return Me._DateCreated
        End Get
        Set
            If (Me._DateCreated.Equals(Value) = False) Then
                Me.OnDateCreatedChanging(Value)
                Me.SendPropertyChanging()
                Me._DateCreated = Value
                Me.SendPropertyChanged("DateCreated")
                Me.OnDateCreatedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationDriver_ApplicationBooking", Storage:="_ApplicationDriver", ThisKey:="ApplicationDriverID", OtherKey:="ApplicationDriverID", IsForeignKey:=True)>
    Public Property ApplicationDriver() As ApplicationDriver
        Get
            Return Me._ApplicationDriver.Entity
        End Get
        Set
            Dim previousValue As ApplicationDriver = Me._ApplicationDriver.Entity
            If ((Object.Equals(previousValue, Value) = False) _
                        OrElse (Me._ApplicationDriver.HasLoadedOrAssignedValue = False)) Then
                Me.SendPropertyChanging()

                If ((previousValue Is Nothing) _
                            = False) Then
                    Me._ApplicationDriver.Entity = Nothing
                    previousValue.ApplicationBookings.Remove(Me)
                End If
                Me._ApplicationDriver.Entity = Value
                If ((Value Is Nothing) _
                            = False) Then
                    Value.ApplicationBookings.Add(Me)
                    Me._ApplicationDriverID = Value.ApplicationDriverID
                Else
                    Me._ApplicationDriverID = CType(Nothing, System.Guid)
                End If
                Me.SendPropertyChanged("ApplicationDriver")
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_EventDefinition")>
Partial Public Class CAN_EventDefinition
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CAN_EventDefinitionID As System.Guid

    Private _Standard As String

    Private _PGN As System.Nullable(Of Double)

    Private _SPN As System.Nullable(Of Double)

    Private _TriggerConditoinQualifier As String

    Private _TriggerConditionText As String

    Private _LastDateChecked As System.Nullable(Of Date)

    Private _deleted As Boolean

    Private _VehicleID As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanged()
    End Sub
    Partial Private Sub OnStandardChanging(value As String)
    End Sub
    Partial Private Sub OnStandardChanged()
    End Sub
    Partial Private Sub OnPGNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPGNChanged()
    End Sub
    Partial Private Sub OnSPNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSPNChanged()
    End Sub
    Partial Private Sub OnTriggerConditoinQualifierChanging(value As String)
    End Sub
    Partial Private Sub OnTriggerConditoinQualifierChanged()
    End Sub
    Partial Private Sub OnTriggerConditionTextChanging(value As String)
    End Sub
    Partial Private Sub OnTriggerConditionTextChanged()
    End Sub
    Partial Private Sub OnLastDateCheckedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastDateCheckedChanged()
    End Sub
    Partial Private Sub OndeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OndeletedChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As String)
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventDefinitionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CAN_EventDefinitionID() As System.Guid
        Get
            Return Me._CAN_EventDefinitionID
        End Get
        Set
            If ((Me._CAN_EventDefinitionID = Value) _
                        = False) Then
                Me.OnCAN_EventDefinitionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_EventDefinitionID = Value
                Me.SendPropertyChanged("CAN_EventDefinitionID")
                Me.OnCAN_EventDefinitionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>
    Public Property Standard() As String
        Get
            Return Me._Standard
        End Get
        Set
            If (String.Equals(Me._Standard, Value) = False) Then
                Me.OnStandardChanging(Value)
                Me.SendPropertyChanging()
                Me._Standard = Value
                Me.SendPropertyChanged("Standard")
                Me.OnStandardChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>
    Public Property PGN() As System.Nullable(Of Double)
        Get
            Return Me._PGN
        End Get
        Set
            If (Me._PGN.Equals(Value) = False) Then
                Me.OnPGNChanging(Value)
                Me.SendPropertyChanging()
                Me._PGN = Value
                Me.SendPropertyChanged("PGN")
                Me.OnPGNChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>
    Public Property SPN() As System.Nullable(Of Double)
        Get
            Return Me._SPN
        End Get
        Set
            If (Me._SPN.Equals(Value) = False) Then
                Me.OnSPNChanging(Value)
                Me.SendPropertyChanging()
                Me._SPN = Value
                Me.SendPropertyChanged("SPN")
                Me.OnSPNChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriggerConditoinQualifier", DbType:="NChar(1000)")>
    Public Property TriggerConditoinQualifier() As String
        Get
            Return Me._TriggerConditoinQualifier
        End Get
        Set
            If (String.Equals(Me._TriggerConditoinQualifier, Value) = False) Then
                Me.OnTriggerConditoinQualifierChanging(Value)
                Me.SendPropertyChanging()
                Me._TriggerConditoinQualifier = Value
                Me.SendPropertyChanged("TriggerConditoinQualifier")
                Me.OnTriggerConditoinQualifierChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriggerConditionText", DbType:="NChar(10)")>
    Public Property TriggerConditionText() As String
        Get
            Return Me._TriggerConditionText
        End Get
        Set
            If (String.Equals(Me._TriggerConditionText, Value) = False) Then
                Me.OnTriggerConditionTextChanging(Value)
                Me.SendPropertyChanging()
                Me._TriggerConditionText = Value
                Me.SendPropertyChanged("TriggerConditionText")
                Me.OnTriggerConditionTextChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastDateChecked", DbType:="Date")>
    Public Property LastDateChecked() As System.Nullable(Of Date)
        Get
            Return Me._LastDateChecked
        End Get
        Set
            If (Me._LastDateChecked.Equals(Value) = False) Then
                Me.OnLastDateCheckedChanging(Value)
                Me.SendPropertyChanging()
                Me._LastDateChecked = Value
                Me.SendPropertyChanged("LastDateChecked")
                Me.OnLastDateCheckedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deleted", DbType:="Bit NOT NULL")>
    Public Property deleted() As Boolean
        Get
            Return Me._deleted
        End Get
        Set
            If ((Me._deleted = Value) _
                        = False) Then
                Me.OndeletedChanging(Value)
                Me.SendPropertyChanging()
                Me._deleted = Value
                Me.SendPropertyChanged("deleted")
                Me.OndeletedChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="NVarChar(50)")>
    Public Property VehicleID() As String
        Get
            Return Me._VehicleID
        End Get
        Set
            If (String.Equals(Me._VehicleID, Value) = False) Then
                Me.OnVehicleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._VehicleID = Value
                Me.SendPropertyChanged("VehicleID")
                Me.OnVehicleIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_AlertDefinition")>
Partial Public Class CAN_AlertDefinition
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CAN_AlertDefinitionID As System.Guid

    Private _CAN_EventDefinitionID As System.Guid

    Private _SubscriberNativeID As System.Guid

    Private _SendEmail As Boolean

    Private _SendText As Boolean

    Private _TimePeriod As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionIDChanged()
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnTimePeriodChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTimePeriodChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_AlertDefinitionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CAN_AlertDefinitionID() As System.Guid
        Get
            Return Me._CAN_AlertDefinitionID
        End Get
        Set
            If ((Me._CAN_AlertDefinitionID = Value) _
                        = False) Then
                Me.OnCAN_AlertDefinitionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_AlertDefinitionID = Value
                Me.SendPropertyChanged("CAN_AlertDefinitionID")
                Me.OnCAN_AlertDefinitionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventDefinitionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CAN_EventDefinitionID() As System.Guid
        Get
            Return Me._CAN_EventDefinitionID
        End Get
        Set
            If ((Me._CAN_EventDefinitionID = Value) _
                        = False) Then
                Me.OnCAN_EventDefinitionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_EventDefinitionID = Value
                Me.SendPropertyChanged("CAN_EventDefinitionID")
                Me.OnCAN_EventDefinitionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property SubscriberNativeID() As System.Guid
        Get
            Return Me._SubscriberNativeID
        End Get
        Set
            If ((Me._SubscriberNativeID = Value) _
                        = False) Then
                Me.OnSubscriberNativeIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SubscriberNativeID = Value
                Me.SendPropertyChanged("SubscriberNativeID")
                Me.OnSubscriberNativeIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit NOT NULL")>
    Public Property SendEmail() As Boolean
        Get
            Return Me._SendEmail
        End Get
        Set
            If ((Me._SendEmail = Value) _
                        = False) Then
                Me.OnSendEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._SendEmail = Value
                Me.SendPropertyChanged("SendEmail")
                Me.OnSendEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit NOT NULL")>
    Public Property SendText() As Boolean
        Get
            Return Me._SendText
        End Get
        Set
            If ((Me._SendText = Value) _
                        = False) Then
                Me.OnSendTextChanging(Value)
                Me.SendPropertyChanging()
                Me._SendText = Value
                Me.SendPropertyChanged("SendText")
                Me.OnSendTextChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimePeriod", DbType:="DateTime")>
    Public Property TimePeriod() As System.Nullable(Of Date)
        Get
            Return Me._TimePeriod
        End Get
        Set
            If (Me._TimePeriod.Equals(Value) = False) Then
                Me.OnTimePeriodChanging(Value)
                Me.SendPropertyChanging()
                Me._TimePeriod = Value
                Me.SendPropertyChanged("TimePeriod")
                Me.OnTimePeriodChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_EventOccuranceAlert")>
Partial Public Class CAN_EventOccuranceAlert
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CAN_EventOccuranceAlertID As System.Guid

    Private _CAN_EventOccuranceID As System.Guid

    Private _CAN_AlertDefinition As System.Guid

    Private _SentDate As System.Nullable(Of Date)

    Private _MessageContent As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_EventOccuranceAlertIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventOccuranceAlertIDChanged()
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanged()
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionChanged()
    End Sub
    Partial Private Sub OnSentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSentDateChanged()
    End Sub
    Partial Private Sub OnMessageContentChanging(value As String)
    End Sub
    Partial Private Sub OnMessageContentChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventOccuranceAlertID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CAN_EventOccuranceAlertID() As System.Guid
        Get
            Return Me._CAN_EventOccuranceAlertID
        End Get
        Set
            If ((Me._CAN_EventOccuranceAlertID = Value) _
                        = False) Then
                Me.OnCAN_EventOccuranceAlertIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_EventOccuranceAlertID = Value
                Me.SendPropertyChanged("CAN_EventOccuranceAlertID")
                Me.OnCAN_EventOccuranceAlertIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventOccuranceID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CAN_EventOccuranceID() As System.Guid
        Get
            Return Me._CAN_EventOccuranceID
        End Get
        Set
            If ((Me._CAN_EventOccuranceID = Value) _
                        = False) Then
                Me.OnCAN_EventOccuranceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_EventOccuranceID = Value
                Me.SendPropertyChanged("CAN_EventOccuranceID")
                Me.OnCAN_EventOccuranceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_AlertDefinition", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CAN_AlertDefinition() As System.Guid
        Get
            Return Me._CAN_AlertDefinition
        End Get
        Set
            If ((Me._CAN_AlertDefinition = Value) _
                        = False) Then
                Me.OnCAN_AlertDefinitionChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_AlertDefinition = Value
                Me.SendPropertyChanged("CAN_AlertDefinition")
                Me.OnCAN_AlertDefinitionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SentDate", DbType:="DateTime")>
    Public Property SentDate() As System.Nullable(Of Date)
        Get
            Return Me._SentDate
        End Get
        Set
            If (Me._SentDate.Equals(Value) = False) Then
                Me.OnSentDateChanging(Value)
                Me.SendPropertyChanging()
                Me._SentDate = Value
                Me.SendPropertyChanged("SentDate")
                Me.OnSentDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>
    Public Property MessageContent() As String
        Get
            Return Me._MessageContent
        End Get
        Set
            If (String.Equals(Me._MessageContent, Value) = False) Then
                Me.OnMessageContentChanging(Value)
                Me.SendPropertyChanging()
                Me._MessageContent = Value
                Me.SendPropertyChanged("MessageContent")
                Me.OnMessageContentChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CanBusLogs")>
Partial Public Class CanBusLog
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CanLogId As System.Guid

    Private _DeviceId As String

    Private _PGN As System.Nullable(Of Double)

    Private _SPN As System.Nullable(Of Double)

    Private _Standard As String

    Private _DateLog As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCanLogIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCanLogIdChanged()
    End Sub
    Partial Private Sub OnDeviceIdChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIdChanged()
    End Sub
    Partial Private Sub OnPGNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPGNChanged()
    End Sub
    Partial Private Sub OnSPNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSPNChanged()
    End Sub
    Partial Private Sub OnStandardChanging(value As String)
    End Sub
    Partial Private Sub OnStandardChanged()
    End Sub
    Partial Private Sub OnDateLogChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateLogChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanLogId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CanLogId() As System.Guid
        Get
            Return Me._CanLogId
        End Get
        Set
            If ((Me._CanLogId = Value) _
                        = False) Then
                Me.OnCanLogIdChanging(Value)
                Me.SendPropertyChanging()
                Me._CanLogId = Value
                Me.SendPropertyChanged("CanLogId")
                Me.OnCanLogIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceId", DbType:="VarChar(10)")>
    Public Property DeviceId() As String
        Get
            Return Me._DeviceId
        End Get
        Set
            If (String.Equals(Me._DeviceId, Value) = False) Then
                Me.OnDeviceIdChanging(Value)
                Me.SendPropertyChanging()
                Me._DeviceId = Value
                Me.SendPropertyChanged("DeviceId")
                Me.OnDeviceIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>
    Public Property PGN() As System.Nullable(Of Double)
        Get
            Return Me._PGN
        End Get
        Set
            If (Me._PGN.Equals(Value) = False) Then
                Me.OnPGNChanging(Value)
                Me.SendPropertyChanging()
                Me._PGN = Value
                Me.SendPropertyChanged("PGN")
                Me.OnPGNChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>
    Public Property SPN() As System.Nullable(Of Double)
        Get
            Return Me._SPN
        End Get
        Set
            If (Me._SPN.Equals(Value) = False) Then
                Me.OnSPNChanging(Value)
                Me.SendPropertyChanging()
                Me._SPN = Value
                Me.SendPropertyChanged("SPN")
                Me.OnSPNChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>
    Public Property Standard() As String
        Get
            Return Me._Standard
        End Get
        Set
            If (String.Equals(Me._Standard, Value) = False) Then
                Me.OnStandardChanging(Value)
                Me.SendPropertyChanging()
                Me._Standard = Value
                Me.SendPropertyChanged("Standard")
                Me.OnStandardChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLog", DbType:="DateTime")>
    Public Property DateLog() As System.Nullable(Of Date)
        Get
            Return Me._DateLog
        End Get
        Set
            If (Me._DateLog.Equals(Value) = False) Then
                Me.OnDateLogChanging(Value)
                Me.SendPropertyChanging()
                Me._DateLog = Value
                Me.SendPropertyChanged("DateLog")
                Me.OnDateLogChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_EventOccurance")>
Partial Public Class CAN_EventOccurance
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CAN_EventOccuranceID As System.Guid

    Private _CAN_EventDefinitionID As System.Guid

    Private _TriggerCondition As String

    Private _OccuredDate As System.Nullable(Of Date)

    Private _FinishedDate As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanged()
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanged()
    End Sub
    Partial Private Sub OnTriggerConditionChanging(value As String)
    End Sub
    Partial Private Sub OnTriggerConditionChanged()
    End Sub
    Partial Private Sub OnOccuredDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOccuredDateChanged()
    End Sub
    Partial Private Sub OnFinishedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFinishedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventOccuranceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CAN_EventOccuranceID() As System.Guid
        Get
            Return Me._CAN_EventOccuranceID
        End Get
        Set
            If ((Me._CAN_EventOccuranceID = Value) _
                        = False) Then
                Me.OnCAN_EventOccuranceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_EventOccuranceID = Value
                Me.SendPropertyChanged("CAN_EventOccuranceID")
                Me.OnCAN_EventOccuranceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventDefinitionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CAN_EventDefinitionID() As System.Guid
        Get
            Return Me._CAN_EventDefinitionID
        End Get
        Set
            If ((Me._CAN_EventDefinitionID = Value) _
                        = False) Then
                Me.OnCAN_EventDefinitionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CAN_EventDefinitionID = Value
                Me.SendPropertyChanged("CAN_EventDefinitionID")
                Me.OnCAN_EventDefinitionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriggerCondition", DbType:="NChar(10)")>
    Public Property TriggerCondition() As String
        Get
            Return Me._TriggerCondition
        End Get
        Set
            If (String.Equals(Me._TriggerCondition, Value) = False) Then
                Me.OnTriggerConditionChanging(Value)
                Me.SendPropertyChanging()
                Me._TriggerCondition = Value
                Me.SendPropertyChanged("TriggerCondition")
                Me.OnTriggerConditionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OccuredDate", DbType:="DateTime")>
    Public Property OccuredDate() As System.Nullable(Of Date)
        Get
            Return Me._OccuredDate
        End Get
        Set
            If (Me._OccuredDate.Equals(Value) = False) Then
                Me.OnOccuredDateChanging(Value)
                Me.SendPropertyChanging()
                Me._OccuredDate = Value
                Me.SendPropertyChanged("OccuredDate")
                Me.OnOccuredDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishedDate", DbType:="DateTime")>
    Public Property FinishedDate() As System.Nullable(Of Date)
        Get
            Return Me._FinishedDate
        End Get
        Set
            If (Me._FinishedDate.Equals(Value) = False) Then
                Me.OnFinishedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._FinishedDate = Value
                Me.SendPropertyChanged("FinishedDate")
                Me.OnFinishedDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CanBusEventOccuranceLog")>
Partial Public Class CanBusEventOccuranceLog
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CanBusEventOccuranceLogId As System.Guid

    Private _CanEventDefinitionId As System.Nullable(Of System.Guid)

    Private _CanValue As String

    Private _LogDate As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCanBusEventOccuranceLogIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCanBusEventOccuranceLogIdChanged()
    End Sub
    Partial Private Sub OnCanEventDefinitionIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCanEventDefinitionIdChanged()
    End Sub
    Partial Private Sub OnCanValueChanging(value As String)
    End Sub
    Partial Private Sub OnCanValueChanged()
    End Sub
    Partial Private Sub OnLogDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLogDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanBusEventOccuranceLogId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CanBusEventOccuranceLogId() As System.Guid
        Get
            Return Me._CanBusEventOccuranceLogId
        End Get
        Set
            If ((Me._CanBusEventOccuranceLogId = Value) _
                        = False) Then
                Me.OnCanBusEventOccuranceLogIdChanging(Value)
                Me.SendPropertyChanging()
                Me._CanBusEventOccuranceLogId = Value
                Me.SendPropertyChanged("CanBusEventOccuranceLogId")
                Me.OnCanBusEventOccuranceLogIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanEventDefinitionId", DbType:="UniqueIdentifier")>
    Public Property CanEventDefinitionId() As System.Nullable(Of System.Guid)
        Get
            Return Me._CanEventDefinitionId
        End Get
        Set
            If (Me._CanEventDefinitionId.Equals(Value) = False) Then
                Me.OnCanEventDefinitionIdChanging(Value)
                Me.SendPropertyChanging()
                Me._CanEventDefinitionId = Value
                Me.SendPropertyChanged("CanEventDefinitionId")
                Me.OnCanEventDefinitionIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanValue", DbType:="NVarChar(50)")>
    Public Property CanValue() As String
        Get
            Return Me._CanValue
        End Get
        Set
            If (String.Equals(Me._CanValue, Value) = False) Then
                Me.OnCanValueChanging(Value)
                Me.SendPropertyChanging()
                Me._CanValue = Value
                Me.SendPropertyChanged("CanValue")
                Me.OnCanValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogDate", DbType:="DateTime")>
    Public Property LogDate() As System.Nullable(Of Date)
        Get
            Return Me._LogDate
        End Get
        Set
            If (Me._LogDate.Equals(Value) = False) Then
                Me.OnLogDateChanging(Value)
                Me.SendPropertyChanging()
                Me._LogDate = Value
                Me.SendPropertyChanged("LogDate")
                Me.OnLogDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblContractPeriods")>
Partial Public Class tblContractPeriod
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ContractPeriodID As System.Guid

    Private _Aid As Integer

    Private _ContractPeriodDesc As String

    Private _ContractPeriodMonths As System.Nullable(Of Single)

    Private _NumberOfYears As System.Nullable(Of Short)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContractPeriodIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContractPeriodIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnContractPeriodDescChanging(value As String)
    End Sub
    Partial Private Sub OnContractPeriodDescChanged()
    End Sub
    Partial Private Sub OnContractPeriodMonthsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnContractPeriodMonthsChanged()
    End Sub
    Partial Private Sub OnNumberOfYearsChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnNumberOfYearsChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ContractPeriodID() As System.Guid
        Get
            Return Me._ContractPeriodID
        End Get
        Set
            If ((Me._ContractPeriodID = Value) _
                        = False) Then
                Me.OnContractPeriodIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ContractPeriodID = Value
                Me.SendPropertyChanged("ContractPeriodID")
                Me.OnContractPeriodIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodDesc", DbType:="NVarChar(50)")>
    Public Property ContractPeriodDesc() As String
        Get
            Return Me._ContractPeriodDesc
        End Get
        Set
            If (String.Equals(Me._ContractPeriodDesc, Value) = False) Then
                Me.OnContractPeriodDescChanging(Value)
                Me.SendPropertyChanging()
                Me._ContractPeriodDesc = Value
                Me.SendPropertyChanged("ContractPeriodDesc")
                Me.OnContractPeriodDescChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodMonths", DbType:="Real")>
    Public Property ContractPeriodMonths() As System.Nullable(Of Single)
        Get
            Return Me._ContractPeriodMonths
        End Get
        Set
            If (Me._ContractPeriodMonths.Equals(Value) = False) Then
                Me.OnContractPeriodMonthsChanging(Value)
                Me.SendPropertyChanging()
                Me._ContractPeriodMonths = Value
                Me.SendPropertyChanged("ContractPeriodMonths")
                Me.OnContractPeriodMonthsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfYears", DbType:="SmallInt")>
    Public Property NumberOfYears() As System.Nullable(Of Short)
        Get
            Return Me._NumberOfYears
        End Get
        Set
            If (Me._NumberOfYears.Equals(Value) = False) Then
                Me.OnNumberOfYearsChanging(Value)
                Me.SendPropertyChanging()
                Me._NumberOfYears = Value
                Me.SendPropertyChanged("NumberOfYears")
                Me.OnNumberOfYearsChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStates")>
Partial Public Class tblState
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _StateID As System.Guid

    Private _Sid As Integer

    Private _StateCode As String

    Private _StateDesc As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStateIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStateIDChanged()
    End Sub
    Partial Private Sub OnSidChanging(value As Integer)
    End Sub
    Partial Private Sub OnSidChanged()
    End Sub
    Partial Private Sub OnStateCodeChanging(value As String)
    End Sub
    Partial Private Sub OnStateCodeChanged()
    End Sub
    Partial Private Sub OnStateDescChanging(value As String)
    End Sub
    Partial Private Sub OnStateDescChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property StateID() As System.Guid
        Get
            Return Me._StateID
        End Get
        Set
            If ((Me._StateID = Value) _
                        = False) Then
                Me.OnStateIDChanging(Value)
                Me.SendPropertyChanging()
                Me._StateID = Value
                Me.SendPropertyChanged("StateID")
                Me.OnStateIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=True)>
    Public Property Sid() As Integer
        Get
            Return Me._Sid
        End Get
        Set
            If ((Me._Sid = Value) _
                        = False) Then
                Me.OnSidChanging(Value)
                Me.SendPropertyChanging()
                Me._Sid = Value
                Me.SendPropertyChanged("Sid")
                Me.OnSidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="NVarChar(3)")>
    Public Property StateCode() As String
        Get
            Return Me._StateCode
        End Get
        Set
            If (String.Equals(Me._StateCode, Value) = False) Then
                Me.OnStateCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._StateCode = Value
                Me.SendPropertyChanged("StateCode")
                Me.OnStateCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDesc", DbType:="NVarChar(30)")>
    Public Property StateDesc() As String
        Get
            Return Me._StateDesc
        End Get
        Set
            If (String.Equals(Me._StateDesc, Value) = False) Then
                Me.OnStateDescChanging(Value)
                Me.SendPropertyChanging()
                Me._StateDesc = Value
                Me.SendPropertyChanged("StateDesc")
                Me.OnStateDescChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMonths")>
Partial Public Class tblMonth
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _MonthID As System.Guid

    Private _MonthNo As System.Nullable(Of Short)

    Private _MonthDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMonthIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMonthIDChanged()
    End Sub
    Partial Private Sub OnMonthNoChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMonthNoChanged()
    End Sub
    Partial Private Sub OnMonthDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnMonthDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property MonthID() As System.Guid
        Get
            Return Me._MonthID
        End Get
        Set
            If ((Me._MonthID = Value) _
                        = False) Then
                Me.OnMonthIDChanging(Value)
                Me.SendPropertyChanging()
                Me._MonthID = Value
                Me.SendPropertyChanged("MonthID")
                Me.OnMonthIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthNo", DbType:="SmallInt")>
    Public Property MonthNo() As System.Nullable(Of Short)
        Get
            Return Me._MonthNo
        End Get
        Set
            If (Me._MonthNo.Equals(Value) = False) Then
                Me.OnMonthNoChanging(Value)
                Me.SendPropertyChanging()
                Me._MonthNo = Value
                Me.SendPropertyChanged("MonthNo")
                Me.OnMonthNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthDescription", DbType:="NVarChar(15)")>
    Public Property MonthDescription() As String
        Get
            Return Me._MonthDescription
        End Get
        Set
            If (String.Equals(Me._MonthDescription, Value) = False) Then
                Me.OnMonthDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._MonthDescription = Value
                Me.SendPropertyChanged("MonthDescription")
                Me.OnMonthDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSiteComments")>
Partial Public Class tblSiteComment
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CommentsID As System.Guid

    Private _Aid As Integer

    Private _Cid As System.Nullable(Of Short)

    Private _CommentDate As System.Nullable(Of Date)

    Private _Comments As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentsIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCommentsIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnCommentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCommentDateChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentsID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CommentsID() As System.Guid
        Get
            Return Me._CommentsID
        End Get
        Set
            If ((Me._CommentsID = Value) _
                        = False) Then
                Me.OnCommentsIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CommentsID = Value
                Me.SendPropertyChanged("CommentsID")
                Me.OnCommentsIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=True)>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="SmallInt")>
    Public Property Cid() As System.Nullable(Of Short)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me.OnCidChanging(Value)
                Me.SendPropertyChanging()
                Me._Cid = Value
                Me.SendPropertyChanged("Cid")
                Me.OnCidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDate", DbType:="DateTime")>
    Public Property CommentDate() As System.Nullable(Of Date)
        Get
            Return Me._CommentDate
        End Get
        Set
            If (Me._CommentDate.Equals(Value) = False) Then
                Me.OnCommentDateChanging(Value)
                Me.SendPropertyChanging()
                Me._CommentDate = Value
                Me.SendPropertyChanged("CommentDate")
                Me.OnCommentDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>
    Public Property Comments() As String
        Get
            Return Me._Comments
        End Get
        Set
            If (String.Equals(Me._Comments, Value) = False) Then
                Me.OnCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._Comments = Value
                Me.SendPropertyChanged("Comments")
                Me.OnCommentsChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetClient")>
Partial Public Class FleetClient
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ClientID As System.Guid

    Private _CustomerID As System.Nullable(Of Integer)

    Private _Name As String

    Private _Address As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ClientID() As System.Guid
        Get
            Return Me._ClientID
        End Get
        Set
            If ((Me._ClientID = Value) _
                        = False) Then
                Me.OnClientIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ClientID = Value
                Me.SendPropertyChanged("ClientID")
                Me.OnClientIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int")>
    Public Property CustomerID() As System.Nullable(Of Integer)
        Get
            Return Me._CustomerID
        End Get
        Set
            If (Me._CustomerID.Equals(Value) = False) Then
                Me.OnCustomerIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerID = Value
                Me.SendPropertyChanged("CustomerID")
                Me.OnCustomerIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me.OnNameChanging(Value)
                Me.SendPropertyChanging()
                Me._Name = Value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(200)")>
    Public Property Address() As String
        Get
            Return Me._Address
        End Get
        Set
            If (String.Equals(Me._Address, Value) = False) Then
                Me.OnAddressChanging(Value)
                Me.SendPropertyChanging()
                Me._Address = Value
                Me.SendPropertyChanged("Address")
                Me.OnAddressChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetDocuments")>
Partial Public Class FleetDocument
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _DocumentID As System.Guid

    Private _ClientID As System.Nullable(Of System.Guid)

    Private _RunID As System.Nullable(Of System.Guid)

    Private _Description As String

    Private _PhotoBinary As System.Data.Linq.Binary

    Private _CreatedDate As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDocumentIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnDocumentIDChanged()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPhotoBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPhotoBinaryChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property DocumentID() As System.Guid
        Get
            Return Me._DocumentID
        End Get
        Set
            If ((Me._DocumentID = Value) _
                        = False) Then
                Me.OnDocumentIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DocumentID = Value
                Me.SendPropertyChanged("DocumentID")
                Me.OnDocumentIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="UniqueIdentifier")>
    Public Property ClientID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ClientID
        End Get
        Set
            If (Me._ClientID.Equals(Value) = False) Then
                Me.OnClientIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ClientID = Value
                Me.SendPropertyChanged("ClientID")
                Me.OnClientIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier")>
    Public Property RunID() As System.Nullable(Of System.Guid)
        Get
            Return Me._RunID
        End Get
        Set
            If (Me._RunID.Equals(Value) = False) Then
                Me.OnRunIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunID = Value
                Me.SendPropertyChanged("RunID")
                Me.OnRunIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoBinary", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>
    Public Property PhotoBinary() As System.Data.Linq.Binary
        Get
            Return Me._PhotoBinary
        End Get
        Set
            If (Object.Equals(Me._PhotoBinary, Value) = False) Then
                Me.OnPhotoBinaryChanging(Value)
                Me.SendPropertyChanging()
                Me._PhotoBinary = Value
                Me.SendPropertyChanged("PhotoBinary")
                Me.OnPhotoBinaryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>
    Public Property CreatedDate() As System.Nullable(Of Date)
        Get
            Return Me._CreatedDate
        End Get
        Set
            If (Me._CreatedDate.Equals(Value) = False) Then
                Me.OnCreatedDateChanging(Value)
                Me.SendPropertyChanging()
                Me._CreatedDate = Value
                Me.SendPropertyChanged("CreatedDate")
                Me.OnCreatedDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetRun")>
Partial Public Class FleetRun
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RunID As System.Guid

    Private _RunName As String

    Private _KeyNumber As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnRunNameChanging(value As String)
    End Sub
    Partial Private Sub OnRunNameChanged()
    End Sub
    Partial Private Sub OnKeyNumberChanging(value As String)
    End Sub
    Partial Private Sub OnKeyNumberChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RunID() As System.Guid
        Get
            Return Me._RunID
        End Get
        Set
            If ((Me._RunID = Value) _
                        = False) Then
                Me.OnRunIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunID = Value
                Me.SendPropertyChanged("RunID")
                Me.OnRunIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunName", DbType:="NVarChar(50)")>
    Public Property RunName() As String
        Get
            Return Me._RunName
        End Get
        Set
            If (String.Equals(Me._RunName, Value) = False) Then
                Me.OnRunNameChanging(Value)
                Me.SendPropertyChanging()
                Me._RunName = Value
                Me.SendPropertyChanged("RunName")
                Me.OnRunNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KeyNumber", DbType:="NVarChar(10)")>
    Public Property KeyNumber() As String
        Get
            Return Me._KeyNumber
        End Get
        Set
            If (String.Equals(Me._KeyNumber, Value) = False) Then
                Me.OnKeyNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._KeyNumber = Value
                Me.SendPropertyChanged("KeyNumber")
                Me.OnKeyNumberChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetRunClient")>
Partial Public Class FleetRunClient
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RunClientID As System.Guid

    Private _RunID As System.Nullable(Of System.Guid)

    Private _ClientID As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunClientIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunClientIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunClientID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RunClientID() As System.Guid
        Get
            Return Me._RunClientID
        End Get
        Set
            If ((Me._RunClientID = Value) _
                        = False) Then
                Me.OnRunClientIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunClientID = Value
                Me.SendPropertyChanged("RunClientID")
                Me.OnRunClientIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier")>
    Public Property RunID() As System.Nullable(Of System.Guid)
        Get
            Return Me._RunID
        End Get
        Set
            If (Me._RunID.Equals(Value) = False) Then
                Me.OnRunIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunID = Value
                Me.SendPropertyChanged("RunID")
                Me.OnRunIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="UniqueIdentifier")>
    Public Property ClientID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ClientID
        End Get
        Set
            If (Me._ClientID.Equals(Value) = False) Then
                Me.OnClientIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ClientID = Value
                Me.SendPropertyChanged("ClientID")
                Me.OnClientIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetRunCompletion")>
Partial Public Class FleetRunCompletion
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RunCompletionID As System.Guid

    Private _RunID As System.Guid

    Private _DriverID As System.Nullable(Of System.Guid)

    Private _DID As System.Nullable(Of Integer)

    Private _RunDate As System.Nullable(Of Date)

    Private _Notes As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunCompletionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunCompletionIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnDriverIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDriverIDChanged()
    End Sub
    Partial Private Sub OnDIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDIDChanged()
    End Sub
    Partial Private Sub OnRunDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRunDateChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunCompletionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RunCompletionID() As System.Guid
        Get
            Return Me._RunCompletionID
        End Get
        Set
            If ((Me._RunCompletionID = Value) _
                        = False) Then
                Me.OnRunCompletionIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunCompletionID = Value
                Me.SendPropertyChanged("RunCompletionID")
                Me.OnRunCompletionIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property RunID() As System.Guid
        Get
            Return Me._RunID
        End Get
        Set
            If ((Me._RunID = Value) _
                        = False) Then
                Me.OnRunIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunID = Value
                Me.SendPropertyChanged("RunID")
                Me.OnRunIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier")>
    Public Property DriverID() As System.Nullable(Of System.Guid)
        Get
            Return Me._DriverID
        End Get
        Set
            If (Me._DriverID.Equals(Value) = False) Then
                Me.OnDriverIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DriverID = Value
                Me.SendPropertyChanged("DriverID")
                Me.OnDriverIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DID", DbType:="Int")>
    Public Property DID() As System.Nullable(Of Integer)
        Get
            Return Me._DID
        End Get
        Set
            If (Me._DID.Equals(Value) = False) Then
                Me.OnDIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DID = Value
                Me.SendPropertyChanged("DID")
                Me.OnDIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDate", DbType:="DateTime")>
    Public Property RunDate() As System.Nullable(Of Date)
        Get
            Return Me._RunDate
        End Get
        Set
            If (Me._RunDate.Equals(Value) = False) Then
                Me.OnRunDateChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDate = Value
                Me.SendPropertyChanged("RunDate")
                Me.OnRunDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VehicleLocation")>
Partial Public Class VehicleLocation
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _LocationID As System.Guid

    Private _VehicleID As System.Guid

    Private _BusinessLocationID As System.Guid

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
    Partial Private Sub OnBusinessLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnBusinessLocationIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property LocationID() As System.Guid
        Get
            Return Me._LocationID
        End Get
        Set
            If ((Me._LocationID = Value) _
                        = False) Then
                Me.OnLocationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._LocationID = Value
                Me.SendPropertyChanged("LocationID")
                Me.OnLocationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property VehicleID() As System.Guid
        Get
            Return Me._VehicleID
        End Get
        Set
            If ((Me._VehicleID = Value) _
                        = False) Then
                Me.OnVehicleIDChanging(Value)
                Me.SendPropertyChanging()
                Me._VehicleID = Value
                Me.SendPropertyChanged("VehicleID")
                Me.OnVehicleIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessLocationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property BusinessLocationID() As System.Guid
        Get
            Return Me._BusinessLocationID
        End Get
        Set
            If ((Me._BusinessLocationID = Value) _
                        = False) Then
                Me.OnBusinessLocationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._BusinessLocationID = Value
                Me.SendPropertyChanged("BusinessLocationID")
                Me.OnBusinessLocationIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vw_GetVehicleLocations")>
Partial Public Class vw_GetVehicleLocation

    Private _LocationID As System.Nullable(Of System.Guid)

    Private _VehicleID As System.Nullable(Of System.Guid)

    Private _BusinessLocationID As System.Nullable(Of System.Guid)

    Private _Name As String

    Private _DeviceID As String

    Private _ApplicationID As System.Guid

    Private _AL_Name As String

    Private _Address As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="UniqueIdentifier")>
    Public Property LocationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._LocationID
        End Get
        Set
            If (Me._LocationID.Equals(Value) = False) Then
                Me._LocationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier")>
    Public Property VehicleID() As System.Nullable(Of System.Guid)
        Get
            Return Me._VehicleID
        End Get
        Set
            If (Me._VehicleID.Equals(Value) = False) Then
                Me._VehicleID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessLocationID", DbType:="UniqueIdentifier")>
    Public Property BusinessLocationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._BusinessLocationID
        End Get
        Set
            If (Me._BusinessLocationID.Equals(Value) = False) Then
                Me._BusinessLocationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me._DeviceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationID() As System.Guid
        Get
            Return Me._ApplicationID
        End Get
        Set
            If ((Me._ApplicationID = Value) _
                        = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AL_Name", DbType:="VarChar(500)")>
    Public Property AL_Name() As String
        Get
            Return Me._AL_Name
        End Get
        Set
            If (String.Equals(Me._AL_Name, Value) = False) Then
                Me._AL_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>
    Public Property Address() As String
        Get
            Return Me._Address
        End Get
        Set
            If (String.Equals(Me._Address, Value) = False) Then
                Me._Address = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblzGenerateRunSheets")>
Partial Public Class tblzGenerateRunSheet
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RunSheetId As System.Guid

    Private _Aid As Integer

    Private _RunNumber As System.Nullable(Of Integer)

    Private _RunDriver As System.Nullable(Of Integer)

    Private _RunDescription As String

    Private _Cid As System.Nullable(Of Integer)

    Private _CSid As System.Nullable(Of Integer)

    Private _ServiceUnits As System.Nullable(Of Double)

    Private _ProductId As System.Nullable(Of Integer)

    Private _ServiceComments As String

    Private _SortOrder As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunSheetIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunSheetIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnRunNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunNumberChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnCSidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCSidChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As String)
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunSheetId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RunSheetId() As System.Guid
        Get
            Return Me._RunSheetId
        End Get
        Set
            If ((Me._RunSheetId = Value) _
                        = False) Then
                Me.OnRunSheetIdChanging(Value)
                Me.SendPropertyChanging()
                Me._RunSheetId = Value
                Me.SendPropertyChanged("RunSheetId")
                Me.OnRunSheetIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNumber", DbType:="Int")>
    Public Property RunNumber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNumber
        End Get
        Set
            If (Me._RunNumber.Equals(Value) = False) Then
                Me.OnRunNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._RunNumber = Value
                Me.SendPropertyChanged("RunNumber")
                Me.OnRunNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Int")>
    Public Property RunDriver() As System.Nullable(Of Integer)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me.OnRunDriverChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDriver = Value
                Me.SendPropertyChanged("RunDriver")
                Me.OnRunDriverChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(50)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me.OnRunDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDescription = Value
                Me.SendPropertyChanged("RunDescription")
                Me.OnRunDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>
    Public Property Cid() As System.Nullable(Of Integer)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me.OnCidChanging(Value)
                Me.SendPropertyChanging()
                Me._Cid = Value
                Me.SendPropertyChanged("Cid")
                Me.OnCidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me.OnCSidChanging(Value)
                Me.SendPropertyChanging()
                Me._CSid = Value
                Me.SendPropertyChanged("CSid")
                Me.OnCSidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>
    Public Property ServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me.OnServiceUnitsChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceUnits = Value
                Me.SendPropertyChanged("ServiceUnits")
                Me.OnServiceUnitsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int")>
    Public Property ProductId() As System.Nullable(Of Integer)
        Get
            Return Me._ProductId
        End Get
        Set
            If (Me._ProductId.Equals(Value) = False) Then
                Me.OnProductIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ProductId = Value
                Me.SendPropertyChanged("ProductId")
                Me.OnProductIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>
    Public Property ServiceComments() As String
        Get
            Return Me._ServiceComments
        End Get
        Set
            If (String.Equals(Me._ServiceComments, Value) = False) Then
                Me.OnServiceCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceComments = Value
                Me.SendPropertyChanged("ServiceComments")
                Me.OnServiceCommentsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="NVarChar(12)")>
    Public Property SortOrder() As String
        Get
            Return Me._SortOrder
        End Get
        Set
            If (String.Equals(Me._SortOrder, Value) = False) Then
                Me.OnSortOrderChanging(Value)
                Me.SendPropertyChanging()
                Me._SortOrder = Value
                Me.SendPropertyChanged("SortOrder")
                Me.OnSortOrderChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CUST")>
Partial Public Class CUST

    Private _ID As System.Nullable(Of Double)

    Private _CardID As String

    Private _CustomerName As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Float")>
    Public Property ID() As System.Nullable(Of Double)
        Get
            Return Me._ID
        End Get
        Set
            If (Me._ID.Equals(Value) = False) Then
                Me._ID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardID", DbType:="NVarChar(255)")>
    Public Property CardID() As String
        Get
            Return Me._CardID
        End Get
        Set
            If (String.Equals(Me._CardID, Value) = False) Then
                Me._CardID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMYOBMatch")>
Partial Public Class tblMYOBMatch
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _MatchID As System.Guid

    Private _Aid As Integer

    Private _MYOBId As String

    Private _CustomerName As String

    Private _ImportedCustomerName As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMatchIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMatchIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnMYOBIdChanging(value As String)
    End Sub
    Partial Private Sub OnMYOBIdChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnImportedCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnImportedCustomerNameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MatchID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property MatchID() As System.Guid
        Get
            Return Me._MatchID
        End Get
        Set
            If ((Me._MatchID = Value) _
                        = False) Then
                Me.OnMatchIDChanging(Value)
                Me.SendPropertyChanging()
                Me._MatchID = Value
                Me.SendPropertyChanged("MatchID")
                Me.OnMatchIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=True)>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBId", DbType:="NVarChar(MAX)")>
    Public Property MYOBId() As String
        Get
            Return Me._MYOBId
        End Get
        Set
            If (String.Equals(Me._MYOBId, Value) = False) Then
                Me.OnMYOBIdChanging(Value)
                Me.SendPropertyChanging()
                Me._MYOBId = Value
                Me.SendPropertyChanged("MYOBId")
                Me.OnMYOBIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me.OnCustomerNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerName = Value
                Me.SendPropertyChanged("CustomerName")
                Me.OnCustomerNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportedCustomerName", DbType:="NVarChar(255)")>
    Public Property ImportedCustomerName() As String
        Get
            Return Me._ImportedCustomerName
        End Get
        Set
            If (String.Equals(Me._ImportedCustomerName, Value) = False) Then
                Me.OnImportedCustomerNameChanging(Value)
                Me.SendPropertyChanging()
                Me._ImportedCustomerName = Value
                Me.SendPropertyChanged("ImportedCustomerName")
                Me.OnImportedCustomerNameChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbZones")>
Partial Public Class tbZone
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ZoneID As System.Guid

    Private _Aid As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _AreaDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnZoneIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnZoneIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAreaDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnAreaDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ZoneID() As System.Guid
        Get
            Return Me._ZoneID
        End Get
        Set
            If ((Me._ZoneID = Value) _
                        = False) Then
                Me.OnZoneIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ZoneID = Value
                Me.SendPropertyChanged("ZoneID")
                Me.OnZoneIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>
    Public Property AreaDescription() As String
        Get
            Return Me._AreaDescription
        End Get
        Set
            If (String.Equals(Me._AreaDescription, Value) = False) Then
                Me.OnAreaDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._AreaDescription = Value
                Me.SendPropertyChanged("AreaDescription")
                Me.OnAreaDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerAgents")>
Partial Public Class tblCustomerAgent
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CustomerAgentID As System.Guid

    Private _AID As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _CustomerAgentName As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerAgentIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerAgentIDChanged()
    End Sub
    Partial Private Sub OnAIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCustomerAgentNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerAgentNameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CustomerAgentID() As System.Guid
        Get
            Return Me._CustomerAgentID
        End Get
        Set
            If ((Me._CustomerAgentID = Value) _
                        = False) Then
                Me.OnCustomerAgentIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerAgentID = Value
                Me.SendPropertyChanged("CustomerAgentID")
                Me.OnCustomerAgentIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AID", DbType:="Int NOT NULL")>
    Public Property AID() As Integer
        Get
            Return Me._AID
        End Get
        Set
            If ((Me._AID = Value) _
                        = False) Then
                Me.OnAIDChanging(Value)
                Me.SendPropertyChanging()
                Me._AID = Value
                Me.SendPropertyChanged("AID")
                Me.OnAIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentName", DbType:="NVarChar(50)")>
    Public Property CustomerAgentName() As String
        Get
            Return Me._CustomerAgentName
        End Get
        Set
            If (String.Equals(Me._CustomerAgentName, Value) = False) Then
                Me.OnCustomerAgentNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerAgentName = Value
                Me.SendPropertyChanged("CustomerAgentName")
                Me.OnCustomerAgentNameChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRateIncreaseReference")>
Partial Public Class tblRateIncreaseReference
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RateIncreaseID As System.Guid

    Private _Aid As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _RateIncreaseDescription As String

    Private _AnnualIncreaseApplies As Boolean

    Private _AlreadyDoneThisYear As Boolean

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRateIncreaseIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRateIncreaseIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnRateIncreaseDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRateIncreaseDescriptionChanged()
    End Sub
    Partial Private Sub OnAnnualIncreaseAppliesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAnnualIncreaseAppliesChanged()
    End Sub
    Partial Private Sub OnAlreadyDoneThisYearChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAlreadyDoneThisYearChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RateIncreaseID() As System.Guid
        Get
            Return Me._RateIncreaseID
        End Get
        Set
            If ((Me._RateIncreaseID = Value) _
                        = False) Then
                Me.OnRateIncreaseIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RateIncreaseID = Value
                Me.SendPropertyChanged("RateIncreaseID")
                Me.OnRateIncreaseIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseDescription", DbType:="NVarChar(25)")>
    Public Property RateIncreaseDescription() As String
        Get
            Return Me._RateIncreaseDescription
        End Get
        Set
            If (String.Equals(Me._RateIncreaseDescription, Value) = False) Then
                Me.OnRateIncreaseDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._RateIncreaseDescription = Value
                Me.SendPropertyChanged("RateIncreaseDescription")
                Me.OnRateIncreaseDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnualIncreaseApplies", DbType:="Bit NOT NULL")>
    Public Property AnnualIncreaseApplies() As Boolean
        Get
            Return Me._AnnualIncreaseApplies
        End Get
        Set
            If ((Me._AnnualIncreaseApplies = Value) _
                        = False) Then
                Me.OnAnnualIncreaseAppliesChanging(Value)
                Me.SendPropertyChanging()
                Me._AnnualIncreaseApplies = Value
                Me.SendPropertyChanged("AnnualIncreaseApplies")
                Me.OnAnnualIncreaseAppliesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlreadyDoneThisYear", DbType:="Bit NOT NULL")>
    Public Property AlreadyDoneThisYear() As Boolean
        Get
            Return Me._AlreadyDoneThisYear
        End Get
        Set
            If ((Me._AlreadyDoneThisYear = Value) _
                        = False) Then
                Me.OnAlreadyDoneThisYearChanging(Value)
                Me.SendPropertyChanging()
                Me._AlreadyDoneThisYear = Value
                Me.SendPropertyChanged("AlreadyDoneThisYear")
                Me.OnAlreadyDoneThisYearChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblServices")>
Partial Public Class tblService
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ServicesID As System.Guid

    Private _Sid As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _ServiceCode As String

    Private _ServiceDescription As String

    Private _CostOfService As System.Nullable(Of Single)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnServicesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnServicesIDChanged()
    End Sub
    Partial Private Sub OnSidChanging(value As Integer)
    End Sub
    Partial Private Sub OnSidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeChanged()
    End Sub
    Partial Private Sub OnServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceDescriptionChanged()
    End Sub
    Partial Private Sub OnCostOfServiceChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnCostOfServiceChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ServicesID() As System.Guid
        Get
            Return Me._ServicesID
        End Get
        Set
            If ((Me._ServicesID = Value) _
                        = False) Then
                Me.OnServicesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ServicesID = Value
                Me.SendPropertyChanged("ServicesID")
                Me.OnServicesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sid", DbType:="Int NOT NULL")>
    Public Property Sid() As Integer
        Get
            Return Me._Sid
        End Get
        Set
            If ((Me._Sid = Value) _
                        = False) Then
                Me.OnSidChanging(Value)
                Me.SendPropertyChanging()
                Me._Sid = Value
                Me.SendPropertyChanged("Sid")
                Me.OnSidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me.OnServiceCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceCode = Value
                Me.SendPropertyChanged("ServiceCode")
                Me.OnServiceCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me.OnServiceDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceDescription = Value
                Me.SendPropertyChanged("ServiceDescription")
                Me.OnServiceDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostOfService", DbType:="Real")>
    Public Property CostOfService() As System.Nullable(Of Single)
        Get
            Return Me._CostOfService
        End Get
        Set
            If (Me._CostOfService.Equals(Value) = False) Then
                Me.OnCostOfServiceChanging(Value)
                Me.SendPropertyChanging()
                Me._CostOfService = Value
                Me.SendPropertyChanged("CostOfService")
                Me.OnCostOfServiceChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblIndustryGroups")>
Partial Public Class tblIndustryGroup
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _IndustryID As System.Guid

    Private _Aid As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _IndustryDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIndustryIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIndustryIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnIndustryDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnIndustryDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property IndustryID() As System.Guid
        Get
            Return Me._IndustryID
        End Get
        Set
            If ((Me._IndustryID = Value) _
                        = False) Then
                Me.OnIndustryIDChanging(Value)
                Me.SendPropertyChanging()
                Me._IndustryID = Value
                Me.SendPropertyChanged("IndustryID")
                Me.OnIndustryIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryDescription", DbType:="NVarChar(50)")>
    Public Property IndustryDescription() As String
        Get
            Return Me._IndustryDescription
        End Get
        Set
            If (String.Equals(Me._IndustryDescription, Value) = False) Then
                Me.OnIndustryDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._IndustryDescription = Value
                Me.SendPropertyChanged("IndustryDescription")
                Me.OnIndustryDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPublicHolidayRegister")>
Partial Public Class tblPublicHolidayRegister
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _PublicHolidayDate As System.Nullable(Of Date)

    Private _PublicHolidayDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnPublicHolidayDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPublicHolidayDateChanged()
    End Sub
    Partial Private Sub OnPublicHolidayDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPublicHolidayDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublicHolidayDate", DbType:="DateTime")>
    Public Property PublicHolidayDate() As System.Nullable(Of Date)
        Get
            Return Me._PublicHolidayDate
        End Get
        Set
            If (Me._PublicHolidayDate.Equals(Value) = False) Then
                Me.OnPublicHolidayDateChanging(Value)
                Me.SendPropertyChanging()
                Me._PublicHolidayDate = Value
                Me.SendPropertyChanged("PublicHolidayDate")
                Me.OnPublicHolidayDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublicHolidayDescription", DbType:="NVarChar(50)")>
    Public Property PublicHolidayDescription() As String
        Get
            Return Me._PublicHolidayDescription
        End Get
        Set
            If (String.Equals(Me._PublicHolidayDescription, Value) = False) Then
                Me.OnPublicHolidayDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._PublicHolidayDescription = Value
                Me.SendPropertyChanged("PublicHolidayDescription")
                Me.OnPublicHolidayDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserGroups")>
Partial Public Class tblUserGroup
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _GroupId As System.Guid

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _UserGroup As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserGroupChanging(value As String)
    End Sub
    Partial Private Sub OnUserGroupChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property GroupId() As System.Guid
        Get
            Return Me._GroupId
        End Get
        Set
            If ((Me._GroupId = Value) _
                        = False) Then
                Me.OnGroupIdChanging(Value)
                Me.SendPropertyChanging()
                Me._GroupId = Value
                Me.SendPropertyChanged("GroupId")
                Me.OnGroupIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroup", DbType:="NVarChar(255)")>
    Public Property UserGroup() As String
        Get
            Return Me._UserGroup
        End Get
        Set
            If (String.Equals(Me._UserGroup, Value) = False) Then
                Me.OnUserGroupChanging(Value)
                Me.SendPropertyChanging()
                Me._UserGroup = Value
                Me.SendPropertyChanged("UserGroup")
                Me.OnUserGroupChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblParameters")>
Partial Public Class tblParameter
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _ParameterID As System.Guid

    Private _ParId As String

    Private _Field1 As String

    Private _Field2 As String

    Private _Field3 As String

    Private _Field4 As String

    Private _Field5 As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnParameterIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnParameterIDChanged()
    End Sub
    Partial Private Sub OnParIdChanging(value As String)
    End Sub
    Partial Private Sub OnParIdChanged()
    End Sub
    Partial Private Sub OnField1Changing(value As String)
    End Sub
    Partial Private Sub OnField1Changed()
    End Sub
    Partial Private Sub OnField2Changing(value As String)
    End Sub
    Partial Private Sub OnField2Changed()
    End Sub
    Partial Private Sub OnField3Changing(value As String)
    End Sub
    Partial Private Sub OnField3Changed()
    End Sub
    Partial Private Sub OnField4Changing(value As String)
    End Sub
    Partial Private Sub OnField4Changed()
    End Sub
    Partial Private Sub OnField5Changing(value As String)
    End Sub
    Partial Private Sub OnField5Changed()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParameterID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ParameterID() As System.Guid
        Get
            Return Me._ParameterID
        End Get
        Set
            If ((Me._ParameterID = Value) _
                        = False) Then
                Me.OnParameterIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ParameterID = Value
                Me.SendPropertyChanged("ParameterID")
                Me.OnParameterIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParId", DbType:="NVarChar(50)")>
    Public Property ParId() As String
        Get
            Return Me._ParId
        End Get
        Set
            If (String.Equals(Me._ParId, Value) = False) Then
                Me.OnParIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ParId = Value
                Me.SendPropertyChanged("ParId")
                Me.OnParIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field1", DbType:="NVarChar(50)")>
    Public Property Field1() As String
        Get
            Return Me._Field1
        End Get
        Set
            If (String.Equals(Me._Field1, Value) = False) Then
                Me.OnField1Changing(Value)
                Me.SendPropertyChanging()
                Me._Field1 = Value
                Me.SendPropertyChanged("Field1")
                Me.OnField1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field2", DbType:="NVarChar(50)")>
    Public Property Field2() As String
        Get
            Return Me._Field2
        End Get
        Set
            If (String.Equals(Me._Field2, Value) = False) Then
                Me.OnField2Changing(Value)
                Me.SendPropertyChanging()
                Me._Field2 = Value
                Me.SendPropertyChanged("Field2")
                Me.OnField2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field3", DbType:="NVarChar(50)")>
    Public Property Field3() As String
        Get
            Return Me._Field3
        End Get
        Set
            If (String.Equals(Me._Field3, Value) = False) Then
                Me.OnField3Changing(Value)
                Me.SendPropertyChanging()
                Me._Field3 = Value
                Me.SendPropertyChanged("Field3")
                Me.OnField3Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field4", DbType:="NVarChar(50)")>
    Public Property Field4() As String
        Get
            Return Me._Field4
        End Get
        Set
            If (String.Equals(Me._Field4, Value) = False) Then
                Me.OnField4Changing(Value)
                Me.SendPropertyChanging()
                Me._Field4 = Value
                Me.SendPropertyChanged("Field4")
                Me.OnField4Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field5", DbType:="NVarChar(50)")>
    Public Property Field5() As String
        Get
            Return Me._Field5
        End Get
        Set
            If (String.Equals(Me._Field5, Value) = False) Then
                Me.OnField5Changing(Value)
                Me.SendPropertyChanging()
                Me._Field5 = Value
                Me.SendPropertyChanged("Field5")
                Me.OnField5Changed()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserSecurity")>
Partial Public Class tblUserSecurity
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _usersecID As System.Guid

    Private _txtUserName As String

    Private _Administrator As Boolean

    Private _UserPassword As String

    Private _UserGroup As String

    Private _lblCustomerDetails As Boolean

    Private _lblSites As Boolean

    Private _lblMaintenance As Boolean

    Private _lblReports As Boolean

    Private _lblOtherProcesses As Boolean

    Private _cmdServices As Boolean

    Private _Toggle41 As Boolean

    Private _Toggle42 As Boolean

    Private _CmdIndustryGroups As Boolean

    Private _CmdInvoicingFrequency As Boolean

    Private _CmdPubHolReg As Boolean

    Private _Command50 As Boolean

    Private _CmdSalesPersons As Boolean

    Private _CmdCeaseReasons As Boolean

    Private _CmdPreviousSuppliers As Boolean

    Private _CmdCIRReasons As Boolean

    Private _CmdCycles As Boolean

    Private _CmdTurnOffAuditing As Boolean

    Private _CmdAuditChangeReason As Boolean

    Private _CmdAreas As Boolean

    Private _Command55 As Boolean

    Private _cmdUserSecurity As Boolean

    Private _CmdContractRenewalReport As Boolean

    Private _CmdQuickViewBySuburb As Boolean

    Private _CmdAuditReport As Boolean

    Private _CmdProductsReport As Boolean

    Private _CmdRunReport As Boolean

    Private _Command13 As Boolean

    Private _CmdCustomerSummary As Boolean

    Private _CmdSiteReport As Boolean

    Private _Command9 As Boolean

    Private _Command10 As Boolean

    Private _CmdSalesSummaryDislocations As Boolean

    Private _CmdDrivesLicenseExpiry As Boolean

    Private _Command14 As Boolean

    Private _cmdServiceSummary As Boolean

    Private _cmdRunValue As Boolean

    Private _cmdInvoicing As Boolean

    Private _cmdLengthOfService As Boolean

    Private _cmdRunValue2 As Boolean

    Private _cmdSitesWithNoContract As Boolean

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnusersecIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnusersecIDChanged()
    End Sub
    Partial Private Sub OntxtUserNameChanging(value As String)
    End Sub
    Partial Private Sub OntxtUserNameChanged()
    End Sub
    Partial Private Sub OnAdministratorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAdministratorChanged()
    End Sub
    Partial Private Sub OnUserPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnUserPasswordChanged()
    End Sub
    Partial Private Sub OnUserGroupChanging(value As String)
    End Sub
    Partial Private Sub OnUserGroupChanged()
    End Sub
    Partial Private Sub OnlblCustomerDetailsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblCustomerDetailsChanged()
    End Sub
    Partial Private Sub OnlblSitesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblSitesChanged()
    End Sub
    Partial Private Sub OnlblMaintenanceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblMaintenanceChanged()
    End Sub
    Partial Private Sub OnlblReportsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblReportsChanged()
    End Sub
    Partial Private Sub OnlblOtherProcessesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblOtherProcessesChanged()
    End Sub
    Partial Private Sub OncmdServicesChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdServicesChanged()
    End Sub
    Partial Private Sub OnToggle41Changing(value As Boolean)
    End Sub
    Partial Private Sub OnToggle41Changed()
    End Sub
    Partial Private Sub OnToggle42Changing(value As Boolean)
    End Sub
    Partial Private Sub OnToggle42Changed()
    End Sub
    Partial Private Sub OnCmdIndustryGroupsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdIndustryGroupsChanged()
    End Sub
    Partial Private Sub OnCmdInvoicingFrequencyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdInvoicingFrequencyChanged()
    End Sub
    Partial Private Sub OnCmdPubHolRegChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdPubHolRegChanged()
    End Sub
    Partial Private Sub OnCommand50Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand50Changed()
    End Sub
    Partial Private Sub OnCmdSalesPersonsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdSalesPersonsChanged()
    End Sub
    Partial Private Sub OnCmdCeaseReasonsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCeaseReasonsChanged()
    End Sub
    Partial Private Sub OnCmdPreviousSuppliersChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdPreviousSuppliersChanged()
    End Sub
    Partial Private Sub OnCmdCIRReasonsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCIRReasonsChanged()
    End Sub
    Partial Private Sub OnCmdCyclesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCyclesChanged()
    End Sub
    Partial Private Sub OnCmdTurnOffAuditingChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdTurnOffAuditingChanged()
    End Sub
    Partial Private Sub OnCmdAuditChangeReasonChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdAuditChangeReasonChanged()
    End Sub
    Partial Private Sub OnCmdAreasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdAreasChanged()
    End Sub
    Partial Private Sub OnCommand55Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand55Changed()
    End Sub
    Partial Private Sub OncmdUserSecurityChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdUserSecurityChanged()
    End Sub
    Partial Private Sub OnCmdContractRenewalReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdContractRenewalReportChanged()
    End Sub
    Partial Private Sub OnCmdQuickViewBySuburbChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdQuickViewBySuburbChanged()
    End Sub
    Partial Private Sub OnCmdAuditReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdAuditReportChanged()
    End Sub
    Partial Private Sub OnCmdProductsReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdProductsReportChanged()
    End Sub
    Partial Private Sub OnCmdRunReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdRunReportChanged()
    End Sub
    Partial Private Sub OnCommand13Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand13Changed()
    End Sub
    Partial Private Sub OnCmdCustomerSummaryChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCustomerSummaryChanged()
    End Sub
    Partial Private Sub OnCmdSiteReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdSiteReportChanged()
    End Sub
    Partial Private Sub OnCommand9Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand9Changed()
    End Sub
    Partial Private Sub OnCommand10Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand10Changed()
    End Sub
    Partial Private Sub OnCmdSalesSummaryDislocationsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdSalesSummaryDislocationsChanged()
    End Sub
    Partial Private Sub OnCmdDrivesLicenseExpiryChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdDrivesLicenseExpiryChanged()
    End Sub
    Partial Private Sub OnCommand14Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand14Changed()
    End Sub
    Partial Private Sub OncmdServiceSummaryChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdServiceSummaryChanged()
    End Sub
    Partial Private Sub OncmdRunValueChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdRunValueChanged()
    End Sub
    Partial Private Sub OncmdInvoicingChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdInvoicingChanged()
    End Sub
    Partial Private Sub OncmdLengthOfServiceChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdLengthOfServiceChanged()
    End Sub
    Partial Private Sub OncmdRunValue2Changing(value As Boolean)
    End Sub
    Partial Private Sub OncmdRunValue2Changed()
    End Sub
    Partial Private Sub OncmdSitesWithNoContractChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdSitesWithNoContractChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usersecID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property usersecID() As System.Guid
        Get
            Return Me._usersecID
        End Get
        Set
            If ((Me._usersecID = Value) _
                        = False) Then
                Me.OnusersecIDChanging(Value)
                Me.SendPropertyChanging()
                Me._usersecID = Value
                Me.SendPropertyChanged("usersecID")
                Me.OnusersecIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_txtUserName", DbType:="NVarChar(255)")>
    Public Property txtUserName() As String
        Get
            Return Me._txtUserName
        End Get
        Set
            If (String.Equals(Me._txtUserName, Value) = False) Then
                Me.OntxtUserNameChanging(Value)
                Me.SendPropertyChanging()
                Me._txtUserName = Value
                Me.SendPropertyChanged("txtUserName")
                Me.OntxtUserNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Administrator", DbType:="Bit NOT NULL")>
    Public Property Administrator() As Boolean
        Get
            Return Me._Administrator
        End Get
        Set
            If ((Me._Administrator = Value) _
                        = False) Then
                Me.OnAdministratorChanging(Value)
                Me.SendPropertyChanging()
                Me._Administrator = Value
                Me.SendPropertyChanged("Administrator")
                Me.OnAdministratorChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserPassword", DbType:="NVarChar(255)")>
    Public Property UserPassword() As String
        Get
            Return Me._UserPassword
        End Get
        Set
            If (String.Equals(Me._UserPassword, Value) = False) Then
                Me.OnUserPasswordChanging(Value)
                Me.SendPropertyChanging()
                Me._UserPassword = Value
                Me.SendPropertyChanged("UserPassword")
                Me.OnUserPasswordChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroup", DbType:="NVarChar(255)")>
    Public Property UserGroup() As String
        Get
            Return Me._UserGroup
        End Get
        Set
            If (String.Equals(Me._UserGroup, Value) = False) Then
                Me.OnUserGroupChanging(Value)
                Me.SendPropertyChanging()
                Me._UserGroup = Value
                Me.SendPropertyChanged("UserGroup")
                Me.OnUserGroupChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblCustomerDetails", DbType:="Bit NOT NULL")>
    Public Property lblCustomerDetails() As Boolean
        Get
            Return Me._lblCustomerDetails
        End Get
        Set
            If ((Me._lblCustomerDetails = Value) _
                        = False) Then
                Me.OnlblCustomerDetailsChanging(Value)
                Me.SendPropertyChanging()
                Me._lblCustomerDetails = Value
                Me.SendPropertyChanged("lblCustomerDetails")
                Me.OnlblCustomerDetailsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblSites", DbType:="Bit NOT NULL")>
    Public Property lblSites() As Boolean
        Get
            Return Me._lblSites
        End Get
        Set
            If ((Me._lblSites = Value) _
                        = False) Then
                Me.OnlblSitesChanging(Value)
                Me.SendPropertyChanging()
                Me._lblSites = Value
                Me.SendPropertyChanged("lblSites")
                Me.OnlblSitesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblMaintenance", DbType:="Bit NOT NULL")>
    Public Property lblMaintenance() As Boolean
        Get
            Return Me._lblMaintenance
        End Get
        Set
            If ((Me._lblMaintenance = Value) _
                        = False) Then
                Me.OnlblMaintenanceChanging(Value)
                Me.SendPropertyChanging()
                Me._lblMaintenance = Value
                Me.SendPropertyChanged("lblMaintenance")
                Me.OnlblMaintenanceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblReports", DbType:="Bit NOT NULL")>
    Public Property lblReports() As Boolean
        Get
            Return Me._lblReports
        End Get
        Set
            If ((Me._lblReports = Value) _
                        = False) Then
                Me.OnlblReportsChanging(Value)
                Me.SendPropertyChanging()
                Me._lblReports = Value
                Me.SendPropertyChanged("lblReports")
                Me.OnlblReportsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblOtherProcesses", DbType:="Bit NOT NULL")>
    Public Property lblOtherProcesses() As Boolean
        Get
            Return Me._lblOtherProcesses
        End Get
        Set
            If ((Me._lblOtherProcesses = Value) _
                        = False) Then
                Me.OnlblOtherProcessesChanging(Value)
                Me.SendPropertyChanging()
                Me._lblOtherProcesses = Value
                Me.SendPropertyChanged("lblOtherProcesses")
                Me.OnlblOtherProcessesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdServices", DbType:="Bit NOT NULL")>
    Public Property cmdServices() As Boolean
        Get
            Return Me._cmdServices
        End Get
        Set
            If ((Me._cmdServices = Value) _
                        = False) Then
                Me.OncmdServicesChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdServices = Value
                Me.SendPropertyChanged("cmdServices")
                Me.OncmdServicesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Toggle41", DbType:="Bit NOT NULL")>
    Public Property Toggle41() As Boolean
        Get
            Return Me._Toggle41
        End Get
        Set
            If ((Me._Toggle41 = Value) _
                        = False) Then
                Me.OnToggle41Changing(Value)
                Me.SendPropertyChanging()
                Me._Toggle41 = Value
                Me.SendPropertyChanged("Toggle41")
                Me.OnToggle41Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Toggle42", DbType:="Bit NOT NULL")>
    Public Property Toggle42() As Boolean
        Get
            Return Me._Toggle42
        End Get
        Set
            If ((Me._Toggle42 = Value) _
                        = False) Then
                Me.OnToggle42Changing(Value)
                Me.SendPropertyChanging()
                Me._Toggle42 = Value
                Me.SendPropertyChanged("Toggle42")
                Me.OnToggle42Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdIndustryGroups", DbType:="Bit NOT NULL")>
    Public Property CmdIndustryGroups() As Boolean
        Get
            Return Me._CmdIndustryGroups
        End Get
        Set
            If ((Me._CmdIndustryGroups = Value) _
                        = False) Then
                Me.OnCmdIndustryGroupsChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdIndustryGroups = Value
                Me.SendPropertyChanged("CmdIndustryGroups")
                Me.OnCmdIndustryGroupsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdInvoicingFrequency", DbType:="Bit NOT NULL")>
    Public Property CmdInvoicingFrequency() As Boolean
        Get
            Return Me._CmdInvoicingFrequency
        End Get
        Set
            If ((Me._CmdInvoicingFrequency = Value) _
                        = False) Then
                Me.OnCmdInvoicingFrequencyChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdInvoicingFrequency = Value
                Me.SendPropertyChanged("CmdInvoicingFrequency")
                Me.OnCmdInvoicingFrequencyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdPubHolReg", DbType:="Bit NOT NULL")>
    Public Property CmdPubHolReg() As Boolean
        Get
            Return Me._CmdPubHolReg
        End Get
        Set
            If ((Me._CmdPubHolReg = Value) _
                        = False) Then
                Me.OnCmdPubHolRegChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdPubHolReg = Value
                Me.SendPropertyChanged("CmdPubHolReg")
                Me.OnCmdPubHolRegChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command50", DbType:="Bit NOT NULL")>
    Public Property Command50() As Boolean
        Get
            Return Me._Command50
        End Get
        Set
            If ((Me._Command50 = Value) _
                        = False) Then
                Me.OnCommand50Changing(Value)
                Me.SendPropertyChanging()
                Me._Command50 = Value
                Me.SendPropertyChanged("Command50")
                Me.OnCommand50Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdSalesPersons", DbType:="Bit NOT NULL")>
    Public Property CmdSalesPersons() As Boolean
        Get
            Return Me._CmdSalesPersons
        End Get
        Set
            If ((Me._CmdSalesPersons = Value) _
                        = False) Then
                Me.OnCmdSalesPersonsChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdSalesPersons = Value
                Me.SendPropertyChanged("CmdSalesPersons")
                Me.OnCmdSalesPersonsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCeaseReasons", DbType:="Bit NOT NULL")>
    Public Property CmdCeaseReasons() As Boolean
        Get
            Return Me._CmdCeaseReasons
        End Get
        Set
            If ((Me._CmdCeaseReasons = Value) _
                        = False) Then
                Me.OnCmdCeaseReasonsChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdCeaseReasons = Value
                Me.SendPropertyChanged("CmdCeaseReasons")
                Me.OnCmdCeaseReasonsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdPreviousSuppliers", DbType:="Bit NOT NULL")>
    Public Property CmdPreviousSuppliers() As Boolean
        Get
            Return Me._CmdPreviousSuppliers
        End Get
        Set
            If ((Me._CmdPreviousSuppliers = Value) _
                        = False) Then
                Me.OnCmdPreviousSuppliersChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdPreviousSuppliers = Value
                Me.SendPropertyChanged("CmdPreviousSuppliers")
                Me.OnCmdPreviousSuppliersChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCIRReasons", DbType:="Bit NOT NULL")>
    Public Property CmdCIRReasons() As Boolean
        Get
            Return Me._CmdCIRReasons
        End Get
        Set
            If ((Me._CmdCIRReasons = Value) _
                        = False) Then
                Me.OnCmdCIRReasonsChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdCIRReasons = Value
                Me.SendPropertyChanged("CmdCIRReasons")
                Me.OnCmdCIRReasonsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCycles", DbType:="Bit NOT NULL")>
    Public Property CmdCycles() As Boolean
        Get
            Return Me._CmdCycles
        End Get
        Set
            If ((Me._CmdCycles = Value) _
                        = False) Then
                Me.OnCmdCyclesChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdCycles = Value
                Me.SendPropertyChanged("CmdCycles")
                Me.OnCmdCyclesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdTurnOffAuditing", DbType:="Bit NOT NULL")>
    Public Property CmdTurnOffAuditing() As Boolean
        Get
            Return Me._CmdTurnOffAuditing
        End Get
        Set
            If ((Me._CmdTurnOffAuditing = Value) _
                        = False) Then
                Me.OnCmdTurnOffAuditingChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdTurnOffAuditing = Value
                Me.SendPropertyChanged("CmdTurnOffAuditing")
                Me.OnCmdTurnOffAuditingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdAuditChangeReason", DbType:="Bit NOT NULL")>
    Public Property CmdAuditChangeReason() As Boolean
        Get
            Return Me._CmdAuditChangeReason
        End Get
        Set
            If ((Me._CmdAuditChangeReason = Value) _
                        = False) Then
                Me.OnCmdAuditChangeReasonChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdAuditChangeReason = Value
                Me.SendPropertyChanged("CmdAuditChangeReason")
                Me.OnCmdAuditChangeReasonChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdAreas", DbType:="Bit NOT NULL")>
    Public Property CmdAreas() As Boolean
        Get
            Return Me._CmdAreas
        End Get
        Set
            If ((Me._CmdAreas = Value) _
                        = False) Then
                Me.OnCmdAreasChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdAreas = Value
                Me.SendPropertyChanged("CmdAreas")
                Me.OnCmdAreasChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command55", DbType:="Bit NOT NULL")>
    Public Property Command55() As Boolean
        Get
            Return Me._Command55
        End Get
        Set
            If ((Me._Command55 = Value) _
                        = False) Then
                Me.OnCommand55Changing(Value)
                Me.SendPropertyChanging()
                Me._Command55 = Value
                Me.SendPropertyChanged("Command55")
                Me.OnCommand55Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdUserSecurity", DbType:="Bit NOT NULL")>
    Public Property cmdUserSecurity() As Boolean
        Get
            Return Me._cmdUserSecurity
        End Get
        Set
            If ((Me._cmdUserSecurity = Value) _
                        = False) Then
                Me.OncmdUserSecurityChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdUserSecurity = Value
                Me.SendPropertyChanged("cmdUserSecurity")
                Me.OncmdUserSecurityChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdContractRenewalReport", DbType:="Bit NOT NULL")>
    Public Property CmdContractRenewalReport() As Boolean
        Get
            Return Me._CmdContractRenewalReport
        End Get
        Set
            If ((Me._CmdContractRenewalReport = Value) _
                        = False) Then
                Me.OnCmdContractRenewalReportChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdContractRenewalReport = Value
                Me.SendPropertyChanged("CmdContractRenewalReport")
                Me.OnCmdContractRenewalReportChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdQuickViewBySuburb", DbType:="Bit NOT NULL")>
    Public Property CmdQuickViewBySuburb() As Boolean
        Get
            Return Me._CmdQuickViewBySuburb
        End Get
        Set
            If ((Me._CmdQuickViewBySuburb = Value) _
                        = False) Then
                Me.OnCmdQuickViewBySuburbChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdQuickViewBySuburb = Value
                Me.SendPropertyChanged("CmdQuickViewBySuburb")
                Me.OnCmdQuickViewBySuburbChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdAuditReport", DbType:="Bit NOT NULL")>
    Public Property CmdAuditReport() As Boolean
        Get
            Return Me._CmdAuditReport
        End Get
        Set
            If ((Me._CmdAuditReport = Value) _
                        = False) Then
                Me.OnCmdAuditReportChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdAuditReport = Value
                Me.SendPropertyChanged("CmdAuditReport")
                Me.OnCmdAuditReportChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdProductsReport", DbType:="Bit NOT NULL")>
    Public Property CmdProductsReport() As Boolean
        Get
            Return Me._CmdProductsReport
        End Get
        Set
            If ((Me._CmdProductsReport = Value) _
                        = False) Then
                Me.OnCmdProductsReportChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdProductsReport = Value
                Me.SendPropertyChanged("CmdProductsReport")
                Me.OnCmdProductsReportChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdRunReport", DbType:="Bit NOT NULL")>
    Public Property CmdRunReport() As Boolean
        Get
            Return Me._CmdRunReport
        End Get
        Set
            If ((Me._CmdRunReport = Value) _
                        = False) Then
                Me.OnCmdRunReportChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdRunReport = Value
                Me.SendPropertyChanged("CmdRunReport")
                Me.OnCmdRunReportChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command13", DbType:="Bit NOT NULL")>
    Public Property Command13() As Boolean
        Get
            Return Me._Command13
        End Get
        Set
            If ((Me._Command13 = Value) _
                        = False) Then
                Me.OnCommand13Changing(Value)
                Me.SendPropertyChanging()
                Me._Command13 = Value
                Me.SendPropertyChanged("Command13")
                Me.OnCommand13Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCustomerSummary", DbType:="Bit NOT NULL")>
    Public Property CmdCustomerSummary() As Boolean
        Get
            Return Me._CmdCustomerSummary
        End Get
        Set
            If ((Me._CmdCustomerSummary = Value) _
                        = False) Then
                Me.OnCmdCustomerSummaryChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdCustomerSummary = Value
                Me.SendPropertyChanged("CmdCustomerSummary")
                Me.OnCmdCustomerSummaryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdSiteReport", DbType:="Bit NOT NULL")>
    Public Property CmdSiteReport() As Boolean
        Get
            Return Me._CmdSiteReport
        End Get
        Set
            If ((Me._CmdSiteReport = Value) _
                        = False) Then
                Me.OnCmdSiteReportChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdSiteReport = Value
                Me.SendPropertyChanged("CmdSiteReport")
                Me.OnCmdSiteReportChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command9", DbType:="Bit NOT NULL")>
    Public Property Command9() As Boolean
        Get
            Return Me._Command9
        End Get
        Set
            If ((Me._Command9 = Value) _
                        = False) Then
                Me.OnCommand9Changing(Value)
                Me.SendPropertyChanging()
                Me._Command9 = Value
                Me.SendPropertyChanged("Command9")
                Me.OnCommand9Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command10", DbType:="Bit NOT NULL")>
    Public Property Command10() As Boolean
        Get
            Return Me._Command10
        End Get
        Set
            If ((Me._Command10 = Value) _
                        = False) Then
                Me.OnCommand10Changing(Value)
                Me.SendPropertyChanging()
                Me._Command10 = Value
                Me.SendPropertyChanged("Command10")
                Me.OnCommand10Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdSalesSummaryDislocations", DbType:="Bit NOT NULL")>
    Public Property CmdSalesSummaryDislocations() As Boolean
        Get
            Return Me._CmdSalesSummaryDislocations
        End Get
        Set
            If ((Me._CmdSalesSummaryDislocations = Value) _
                        = False) Then
                Me.OnCmdSalesSummaryDislocationsChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdSalesSummaryDislocations = Value
                Me.SendPropertyChanged("CmdSalesSummaryDislocations")
                Me.OnCmdSalesSummaryDislocationsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdDrivesLicenseExpiry", DbType:="Bit NOT NULL")>
    Public Property CmdDrivesLicenseExpiry() As Boolean
        Get
            Return Me._CmdDrivesLicenseExpiry
        End Get
        Set
            If ((Me._CmdDrivesLicenseExpiry = Value) _
                        = False) Then
                Me.OnCmdDrivesLicenseExpiryChanging(Value)
                Me.SendPropertyChanging()
                Me._CmdDrivesLicenseExpiry = Value
                Me.SendPropertyChanged("CmdDrivesLicenseExpiry")
                Me.OnCmdDrivesLicenseExpiryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command14", DbType:="Bit NOT NULL")>
    Public Property Command14() As Boolean
        Get
            Return Me._Command14
        End Get
        Set
            If ((Me._Command14 = Value) _
                        = False) Then
                Me.OnCommand14Changing(Value)
                Me.SendPropertyChanging()
                Me._Command14 = Value
                Me.SendPropertyChanged("Command14")
                Me.OnCommand14Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdServiceSummary", DbType:="Bit NOT NULL")>
    Public Property cmdServiceSummary() As Boolean
        Get
            Return Me._cmdServiceSummary
        End Get
        Set
            If ((Me._cmdServiceSummary = Value) _
                        = False) Then
                Me.OncmdServiceSummaryChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdServiceSummary = Value
                Me.SendPropertyChanged("cmdServiceSummary")
                Me.OncmdServiceSummaryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdRunValue", DbType:="Bit NOT NULL")>
    Public Property cmdRunValue() As Boolean
        Get
            Return Me._cmdRunValue
        End Get
        Set
            If ((Me._cmdRunValue = Value) _
                        = False) Then
                Me.OncmdRunValueChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdRunValue = Value
                Me.SendPropertyChanged("cmdRunValue")
                Me.OncmdRunValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdInvoicing", DbType:="Bit NOT NULL")>
    Public Property cmdInvoicing() As Boolean
        Get
            Return Me._cmdInvoicing
        End Get
        Set
            If ((Me._cmdInvoicing = Value) _
                        = False) Then
                Me.OncmdInvoicingChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdInvoicing = Value
                Me.SendPropertyChanged("cmdInvoicing")
                Me.OncmdInvoicingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdLengthOfService", DbType:="Bit NOT NULL")>
    Public Property cmdLengthOfService() As Boolean
        Get
            Return Me._cmdLengthOfService
        End Get
        Set
            If ((Me._cmdLengthOfService = Value) _
                        = False) Then
                Me.OncmdLengthOfServiceChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdLengthOfService = Value
                Me.SendPropertyChanged("cmdLengthOfService")
                Me.OncmdLengthOfServiceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdRunValue2", DbType:="Bit NOT NULL")>
    Public Property cmdRunValue2() As Boolean
        Get
            Return Me._cmdRunValue2
        End Get
        Set
            If ((Me._cmdRunValue2 = Value) _
                        = False) Then
                Me.OncmdRunValue2Changing(Value)
                Me.SendPropertyChanging()
                Me._cmdRunValue2 = Value
                Me.SendPropertyChanged("cmdRunValue2")
                Me.OncmdRunValue2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdSitesWithNoContract", DbType:="Bit NOT NULL")>
    Public Property cmdSitesWithNoContract() As Boolean
        Get
            Return Me._cmdSitesWithNoContract
        End Get
        Set
            If ((Me._cmdSitesWithNoContract = Value) _
                        = False) Then
                Me.OncmdSitesWithNoContractChanging(Value)
                Me.SendPropertyChanging()
                Me._cmdSitesWithNoContract = Value
                Me.SendPropertyChanged("cmdSitesWithNoContract")
                Me.OncmdSitesWithNoContractChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDrivers")>
Partial Public Class tblDriver
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _DriverID As System.Guid

    Private _Did As Integer

    Private _DriverName As String

    Private _DriversLicenseNo As String

    Private _DriversLicenseExpiryDate As System.Nullable(Of Date)

    Private _Inactive As Boolean

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnDriverIDChanged()
    End Sub
    Partial Private Sub OnDidChanging(value As Integer)
    End Sub
    Partial Private Sub OnDidChanged()
    End Sub
    Partial Private Sub OnDriverNameChanging(value As String)
    End Sub
    Partial Private Sub OnDriverNameChanged()
    End Sub
    Partial Private Sub OnDriversLicenseNoChanging(value As String)
    End Sub
    Partial Private Sub OnDriversLicenseNoChanged()
    End Sub
    Partial Private Sub OnDriversLicenseExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDriversLicenseExpiryDateChanged()
    End Sub
    Partial Private Sub OnInactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property DriverID() As System.Guid
        Get
            Return Me._DriverID
        End Get
        Set
            If ((Me._DriverID = Value) _
                        = False) Then
                Me.OnDriverIDChanging(Value)
                Me.SendPropertyChanging()
                Me._DriverID = Value
                Me.SendPropertyChanged("DriverID")
                Me.OnDriverIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=True)>
    Public Property Did() As Integer
        Get
            Return Me._Did
        End Get
        Set
            If ((Me._Did = Value) _
                        = False) Then
                Me.OnDidChanging(Value)
                Me.SendPropertyChanging()
                Me._Did = Value
                Me.SendPropertyChanged("Did")
                Me.OnDidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me.OnDriverNameChanging(Value)
                Me.SendPropertyChanging()
                Me._DriverName = Value
                Me.SendPropertyChanged("DriverName")
                Me.OnDriverNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseNo", DbType:="NVarChar(22)")>
    Public Property DriversLicenseNo() As String
        Get
            Return Me._DriversLicenseNo
        End Get
        Set
            If (String.Equals(Me._DriversLicenseNo, Value) = False) Then
                Me.OnDriversLicenseNoChanging(Value)
                Me.SendPropertyChanging()
                Me._DriversLicenseNo = Value
                Me.SendPropertyChanged("DriversLicenseNo")
                Me.OnDriversLicenseNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseExpiryDate", DbType:="DateTime")>
    Public Property DriversLicenseExpiryDate() As System.Nullable(Of Date)
        Get
            Return Me._DriversLicenseExpiryDate
        End Get
        Set
            If (Me._DriversLicenseExpiryDate.Equals(Value) = False) Then
                Me.OnDriversLicenseExpiryDateChanging(Value)
                Me.SendPropertyChanging()
                Me._DriversLicenseExpiryDate = Value
                Me.SendPropertyChanged("DriversLicenseExpiryDate")
                Me.OnDriversLicenseExpiryDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="Bit NOT NULL")>
    Public Property Inactive() As Boolean
        Get
            Return Me._Inactive
        End Get
        Set
            If ((Me._Inactive = Value) _
                        = False) Then
                Me.OnInactiveChanging(Value)
                Me.SendPropertyChanging()
                Me._Inactive = Value
                Me.SendPropertyChanged("Inactive")
                Me.OnInactiveChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDriverCommentsReason")>
Partial Public Class tblDriverCommentsReason
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _CommentDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCommentDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCommentDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDescription", DbType:="NVarChar(25)")>
    Public Property CommentDescription() As String
        Get
            Return Me._CommentDescription
        End Get
        Set
            If (String.Equals(Me._CommentDescription, Value) = False) Then
                Me.OnCommentDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._CommentDescription = Value
                Me.SendPropertyChanged("CommentDescription")
                Me.OnCommentDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDriverComments")>
Partial Public Class tblDriverComment
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _Did As System.Nullable(Of Short)

    Private _CommentDate As System.Nullable(Of Date)

    Private _CommentReason As System.Nullable(Of Short)

    Private _Comments As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnDidChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnDidChanged()
    End Sub
    Partial Private Sub OnCommentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCommentDateChanged()
    End Sub
    Partial Private Sub OnCommentReasonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCommentReasonChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", DbType:="SmallInt")>
    Public Property Did() As System.Nullable(Of Short)
        Get
            Return Me._Did
        End Get
        Set
            If (Me._Did.Equals(Value) = False) Then
                Me.OnDidChanging(Value)
                Me.SendPropertyChanging()
                Me._Did = Value
                Me.SendPropertyChanged("Did")
                Me.OnDidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDate", DbType:="DateTime")>
    Public Property CommentDate() As System.Nullable(Of Date)
        Get
            Return Me._CommentDate
        End Get
        Set
            If (Me._CommentDate.Equals(Value) = False) Then
                Me.OnCommentDateChanging(Value)
                Me.SendPropertyChanging()
                Me._CommentDate = Value
                Me.SendPropertyChanged("CommentDate")
                Me.OnCommentDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentReason", DbType:="SmallInt")>
    Public Property CommentReason() As System.Nullable(Of Short)
        Get
            Return Me._CommentReason
        End Get
        Set
            If (Me._CommentReason.Equals(Value) = False) Then
                Me.OnCommentReasonChanging(Value)
                Me.SendPropertyChanging()
                Me._CommentReason = Value
                Me.SendPropertyChanged("CommentReason")
                Me.OnCommentReasonChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>
    Public Property Comments() As String
        Get
            Return Me._Comments
        End Get
        Set
            If (String.Equals(Me._Comments, Value) = False) Then
                Me.OnCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._Comments = Value
                Me.SendPropertyChanged("Comments")
                Me.OnCommentsChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMYOBInvoicing")>
Partial Public Class tblMYOBInvoicing
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _CustomerNumber As String

    Private _CustomerName As String

    Private _InvoiceNumber As String

    Private _InvoiceDate As System.Nullable(Of Date)

    Private _CustomerPurchaseOrderNumber As String

    Private _Quantity As System.Nullable(Of Short)

    Private _ProductCode As String

    Private _ProductDescription As String

    Private _AnnualPriceExGST As System.Nullable(Of Single)

    Private _AnnualPriceIncGST As System.Nullable(Of Single)

    Private _Discount As String

    Private _InvoiceAmountExGST As System.Nullable(Of Single)

    Private _InvoiceAmountIncGST As System.Nullable(Of Single)

    Private _Job As String

    Private _JournalMemo As String

    Private _TaxCode As String

    Private _GSTAmount As System.Nullable(Of Single)

    Private _Category As String

    Private _SiteName As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCustomerNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNumberChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnInvoiceNumberChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceNumberChanged()
    End Sub
    Partial Private Sub OnInvoiceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvoiceDateChanged()
    End Sub
    Partial Private Sub OnCustomerPurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnProductDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProductDescriptionChanged()
    End Sub
    Partial Private Sub OnAnnualPriceExGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnAnnualPriceExGSTChanged()
    End Sub
    Partial Private Sub OnAnnualPriceIncGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnAnnualPriceIncGSTChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As String)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnInvoiceAmountExGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnInvoiceAmountExGSTChanged()
    End Sub
    Partial Private Sub OnInvoiceAmountIncGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnInvoiceAmountIncGSTChanged()
    End Sub
    Partial Private Sub OnJobChanging(value As String)
    End Sub
    Partial Private Sub OnJobChanged()
    End Sub
    Partial Private Sub OnJournalMemoChanging(value As String)
    End Sub
    Partial Private Sub OnJournalMemoChanged()
    End Sub
    Partial Private Sub OnTaxCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTaxCodeChanged()
    End Sub
    Partial Private Sub OnGSTAmountChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnGSTAmountChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerNumber", DbType:="NVarChar(50)")>
    Public Property CustomerNumber() As String
        Get
            Return Me._CustomerNumber
        End Get
        Set
            If (String.Equals(Me._CustomerNumber, Value) = False) Then
                Me.OnCustomerNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerNumber = Value
                Me.SendPropertyChanged("CustomerNumber")
                Me.OnCustomerNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me.OnCustomerNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerName = Value
                Me.SendPropertyChanged("CustomerName")
                Me.OnCustomerNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceNumber", DbType:="NVarChar(50)")>
    Public Property InvoiceNumber() As String
        Get
            Return Me._InvoiceNumber
        End Get
        Set
            If (String.Equals(Me._InvoiceNumber, Value) = False) Then
                Me.OnInvoiceNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceNumber = Value
                Me.SendPropertyChanged("InvoiceNumber")
                Me.OnInvoiceNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceDate", DbType:="DateTime")>
    Public Property InvoiceDate() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceDate
        End Get
        Set
            If (Me._InvoiceDate.Equals(Value) = False) Then
                Me.OnInvoiceDateChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceDate = Value
                Me.SendPropertyChanged("InvoiceDate")
                Me.OnInvoiceDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPurchaseOrderNumber", DbType:="NVarChar(50)")>
    Public Property CustomerPurchaseOrderNumber() As String
        Get
            Return Me._CustomerPurchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._CustomerPurchaseOrderNumber, Value) = False) Then
                Me.OnCustomerPurchaseOrderNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerPurchaseOrderNumber = Value
                Me.SendPropertyChanged("CustomerPurchaseOrderNumber")
                Me.OnCustomerPurchaseOrderNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt")>
    Public Property Quantity() As System.Nullable(Of Short)
        Get
            Return Me._Quantity
        End Get
        Set
            If (Me._Quantity.Equals(Value) = False) Then
                Me.OnQuantityChanging(Value)
                Me.SendPropertyChanging()
                Me._Quantity = Value
                Me.SendPropertyChanged("Quantity")
                Me.OnQuantityChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50)")>
    Public Property ProductCode() As String
        Get
            Return Me._ProductCode
        End Get
        Set
            If (String.Equals(Me._ProductCode, Value) = False) Then
                Me.OnProductCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._ProductCode = Value
                Me.SendPropertyChanged("ProductCode")
                Me.OnProductCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductDescription", DbType:="NVarChar(200)")>
    Public Property ProductDescription() As String
        Get
            Return Me._ProductDescription
        End Get
        Set
            If (String.Equals(Me._ProductDescription, Value) = False) Then
                Me.OnProductDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._ProductDescription = Value
                Me.SendPropertyChanged("ProductDescription")
                Me.OnProductDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnualPriceExGST", DbType:="Real")>
    Public Property AnnualPriceExGST() As System.Nullable(Of Single)
        Get
            Return Me._AnnualPriceExGST
        End Get
        Set
            If (Me._AnnualPriceExGST.Equals(Value) = False) Then
                Me.OnAnnualPriceExGSTChanging(Value)
                Me.SendPropertyChanging()
                Me._AnnualPriceExGST = Value
                Me.SendPropertyChanged("AnnualPriceExGST")
                Me.OnAnnualPriceExGSTChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnualPriceIncGST", DbType:="Real")>
    Public Property AnnualPriceIncGST() As System.Nullable(Of Single)
        Get
            Return Me._AnnualPriceIncGST
        End Get
        Set
            If (Me._AnnualPriceIncGST.Equals(Value) = False) Then
                Me.OnAnnualPriceIncGSTChanging(Value)
                Me.SendPropertyChanging()
                Me._AnnualPriceIncGST = Value
                Me.SendPropertyChanged("AnnualPriceIncGST")
                Me.OnAnnualPriceIncGSTChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="NVarChar(50)")>
    Public Property Discount() As String
        Get
            Return Me._Discount
        End Get
        Set
            If (String.Equals(Me._Discount, Value) = False) Then
                Me.OnDiscountChanging(Value)
                Me.SendPropertyChanging()
                Me._Discount = Value
                Me.SendPropertyChanged("Discount")
                Me.OnDiscountChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountExGST", DbType:="Real")>
    Public Property InvoiceAmountExGST() As System.Nullable(Of Single)
        Get
            Return Me._InvoiceAmountExGST
        End Get
        Set
            If (Me._InvoiceAmountExGST.Equals(Value) = False) Then
                Me.OnInvoiceAmountExGSTChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceAmountExGST = Value
                Me.SendPropertyChanged("InvoiceAmountExGST")
                Me.OnInvoiceAmountExGSTChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountIncGST", DbType:="Real")>
    Public Property InvoiceAmountIncGST() As System.Nullable(Of Single)
        Get
            Return Me._InvoiceAmountIncGST
        End Get
        Set
            If (Me._InvoiceAmountIncGST.Equals(Value) = False) Then
                Me.OnInvoiceAmountIncGSTChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceAmountIncGST = Value
                Me.SendPropertyChanged("InvoiceAmountIncGST")
                Me.OnInvoiceAmountIncGSTChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Job", DbType:="NVarChar(50)")>
    Public Property Job() As String
        Get
            Return Me._Job
        End Get
        Set
            If (String.Equals(Me._Job, Value) = False) Then
                Me.OnJobChanging(Value)
                Me.SendPropertyChanging()
                Me._Job = Value
                Me.SendPropertyChanged("Job")
                Me.OnJobChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JournalMemo", DbType:="NVarChar(120)")>
    Public Property JournalMemo() As String
        Get
            Return Me._JournalMemo
        End Get
        Set
            If (String.Equals(Me._JournalMemo, Value) = False) Then
                Me.OnJournalMemoChanging(Value)
                Me.SendPropertyChanging()
                Me._JournalMemo = Value
                Me.SendPropertyChanged("JournalMemo")
                Me.OnJournalMemoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxCode", DbType:="NVarChar(50)")>
    Public Property TaxCode() As String
        Get
            Return Me._TaxCode
        End Get
        Set
            If (String.Equals(Me._TaxCode, Value) = False) Then
                Me.OnTaxCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._TaxCode = Value
                Me.SendPropertyChanged("TaxCode")
                Me.OnTaxCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GSTAmount", DbType:="Real")>
    Public Property GSTAmount() As System.Nullable(Of Single)
        Get
            Return Me._GSTAmount
        End Get
        Set
            If (Me._GSTAmount.Equals(Value) = False) Then
                Me.OnGSTAmountChanging(Value)
                Me.SendPropertyChanging()
                Me._GSTAmount = Value
                Me.SendPropertyChanged("GSTAmount")
                Me.OnGSTAmountChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(50)")>
    Public Property Category() As String
        Get
            Return Me._Category
        End Get
        Set
            If (String.Equals(Me._Category, Value) = False) Then
                Me.OnCategoryChanging(Value)
                Me.SendPropertyChanging()
                Me._Category = Value
                Me.SendPropertyChanged("Category")
                Me.OnCategoryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me.OnSiteNameChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteName = Value
                Me.SendPropertyChanged("SiteName")
                Me.OnSiteNameChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomers")>
Partial Public Class tblCustomer
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CustomerID As System.Guid

    Private _Cid As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _CustomerName As String

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _State As System.Nullable(Of Integer)

    Private _Suburb As String

    Private _PostCode As String

    Private _CustomerContactName As String

    Private _CustomerPhone As String

    Private _CustomerMobile As String

    Private _CustomerFax As String

    Private _CustomerComments As String

    Private _CustomerAgent As System.Nullable(Of Integer)

    Private _CustomerRating As System.Nullable(Of Short)

    Private _Zone As System.Nullable(Of Integer)

    Private _MYOBCustomerNumber As String

    Private _CustomerValue As System.Nullable(Of Double)

    Private _InactiveCustomer As Boolean

    Private _CustomerCommencementDate As System.Nullable(Of Date)

    Private _chkCustomerExcludeFuelLevy As Boolean

    Private _cmbRateIncrease As System.Nullable(Of Short)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As Integer)
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnStateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnCustomerContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerContactNameChanged()
    End Sub
    Partial Private Sub OnCustomerPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPhoneChanged()
    End Sub
    Partial Private Sub OnCustomerMobileChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerMobileChanged()
    End Sub
    Partial Private Sub OnCustomerFaxChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerFaxChanged()
    End Sub
    Partial Private Sub OnCustomerCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerCommentsChanged()
    End Sub
    Partial Private Sub OnCustomerAgentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerAgentChanged()
    End Sub
    Partial Private Sub OnCustomerRatingChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCustomerRatingChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnMYOBCustomerNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMYOBCustomerNumberChanged()
    End Sub
    Partial Private Sub OnCustomerValueChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCustomerValueChanged()
    End Sub
    Partial Private Sub OnInactiveCustomerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveCustomerChanged()
    End Sub
    Partial Private Sub OnCustomerCommencementDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCustomerCommencementDateChanged()
    End Sub
    Partial Private Sub OnchkCustomerExcludeFuelLevyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnchkCustomerExcludeFuelLevyChanged()
    End Sub
    Partial Private Sub OncmbRateIncreaseChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OncmbRateIncreaseChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CustomerID() As System.Guid
        Get
            Return Me._CustomerID
        End Get
        Set
            If ((Me._CustomerID = Value) _
                        = False) Then
                Me.OnCustomerIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerID = Value
                Me.SendPropertyChanged("CustomerID")
                Me.OnCustomerIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me.OnCidChanging(Value)
                Me.SendPropertyChanging()
                Me._Cid = Value
                Me.SendPropertyChanged("Cid")
                Me.OnCidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me.OnCustomerNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerName = Value
                Me.SendPropertyChanged("CustomerName")
                Me.OnCustomerNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me.OnAddressLine1Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine1 = Value
                Me.SendPropertyChanged("AddressLine1")
                Me.OnAddressLine1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me.OnAddressLine2Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine2 = Value
                Me.SendPropertyChanged("AddressLine2")
                Me.OnAddressLine2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="Int")>
    Public Property State() As System.Nullable(Of Integer)
        Get
            Return Me._State
        End Get
        Set
            If (Me._State.Equals(Value) = False) Then
                Me.OnStateChanging(Value)
                Me.SendPropertyChanging()
                Me._State = Value
                Me.SendPropertyChanged("State")
                Me.OnStateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me.OnSuburbChanging(Value)
                Me.SendPropertyChanging()
                Me._Suburb = Value
                Me.SendPropertyChanged("Suburb")
                Me.OnSuburbChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>
    Public Property PostCode() As String
        Get
            Return Me._PostCode
        End Get
        Set
            If (String.Equals(Me._PostCode, Value) = False) Then
                Me.OnPostCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._PostCode = Value
                Me.SendPropertyChanged("PostCode")
                Me.OnPostCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>
    Public Property CustomerContactName() As String
        Get
            Return Me._CustomerContactName
        End Get
        Set
            If (String.Equals(Me._CustomerContactName, Value) = False) Then
                Me.OnCustomerContactNameChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerContactName = Value
                Me.SendPropertyChanged("CustomerContactName")
                Me.OnCustomerContactNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me.OnCustomerPhoneChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerPhone = Value
                Me.SendPropertyChanged("CustomerPhone")
                Me.OnCustomerPhoneChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerMobile", DbType:="NVarChar(22)")>
    Public Property CustomerMobile() As String
        Get
            Return Me._CustomerMobile
        End Get
        Set
            If (String.Equals(Me._CustomerMobile, Value) = False) Then
                Me.OnCustomerMobileChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerMobile = Value
                Me.SendPropertyChanged("CustomerMobile")
                Me.OnCustomerMobileChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerFax", DbType:="NVarChar(22)")>
    Public Property CustomerFax() As String
        Get
            Return Me._CustomerFax
        End Get
        Set
            If (String.Equals(Me._CustomerFax, Value) = False) Then
                Me.OnCustomerFaxChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerFax = Value
                Me.SendPropertyChanged("CustomerFax")
                Me.OnCustomerFaxChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerComments", DbType:="NVarChar(MAX)")>
    Public Property CustomerComments() As String
        Get
            Return Me._CustomerComments
        End Get
        Set
            If (String.Equals(Me._CustomerComments, Value) = False) Then
                Me.OnCustomerCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerComments = Value
                Me.SendPropertyChanged("CustomerComments")
                Me.OnCustomerCommentsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgent", DbType:="Int")>
    Public Property CustomerAgent() As System.Nullable(Of Integer)
        Get
            Return Me._CustomerAgent
        End Get
        Set
            If (Me._CustomerAgent.Equals(Value) = False) Then
                Me.OnCustomerAgentChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerAgent = Value
                Me.SendPropertyChanged("CustomerAgent")
                Me.OnCustomerAgentChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>
    Public Property CustomerRating() As System.Nullable(Of Short)
        Get
            Return Me._CustomerRating
        End Get
        Set
            If (Me._CustomerRating.Equals(Value) = False) Then
                Me.OnCustomerRatingChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerRating = Value
                Me.SendPropertyChanged("CustomerRating")
                Me.OnCustomerRatingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>
    Public Property Zone() As System.Nullable(Of Integer)
        Get
            Return Me._Zone
        End Get
        Set
            If (Me._Zone.Equals(Value) = False) Then
                Me.OnZoneChanging(Value)
                Me.SendPropertyChanging()
                Me._Zone = Value
                Me.SendPropertyChanged("Zone")
                Me.OnZoneChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>
    Public Property MYOBCustomerNumber() As String
        Get
            Return Me._MYOBCustomerNumber
        End Get
        Set
            If (String.Equals(Me._MYOBCustomerNumber, Value) = False) Then
                Me.OnMYOBCustomerNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._MYOBCustomerNumber = Value
                Me.SendPropertyChanged("MYOBCustomerNumber")
                Me.OnMYOBCustomerNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerValue", DbType:="Float")>
    Public Property CustomerValue() As System.Nullable(Of Double)
        Get
            Return Me._CustomerValue
        End Get
        Set
            If (Me._CustomerValue.Equals(Value) = False) Then
                Me.OnCustomerValueChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerValue = Value
                Me.SendPropertyChanged("CustomerValue")
                Me.OnCustomerValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveCustomer", DbType:="Bit NOT NULL")>
    Public Property InactiveCustomer() As Boolean
        Get
            Return Me._InactiveCustomer
        End Get
        Set
            If ((Me._InactiveCustomer = Value) _
                        = False) Then
                Me.OnInactiveCustomerChanging(Value)
                Me.SendPropertyChanging()
                Me._InactiveCustomer = Value
                Me.SendPropertyChanged("InactiveCustomer")
                Me.OnInactiveCustomerChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerCommencementDate", DbType:="DateTime")>
    Public Property CustomerCommencementDate() As System.Nullable(Of Date)
        Get
            Return Me._CustomerCommencementDate
        End Get
        Set
            If (Me._CustomerCommencementDate.Equals(Value) = False) Then
                Me.OnCustomerCommencementDateChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerCommencementDate = Value
                Me.SendPropertyChanged("CustomerCommencementDate")
                Me.OnCustomerCommencementDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkCustomerExcludeFuelLevy", DbType:="Bit NOT NULL")>
    Public Property chkCustomerExcludeFuelLevy() As Boolean
        Get
            Return Me._chkCustomerExcludeFuelLevy
        End Get
        Set
            If ((Me._chkCustomerExcludeFuelLevy = Value) _
                        = False) Then
                Me.OnchkCustomerExcludeFuelLevyChanging(Value)
                Me.SendPropertyChanging()
                Me._chkCustomerExcludeFuelLevy = Value
                Me.SendPropertyChanged("chkCustomerExcludeFuelLevy")
                Me.OnchkCustomerExcludeFuelLevyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>
    Public Property cmbRateIncrease() As System.Nullable(Of Short)
        Get
            Return Me._cmbRateIncrease
        End Get
        Set
            If (Me._cmbRateIncrease.Equals(Value) = False) Then
                Me.OncmbRateIncreaseChanging(Value)
                Me.SendPropertyChanging()
                Me._cmbRateIncrease = Value
                Me.SendPropertyChanged("cmbRateIncrease")
                Me.OncmbRateIncreaseChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblFuelLevy")>
Partial Public Class tblFuelLevy
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _FuelLevyID As System.Guid

    Private _Aid As Integer

    Private _Code As String

    Private _Description As String

    Private _Percentage As System.Nullable(Of Single)

    Private _MYOBInvoiceCode As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnFuelLevyIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFuelLevyIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPercentageChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnPercentageChanged()
    End Sub
    Partial Private Sub OnMYOBInvoiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnMYOBInvoiceCodeChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuelLevyID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property FuelLevyID() As System.Guid
        Get
            Return Me._FuelLevyID
        End Get
        Set
            If ((Me._FuelLevyID = Value) _
                        = False) Then
                Me.OnFuelLevyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FuelLevyID = Value
                Me.SendPropertyChanged("FuelLevyID")
                Me.OnFuelLevyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(8)")>
    Public Property Code() As String
        Get
            Return Me._Code
        End Get
        Set
            If (String.Equals(Me._Code, Value) = False) Then
                Me.OnCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._Code = Value
                Me.SendPropertyChanged("Code")
                Me.OnCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(22)")>
    Public Property Description() As String
        Get
            Return Me._Description
        End Get
        Set
            If (String.Equals(Me._Description, Value) = False) Then
                Me.OnDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._Description = Value
                Me.SendPropertyChanged("Description")
                Me.OnDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Percentage", DbType:="Real")>
    Public Property Percentage() As System.Nullable(Of Single)
        Get
            Return Me._Percentage
        End Get
        Set
            If (Me._Percentage.Equals(Value) = False) Then
                Me.OnPercentageChanging(Value)
                Me.SendPropertyChanging()
                Me._Percentage = Value
                Me.SendPropertyChanged("Percentage")
                Me.OnPercentageChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBInvoiceCode", DbType:="NVarChar(12)")>
    Public Property MYOBInvoiceCode() As String
        Get
            Return Me._MYOBInvoiceCode
        End Get
        Set
            If (String.Equals(Me._MYOBInvoiceCode, Value) = False) Then
                Me.OnMYOBInvoiceCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._MYOBInvoiceCode = Value
                Me.SendPropertyChanged("MYOBInvoiceCode")
                Me.OnMYOBInvoiceCodeChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvoicingFrequency")>
Partial Public Class tblInvoicingFrequency
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _InvoiceFrequencyID As System.Guid

    Private _IId As Integer

    Private _InvoiceId As String

    Private _Frequency As String

    Private _NoOfWeeks As System.Nullable(Of Single)

    Private _ApplicationId As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanged()
    End Sub
    Partial Private Sub OnIIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIdChanged()
    End Sub
    Partial Private Sub OnInvoiceIdChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceIdChanged()
    End Sub
    Partial Private Sub OnFrequencyChanging(value As String)
    End Sub
    Partial Private Sub OnFrequencyChanged()
    End Sub
    Partial Private Sub OnNoOfWeeksChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnNoOfWeeksChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequencyID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property InvoiceFrequencyID() As System.Guid
        Get
            Return Me._InvoiceFrequencyID
        End Get
        Set
            If ((Me._InvoiceFrequencyID = Value) _
                        = False) Then
                Me.OnInvoiceFrequencyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceFrequencyID = Value
                Me.SendPropertyChanged("InvoiceFrequencyID")
                Me.OnInvoiceFrequencyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IId", DbType:="Int NOT NULL")>
    Public Property IId() As Integer
        Get
            Return Me._IId
        End Get
        Set
            If ((Me._IId = Value) _
                        = False) Then
                Me.OnIIdChanging(Value)
                Me.SendPropertyChanging()
                Me._IId = Value
                Me.SendPropertyChanged("IId")
                Me.OnIIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceId", DbType:="NVarChar(1)")>
    Public Property InvoiceId() As String
        Get
            Return Me._InvoiceId
        End Get
        Set
            If (String.Equals(Me._InvoiceId, Value) = False) Then
                Me.OnInvoiceIdChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceId = Value
                Me.SendPropertyChanged("InvoiceId")
                Me.OnInvoiceIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>
    Public Property Frequency() As String
        Get
            Return Me._Frequency
        End Get
        Set
            If (String.Equals(Me._Frequency, Value) = False) Then
                Me.OnFrequencyChanging(Value)
                Me.SendPropertyChanging()
                Me._Frequency = Value
                Me.SendPropertyChanged("Frequency")
                Me.OnFrequencyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOfWeeks", DbType:="Real")>
    Public Property NoOfWeeks() As System.Nullable(Of Single)
        Get
            Return Me._NoOfWeeks
        End Get
        Set
            If (Me._NoOfWeeks.Equals(Value) = False) Then
                Me.OnNoOfWeeksChanging(Value)
                Me.SendPropertyChanging()
                Me._NoOfWeeks = Value
                Me.SendPropertyChanged("NoOfWeeks")
                Me.OnNoOfWeeksChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSites")>
Partial Public Class tblSite
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _SiteID As System.Guid

    Private _Cid As Integer

    Private _SiteName As String

    Private _Customer As System.Nullable(Of Short)

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddressLine3 As String

    Private _AddressLine4 As String

    Private _Suburb As String

    Private _State As String

    Private _PostCode As System.Nullable(Of Short)

    Private _PhoneNo As String

    Private _FaxNo As String

    Private _SiteContactName As String

    Private _SiteContactPhone As String

    Private _SiteContactFax As String

    Private _SiteContactMobile As String

    Private _SiteContactEmail As String

    Private _PostalAddressLine1 As String

    Private _PostalAddressLine2 As String

    Private _PostalSuburb As String

    Private _PostalState As String

    Private _PostalPostCode As System.Nullable(Of Short)

    Private _SiteStartDate As System.Nullable(Of Date)

    Private _SitePeriod As System.Nullable(Of Integer)

    Private _SiteContractExpiry As System.Nullable(Of Date)

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _SiteCeaseReason As System.Nullable(Of Integer)

    Private _InvoiceFrequency As System.Nullable(Of Integer)

    Private _InvoiceCommencing As System.Nullable(Of Date)

    Private _IndustryGroup As System.Nullable(Of Short)

    Private _PreviousSupplier As System.Nullable(Of Short)

    Private _LostBusinessTo As System.Nullable(Of Short)

    Private _SalesPerson As System.Nullable(Of Short)

    Private _InitialServiceAgreementNo As String

    Private _InvoiceMonth1 As System.Nullable(Of Integer)

    Private _InvoiceMonth2 As System.Nullable(Of Integer)

    Private _InvoiceMonth3 As System.Nullable(Of Integer)

    Private _InvoiceMonth4 As System.Nullable(Of Integer)

    Private _GeneralSiteServiceComments As String

    Private _TotalUnits As System.Nullable(Of Double)

    Private _TotalAmount As System.Nullable(Of Double)

    Private _Zone As System.Nullable(Of Integer)

    Private _SeparateInvoice As Boolean

    Private _PurchaseOrderNumber As String

    Private _chkSitesExcludeFuelLevy As Boolean

    Private _cmbRateIncrease As System.Nullable(Of Short)

    Private _ApplicationId As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As Integer)
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnCustomerChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCustomerChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnAddressLine3Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine3Changed()
    End Sub
    Partial Private Sub OnAddressLine4Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine4Changed()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFaxNoChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNoChanged()
    End Sub
    Partial Private Sub OnSiteContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactNameChanged()
    End Sub
    Partial Private Sub OnSiteContactPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactPhoneChanged()
    End Sub
    Partial Private Sub OnSiteContactFaxChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactFaxChanged()
    End Sub
    Partial Private Sub OnSiteContactMobileChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactMobileChanged()
    End Sub
    Partial Private Sub OnSiteContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactEmailChanged()
    End Sub
    Partial Private Sub OnPostalAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddressLine1Changed()
    End Sub
    Partial Private Sub OnPostalAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddressLine2Changed()
    End Sub
    Partial Private Sub OnPostalSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnPostalSuburbChanged()
    End Sub
    Partial Private Sub OnPostalStateChanging(value As String)
    End Sub
    Partial Private Sub OnPostalStateChanged()
    End Sub
    Partial Private Sub OnPostalPostCodeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPostalPostCodeChanged()
    End Sub
    Partial Private Sub OnSiteStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSiteStartDateChanged()
    End Sub
    Partial Private Sub OnSitePeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSitePeriodChanged()
    End Sub
    Partial Private Sub OnSiteContractExpiryChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSiteContractExpiryChanged()
    End Sub
    Partial Private Sub OnSiteCeaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSiteCeaseDateChanged()
    End Sub
    Partial Private Sub OnSiteCeaseReasonChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteCeaseReasonChanged()
    End Sub
    Partial Private Sub OnInvoiceFrequencyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceFrequencyChanged()
    End Sub
    Partial Private Sub OnInvoiceCommencingChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvoiceCommencingChanged()
    End Sub
    Partial Private Sub OnIndustryGroupChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnIndustryGroupChanged()
    End Sub
    Partial Private Sub OnPreviousSupplierChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPreviousSupplierChanged()
    End Sub
    Partial Private Sub OnLostBusinessToChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnLostBusinessToChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnInitialServiceAgreementNoChanging(value As String)
    End Sub
    Partial Private Sub OnInitialServiceAgreementNoChanged()
    End Sub
    Partial Private Sub OnInvoiceMonth1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth1Changed()
    End Sub
    Partial Private Sub OnInvoiceMonth2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth2Changed()
    End Sub
    Partial Private Sub OnInvoiceMonth3Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth3Changed()
    End Sub
    Partial Private Sub OnInvoiceMonth4Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth4Changed()
    End Sub
    Partial Private Sub OnGeneralSiteServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnGeneralSiteServiceCommentsChanged()
    End Sub
    Partial Private Sub OnTotalUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalUnitsChanged()
    End Sub
    Partial Private Sub OnTotalAmountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalAmountChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnSeparateInvoiceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSeparateInvoiceChanged()
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnchkSitesExcludeFuelLevyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnchkSitesExcludeFuelLevyChanged()
    End Sub
    Partial Private Sub OncmbRateIncreaseChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OncmbRateIncreaseChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property SiteID() As System.Guid
        Get
            Return Me._SiteID
        End Get
        Set
            If ((Me._SiteID = Value) _
                        = False) Then
                Me.OnSiteIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteID = Value
                Me.SendPropertyChanged("SiteID")
                Me.OnSiteIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me.OnCidChanging(Value)
                Me.SendPropertyChanging()
                Me._Cid = Value
                Me.SendPropertyChanged("Cid")
                Me.OnCidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me.OnSiteNameChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteName = Value
                Me.SendPropertyChanged("SiteName")
                Me.OnSiteNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me.OnCustomerChanging(Value)
                Me.SendPropertyChanging()
                Me._Customer = Value
                Me.SendPropertyChanged("Customer")
                Me.OnCustomerChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me.OnAddressLine1Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine1 = Value
                Me.SendPropertyChanged("AddressLine1")
                Me.OnAddressLine1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me.OnAddressLine2Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine2 = Value
                Me.SendPropertyChanged("AddressLine2")
                Me.OnAddressLine2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>
    Public Property AddressLine3() As String
        Get
            Return Me._AddressLine3
        End Get
        Set
            If (String.Equals(Me._AddressLine3, Value) = False) Then
                Me.OnAddressLine3Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine3 = Value
                Me.SendPropertyChanged("AddressLine3")
                Me.OnAddressLine3Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(50)")>
    Public Property AddressLine4() As String
        Get
            Return Me._AddressLine4
        End Get
        Set
            If (String.Equals(Me._AddressLine4, Value) = False) Then
                Me.OnAddressLine4Changing(Value)
                Me.SendPropertyChanging()
                Me._AddressLine4 = Value
                Me.SendPropertyChanged("AddressLine4")
                Me.OnAddressLine4Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me.OnSuburbChanging(Value)
                Me.SendPropertyChanging()
                Me._Suburb = Value
                Me.SendPropertyChanged("Suburb")
                Me.OnSuburbChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(5)")>
    Public Property State() As String
        Get
            Return Me._State
        End Get
        Set
            If (String.Equals(Me._State, Value) = False) Then
                Me.OnStateChanging(Value)
                Me.SendPropertyChanging()
                Me._State = Value
                Me.SendPropertyChanged("State")
                Me.OnStateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>
    Public Property PostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostCode
        End Get
        Set
            If (Me._PostCode.Equals(Value) = False) Then
                Me.OnPostCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._PostCode = Value
                Me.SendPropertyChanged("PostCode")
                Me.OnPostCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(50)")>
    Public Property PhoneNo() As String
        Get
            Return Me._PhoneNo
        End Get
        Set
            If (String.Equals(Me._PhoneNo, Value) = False) Then
                Me.OnPhoneNoChanging(Value)
                Me.SendPropertyChanging()
                Me._PhoneNo = Value
                Me.SendPropertyChanged("PhoneNo")
                Me.OnPhoneNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(50)")>
    Public Property FaxNo() As String
        Get
            Return Me._FaxNo
        End Get
        Set
            If (String.Equals(Me._FaxNo, Value) = False) Then
                Me.OnFaxNoChanging(Value)
                Me.SendPropertyChanging()
                Me._FaxNo = Value
                Me.SendPropertyChanged("FaxNo")
                Me.OnFaxNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>
    Public Property SiteContactName() As String
        Get
            Return Me._SiteContactName
        End Get
        Set
            If (String.Equals(Me._SiteContactName, Value) = False) Then
                Me.OnSiteContactNameChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteContactName = Value
                Me.SendPropertyChanged("SiteContactName")
                Me.OnSiteContactNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>
    Public Property SiteContactPhone() As String
        Get
            Return Me._SiteContactPhone
        End Get
        Set
            If (String.Equals(Me._SiteContactPhone, Value) = False) Then
                Me.OnSiteContactPhoneChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteContactPhone = Value
                Me.SendPropertyChanged("SiteContactPhone")
                Me.OnSiteContactPhoneChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactFax", DbType:="NVarChar(50)")>
    Public Property SiteContactFax() As String
        Get
            Return Me._SiteContactFax
        End Get
        Set
            If (String.Equals(Me._SiteContactFax, Value) = False) Then
                Me.OnSiteContactFaxChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteContactFax = Value
                Me.SendPropertyChanged("SiteContactFax")
                Me.OnSiteContactFaxChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>
    Public Property SiteContactMobile() As String
        Get
            Return Me._SiteContactMobile
        End Get
        Set
            If (String.Equals(Me._SiteContactMobile, Value) = False) Then
                Me.OnSiteContactMobileChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteContactMobile = Value
                Me.SendPropertyChanged("SiteContactMobile")
                Me.OnSiteContactMobileChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactEmail", DbType:="NVarChar(50)")>
    Public Property SiteContactEmail() As String
        Get
            Return Me._SiteContactEmail
        End Get
        Set
            If (String.Equals(Me._SiteContactEmail, Value) = False) Then
                Me.OnSiteContactEmailChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteContactEmail = Value
                Me.SendPropertyChanged("SiteContactEmail")
                Me.OnSiteContactEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine1() As String
        Get
            Return Me._PostalAddressLine1
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine1, Value) = False) Then
                Me.OnPostalAddressLine1Changing(Value)
                Me.SendPropertyChanging()
                Me._PostalAddressLine1 = Value
                Me.SendPropertyChanged("PostalAddressLine1")
                Me.OnPostalAddressLine1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine2() As String
        Get
            Return Me._PostalAddressLine2
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine2, Value) = False) Then
                Me.OnPostalAddressLine2Changing(Value)
                Me.SendPropertyChanging()
                Me._PostalAddressLine2 = Value
                Me.SendPropertyChanged("PostalAddressLine2")
                Me.OnPostalAddressLine2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(50)")>
    Public Property PostalSuburb() As String
        Get
            Return Me._PostalSuburb
        End Get
        Set
            If (String.Equals(Me._PostalSuburb, Value) = False) Then
                Me.OnPostalSuburbChanging(Value)
                Me.SendPropertyChanging()
                Me._PostalSuburb = Value
                Me.SendPropertyChanged("PostalSuburb")
                Me.OnPostalSuburbChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalState", DbType:="NVarChar(6)")>
    Public Property PostalState() As String
        Get
            Return Me._PostalState
        End Get
        Set
            If (String.Equals(Me._PostalState, Value) = False) Then
                Me.OnPostalStateChanging(Value)
                Me.SendPropertyChanging()
                Me._PostalState = Value
                Me.SendPropertyChanged("PostalState")
                Me.OnPostalStateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalPostCode", DbType:="SmallInt")>
    Public Property PostalPostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostalPostCode
        End Get
        Set
            If (Me._PostalPostCode.Equals(Value) = False) Then
                Me.OnPostalPostCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._PostalPostCode = Value
                Me.SendPropertyChanged("PostalPostCode")
                Me.OnPostalPostCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>
    Public Property SiteStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteStartDate
        End Get
        Set
            If (Me._SiteStartDate.Equals(Value) = False) Then
                Me.OnSiteStartDateChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteStartDate = Value
                Me.SendPropertyChanged("SiteStartDate")
                Me.OnSiteStartDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitePeriod", DbType:="Int")>
    Public Property SitePeriod() As System.Nullable(Of Integer)
        Get
            Return Me._SitePeriod
        End Get
        Set
            If (Me._SitePeriod.Equals(Value) = False) Then
                Me.OnSitePeriodChanging(Value)
                Me.SendPropertyChanging()
                Me._SitePeriod = Value
                Me.SendPropertyChanged("SitePeriod")
                Me.OnSitePeriodChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>
    Public Property SiteContractExpiry() As System.Nullable(Of Date)
        Get
            Return Me._SiteContractExpiry
        End Get
        Set
            If (Me._SiteContractExpiry.Equals(Value) = False) Then
                Me.OnSiteContractExpiryChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteContractExpiry = Value
                Me.SendPropertyChanged("SiteContractExpiry")
                Me.OnSiteContractExpiryChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me.OnSiteCeaseDateChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteCeaseDate = Value
                Me.SendPropertyChanged("SiteCeaseDate")
                Me.OnSiteCeaseDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseReason", DbType:="Int")>
    Public Property SiteCeaseReason() As System.Nullable(Of Integer)
        Get
            Return Me._SiteCeaseReason
        End Get
        Set
            If (Me._SiteCeaseReason.Equals(Value) = False) Then
                Me.OnSiteCeaseReasonChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteCeaseReason = Value
                Me.SendPropertyChanged("SiteCeaseReason")
                Me.OnSiteCeaseReasonChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequency", DbType:="Int")>
    Public Property InvoiceFrequency() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceFrequency
        End Get
        Set
            If (Me._InvoiceFrequency.Equals(Value) = False) Then
                Me.OnInvoiceFrequencyChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceFrequency = Value
                Me.SendPropertyChanged("InvoiceFrequency")
                Me.OnInvoiceFrequencyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>
    Public Property InvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceCommencing
        End Get
        Set
            If (Me._InvoiceCommencing.Equals(Value) = False) Then
                Me.OnInvoiceCommencingChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceCommencing = Value
                Me.SendPropertyChanged("InvoiceCommencing")
                Me.OnInvoiceCommencingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroup", DbType:="SmallInt")>
    Public Property IndustryGroup() As System.Nullable(Of Short)
        Get
            Return Me._IndustryGroup
        End Get
        Set
            If (Me._IndustryGroup.Equals(Value) = False) Then
                Me.OnIndustryGroupChanging(Value)
                Me.SendPropertyChanging()
                Me._IndustryGroup = Value
                Me.SendPropertyChanged("IndustryGroup")
                Me.OnIndustryGroupChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="SmallInt")>
    Public Property PreviousSupplier() As System.Nullable(Of Short)
        Get
            Return Me._PreviousSupplier
        End Get
        Set
            If (Me._PreviousSupplier.Equals(Value) = False) Then
                Me.OnPreviousSupplierChanging(Value)
                Me.SendPropertyChanging()
                Me._PreviousSupplier = Value
                Me.SendPropertyChanged("PreviousSupplier")
                Me.OnPreviousSupplierChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LostBusinessTo", DbType:="SmallInt")>
    Public Property LostBusinessTo() As System.Nullable(Of Short)
        Get
            Return Me._LostBusinessTo
        End Get
        Set
            If (Me._LostBusinessTo.Equals(Value) = False) Then
                Me.OnLostBusinessToChanging(Value)
                Me.SendPropertyChanging()
                Me._LostBusinessTo = Value
                Me.SendPropertyChanged("LostBusinessTo")
                Me.OnLostBusinessToChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="SmallInt")>
    Public Property SalesPerson() As System.Nullable(Of Short)
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (Me._SalesPerson.Equals(Value) = False) Then
                Me.OnSalesPersonChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPerson = Value
                Me.SendPropertyChanged("SalesPerson")
                Me.OnSalesPersonChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InitialServiceAgreementNo", DbType:="NVarChar(22)")>
    Public Property InitialServiceAgreementNo() As String
        Get
            Return Me._InitialServiceAgreementNo
        End Get
        Set
            If (String.Equals(Me._InitialServiceAgreementNo, Value) = False) Then
                Me.OnInitialServiceAgreementNoChanging(Value)
                Me.SendPropertyChanging()
                Me._InitialServiceAgreementNo = Value
                Me.SendPropertyChanged("InitialServiceAgreementNo")
                Me.OnInitialServiceAgreementNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>
    Public Property InvoiceMonth1() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth1
        End Get
        Set
            If (Me._InvoiceMonth1.Equals(Value) = False) Then
                Me.OnInvoiceMonth1Changing(Value)
                Me.SendPropertyChanging()
                Me._InvoiceMonth1 = Value
                Me.SendPropertyChanged("InvoiceMonth1")
                Me.OnInvoiceMonth1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>
    Public Property InvoiceMonth2() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth2
        End Get
        Set
            If (Me._InvoiceMonth2.Equals(Value) = False) Then
                Me.OnInvoiceMonth2Changing(Value)
                Me.SendPropertyChanging()
                Me._InvoiceMonth2 = Value
                Me.SendPropertyChanged("InvoiceMonth2")
                Me.OnInvoiceMonth2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>
    Public Property InvoiceMonth3() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth3
        End Get
        Set
            If (Me._InvoiceMonth3.Equals(Value) = False) Then
                Me.OnInvoiceMonth3Changing(Value)
                Me.SendPropertyChanging()
                Me._InvoiceMonth3 = Value
                Me.SendPropertyChanged("InvoiceMonth3")
                Me.OnInvoiceMonth3Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>
    Public Property InvoiceMonth4() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth4
        End Get
        Set
            If (Me._InvoiceMonth4.Equals(Value) = False) Then
                Me.OnInvoiceMonth4Changing(Value)
                Me.SendPropertyChanging()
                Me._InvoiceMonth4 = Value
                Me.SendPropertyChanged("InvoiceMonth4")
                Me.OnInvoiceMonth4Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>
    Public Property GeneralSiteServiceComments() As String
        Get
            Return Me._GeneralSiteServiceComments
        End Get
        Set
            If (String.Equals(Me._GeneralSiteServiceComments, Value) = False) Then
                Me.OnGeneralSiteServiceCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._GeneralSiteServiceComments = Value
                Me.SendPropertyChanged("GeneralSiteServiceComments")
                Me.OnGeneralSiteServiceCommentsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalUnits", DbType:="Float")>
    Public Property TotalUnits() As System.Nullable(Of Double)
        Get
            Return Me._TotalUnits
        End Get
        Set
            If (Me._TotalUnits.Equals(Value) = False) Then
                Me.OnTotalUnitsChanging(Value)
                Me.SendPropertyChanging()
                Me._TotalUnits = Value
                Me.SendPropertyChanged("TotalUnits")
                Me.OnTotalUnitsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>
    Public Property TotalAmount() As System.Nullable(Of Double)
        Get
            Return Me._TotalAmount
        End Get
        Set
            If (Me._TotalAmount.Equals(Value) = False) Then
                Me.OnTotalAmountChanging(Value)
                Me.SendPropertyChanging()
                Me._TotalAmount = Value
                Me.SendPropertyChanged("TotalAmount")
                Me.OnTotalAmountChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>
    Public Property Zone() As System.Nullable(Of Integer)
        Get
            Return Me._Zone
        End Get
        Set
            If (Me._Zone.Equals(Value) = False) Then
                Me.OnZoneChanging(Value)
                Me.SendPropertyChanging()
                Me._Zone = Value
                Me.SendPropertyChanged("Zone")
                Me.OnZoneChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeparateInvoice", DbType:="Bit NOT NULL")>
    Public Property SeparateInvoice() As Boolean
        Get
            Return Me._SeparateInvoice
        End Get
        Set
            If ((Me._SeparateInvoice = Value) _
                        = False) Then
                Me.OnSeparateInvoiceChanging(Value)
                Me.SendPropertyChanging()
                Me._SeparateInvoice = Value
                Me.SendPropertyChanged("SeparateInvoice")
                Me.OnSeparateInvoiceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>
    Public Property PurchaseOrderNumber() As String
        Get
            Return Me._PurchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._PurchaseOrderNumber, Value) = False) Then
                Me.OnPurchaseOrderNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._PurchaseOrderNumber = Value
                Me.SendPropertyChanged("PurchaseOrderNumber")
                Me.OnPurchaseOrderNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkSitesExcludeFuelLevy", DbType:="Bit NOT NULL")>
    Public Property chkSitesExcludeFuelLevy() As Boolean
        Get
            Return Me._chkSitesExcludeFuelLevy
        End Get
        Set
            If ((Me._chkSitesExcludeFuelLevy = Value) _
                        = False) Then
                Me.OnchkSitesExcludeFuelLevyChanging(Value)
                Me.SendPropertyChanging()
                Me._chkSitesExcludeFuelLevy = Value
                Me.SendPropertyChanged("chkSitesExcludeFuelLevy")
                Me.OnchkSitesExcludeFuelLevyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>
    Public Property cmbRateIncrease() As System.Nullable(Of Short)
        Get
            Return Me._cmbRateIncrease
        End Get
        Set
            If (Me._cmbRateIncrease.Equals(Value) = False) Then
                Me.OncmbRateIncreaseChanging(Value)
                Me.SendPropertyChanging()
                Me._cmbRateIncrease = Value
                Me.SendPropertyChanged("cmbRateIncrease")
                Me.OncmbRateIncreaseChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerRating")>
Partial Public Class tblCustomerRating
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CustomerRatingID As System.Guid

    Private _Rid As Integer

    Private _CustomerRating As String

    Private _CustomerRatingDesc As String

    Private _FromValue As System.Nullable(Of Integer)

    Private _ToValue As System.Nullable(Of Integer)

    Private _ApplicationId As System.Nullable(Of System.Guid)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerRatingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerRatingIDChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As Integer)
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnCustomerRatingChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerRatingChanged()
    End Sub
    Partial Private Sub OnCustomerRatingDescChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerRatingDescChanged()
    End Sub
    Partial Private Sub OnFromValueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFromValueChanged()
    End Sub
    Partial Private Sub OnToValueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnToValueChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CustomerRatingID() As System.Guid
        Get
            Return Me._CustomerRatingID
        End Get
        Set
            If ((Me._CustomerRatingID = Value) _
                        = False) Then
                Me.OnCustomerRatingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerRatingID = Value
                Me.SendPropertyChanged("CustomerRatingID")
                Me.OnCustomerRatingIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>
    Public Property Rid() As Integer
        Get
            Return Me._Rid
        End Get
        Set
            If ((Me._Rid = Value) _
                        = False) Then
                Me.OnRidChanging(Value)
                Me.SendPropertyChanging()
                Me._Rid = Value
                Me.SendPropertyChanged("Rid")
                Me.OnRidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="NVarChar(22)")>
    Public Property CustomerRating() As String
        Get
            Return Me._CustomerRating
        End Get
        Set
            If (String.Equals(Me._CustomerRating, Value) = False) Then
                Me.OnCustomerRatingChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerRating = Value
                Me.SendPropertyChanged("CustomerRating")
                Me.OnCustomerRatingChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingDesc", DbType:="NVarChar(50)")>
    Public Property CustomerRatingDesc() As String
        Get
            Return Me._CustomerRatingDesc
        End Get
        Set
            If (String.Equals(Me._CustomerRatingDesc, Value) = False) Then
                Me.OnCustomerRatingDescChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerRatingDesc = Value
                Me.SendPropertyChanged("CustomerRatingDesc")
                Me.OnCustomerRatingDescChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromValue", DbType:="Int")>
    Public Property FromValue() As System.Nullable(Of Integer)
        Get
            Return Me._FromValue
        End Get
        Set
            If (Me._FromValue.Equals(Value) = False) Then
                Me.OnFromValueChanging(Value)
                Me.SendPropertyChanging()
                Me._FromValue = Value
                Me.SendPropertyChanged("FromValue")
                Me.OnFromValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToValue", DbType:="Int")>
    Public Property ToValue() As System.Nullable(Of Integer)
        Get
            Return Me._ToValue
        End Get
        Set
            If (Me._ToValue.Equals(Value) = False) Then
                Me.OnToValueChanging(Value)
                Me.SendPropertyChanging()
                Me._ToValue = Value
                Me.SendPropertyChanged("ToValue")
                Me.OnToValueChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me.OnApplicationIdChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationId = Value
                Me.SendPropertyChanged("ApplicationId")
                Me.OnApplicationIdChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesPersons")>
Partial Public Class tblSalesPerson
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _SalesPersonID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _SalesPerson As String

    Private _SalesPersonStartDate As System.Nullable(Of Date)

    Private _SalesPersonComments As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesPersonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSalesPersonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As String)
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnSalesPersonStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSalesPersonStartDateChanged()
    End Sub
    Partial Private Sub OnSalesPersonCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnSalesPersonCommentsChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property SalesPersonID() As System.Guid
        Get
            Return Me._SalesPersonID
        End Get
        Set
            If ((Me._SalesPersonID = Value) _
                        = False) Then
                Me.OnSalesPersonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPersonID = Value
                Me.SendPropertyChanged("SalesPersonID")
                Me.OnSalesPersonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>
    Public Property SalesPerson() As String
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (String.Equals(Me._SalesPerson, Value) = False) Then
                Me.OnSalesPersonChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPerson = Value
                Me.SendPropertyChanged("SalesPerson")
                Me.OnSalesPersonChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonStartDate", DbType:="DateTime")>
    Public Property SalesPersonStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SalesPersonStartDate
        End Get
        Set
            If (Me._SalesPersonStartDate.Equals(Value) = False) Then
                Me.OnSalesPersonStartDateChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPersonStartDate = Value
                Me.SendPropertyChanged("SalesPersonStartDate")
                Me.OnSalesPersonStartDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonComments", DbType:="NVarChar(MAX)")>
    Public Property SalesPersonComments() As String
        Get
            Return Me._SalesPersonComments
        End Get
        Set
            If (String.Equals(Me._SalesPersonComments, Value) = False) Then
                Me.OnSalesPersonCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPersonComments = Value
                Me.SendPropertyChanged("SalesPersonComments")
                Me.OnSalesPersonCommentsChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblContractCeaseReasons")>
Partial Public Class tblContractCeaseReason
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CeaseReasonID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _CeaseReasonDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCeaseReasonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCeaseReasonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCeaseReasonDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCeaseReasonDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CeaseReasonID() As System.Guid
        Get
            Return Me._CeaseReasonID
        End Get
        Set
            If ((Me._CeaseReasonID = Value) _
                        = False) Then
                Me.OnCeaseReasonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CeaseReasonID = Value
                Me.SendPropertyChanged("CeaseReasonID")
                Me.OnCeaseReasonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonDescription", DbType:="NVarChar(50)")>
    Public Property CeaseReasonDescription() As String
        Get
            Return Me._CeaseReasonDescription
        End Get
        Set
            If (String.Equals(Me._CeaseReasonDescription, Value) = False) Then
                Me.OnCeaseReasonDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._CeaseReasonDescription = Value
                Me.SendPropertyChanged("CeaseReasonDescription")
                Me.OnCeaseReasonDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRuns")>
Partial Public Class tblRun
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RunID As System.Guid

    Private _Rid As System.Nullable(Of Integer)

    Private _RunNUmber As System.Nullable(Of Integer)

    Private _RunDescription As String

    Private _RunDriver As System.Nullable(Of Short)

    Private _MondayRun As Boolean

    Private _TuesdayRun As Boolean

    Private _WednesdayRun As Boolean

    Private _ThursdayRun As Boolean

    Private _FridayRun As Boolean

    Private _SaturdayRun As Boolean

    Private _SundayRun As Boolean

    Private _InactiveRun As Boolean

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnRunNUmberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunNUmberChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnMondayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMondayRunChanged()
    End Sub
    Partial Private Sub OnTuesdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTuesdayRunChanged()
    End Sub
    Partial Private Sub OnWednesdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnWednesdayRunChanged()
    End Sub
    Partial Private Sub OnThursdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnThursdayRunChanged()
    End Sub
    Partial Private Sub OnFridayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFridayRunChanged()
    End Sub
    Partial Private Sub OnSaturdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSaturdayRunChanged()
    End Sub
    Partial Private Sub OnSundayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSundayRunChanged()
    End Sub
    Partial Private Sub OnInactiveRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveRunChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RunID() As System.Guid
        Get
            Return Me._RunID
        End Get
        Set
            If ((Me._RunID = Value) _
                        = False) Then
                Me.OnRunIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunID = Value
                Me.SendPropertyChanged("RunID")
                Me.OnRunIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>
    Public Property Rid() As System.Nullable(Of Integer)
        Get
            Return Me._Rid
        End Get
        Set
            If (Me._Rid.Equals(Value) = False) Then
                Me.OnRidChanging(Value)
                Me.SendPropertyChanging()
                Me._Rid = Value
                Me.SendPropertyChanged("Rid")
                Me.OnRidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>
    Public Property RunNUmber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNUmber
        End Get
        Set
            If (Me._RunNUmber.Equals(Value) = False) Then
                Me.OnRunNUmberChanging(Value)
                Me.SendPropertyChanging()
                Me._RunNUmber = Value
                Me.SendPropertyChanged("RunNUmber")
                Me.OnRunNUmberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me.OnRunDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDescription = Value
                Me.SendPropertyChanged("RunDescription")
                Me.OnRunDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>
    Public Property RunDriver() As System.Nullable(Of Short)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me.OnRunDriverChanging(Value)
                Me.SendPropertyChanging()
                Me._RunDriver = Value
                Me.SendPropertyChanged("RunDriver")
                Me.OnRunDriverChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>
    Public Property MondayRun() As Boolean
        Get
            Return Me._MondayRun
        End Get
        Set
            If ((Me._MondayRun = Value) _
                        = False) Then
                Me.OnMondayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._MondayRun = Value
                Me.SendPropertyChanged("MondayRun")
                Me.OnMondayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>
    Public Property TuesdayRun() As Boolean
        Get
            Return Me._TuesdayRun
        End Get
        Set
            If ((Me._TuesdayRun = Value) _
                        = False) Then
                Me.OnTuesdayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._TuesdayRun = Value
                Me.SendPropertyChanged("TuesdayRun")
                Me.OnTuesdayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>
    Public Property WednesdayRun() As Boolean
        Get
            Return Me._WednesdayRun
        End Get
        Set
            If ((Me._WednesdayRun = Value) _
                        = False) Then
                Me.OnWednesdayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._WednesdayRun = Value
                Me.SendPropertyChanged("WednesdayRun")
                Me.OnWednesdayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>
    Public Property ThursdayRun() As Boolean
        Get
            Return Me._ThursdayRun
        End Get
        Set
            If ((Me._ThursdayRun = Value) _
                        = False) Then
                Me.OnThursdayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._ThursdayRun = Value
                Me.SendPropertyChanged("ThursdayRun")
                Me.OnThursdayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>
    Public Property FridayRun() As Boolean
        Get
            Return Me._FridayRun
        End Get
        Set
            If ((Me._FridayRun = Value) _
                        = False) Then
                Me.OnFridayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._FridayRun = Value
                Me.SendPropertyChanged("FridayRun")
                Me.OnFridayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>
    Public Property SaturdayRun() As Boolean
        Get
            Return Me._SaturdayRun
        End Get
        Set
            If ((Me._SaturdayRun = Value) _
                        = False) Then
                Me.OnSaturdayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._SaturdayRun = Value
                Me.SendPropertyChanged("SaturdayRun")
                Me.OnSaturdayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>
    Public Property SundayRun() As Boolean
        Get
            Return Me._SundayRun
        End Get
        Set
            If ((Me._SundayRun = Value) _
                        = False) Then
                Me.OnSundayRunChanging(Value)
                Me.SendPropertyChanging()
                Me._SundayRun = Value
                Me.SendPropertyChanged("SundayRun")
                Me.OnSundayRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>
    Public Property InactiveRun() As Boolean
        Get
            Return Me._InactiveRun
        End Get
        Set
            If ((Me._InactiveRun = Value) _
                        = False) Then
                Me.OnInactiveRunChanging(Value)
                Me.SendPropertyChanging()
                Me._InactiveRun = Value
                Me.SendPropertyChanged("InactiveRun")
                Me.OnInactiveRunChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPreviousSuppliers")>
Partial Public Class tblPreviousSupplier
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _PreviousSupplierID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _PreviousSupplier As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnPreviousSupplierChanging(value As String)
    End Sub
    Partial Private Sub OnPreviousSupplierChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property PreviousSupplierID() As System.Guid
        Get
            Return Me._PreviousSupplierID
        End Get
        Set
            If ((Me._PreviousSupplierID = Value) _
                        = False) Then
                Me.OnPreviousSupplierIDChanging(Value)
                Me.SendPropertyChanging()
                Me._PreviousSupplierID = Value
                Me.SendPropertyChanged("PreviousSupplierID")
                Me.OnPreviousSupplierIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="NVarChar(50)")>
    Public Property PreviousSupplier() As String
        Get
            Return Me._PreviousSupplier
        End Get
        Set
            If (String.Equals(Me._PreviousSupplier, Value) = False) Then
                Me.OnPreviousSupplierChanging(Value)
                Me.SendPropertyChanging()
                Me._PreviousSupplier = Value
                Me.SendPropertyChanged("PreviousSupplier")
                Me.OnPreviousSupplierChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCIRReason")>
Partial Public Class tblCIRReason
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ReasonID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _CId As Integer

    Private _CIRReason As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReasonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnReasonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCIdChanged()
    End Sub
    Partial Private Sub OnCIRReasonChanging(value As String)
    End Sub
    Partial Private Sub OnCIRReasonChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReasonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ReasonID() As System.Guid
        Get
            Return Me._ReasonID
        End Get
        Set
            If ((Me._ReasonID = Value) _
                        = False) Then
                Me.OnReasonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ReasonID = Value
                Me.SendPropertyChanged("ReasonID")
                Me.OnReasonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int NOT NULL")>
    Public Property CId() As Integer
        Get
            Return Me._CId
        End Get
        Set
            If ((Me._CId = Value) _
                        = False) Then
                Me.OnCIdChanging(Value)
                Me.SendPropertyChanging()
                Me._CId = Value
                Me.SendPropertyChanged("CId")
                Me.OnCIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIRReason", DbType:="NVarChar(50)")>
    Public Property CIRReason() As String
        Get
            Return Me._CIRReason
        End Get
        Set
            If (String.Equals(Me._CIRReason, Value) = False) Then
                Me.OnCIRReasonChanging(Value)
                Me.SendPropertyChanging()
                Me._CIRReason = Value
                Me.SendPropertyChanged("CIRReason")
                Me.OnCIRReasonChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRunFortnightlyCycles")>
Partial Public Class tblRunFortnightlyCycle
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _FortnightlyCyclesID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Aid As Integer

    Private _CycleDescription As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCycleDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCycleDescriptionChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FortnightlyCyclesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property FortnightlyCyclesID() As System.Guid
        Get
            Return Me._FortnightlyCyclesID
        End Get
        Set
            If ((Me._FortnightlyCyclesID = Value) _
                        = False) Then
                Me.OnFortnightlyCyclesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FortnightlyCyclesID = Value
                Me.SendPropertyChanged("FortnightlyCyclesID")
                Me.OnFortnightlyCyclesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me.OnAidChanging(Value)
                Me.SendPropertyChanging()
                Me._Aid = Value
                Me.SendPropertyChanged("Aid")
                Me.OnAidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CycleDescription", DbType:="NVarChar(50)")>
    Public Property CycleDescription() As String
        Get
            Return Me._CycleDescription
        End Get
        Set
            If (String.Equals(Me._CycleDescription, Value) = False) Then
                Me.OnCycleDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._CycleDescription = Value
                Me.SendPropertyChanged("CycleDescription")
                Me.OnCycleDescriptionChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRevenueChangeReason")>
Partial Public Class tblRevenueChangeReason
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _RevenueChangeReasonID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Rid As Integer

    Private _RevenueChangeReason As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As Integer)
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnRevenueChangeReasonChanging(value As String)
    End Sub
    Partial Private Sub OnRevenueChangeReasonChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReasonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property RevenueChangeReasonID() As System.Guid
        Get
            Return Me._RevenueChangeReasonID
        End Get
        Set
            If ((Me._RevenueChangeReasonID = Value) _
                        = False) Then
                Me.OnRevenueChangeReasonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RevenueChangeReasonID = Value
                Me.SendPropertyChanged("RevenueChangeReasonID")
                Me.OnRevenueChangeReasonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>
    Public Property Rid() As Integer
        Get
            Return Me._Rid
        End Get
        Set
            If ((Me._Rid = Value) _
                        = False) Then
                Me.OnRidChanging(Value)
                Me.SendPropertyChanging()
                Me._Rid = Value
                Me.SendPropertyChanged("Rid")
                Me.OnRidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReason", DbType:="NVarChar(50)")>
    Public Property RevenueChangeReason() As String
        Get
            Return Me._RevenueChangeReason
        End Get
        Set
            If (String.Equals(Me._RevenueChangeReason, Value) = False) Then
                Me.OnRevenueChangeReasonChanging(Value)
                Me.SendPropertyChanging()
                Me._RevenueChangeReason = Value
                Me.SendPropertyChanged("RevenueChangeReason")
                Me.OnRevenueChangeReasonChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblServiceFrequency")>
Partial Public Class tblServiceFrequency
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _FrequencyID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Fid As Integer

    Private _FrequencyDescription As String

    Private _Factor As System.Nullable(Of Single)

    Private _Periodical As Boolean

    Private _Notes As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFrequencyIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFrequencyIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFidChanging(value As Integer)
    End Sub
    Partial Private Sub OnFidChanged()
    End Sub
    Partial Private Sub OnFrequencyDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFrequencyDescriptionChanged()
    End Sub
    Partial Private Sub OnFactorChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnFactorChanged()
    End Sub
    Partial Private Sub OnPeriodicalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPeriodicalChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property FrequencyID() As System.Guid
        Get
            Return Me._FrequencyID
        End Get
        Set
            If ((Me._FrequencyID = Value) _
                        = False) Then
                Me.OnFrequencyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FrequencyID = Value
                Me.SendPropertyChanged("FrequencyID")
                Me.OnFrequencyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fid", DbType:="Int NOT NULL")>
    Public Property Fid() As Integer
        Get
            Return Me._Fid
        End Get
        Set
            If ((Me._Fid = Value) _
                        = False) Then
                Me.OnFidChanging(Value)
                Me.SendPropertyChanging()
                Me._Fid = Value
                Me.SendPropertyChanged("Fid")
                Me.OnFidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyDescription", DbType:="NVarChar(50)")>
    Public Property FrequencyDescription() As String
        Get
            Return Me._FrequencyDescription
        End Get
        Set
            If (String.Equals(Me._FrequencyDescription, Value) = False) Then
                Me.OnFrequencyDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._FrequencyDescription = Value
                Me.SendPropertyChanged("FrequencyDescription")
                Me.OnFrequencyDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Factor", DbType:="Real")>
    Public Property Factor() As System.Nullable(Of Single)
        Get
            Return Me._Factor
        End Get
        Set
            If (Me._Factor.Equals(Value) = False) Then
                Me.OnFactorChanging(Value)
                Me.SendPropertyChanging()
                Me._Factor = Value
                Me.SendPropertyChanged("Factor")
                Me.OnFactorChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Periodical", DbType:="Bit NOT NULL")>
    Public Property Periodical() As Boolean
        Get
            Return Me._Periodical
        End Get
        Set
            If ((Me._Periodical = Value) _
                        = False) Then
                Me.OnPeriodicalChanging(Value)
                Me.SendPropertyChanging()
                Me._Periodical = Value
                Me.SendPropertyChanged("Periodical")
                Me.OnPeriodicalChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me.OnNotesChanging(Value)
                Me.SendPropertyChanging()
                Me._Notes = Value
                Me.SendPropertyChanged("Notes")
                Me.OnNotesChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSiteReSignDetails")>
Partial Public Class tblSiteReSignDetail
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ResignHistoryID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Cid As Integer

    Private _SiteCId As System.Nullable(Of Integer)

    Private _ReSignDate As System.Nullable(Of Date)

    Private _ReSignPeriod As System.Nullable(Of Short)

    Private _ServiceAgreementNo As String

    Private _SalesPerson As System.Nullable(Of Short)

    Private _ContractExpiryDate As System.Nullable(Of Date)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResignHistoryIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnResignHistoryIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As Integer)
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnSiteCIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteCIdChanged()
    End Sub
    Partial Private Sub OnReSignDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReSignDateChanged()
    End Sub
    Partial Private Sub OnReSignPeriodChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnReSignPeriodChanged()
    End Sub
    Partial Private Sub OnServiceAgreementNoChanging(value As String)
    End Sub
    Partial Private Sub OnServiceAgreementNoChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnContractExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnContractExpiryDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResignHistoryID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ResignHistoryID() As System.Guid
        Get
            Return Me._ResignHistoryID
        End Get
        Set
            If ((Me._ResignHistoryID = Value) _
                        = False) Then
                Me.OnResignHistoryIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ResignHistoryID = Value
                Me.SendPropertyChanged("ResignHistoryID")
                Me.OnResignHistoryIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me.OnCidChanging(Value)
                Me.SendPropertyChanging()
                Me._Cid = Value
                Me.SendPropertyChanged("Cid")
                Me.OnCidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCId", DbType:="Int")>
    Public Property SiteCId() As System.Nullable(Of Integer)
        Get
            Return Me._SiteCId
        End Get
        Set
            If (Me._SiteCId.Equals(Value) = False) Then
                Me.OnSiteCIdChanging(Value)
                Me.SendPropertyChanging()
                Me._SiteCId = Value
                Me.SendPropertyChanged("SiteCId")
                Me.OnSiteCIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSignDate", DbType:="DateTime")>
    Public Property ReSignDate() As System.Nullable(Of Date)
        Get
            Return Me._ReSignDate
        End Get
        Set
            If (Me._ReSignDate.Equals(Value) = False) Then
                Me.OnReSignDateChanging(Value)
                Me.SendPropertyChanging()
                Me._ReSignDate = Value
                Me.SendPropertyChanged("ReSignDate")
                Me.OnReSignDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSignPeriod", DbType:="SmallInt")>
    Public Property ReSignPeriod() As System.Nullable(Of Short)
        Get
            Return Me._ReSignPeriod
        End Get
        Set
            If (Me._ReSignPeriod.Equals(Value) = False) Then
                Me.OnReSignPeriodChanging(Value)
                Me.SendPropertyChanging()
                Me._ReSignPeriod = Value
                Me.SendPropertyChanged("ReSignPeriod")
                Me.OnReSignPeriodChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceAgreementNo", DbType:="NVarChar(50)")>
    Public Property ServiceAgreementNo() As String
        Get
            Return Me._ServiceAgreementNo
        End Get
        Set
            If (String.Equals(Me._ServiceAgreementNo, Value) = False) Then
                Me.OnServiceAgreementNoChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceAgreementNo = Value
                Me.SendPropertyChanged("ServiceAgreementNo")
                Me.OnServiceAgreementNoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="SmallInt")>
    Public Property SalesPerson() As System.Nullable(Of Short)
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (Me._SalesPerson.Equals(Value) = False) Then
                Me.OnSalesPersonChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPerson = Value
                Me.SendPropertyChanged("SalesPerson")
                Me.OnSalesPersonChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractExpiryDate", DbType:="DateTime")>
    Public Property ContractExpiryDate() As System.Nullable(Of Date)
        Get
            Return Me._ContractExpiryDate
        End Get
        Set
            If (Me._ContractExpiryDate.Equals(Value) = False) Then
                Me.OnContractExpiryDateChanging(Value)
                Me.SendPropertyChanging()
                Me._ContractExpiryDate = Value
                Me.SendPropertyChanged("ContractExpiryDate")
                Me.OnContractExpiryDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCIRHistory")>
Partial Public Class tblCIRHistory
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _HistoryID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _NCId As Integer

    Private _Cid As System.Nullable(Of Short)

    Private _NCRDate As System.Nullable(Of Date)

    Private _NCRNumber As System.Nullable(Of Integer)

    Private _NCRDescription As String

    Private _NCRRecordedBY As String

    Private _NCRClosedBy As String

    Private _Driver As System.Nullable(Of Short)

    Private _NCRReason As System.Nullable(Of Short)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHistoryIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnHistoryIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNCIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnNCIdChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnNCRDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNCRDateChanged()
    End Sub
    Partial Private Sub OnNCRNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNCRNumberChanged()
    End Sub
    Partial Private Sub OnNCRDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnNCRDescriptionChanged()
    End Sub
    Partial Private Sub OnNCRRecordedBYChanging(value As String)
    End Sub
    Partial Private Sub OnNCRRecordedBYChanged()
    End Sub
    Partial Private Sub OnNCRClosedByChanging(value As String)
    End Sub
    Partial Private Sub OnNCRClosedByChanged()
    End Sub
    Partial Private Sub OnDriverChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnDriverChanged()
    End Sub
    Partial Private Sub OnNCRReasonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnNCRReasonChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HistoryID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property HistoryID() As System.Guid
        Get
            Return Me._HistoryID
        End Get
        Set
            If ((Me._HistoryID = Value) _
                        = False) Then
                Me.OnHistoryIDChanging(Value)
                Me.SendPropertyChanging()
                Me._HistoryID = Value
                Me.SendPropertyChanged("HistoryID")
                Me.OnHistoryIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCId", DbType:="Int NOT NULL")>
    Public Property NCId() As Integer
        Get
            Return Me._NCId
        End Get
        Set
            If ((Me._NCId = Value) _
                        = False) Then
                Me.OnNCIdChanging(Value)
                Me.SendPropertyChanging()
                Me._NCId = Value
                Me.SendPropertyChanged("NCId")
                Me.OnNCIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="SmallInt")>
    Public Property Cid() As System.Nullable(Of Short)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me.OnCidChanging(Value)
                Me.SendPropertyChanging()
                Me._Cid = Value
                Me.SendPropertyChanged("Cid")
                Me.OnCidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDate", DbType:="DateTime")>
    Public Property NCRDate() As System.Nullable(Of Date)
        Get
            Return Me._NCRDate
        End Get
        Set
            If (Me._NCRDate.Equals(Value) = False) Then
                Me.OnNCRDateChanging(Value)
                Me.SendPropertyChanging()
                Me._NCRDate = Value
                Me.SendPropertyChanged("NCRDate")
                Me.OnNCRDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRNumber", DbType:="Int")>
    Public Property NCRNumber() As System.Nullable(Of Integer)
        Get
            Return Me._NCRNumber
        End Get
        Set
            If (Me._NCRNumber.Equals(Value) = False) Then
                Me.OnNCRNumberChanging(Value)
                Me.SendPropertyChanging()
                Me._NCRNumber = Value
                Me.SendPropertyChanged("NCRNumber")
                Me.OnNCRNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDescription", DbType:="NVarChar(MAX)")>
    Public Property NCRDescription() As String
        Get
            Return Me._NCRDescription
        End Get
        Set
            If (String.Equals(Me._NCRDescription, Value) = False) Then
                Me.OnNCRDescriptionChanging(Value)
                Me.SendPropertyChanging()
                Me._NCRDescription = Value
                Me.SendPropertyChanged("NCRDescription")
                Me.OnNCRDescriptionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRRecordedBY", DbType:="NVarChar(50)")>
    Public Property NCRRecordedBY() As String
        Get
            Return Me._NCRRecordedBY
        End Get
        Set
            If (String.Equals(Me._NCRRecordedBY, Value) = False) Then
                Me.OnNCRRecordedBYChanging(Value)
                Me.SendPropertyChanging()
                Me._NCRRecordedBY = Value
                Me.SendPropertyChanged("NCRRecordedBY")
                Me.OnNCRRecordedBYChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRClosedBy", DbType:="NVarChar(50)")>
    Public Property NCRClosedBy() As String
        Get
            Return Me._NCRClosedBy
        End Get
        Set
            If (String.Equals(Me._NCRClosedBy, Value) = False) Then
                Me.OnNCRClosedByChanging(Value)
                Me.SendPropertyChanging()
                Me._NCRClosedBy = Value
                Me.SendPropertyChanged("NCRClosedBy")
                Me.OnNCRClosedByChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver", DbType:="SmallInt")>
    Public Property Driver() As System.Nullable(Of Short)
        Get
            Return Me._Driver
        End Get
        Set
            If (Me._Driver.Equals(Value) = False) Then
                Me.OnDriverChanging(Value)
                Me.SendPropertyChanging()
                Me._Driver = Value
                Me.SendPropertyChanged("Driver")
                Me.OnDriverChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRReason", DbType:="SmallInt")>
    Public Property NCRReason() As System.Nullable(Of Short)
        Get
            Return Me._NCRReason
        End Get
        Set
            If (Me._NCRReason.Equals(Value) = False) Then
                Me.OnNCRReasonChanging(Value)
                Me.SendPropertyChanging()
                Me._NCRReason = Value
                Me.SendPropertyChanged("NCRReason")
                Me.OnNCRReasonChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblProjectID")>
Partial Public Class tblProjectID
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ProjectID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _CustomersID As System.Nullable(Of Integer)

    Private _SitesID As System.Nullable(Of Integer)

    Private _IndustryGroupID As System.Nullable(Of Integer)

    Private _InvoiceFrequencyID As System.Nullable(Of Integer)

    Private _CustomerAgentID As System.Nullable(Of Integer)

    Private _CeaseReasonID As System.Nullable(Of Integer)

    Private _CIRReasonID As System.Nullable(Of Integer)

    Private _ZoneID As System.Nullable(Of Integer)

    Private _CustomerRatingID As System.Nullable(Of Integer)

    Private _RateIncreaseID As System.Nullable(Of Integer)

    Private _PreviousSupplierID As System.Nullable(Of Integer)

    Private _FortnightlyCyclesID As System.Nullable(Of Integer)

    Private _RevenueChangeReasonID As System.Nullable(Of Integer)

    Private _FrequencyID As System.Nullable(Of Integer)

    Private _ServicesID As System.Nullable(Of Integer)

    Private _SalesPersonID As System.Nullable(Of Integer)

    Private _FuelLevyID As System.Nullable(Of Integer)

    Private _RunSheetID As System.Nullable(Of Integer)

    Private _ReSignDetailsID As System.Nullable(Of Integer)

    Private _CustomerServicesID As System.Nullable(Of Integer)

    Private _CIRHistoryID As System.Nullable(Of Integer)

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProjectIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnProjectIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCustomersIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomersIDChanged()
    End Sub
    Partial Private Sub OnSitesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSitesIDChanged()
    End Sub
    Partial Private Sub OnIndustryGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIndustryGroupIDChanged()
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanged()
    End Sub
    Partial Private Sub OnCustomerAgentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerAgentIDChanged()
    End Sub
    Partial Private Sub OnCeaseReasonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCeaseReasonIDChanged()
    End Sub
    Partial Private Sub OnCIRReasonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCIRReasonIDChanged()
    End Sub
    Partial Private Sub OnZoneIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZoneIDChanged()
    End Sub
    Partial Private Sub OnCustomerRatingIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerRatingIDChanged()
    End Sub
    Partial Private Sub OnRateIncreaseIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRateIncreaseIDChanged()
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanged()
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanged()
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanged()
    End Sub
    Partial Private Sub OnFrequencyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFrequencyIDChanged()
    End Sub
    Partial Private Sub OnServicesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnServicesIDChanged()
    End Sub
    Partial Private Sub OnSalesPersonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSalesPersonIDChanged()
    End Sub
    Partial Private Sub OnFuelLevyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFuelLevyIDChanged()
    End Sub
    Partial Private Sub OnRunSheetIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunSheetIDChanged()
    End Sub
    Partial Private Sub OnReSignDetailsIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReSignDetailsIDChanged()
    End Sub
    Partial Private Sub OnCustomerServicesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerServicesIDChanged()
    End Sub
    Partial Private Sub OnCIRHistoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCIRHistoryIDChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property ProjectID() As System.Guid
        Get
            Return Me._ProjectID
        End Get
        Set
            If ((Me._ProjectID = Value) _
                        = False) Then
                Me.OnProjectIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ProjectID = Value
                Me.SendPropertyChanged("ProjectID")
                Me.OnProjectIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomersID", DbType:="Int")>
    Public Property CustomersID() As System.Nullable(Of Integer)
        Get
            Return Me._CustomersID
        End Get
        Set
            If (Me._CustomersID.Equals(Value) = False) Then
                Me.OnCustomersIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomersID = Value
                Me.SendPropertyChanged("CustomersID")
                Me.OnCustomersIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitesID", DbType:="Int")>
    Public Property SitesID() As System.Nullable(Of Integer)
        Get
            Return Me._SitesID
        End Get
        Set
            If (Me._SitesID.Equals(Value) = False) Then
                Me.OnSitesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SitesID = Value
                Me.SendPropertyChanged("SitesID")
                Me.OnSitesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroupID", DbType:="Int")>
    Public Property IndustryGroupID() As System.Nullable(Of Integer)
        Get
            Return Me._IndustryGroupID
        End Get
        Set
            If (Me._IndustryGroupID.Equals(Value) = False) Then
                Me.OnIndustryGroupIDChanging(Value)
                Me.SendPropertyChanging()
                Me._IndustryGroupID = Value
                Me.SendPropertyChanged("IndustryGroupID")
                Me.OnIndustryGroupIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequencyID", DbType:="Int")>
    Public Property InvoiceFrequencyID() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceFrequencyID
        End Get
        Set
            If (Me._InvoiceFrequencyID.Equals(Value) = False) Then
                Me.OnInvoiceFrequencyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._InvoiceFrequencyID = Value
                Me.SendPropertyChanged("InvoiceFrequencyID")
                Me.OnInvoiceFrequencyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentID", DbType:="Int")>
    Public Property CustomerAgentID() As System.Nullable(Of Integer)
        Get
            Return Me._CustomerAgentID
        End Get
        Set
            If (Me._CustomerAgentID.Equals(Value) = False) Then
                Me.OnCustomerAgentIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerAgentID = Value
                Me.SendPropertyChanged("CustomerAgentID")
                Me.OnCustomerAgentIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonID", DbType:="Int")>
    Public Property CeaseReasonID() As System.Nullable(Of Integer)
        Get
            Return Me._CeaseReasonID
        End Get
        Set
            If (Me._CeaseReasonID.Equals(Value) = False) Then
                Me.OnCeaseReasonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CeaseReasonID = Value
                Me.SendPropertyChanged("CeaseReasonID")
                Me.OnCeaseReasonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIRReasonID", DbType:="Int")>
    Public Property CIRReasonID() As System.Nullable(Of Integer)
        Get
            Return Me._CIRReasonID
        End Get
        Set
            If (Me._CIRReasonID.Equals(Value) = False) Then
                Me.OnCIRReasonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CIRReasonID = Value
                Me.SendPropertyChanged("CIRReasonID")
                Me.OnCIRReasonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneID", DbType:="Int")>
    Public Property ZoneID() As System.Nullable(Of Integer)
        Get
            Return Me._ZoneID
        End Get
        Set
            If (Me._ZoneID.Equals(Value) = False) Then
                Me.OnZoneIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ZoneID = Value
                Me.SendPropertyChanged("ZoneID")
                Me.OnZoneIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingID", DbType:="Int")>
    Public Property CustomerRatingID() As System.Nullable(Of Integer)
        Get
            Return Me._CustomerRatingID
        End Get
        Set
            If (Me._CustomerRatingID.Equals(Value) = False) Then
                Me.OnCustomerRatingIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerRatingID = Value
                Me.SendPropertyChanged("CustomerRatingID")
                Me.OnCustomerRatingIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseID", DbType:="Int")>
    Public Property RateIncreaseID() As System.Nullable(Of Integer)
        Get
            Return Me._RateIncreaseID
        End Get
        Set
            If (Me._RateIncreaseID.Equals(Value) = False) Then
                Me.OnRateIncreaseIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RateIncreaseID = Value
                Me.SendPropertyChanged("RateIncreaseID")
                Me.OnRateIncreaseIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierID", DbType:="Int")>
    Public Property PreviousSupplierID() As System.Nullable(Of Integer)
        Get
            Return Me._PreviousSupplierID
        End Get
        Set
            If (Me._PreviousSupplierID.Equals(Value) = False) Then
                Me.OnPreviousSupplierIDChanging(Value)
                Me.SendPropertyChanging()
                Me._PreviousSupplierID = Value
                Me.SendPropertyChanged("PreviousSupplierID")
                Me.OnPreviousSupplierIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FortnightlyCyclesID", DbType:="Int")>
    Public Property FortnightlyCyclesID() As System.Nullable(Of Integer)
        Get
            Return Me._FortnightlyCyclesID
        End Get
        Set
            If (Me._FortnightlyCyclesID.Equals(Value) = False) Then
                Me.OnFortnightlyCyclesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FortnightlyCyclesID = Value
                Me.SendPropertyChanged("FortnightlyCyclesID")
                Me.OnFortnightlyCyclesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReasonID", DbType:="Int")>
    Public Property RevenueChangeReasonID() As System.Nullable(Of Integer)
        Get
            Return Me._RevenueChangeReasonID
        End Get
        Set
            If (Me._RevenueChangeReasonID.Equals(Value) = False) Then
                Me.OnRevenueChangeReasonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RevenueChangeReasonID = Value
                Me.SendPropertyChanged("RevenueChangeReasonID")
                Me.OnRevenueChangeReasonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyID", DbType:="Int")>
    Public Property FrequencyID() As System.Nullable(Of Integer)
        Get
            Return Me._FrequencyID
        End Get
        Set
            If (Me._FrequencyID.Equals(Value) = False) Then
                Me.OnFrequencyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FrequencyID = Value
                Me.SendPropertyChanged("FrequencyID")
                Me.OnFrequencyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesID", DbType:="Int")>
    Public Property ServicesID() As System.Nullable(Of Integer)
        Get
            Return Me._ServicesID
        End Get
        Set
            If (Me._ServicesID.Equals(Value) = False) Then
                Me.OnServicesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ServicesID = Value
                Me.SendPropertyChanged("ServicesID")
                Me.OnServicesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonID", DbType:="Int")>
    Public Property SalesPersonID() As System.Nullable(Of Integer)
        Get
            Return Me._SalesPersonID
        End Get
        Set
            If (Me._SalesPersonID.Equals(Value) = False) Then
                Me.OnSalesPersonIDChanging(Value)
                Me.SendPropertyChanging()
                Me._SalesPersonID = Value
                Me.SendPropertyChanged("SalesPersonID")
                Me.OnSalesPersonIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuelLevyID", DbType:="Int")>
    Public Property FuelLevyID() As System.Nullable(Of Integer)
        Get
            Return Me._FuelLevyID
        End Get
        Set
            If (Me._FuelLevyID.Equals(Value) = False) Then
                Me.OnFuelLevyIDChanging(Value)
                Me.SendPropertyChanging()
                Me._FuelLevyID = Value
                Me.SendPropertyChanged("FuelLevyID")
                Me.OnFuelLevyIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunSheetID", DbType:="Int")>
    Public Property RunSheetID() As System.Nullable(Of Integer)
        Get
            Return Me._RunSheetID
        End Get
        Set
            If (Me._RunSheetID.Equals(Value) = False) Then
                Me.OnRunSheetIDChanging(Value)
                Me.SendPropertyChanging()
                Me._RunSheetID = Value
                Me.SendPropertyChanged("RunSheetID")
                Me.OnRunSheetIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSignDetailsID", DbType:="Int")>
    Public Property ReSignDetailsID() As System.Nullable(Of Integer)
        Get
            Return Me._ReSignDetailsID
        End Get
        Set
            If (Me._ReSignDetailsID.Equals(Value) = False) Then
                Me.OnReSignDetailsIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ReSignDetailsID = Value
                Me.SendPropertyChanged("ReSignDetailsID")
                Me.OnReSignDetailsIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServicesID", DbType:="Int")>
    Public Property CustomerServicesID() As System.Nullable(Of Integer)
        Get
            Return Me._CustomerServicesID
        End Get
        Set
            If (Me._CustomerServicesID.Equals(Value) = False) Then
                Me.OnCustomerServicesIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerServicesID = Value
                Me.SendPropertyChanged("CustomerServicesID")
                Me.OnCustomerServicesIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIRHistoryID", DbType:="Int")>
    Public Property CIRHistoryID() As System.Nullable(Of Integer)
        Get
            Return Me._CIRHistoryID
        End Get
        Set
            If (Me._CIRHistoryID.Equals(Value) = False) Then
                Me.OnCIRHistoryIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CIRHistoryID = Value
                Me.SendPropertyChanged("CIRHistoryID")
                Me.OnCIRHistoryIDChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerServices")>
Partial Public Class tblCustomerService
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _CustomerServiceID As System.Guid

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _ID As Integer

    Private _CSid As System.Nullable(Of Integer)

    Private _CId As System.Nullable(Of Integer)

    Private _ServiceFrequencyCode As System.Nullable(Of Short)

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _ServiceRun As System.Nullable(Of Short)

    Private _ServiceComments As String

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _ServiceFrequency1 As System.Nullable(Of Short)

    Private _ServiceFrequency2 As System.Nullable(Of Short)

    Private _ServiceFrequency3 As System.Nullable(Of Short)

    Private _ServiceFrequency4 As System.Nullable(Of Short)

    Private _ServiceFrequency5 As System.Nullable(Of Short)

    Private _ServiceFrequency6 As System.Nullable(Of Short)

    Private _ServiceFrequency7 As System.Nullable(Of Short)

    Private _ServiceFrequency8 As System.Nullable(Of Short)

    Private _ServiceSortOrderCode As String

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerServiceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerServiceIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCSidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCSidChanged()
    End Sub
    Partial Private Sub OnCIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCIdChanged()
    End Sub
    Partial Private Sub OnServiceFrequencyCodeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequencyCodeChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnServicePriceChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnServicePriceChanged()
    End Sub
    Partial Private Sub OnPerAnnumChargeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnPerAnnumChargeChanged()
    End Sub
    Partial Private Sub OnServiceRunChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceRunChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanged()
    End Sub
    Partial Private Sub OnServiceFrequency1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency1Changed()
    End Sub
    Partial Private Sub OnServiceFrequency2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency2Changed()
    End Sub
    Partial Private Sub OnServiceFrequency3Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency3Changed()
    End Sub
    Partial Private Sub OnServiceFrequency4Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency4Changed()
    End Sub
    Partial Private Sub OnServiceFrequency5Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency5Changed()
    End Sub
    Partial Private Sub OnServiceFrequency6Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency6Changed()
    End Sub
    Partial Private Sub OnServiceFrequency7Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency7Changed()
    End Sub
    Partial Private Sub OnServiceFrequency8Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency8Changed()
    End Sub
    Partial Private Sub OnServiceSortOrderCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceSortOrderCodeChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServiceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)>
    Public Property CustomerServiceID() As System.Guid
        Get
            Return Me._CustomerServiceID
        End Get
        Set
            If ((Me._CustomerServiceID = Value) _
                        = False) Then
                Me.OnCustomerServiceIDChanging(Value)
                Me.SendPropertyChanging()
                Me._CustomerServiceID = Value
                Me.SendPropertyChanged("CustomerServiceID")
                Me.OnCustomerServiceIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me.OnApplicationIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ApplicationID = Value
                Me.SendPropertyChanged("ApplicationID")
                Me.OnApplicationIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>
    Public Property ID() As Integer
        Get
            Return Me._ID
        End Get
        Set
            If ((Me._ID = Value) _
                        = False) Then
                Me.OnIDChanging(Value)
                Me.SendPropertyChanging()
                Me._ID = Value
                Me.SendPropertyChanged("ID")
                Me.OnIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me.OnCSidChanging(Value)
                Me.SendPropertyChanging()
                Me._CSid = Value
                Me.SendPropertyChanged("CSid")
                Me.OnCSidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int")>
    Public Property CId() As System.Nullable(Of Integer)
        Get
            Return Me._CId
        End Get
        Set
            If (Me._CId.Equals(Value) = False) Then
                Me.OnCIdChanging(Value)
                Me.SendPropertyChanging()
                Me._CId = Value
                Me.SendPropertyChanged("CId")
                Me.OnCIdChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencyCode", DbType:="SmallInt")>
    Public Property ServiceFrequencyCode() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequencyCode
        End Get
        Set
            If (Me._ServiceFrequencyCode.Equals(Value) = False) Then
                Me.OnServiceFrequencyCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequencyCode = Value
                Me.SendPropertyChanged("ServiceFrequencyCode")
                Me.OnServiceFrequencyCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me.OnServiceUnitsChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceUnits = Value
                Me.SendPropertyChanged("ServiceUnits")
                Me.OnServiceUnitsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me.OnServicePriceChanging(Value)
                Me.SendPropertyChanging()
                Me._ServicePrice = Value
                Me.SendPropertyChanged("ServicePrice")
                Me.OnServicePriceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me.OnPerAnnumChargeChanging(Value)
                Me.SendPropertyChanging()
                Me._PerAnnumCharge = Value
                Me.SendPropertyChanged("PerAnnumCharge")
                Me.OnPerAnnumChargeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>
    Public Property ServiceRun() As System.Nullable(Of Short)
        Get
            Return Me._ServiceRun
        End Get
        Set
            If (Me._ServiceRun.Equals(Value) = False) Then
                Me.OnServiceRunChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceRun = Value
                Me.SendPropertyChanged("ServiceRun")
                Me.OnServiceRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>
    Public Property ServiceComments() As String
        Get
            Return Me._ServiceComments
        End Get
        Set
            If (String.Equals(Me._ServiceComments, Value) = False) Then
                Me.OnServiceCommentsChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceComments = Value
                Me.SendPropertyChanged("ServiceComments")
                Me.OnServiceCommentsChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me.OnUnitsHaveMoreThanOneRunChanging(Value)
                Me.SendPropertyChanging()
                Me._UnitsHaveMoreThanOneRun = Value
                Me.SendPropertyChanged("UnitsHaveMoreThanOneRun")
                Me.OnUnitsHaveMoreThanOneRunChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1", DbType:="SmallInt")>
    Public Property ServiceFrequency1() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency1
        End Get
        Set
            If (Me._ServiceFrequency1.Equals(Value) = False) Then
                Me.OnServiceFrequency1Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency1 = Value
                Me.SendPropertyChanged("ServiceFrequency1")
                Me.OnServiceFrequency1Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2", DbType:="SmallInt")>
    Public Property ServiceFrequency2() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency2
        End Get
        Set
            If (Me._ServiceFrequency2.Equals(Value) = False) Then
                Me.OnServiceFrequency2Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency2 = Value
                Me.SendPropertyChanged("ServiceFrequency2")
                Me.OnServiceFrequency2Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3", DbType:="SmallInt")>
    Public Property ServiceFrequency3() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency3
        End Get
        Set
            If (Me._ServiceFrequency3.Equals(Value) = False) Then
                Me.OnServiceFrequency3Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency3 = Value
                Me.SendPropertyChanged("ServiceFrequency3")
                Me.OnServiceFrequency3Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4", DbType:="SmallInt")>
    Public Property ServiceFrequency4() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency4
        End Get
        Set
            If (Me._ServiceFrequency4.Equals(Value) = False) Then
                Me.OnServiceFrequency4Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency4 = Value
                Me.SendPropertyChanged("ServiceFrequency4")
                Me.OnServiceFrequency4Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5", DbType:="SmallInt")>
    Public Property ServiceFrequency5() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency5
        End Get
        Set
            If (Me._ServiceFrequency5.Equals(Value) = False) Then
                Me.OnServiceFrequency5Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency5 = Value
                Me.SendPropertyChanged("ServiceFrequency5")
                Me.OnServiceFrequency5Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6", DbType:="SmallInt")>
    Public Property ServiceFrequency6() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency6
        End Get
        Set
            If (Me._ServiceFrequency6.Equals(Value) = False) Then
                Me.OnServiceFrequency6Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency6 = Value
                Me.SendPropertyChanged("ServiceFrequency6")
                Me.OnServiceFrequency6Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7", DbType:="SmallInt")>
    Public Property ServiceFrequency7() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency7
        End Get
        Set
            If (Me._ServiceFrequency7.Equals(Value) = False) Then
                Me.OnServiceFrequency7Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency7 = Value
                Me.SendPropertyChanged("ServiceFrequency7")
                Me.OnServiceFrequency7Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8", DbType:="SmallInt")>
    Public Property ServiceFrequency8() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency8
        End Get
        Set
            If (Me._ServiceFrequency8.Equals(Value) = False) Then
                Me.OnServiceFrequency8Changing(Value)
                Me.SendPropertyChanging()
                Me._ServiceFrequency8 = Value
                Me.SendPropertyChanged("ServiceFrequency8")
                Me.OnServiceFrequency8Changed()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceSortOrderCode", DbType:="NVarChar(12)")>
    Public Property ServiceSortOrderCode() As String
        Get
            Return Me._ServiceSortOrderCode
        End Get
        Set
            If (String.Equals(Me._ServiceSortOrderCode, Value) = False) Then
                Me.OnServiceSortOrderCodeChanging(Value)
                Me.SendPropertyChanging()
                Me._ServiceSortOrderCode = Value
                Me.SendPropertyChanged("ServiceSortOrderCode")
                Me.OnServiceSortOrderCodeChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
                    = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

Partial Public Class aspnet_Roles_GetAllRolesResult

    Private _RoleName As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property RoleName() As String
        Get
            Return Me._RoleName
        End Get
        Set
            If (String.Equals(Me._RoleName, Value) = False) Then
                Me._RoleName = Value
            End If
        End Set
    End Property
End Class

Partial Public Class aspnet_UsersInRoles_AddUsersToRolesResult

    Private _Name As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property
End Class

Partial Public Class aspnet_UsersInRoles_RemoveUsersFromRolesResult

    Private _Column1 As String

    Private _Name As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="NVarChar(1) NOT NULL", CanBeNull:=False)>
    Public Property Column1() As String
        Get
            Return Me._Column1
        End Get
        Set
            If (String.Equals(Me._Column1, Value) = False) Then
                Me._Column1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetVehiclesAndDriversFortimePeriodResult

    Private _ApplicationVehicleID As System.Guid

    Private _Name As String

    Private _DeviceID As String

    Private _ApplicationVehicleDriverTimeID As System.Nullable(Of System.Guid)

    Private _ApplicationDriverID As System.Nullable(Of System.Guid)

    Private _PassengerID As System.Nullable(Of System.Guid)

    Private _StartDateTime As System.Nullable(Of Date)

    Private _EndDateTime As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationVehicleID() As System.Guid
        Get
            Return Me._ApplicationVehicleID
        End Get
        Set
            If ((Me._ApplicationVehicleID = Value) _
                        = False) Then
                Me._ApplicationVehicleID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me._DeviceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier")>
    Public Property ApplicationVehicleDriverTimeID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationVehicleDriverTimeID
        End Get
        Set
            If (Me._ApplicationVehicleDriverTimeID.Equals(Value) = False) Then
                Me._ApplicationVehicleDriverTimeID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>
    Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If (Me._ApplicationDriverID.Equals(Value) = False) Then
                Me._ApplicationDriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>
    Public Property PassengerID() As System.Nullable(Of System.Guid)
        Get
            Return Me._PassengerID
        End Get
        Set
            If (Me._PassengerID.Equals(Value) = False) Then
                Me._PassengerID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>
    Public Property StartDateTime() As System.Nullable(Of Date)
        Get
            Return Me._StartDateTime
        End Get
        Set
            If (Me._StartDateTime.Equals(Value) = False) Then
                Me._StartDateTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>
    Public Property EndDateTime() As System.Nullable(Of Date)
        Get
            Return Me._EndDateTime
        End Get
        Set
            If (Me._EndDateTime.Equals(Value) = False) Then
                Me._EndDateTime = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSettingsForApplicationResult

    Private _SettingID As System.Guid

    Private _ApplicationSettingValueID As System.Nullable(Of System.Guid)

    Private _ApplicationId As System.Guid

    Private _Name As String

    Private _ApplicationName As String

    Private _Value As String

    Private _ValueObj As System.Data.Linq.Binary

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property SettingID() As System.Guid
        Get
            Return Me._SettingID
        End Get
        Set
            If ((Me._SettingID = Value) _
                        = False) Then
                Me._SettingID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationSettingValueID", DbType:="UniqueIdentifier")>
    Public Property ApplicationSettingValueID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationSettingValueID
        End Get
        Set
            If (Me._ApplicationSettingValueID.Equals(Value) = False) Then
                Me._ApplicationSettingValueID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationId() As System.Guid
        Get
            Return Me._ApplicationId
        End Get
        Set
            If ((Me._ApplicationId = Value) _
                        = False) Then
                Me._ApplicationId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)>
    Public Property ApplicationName() As String
        Get
            Return Me._ApplicationName
        End Get
        Set
            If (String.Equals(Me._ApplicationName, Value) = False) Then
                Me._ApplicationName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(MAX)")>
    Public Property Value() As String
        Get
            Return Me._Value
        End Get
        Set
            If (String.Equals(Me._Value, Value) = False) Then
                Me._Value = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueObj", DbType:="VarBinary(MAX)")>
    Public Property ValueObj() As System.Data.Linq.Binary
        Get
            Return Me._ValueObj
        End Get
        Set
            If (Object.Equals(Me._ValueObj, Value) = False) Then
                Me._ValueObj = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSubscribersForApplicationResult

    Private _SubcriberType As String

    Private _SubcriberType_ID As Integer

    Private _NativeID As System.Guid

    Private _Name As String

    Private _Email As String

    Private _Mobile As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubcriberType", DbType:="VarChar(12) NOT NULL", CanBeNull:=False)>
    Public Property SubcriberType() As String
        Get
            Return Me._SubcriberType
        End Get
        Set
            If (String.Equals(Me._SubcriberType, Value) = False) Then
                Me._SubcriberType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubcriberType_ID", DbType:="Int NOT NULL")>
    Public Property SubcriberType_ID() As Integer
        Get
            Return Me._SubcriberType_ID
        End Get
        Set
            If ((Me._SubcriberType_ID = Value) _
                        = False) Then
                Me._SubcriberType_ID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property NativeID() As System.Guid
        Get
            Return Me._NativeID
        End Get
        Set
            If ((Me._NativeID = Value) _
                        = False) Then
                Me._NativeID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>
    Public Property Email() As String
        Get
            Return Me._Email
        End Get
        Set
            If (String.Equals(Me._Email, Value) = False) Then
                Me._Email = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(MAX)")>
    Public Property Mobile() As String
        Get
            Return Me._Mobile
        End Get
        Set
            If (String.Equals(Me._Mobile, Value) = False) Then
                Me._Mobile = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGeoFenceCollisionsResult

    Private _id As System.Nullable(Of Long)

    Private _DeviceID As String

    Private _StartTime As System.Nullable(Of Date)

    Private _EndTime As System.Nullable(Of Date)

    Private _GeoFence_Description As String

    Private _Vehicle_Name As String

    Private _GeoFence_Name As String

    Private _Driver_Name As String

    Private _GeoFence_Name1 As String

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Private _ApplicationVehicleID As System.Nullable(Of System.Guid)

    Private _ApplicationDriverID As System.Nullable(Of System.Guid)

    Private _GeoFenceDeviceCollissionID As System.Guid

    Private _ApplictionID As System.Nullable(Of System.Guid)

    Private _PhoneNumber As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="BigInt")>
    Public Property id() As System.Nullable(Of Long)
        Get
            Return Me._id
        End Get
        Set
            If (Me._id.Equals(Value) = False) Then
                Me._id = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me._DeviceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>
    Public Property StartTime() As System.Nullable(Of Date)
        Get
            Return Me._StartTime
        End Get
        Set
            If (Me._StartTime.Equals(Value) = False) Then
                Me._StartTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>
    Public Property EndTime() As System.Nullable(Of Date)
        Get
            Return Me._EndTime
        End Get
        Set
            If (Me._EndTime.Equals(Value) = False) Then
                Me._EndTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Description", DbType:="VarChar(MAX)")>
    Public Property GeoFence_Description() As String
        Get
            Return Me._GeoFence_Description
        End Get
        Set
            If (String.Equals(Me._GeoFence_Description, Value) = False) Then
                Me._GeoFence_Description = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_Name", DbType:="VarChar(500)")>
    Public Property Vehicle_Name() As String
        Get
            Return Me._Vehicle_Name
        End Get
        Set
            If (String.Equals(Me._Vehicle_Name, Value) = False) Then
                Me._Vehicle_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name", DbType:="VarChar(MAX)")>
    Public Property GeoFence_Name() As String
        Get
            Return Me._GeoFence_Name
        End Get
        Set
            If (String.Equals(Me._GeoFence_Name, Value) = False) Then
                Me._GeoFence_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver_Name", DbType:="VarChar(MAX)")>
    Public Property Driver_Name() As String
        Get
            Return Me._Driver_Name
        End Get
        Set
            If (String.Equals(Me._Driver_Name, Value) = False) Then
                Me._Driver_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name1", DbType:="VarChar(MAX)")>
    Public Property GeoFence_Name1() As String
        Get
            Return Me._GeoFence_Name1
        End Get
        Set
            If (String.Equals(Me._GeoFence_Name1, Value) = False) Then
                Me._GeoFence_Name1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me._ApplicationGeoFenceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier")>
    Public Property ApplicationVehicleID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationVehicleID
        End Get
        Set
            If (Me._ApplicationVehicleID.Equals(Value) = False) Then
                Me._ApplicationVehicleID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>
    Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If (Me._ApplicationDriverID.Equals(Value) = False) Then
                Me._ApplicationDriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property GeoFenceDeviceCollissionID() As System.Guid
        Get
            Return Me._GeoFenceDeviceCollissionID
        End Get
        Set
            If ((Me._GeoFenceDeviceCollissionID = Value) _
                        = False) Then
                Me._GeoFenceDeviceCollissionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier")>
    Public Property ApplictionID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplictionID
        End Get
        Set
            If (Me._ApplictionID.Equals(Value) = False) Then
                Me._ApplictionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>
    Public Property PhoneNumber() As String
        Get
            Return Me._PhoneNumber
        End Get
        Set
            If (String.Equals(Me._PhoneNumber, Value) = False) Then
                Me._PhoneNumber = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetAssignedVehiclestoDriversResult

    Private _ApplicationVehicleID As System.Guid

    Private _Name As String

    Private _DeviceID As String

    Private _ApplicationVehicleDriverTimeID As System.Nullable(Of System.Guid)

    Private _ApplicationDriverID As System.Nullable(Of System.Guid)

    Private _PassengerID As System.Nullable(Of System.Guid)

    Private _StartDateTime As System.Nullable(Of Date)

    Private _EndDateTime As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property ApplicationVehicleID() As System.Guid
        Get
            Return Me._ApplicationVehicleID
        End Get
        Set
            If ((Me._ApplicationVehicleID = Value) _
                        = False) Then
                Me._ApplicationVehicleID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set
            If (String.Equals(Me._Name, Value) = False) Then
                Me._Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me._DeviceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier")>
    Public Property ApplicationVehicleDriverTimeID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationVehicleDriverTimeID
        End Get
        Set
            If (Me._ApplicationVehicleDriverTimeID.Equals(Value) = False) Then
                Me._ApplicationVehicleDriverTimeID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>
    Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If (Me._ApplicationDriverID.Equals(Value) = False) Then
                Me._ApplicationDriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>
    Public Property PassengerID() As System.Nullable(Of System.Guid)
        Get
            Return Me._PassengerID
        End Get
        Set
            If (Me._PassengerID.Equals(Value) = False) Then
                Me._PassengerID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>
    Public Property StartDateTime() As System.Nullable(Of Date)
        Get
            Return Me._StartDateTime
        End Get
        Set
            If (Me._StartDateTime.Equals(Value) = False) Then
                Me._StartDateTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>
    Public Property EndDateTime() As System.Nullable(Of Date)
        Get
            Return Me._EndDateTime
        End Get
        Set
            If (Me._EndDateTime.Equals(Value) = False) Then
                Me._EndDateTime = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetUnprocessedCollissionsForAlertTypeResult

    Private _id As System.Nullable(Of Long)

    Private _DeviceID As String

    Private _StartTime As System.Nullable(Of Date)

    Private _EndTime As System.Nullable(Of Date)

    Private _GeoFence_Description As String

    Private _Vehicle_Name As String

    Private _GeoFence_Name As String

    Private _Driver_Name As String

    Private _GeoFence_Name1 As String

    Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)

    Private _ApplicationVehicleID As System.Nullable(Of System.Guid)

    Private _ApplicationDriverID As System.Nullable(Of System.Guid)

    Private _GeoFenceDeviceCollissionID As System.Nullable(Of System.Guid)

    Private _ApplictionID As System.Nullable(Of System.Guid)

    Private _PhoneNumber As String

    Private _Emails As String

    Private _DriverName As String

    Private _DateSend As System.Nullable(Of Date)

    Private _MessageContent As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="BigInt")>
    Public Property id() As System.Nullable(Of Long)
        Get
            Return Me._id
        End Get
        Set
            If (Me._id.Equals(Value) = False) Then
                Me._id = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>
    Public Property DeviceID() As String
        Get
            Return Me._DeviceID
        End Get
        Set
            If (String.Equals(Me._DeviceID, Value) = False) Then
                Me._DeviceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>
    Public Property StartTime() As System.Nullable(Of Date)
        Get
            Return Me._StartTime
        End Get
        Set
            If (Me._StartTime.Equals(Value) = False) Then
                Me._StartTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>
    Public Property EndTime() As System.Nullable(Of Date)
        Get
            Return Me._EndTime
        End Get
        Set
            If (Me._EndTime.Equals(Value) = False) Then
                Me._EndTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Description", DbType:="VarChar(MAX)")>
    Public Property GeoFence_Description() As String
        Get
            Return Me._GeoFence_Description
        End Get
        Set
            If (String.Equals(Me._GeoFence_Description, Value) = False) Then
                Me._GeoFence_Description = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_Name", DbType:="VarChar(500)")>
    Public Property Vehicle_Name() As String
        Get
            Return Me._Vehicle_Name
        End Get
        Set
            If (String.Equals(Me._Vehicle_Name, Value) = False) Then
                Me._Vehicle_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name", DbType:="VarChar(MAX)")>
    Public Property GeoFence_Name() As String
        Get
            Return Me._GeoFence_Name
        End Get
        Set
            If (String.Equals(Me._GeoFence_Name, Value) = False) Then
                Me._GeoFence_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver_Name", DbType:="VarChar(MAX)")>
    Public Property Driver_Name() As String
        Get
            Return Me._Driver_Name
        End Get
        Set
            If (String.Equals(Me._Driver_Name, Value) = False) Then
                Me._Driver_Name = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name1", DbType:="VarChar(MAX)")>
    Public Property GeoFence_Name1() As String
        Get
            Return Me._GeoFence_Name1
        End Get
        Set
            If (String.Equals(Me._GeoFence_Name1, Value) = False) Then
                Me._GeoFence_Name1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>
    Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationGeoFenceID
        End Get
        Set
            If (Me._ApplicationGeoFenceID.Equals(Value) = False) Then
                Me._ApplicationGeoFenceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier")>
    Public Property ApplicationVehicleID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationVehicleID
        End Get
        Set
            If (Me._ApplicationVehicleID.Equals(Value) = False) Then
                Me._ApplicationVehicleID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>
    Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationDriverID
        End Get
        Set
            If (Me._ApplicationDriverID.Equals(Value) = False) Then
                Me._ApplicationDriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier")>
    Public Property GeoFenceDeviceCollissionID() As System.Nullable(Of System.Guid)
        Get
            Return Me._GeoFenceDeviceCollissionID
        End Get
        Set
            If (Me._GeoFenceDeviceCollissionID.Equals(Value) = False) Then
                Me._GeoFenceDeviceCollissionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier")>
    Public Property ApplictionID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplictionID
        End Get
        Set
            If (Me._ApplictionID.Equals(Value) = False) Then
                Me._ApplictionID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>
    Public Property PhoneNumber() As String
        Get
            Return Me._PhoneNumber
        End Get
        Set
            If (String.Equals(Me._PhoneNumber, Value) = False) Then
                Me._PhoneNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Emails", DbType:="VarChar(MAX)")>
    Public Property Emails() As String
        Get
            Return Me._Emails
        End Get
        Set
            If (String.Equals(Me._Emails, Value) = False) Then
                Me._Emails = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="VarChar(500)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="DateTime")>
    Public Property DateSend() As System.Nullable(Of Date)
        Get
            Return Me._DateSend
        End Get
        Set
            If (Me._DateSend.Equals(Value) = False) Then
                Me._DateSend = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>
    Public Property MessageContent() As String
        Get
            Return Me._MessageContent
        End Get
        Set
            If (String.Equals(Me._MessageContent, Value) = False) Then
                Me._MessageContent = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetCustomerUpdateValueResult

    Private _CustomerName As String

    Private _TotalAmount As System.Nullable(Of Double)

    Private _Cid As System.Nullable(Of Integer)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>
    Public Property TotalAmount() As System.Nullable(Of Double)
        Get
            Return Me._TotalAmount
        End Get
        Set
            If (Me._TotalAmount.Equals(Value) = False) Then
                Me._TotalAmount = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>
    Public Property Cid() As System.Nullable(Of Integer)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetAllDriversResult

    Private _DriverID As System.Guid

    Private _DriverName As String

    Private _InActive As Integer

    Private _Source As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property DriverID() As System.Guid
        Get
            Return Me._DriverID
        End Get
        Set
            If ((Me._DriverID = Value) _
                        = False) Then
                Me._DriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(MAX)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InActive", DbType:="Int NOT NULL")>
    Public Property InActive() As Integer
        Get
            Return Me._InActive
        End Get
        Set
            If ((Me._InActive = Value) _
                        = False) Then
                Me._InActive = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="VarChar(8) NOT NULL", CanBeNull:=False)>
    Public Property Source() As String
        Get
            Return Me._Source
        End Get
        Set
            If (String.Equals(Me._Source, Value) = False) Then
                Me._Source = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetCustomersResult

    Private _CustomerID As System.Guid

    Private _Cid As Integer

    Private _CustomerName As String

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _State As System.Nullable(Of Integer)

    Private _Suburb As String

    Private _PostCode As String

    Private _CustomerContactName As String

    Private _CustomerPhone As String

    Private _CustomerMobile As String

    Private _CustomerFax As String

    Private _CustomerComments As String

    Private _CustomerAgent As System.Nullable(Of Integer)

    Private _CustomerRating As System.Nullable(Of Short)

    Private _Zone As System.Nullable(Of Integer)

    Private _MYOBCustomerNumber As String

    Private _CustomerValue As System.Nullable(Of Double)

    Private _InactiveCustomer As Boolean

    Private _CustomerCommencementDate As System.Nullable(Of Date)

    Private _chkCustomerExcludeFuelLevy As Boolean

    Private _cmbRateIncrease As System.Nullable(Of Short)

    Private _ZoneSortOrder As System.Nullable(Of Long)

    Private _AgentSortOrder As System.Nullable(Of Long)

    Private _RateIncreaseSortOrder As System.Nullable(Of Long)

    Private _CustomerSortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CustomerID() As System.Guid
        Get
            Return Me._CustomerID
        End Get
        Set
            If ((Me._CustomerID = Value) _
                        = False) Then
                Me._CustomerID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="Int")>
    Public Property State() As System.Nullable(Of Integer)
        Get
            Return Me._State
        End Get
        Set
            If (Me._State.Equals(Value) = False) Then
                Me._State = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>
    Public Property PostCode() As String
        Get
            Return Me._PostCode
        End Get
        Set
            If (String.Equals(Me._PostCode, Value) = False) Then
                Me._PostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>
    Public Property CustomerContactName() As String
        Get
            Return Me._CustomerContactName
        End Get
        Set
            If (String.Equals(Me._CustomerContactName, Value) = False) Then
                Me._CustomerContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me._CustomerPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerMobile", DbType:="NVarChar(22)")>
    Public Property CustomerMobile() As String
        Get
            Return Me._CustomerMobile
        End Get
        Set
            If (String.Equals(Me._CustomerMobile, Value) = False) Then
                Me._CustomerMobile = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerFax", DbType:="NVarChar(22)")>
    Public Property CustomerFax() As String
        Get
            Return Me._CustomerFax
        End Get
        Set
            If (String.Equals(Me._CustomerFax, Value) = False) Then
                Me._CustomerFax = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerComments", DbType:="NVarChar(MAX)")>
    Public Property CustomerComments() As String
        Get
            Return Me._CustomerComments
        End Get
        Set
            If (String.Equals(Me._CustomerComments, Value) = False) Then
                Me._CustomerComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgent", DbType:="Int")>
    Public Property CustomerAgent() As System.Nullable(Of Integer)
        Get
            Return Me._CustomerAgent
        End Get
        Set
            If (Me._CustomerAgent.Equals(Value) = False) Then
                Me._CustomerAgent = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>
    Public Property CustomerRating() As System.Nullable(Of Short)
        Get
            Return Me._CustomerRating
        End Get
        Set
            If (Me._CustomerRating.Equals(Value) = False) Then
                Me._CustomerRating = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>
    Public Property Zone() As System.Nullable(Of Integer)
        Get
            Return Me._Zone
        End Get
        Set
            If (Me._Zone.Equals(Value) = False) Then
                Me._Zone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>
    Public Property MYOBCustomerNumber() As String
        Get
            Return Me._MYOBCustomerNumber
        End Get
        Set
            If (String.Equals(Me._MYOBCustomerNumber, Value) = False) Then
                Me._MYOBCustomerNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerValue", DbType:="Float")>
    Public Property CustomerValue() As System.Nullable(Of Double)
        Get
            Return Me._CustomerValue
        End Get
        Set
            If (Me._CustomerValue.Equals(Value) = False) Then
                Me._CustomerValue = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveCustomer", DbType:="Bit NOT NULL")>
    Public Property InactiveCustomer() As Boolean
        Get
            Return Me._InactiveCustomer
        End Get
        Set
            If ((Me._InactiveCustomer = Value) _
                        = False) Then
                Me._InactiveCustomer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerCommencementDate", DbType:="DateTime")>
    Public Property CustomerCommencementDate() As System.Nullable(Of Date)
        Get
            Return Me._CustomerCommencementDate
        End Get
        Set
            If (Me._CustomerCommencementDate.Equals(Value) = False) Then
                Me._CustomerCommencementDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkCustomerExcludeFuelLevy", DbType:="Bit NOT NULL")>
    Public Property chkCustomerExcludeFuelLevy() As Boolean
        Get
            Return Me._chkCustomerExcludeFuelLevy
        End Get
        Set
            If ((Me._chkCustomerExcludeFuelLevy = Value) _
                        = False) Then
                Me._chkCustomerExcludeFuelLevy = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>
    Public Property cmbRateIncrease() As System.Nullable(Of Short)
        Get
            Return Me._cmbRateIncrease
        End Get
        Set
            If (Me._cmbRateIncrease.Equals(Value) = False) Then
                Me._cmbRateIncrease = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSortOrder", DbType:="BigInt")>
    Public Property ZoneSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ZoneSortOrder
        End Get
        Set
            If (Me._ZoneSortOrder.Equals(Value) = False) Then
                Me._ZoneSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgentSortOrder", DbType:="BigInt")>
    Public Property AgentSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._AgentSortOrder
        End Get
        Set
            If (Me._AgentSortOrder.Equals(Value) = False) Then
                Me._AgentSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseSortOrder", DbType:="BigInt")>
    Public Property RateIncreaseSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._RateIncreaseSortOrder
        End Get
        Set
            If (Me._RateIncreaseSortOrder.Equals(Value) = False) Then
                Me._RateIncreaseSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerSortOrder", DbType:="BigInt")>
    Public Property CustomerSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._CustomerSortOrder
        End Get
        Set
            If (Me._CustomerSortOrder.Equals(Value) = False) Then
                Me._CustomerSortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetIndustryListReportResult

    Private _CustomerName As String

    Private _SiteName As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServiceDescription As String

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _SiteName1 As String

    Private _Aid As Integer

    Private _IndustryDescription As String

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _Frequency As String

    Private _InvoiceCommencing As System.Nullable(Of Date)

    Private _PostCode As System.Nullable(Of Short)

    Private _MYOBCustomerNumber As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName1", DbType:="NVarChar(50)")>
    Public Property SiteName1() As String
        Get
            Return Me._SiteName1
        End Get
        Set
            If (String.Equals(Me._SiteName1, Value) = False) Then
                Me._SiteName1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me._Aid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryDescription", DbType:="NVarChar(50)")>
    Public Property IndustryDescription() As String
        Get
            Return Me._IndustryDescription
        End Get
        Set
            If (String.Equals(Me._IndustryDescription, Value) = False) Then
                Me._IndustryDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me._UnitsHaveMoreThanOneRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>
    Public Property Frequency() As String
        Get
            Return Me._Frequency
        End Get
        Set
            If (String.Equals(Me._Frequency, Value) = False) Then
                Me._Frequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>
    Public Property InvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceCommencing
        End Get
        Set
            If (Me._InvoiceCommencing.Equals(Value) = False) Then
                Me._InvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>
    Public Property PostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostCode
        End Get
        Set
            If (Me._PostCode.Equals(Value) = False) Then
                Me._PostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>
    Public Property MYOBCustomerNumber() As String
        Get
            Return Me._MYOBCustomerNumber
        End Get
        Set
            If (String.Equals(Me._MYOBCustomerNumber, Value) = False) Then
                Me._MYOBCustomerNumber = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetDriversLicenseExpiryReportResult

    Private _DriverID As System.Guid

    Private _Did As Integer

    Private _DriverName As String

    Private _DriversLicenseNo As String

    Private _DriversLicenseExpiryDate As System.Nullable(Of Date)

    Private _Inactive As Boolean

    Private _Renewal As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property DriverID() As System.Guid
        Get
            Return Me._DriverID
        End Get
        Set
            If ((Me._DriverID = Value) _
                        = False) Then
                Me._DriverID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", DbType:="Int NOT NULL")>
    Public Property Did() As Integer
        Get
            Return Me._Did
        End Get
        Set
            If ((Me._Did = Value) _
                        = False) Then
                Me._Did = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseNo", DbType:="NVarChar(22)")>
    Public Property DriversLicenseNo() As String
        Get
            Return Me._DriversLicenseNo
        End Get
        Set
            If (String.Equals(Me._DriversLicenseNo, Value) = False) Then
                Me._DriversLicenseNo = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseExpiryDate", DbType:="DateTime")>
    Public Property DriversLicenseExpiryDate() As System.Nullable(Of Date)
        Get
            Return Me._DriversLicenseExpiryDate
        End Get
        Set
            If (Me._DriversLicenseExpiryDate.Equals(Value) = False) Then
                Me._DriversLicenseExpiryDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="Bit NOT NULL")>
    Public Property Inactive() As Boolean
        Get
            Return Me._Inactive
        End Get
        Set
            If ((Me._Inactive = Value) _
                        = False) Then
                Me._Inactive = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Renewal", DbType:="VarChar(11) NOT NULL", CanBeNull:=False)>
    Public Property Renewal() As String
        Get
            Return Me._Renewal
        End Get
        Set
            If (String.Equals(Me._Renewal, Value) = False) Then
                Me._Renewal = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetContractRenewalsReportResult

    Private _Customer As System.Nullable(Of Short)

    Private _AreaDescription As String

    Private _SiteContractExpiry As System.Nullable(Of Date)

    Private _CustomerName As String

    Private _SiteName As String

    Private _SiteStartDate As System.Nullable(Of Date)

    Private _ContractPeriodDesc As String

    Private _SiteContactPhone As String

    Private _CustomerContactName As String

    Private _CustomerPhone As String

    Private _ServiceUnits As System.Nullable(Of Double)

    Private _PerAnnumCharge As System.Nullable(Of Double)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>
    Public Property AreaDescription() As String
        Get
            Return Me._AreaDescription
        End Get
        Set
            If (String.Equals(Me._AreaDescription, Value) = False) Then
                Me._AreaDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>
    Public Property SiteContractExpiry() As System.Nullable(Of Date)
        Get
            Return Me._SiteContractExpiry
        End Get
        Set
            If (Me._SiteContractExpiry.Equals(Value) = False) Then
                Me._SiteContractExpiry = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>
    Public Property SiteStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteStartDate
        End Get
        Set
            If (Me._SiteStartDate.Equals(Value) = False) Then
                Me._SiteStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodDesc", DbType:="NVarChar(50)")>
    Public Property ContractPeriodDesc() As String
        Get
            Return Me._ContractPeriodDesc
        End Get
        Set
            If (String.Equals(Me._ContractPeriodDesc, Value) = False) Then
                Me._ContractPeriodDesc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>
    Public Property SiteContactPhone() As String
        Get
            Return Me._SiteContactPhone
        End Get
        Set
            If (String.Equals(Me._SiteContactPhone, Value) = False) Then
                Me._SiteContactPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>
    Public Property CustomerContactName() As String
        Get
            Return Me._CustomerContactName
        End Get
        Set
            If (String.Equals(Me._CustomerContactName, Value) = False) Then
                Me._CustomerContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me._CustomerPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>
    Public Property ServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Float")>
    Public Property PerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetServiceSummaryReportResult

    Private _FrequencyDescription As String

    Private _ServiceDescription As String

    Private _ServiceCode As String

    Private _ServiceUnits As System.Nullable(Of Double)

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyDescription", DbType:="NVarChar(50)")>
    Public Property FrequencyDescription() As String
        Get
            Return Me._FrequencyDescription
        End Get
        Set
            If (String.Equals(Me._FrequencyDescription, Value) = False) Then
                Me._FrequencyDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me._ServiceCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>
    Public Property ServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetLengthOfServicesReportResult

    Private _Years As System.Nullable(Of Integer)

    Private _sitestartdate As System.Nullable(Of Date)

    Private _SiteName As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Years", DbType:="Int")>
    Public Property Years() As System.Nullable(Of Integer)
        Get
            Return Me._Years
        End Get
        Set
            If (Me._Years.Equals(Value) = False) Then
                Me._Years = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sitestartdate", DbType:="Date")>
    Public Property sitestartdate() As System.Nullable(Of Date)
        Get
            Return Me._sitestartdate
        End Get
        Set
            If (Me._sitestartdate.Equals(Value) = False) Then
                Me._sitestartdate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetCustomerByCustZoneResult

    Private _ZoneDescription As String

    Private _Cid As Integer

    Private _CustomerName As String

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _StateCode As String

    Private _Suburb As String

    Private _PostCode As String

    Private _CustomerContactName As String

    Private _CustomerPhone As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneDescription", DbType:="NVarChar(50)")>
    Public Property ZoneDescription() As String
        Get
            Return Me._ZoneDescription
        End Get
        Set
            If (String.Equals(Me._ZoneDescription, Value) = False) Then
                Me._ZoneDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="NVarChar(3)")>
    Public Property StateCode() As String
        Get
            Return Me._StateCode
        End Get
        Set
            If (String.Equals(Me._StateCode, Value) = False) Then
                Me._StateCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>
    Public Property PostCode() As String
        Get
            Return Me._PostCode
        End Get
        Set
            If (String.Equals(Me._PostCode, Value) = False) Then
                Me._PostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>
    Public Property CustomerContactName() As String
        Get
            Return Me._CustomerContactName
        End Get
        Set
            If (String.Equals(Me._CustomerContactName, Value) = False) Then
                Me._CustomerContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me._CustomerPhone = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetCustomerContactDetailsReportResult

    Private _CustomerName As String

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddressLine3 As String

    Private _StateDesc As String

    Private _Suburb As String

    Private _PostCode As String

    Private _CustomerContactName As String

    Private _CustomerPhone As String

    Private _CustomerMobile As String

    Private _CustomerFax As String

    Private _CustomerComments As String

    Private _CustomerAgentName As String

    Private _CustomerRating As System.Nullable(Of Short)

    Private _CustomerRatingDesc As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(58)")>
    Public Property AddressLine3() As String
        Get
            Return Me._AddressLine3
        End Get
        Set
            If (String.Equals(Me._AddressLine3, Value) = False) Then
                Me._AddressLine3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDesc", DbType:="NVarChar(30)")>
    Public Property StateDesc() As String
        Get
            Return Me._StateDesc
        End Get
        Set
            If (String.Equals(Me._StateDesc, Value) = False) Then
                Me._StateDesc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>
    Public Property PostCode() As String
        Get
            Return Me._PostCode
        End Get
        Set
            If (String.Equals(Me._PostCode, Value) = False) Then
                Me._PostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>
    Public Property CustomerContactName() As String
        Get
            Return Me._CustomerContactName
        End Get
        Set
            If (String.Equals(Me._CustomerContactName, Value) = False) Then
                Me._CustomerContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me._CustomerPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerMobile", DbType:="NVarChar(22)")>
    Public Property CustomerMobile() As String
        Get
            Return Me._CustomerMobile
        End Get
        Set
            If (String.Equals(Me._CustomerMobile, Value) = False) Then
                Me._CustomerMobile = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerFax", DbType:="NVarChar(22)")>
    Public Property CustomerFax() As String
        Get
            Return Me._CustomerFax
        End Get
        Set
            If (String.Equals(Me._CustomerFax, Value) = False) Then
                Me._CustomerFax = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerComments", DbType:="NVarChar(MAX)")>
    Public Property CustomerComments() As String
        Get
            Return Me._CustomerComments
        End Get
        Set
            If (String.Equals(Me._CustomerComments, Value) = False) Then
                Me._CustomerComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentName", DbType:="NVarChar(50)")>
    Public Property CustomerAgentName() As String
        Get
            Return Me._CustomerAgentName
        End Get
        Set
            If (String.Equals(Me._CustomerAgentName, Value) = False) Then
                Me._CustomerAgentName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>
    Public Property CustomerRating() As System.Nullable(Of Short)
        Get
            Return Me._CustomerRating
        End Get
        Set
            If (Me._CustomerRating.Equals(Value) = False) Then
                Me._CustomerRating = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingDesc", DbType:="NVarChar(50)")>
    Public Property CustomerRatingDesc() As String
        Get
            Return Me._CustomerRatingDesc
        End Get
        Set
            If (String.Equals(Me._CustomerRatingDesc, Value) = False) Then
                Me._CustomerRatingDesc = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSitesWithNoContractsReportResult

    Private _CustomerName As String

    Private _SiteName As String

    Private _SitePeriod As System.Nullable(Of Integer)

    Private _SiteStartDate As System.Nullable(Of Date)

    Private _ContractPeriodDesc As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitePeriod", DbType:="Int")>
    Public Property SitePeriod() As System.Nullable(Of Integer)
        Get
            Return Me._SitePeriod
        End Get
        Set
            If (Me._SitePeriod.Equals(Value) = False) Then
                Me._SitePeriod = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>
    Public Property SiteStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteStartDate
        End Get
        Set
            If (Me._SiteStartDate.Equals(Value) = False) Then
                Me._SiteStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodDesc", DbType:="NVarChar(50)")>
    Public Property ContractPeriodDesc() As String
        Get
            Return Me._ContractPeriodDesc
        End Get
        Set
            If (String.Equals(Me._ContractPeriodDesc, Value) = False) Then
                Me._ContractPeriodDesc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetInvoiceBasicCheckReportResult

    Private _CustomerName As String

    Private _SiteName As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _Frequency As String

    Private _InvoiceCommencing As System.Nullable(Of Date)

    Private _MonthDescription As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>
    Public Property Frequency() As String
        Get
            Return Me._Frequency
        End Get
        Set
            If (String.Equals(Me._Frequency, Value) = False) Then
                Me._Frequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>
    Public Property InvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceCommencing
        End Get
        Set
            If (Me._InvoiceCommencing.Equals(Value) = False) Then
                Me._InvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthDescription", DbType:="NVarChar(15)")>
    Public Property MonthDescription() As String
        Get
            Return Me._MonthDescription
        End Get
        Set
            If (String.Equals(Me._MonthDescription, Value) = False) Then
                Me._MonthDescription = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetMYOBCustomerInvoiceReportResult

    Private _CustomerName As String

    Private _CustomerNumber As String

    Private _InvoiceNumber As String

    Private _InvoiceDate As System.Nullable(Of Date)

    Private _CustomerPurchaseOrderNumber As String

    Private _Quantity As System.Nullable(Of Short)

    Private _ProductCode As String

    Private _ProductDescription As String

    Private _InvoiceAmountExGST As System.Nullable(Of Single)

    Private _InvoiceAmountIncGST As System.Nullable(Of Single)

    Private _GSTAmount As System.Nullable(Of Single)

    Private _SiteName As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerNumber", DbType:="NVarChar(50)")>
    Public Property CustomerNumber() As String
        Get
            Return Me._CustomerNumber
        End Get
        Set
            If (String.Equals(Me._CustomerNumber, Value) = False) Then
                Me._CustomerNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceNumber", DbType:="NVarChar(50)")>
    Public Property InvoiceNumber() As String
        Get
            Return Me._InvoiceNumber
        End Get
        Set
            If (String.Equals(Me._InvoiceNumber, Value) = False) Then
                Me._InvoiceNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceDate", DbType:="DateTime")>
    Public Property InvoiceDate() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceDate
        End Get
        Set
            If (Me._InvoiceDate.Equals(Value) = False) Then
                Me._InvoiceDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPurchaseOrderNumber", DbType:="NVarChar(50)")>
    Public Property CustomerPurchaseOrderNumber() As String
        Get
            Return Me._CustomerPurchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._CustomerPurchaseOrderNumber, Value) = False) Then
                Me._CustomerPurchaseOrderNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt")>
    Public Property Quantity() As System.Nullable(Of Short)
        Get
            Return Me._Quantity
        End Get
        Set
            If (Me._Quantity.Equals(Value) = False) Then
                Me._Quantity = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50)")>
    Public Property ProductCode() As String
        Get
            Return Me._ProductCode
        End Get
        Set
            If (String.Equals(Me._ProductCode, Value) = False) Then
                Me._ProductCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductDescription", DbType:="NVarChar(200)")>
    Public Property ProductDescription() As String
        Get
            Return Me._ProductDescription
        End Get
        Set
            If (String.Equals(Me._ProductDescription, Value) = False) Then
                Me._ProductDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountExGST", DbType:="Real")>
    Public Property InvoiceAmountExGST() As System.Nullable(Of Single)
        Get
            Return Me._InvoiceAmountExGST
        End Get
        Set
            If (Me._InvoiceAmountExGST.Equals(Value) = False) Then
                Me._InvoiceAmountExGST = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountIncGST", DbType:="Real")>
    Public Property InvoiceAmountIncGST() As System.Nullable(Of Single)
        Get
            Return Me._InvoiceAmountIncGST
        End Get
        Set
            If (Me._InvoiceAmountIncGST.Equals(Value) = False) Then
                Me._InvoiceAmountIncGST = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GSTAmount", DbType:="Real")>
    Public Property GSTAmount() As System.Nullable(Of Single)
        Get
            Return Me._GSTAmount
        End Get
        Set
            If (Me._GSTAmount.Equals(Value) = False) Then
                Me._GSTAmount = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGainsAndLossesReportResult

    Private _SalesPerson As String

    Private _Site As String

    Private _EffectiveDate As System.Nullable(Of Date)

    Private _ServiceCode As String

    Private _ServiceDescription As String

    Private _OldServiceUnits As System.Nullable(Of Double)

    Private _NewServiceUnits As System.Nullable(Of Double)

    Private _UnitsDiff As System.Nullable(Of Double)

    Private _UnitType As String

    Private _OldPerAnnumCharge As System.Nullable(Of Double)

    Private _NewPerAnnumCharge As System.Nullable(Of Double)

    Private _PADiff As System.Nullable(Of Double)

    Private _PAType As String

    Private _ChangeDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>
    Public Property SalesPerson() As String
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (String.Equals(Me._SalesPerson, Value) = False) Then
                Me._SalesPerson = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>
    Public Property Site() As String
        Get
            Return Me._Site
        End Get
        Set
            If (String.Equals(Me._Site, Value) = False) Then
                Me._Site = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="Date")>
    Public Property EffectiveDate() As System.Nullable(Of Date)
        Get
            Return Me._EffectiveDate
        End Get
        Set
            If (Me._EffectiveDate.Equals(Value) = False) Then
                Me._EffectiveDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me._ServiceCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServiceUnits", DbType:="Float")>
    Public Property OldServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._OldServiceUnits
        End Get
        Set
            If (Me._OldServiceUnits.Equals(Value) = False) Then
                Me._OldServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServiceUnits", DbType:="Float")>
    Public Property NewServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._NewServiceUnits
        End Get
        Set
            If (Me._NewServiceUnits.Equals(Value) = False) Then
                Me._NewServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsDiff", DbType:="Float")>
    Public Property UnitsDiff() As System.Nullable(Of Double)
        Get
            Return Me._UnitsDiff
        End Get
        Set
            If (Me._UnitsDiff.Equals(Value) = False) Then
                Me._UnitsDiff = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitType", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)>
    Public Property UnitType() As String
        Get
            Return Me._UnitType
        End Get
        Set
            If (String.Equals(Me._UnitType, Value) = False) Then
                Me._UnitType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPerAnnumCharge", DbType:="Float")>
    Public Property OldPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._OldPerAnnumCharge
        End Get
        Set
            If (Me._OldPerAnnumCharge.Equals(Value) = False) Then
                Me._OldPerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPerAnnumCharge", DbType:="Float")>
    Public Property NewPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._NewPerAnnumCharge
        End Get
        Set
            If (Me._NewPerAnnumCharge.Equals(Value) = False) Then
                Me._NewPerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PADiff", DbType:="Float")>
    Public Property PADiff() As System.Nullable(Of Double)
        Get
            Return Me._PADiff
        End Get
        Set
            If (Me._PADiff.Equals(Value) = False) Then
                Me._PADiff = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAType", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)>
    Public Property PAType() As String
        Get
            Return Me._PAType
        End Get
        Set
            If (String.Equals(Me._PAType, Value) = False) Then
                Me._PAType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>
    Public Property ChangeDate() As System.Nullable(Of Date)
        Get
            Return Me._ChangeDate
        End Get
        Set
            If (Me._ChangeDate.Equals(Value) = False) Then
                Me._ChangeDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGainsAndLossesPerAnnumReportResult

    Private _SalesPerson As String

    Private _Site As String

    Private _EffectiveDate As System.Nullable(Of Date)

    Private _ServiceCode As String

    Private _ServiceDescription As String

    Private _OldServiceUnits As System.Nullable(Of Double)

    Private _NewServiceUnits As System.Nullable(Of Double)

    Private _UnitsDiff As System.Nullable(Of Double)

    Private _UnitType As String

    Private _OldPerAnnumCharge As System.Nullable(Of Double)

    Private _NewPerAnnumCharge As System.Nullable(Of Double)

    Private _PADiff As System.Nullable(Of Double)

    Private _PAType As String

    Private _ChangeDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>
    Public Property SalesPerson() As String
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (String.Equals(Me._SalesPerson, Value) = False) Then
                Me._SalesPerson = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>
    Public Property Site() As String
        Get
            Return Me._Site
        End Get
        Set
            If (String.Equals(Me._Site, Value) = False) Then
                Me._Site = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="Date")>
    Public Property EffectiveDate() As System.Nullable(Of Date)
        Get
            Return Me._EffectiveDate
        End Get
        Set
            If (Me._EffectiveDate.Equals(Value) = False) Then
                Me._EffectiveDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me._ServiceCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServiceUnits", DbType:="Float")>
    Public Property OldServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._OldServiceUnits
        End Get
        Set
            If (Me._OldServiceUnits.Equals(Value) = False) Then
                Me._OldServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServiceUnits", DbType:="Float")>
    Public Property NewServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._NewServiceUnits
        End Get
        Set
            If (Me._NewServiceUnits.Equals(Value) = False) Then
                Me._NewServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsDiff", DbType:="Float")>
    Public Property UnitsDiff() As System.Nullable(Of Double)
        Get
            Return Me._UnitsDiff
        End Get
        Set
            If (Me._UnitsDiff.Equals(Value) = False) Then
                Me._UnitsDiff = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitType", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)>
    Public Property UnitType() As String
        Get
            Return Me._UnitType
        End Get
        Set
            If (String.Equals(Me._UnitType, Value) = False) Then
                Me._UnitType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPerAnnumCharge", DbType:="Float")>
    Public Property OldPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._OldPerAnnumCharge
        End Get
        Set
            If (Me._OldPerAnnumCharge.Equals(Value) = False) Then
                Me._OldPerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPerAnnumCharge", DbType:="Float")>
    Public Property NewPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._NewPerAnnumCharge
        End Get
        Set
            If (Me._NewPerAnnumCharge.Equals(Value) = False) Then
                Me._NewPerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PADiff", DbType:="Float")>
    Public Property PADiff() As System.Nullable(Of Double)
        Get
            Return Me._PADiff
        End Get
        Set
            If (Me._PADiff.Equals(Value) = False) Then
                Me._PADiff = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAType", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)>
    Public Property PAType() As String
        Get
            Return Me._PAType
        End Get
        Set
            If (String.Equals(Me._PAType, Value) = False) Then
                Me._PAType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>
    Public Property ChangeDate() As System.Nullable(Of Date)
        Get
            Return Me._ChangeDate
        End Get
        Set
            If (Me._ChangeDate.Equals(Value) = False) Then
                Me._ChangeDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetStandardAuditReportResult

    Private _Aid As Integer

    Private _CSid As System.Nullable(Of Integer)

    Private _Cid As System.Nullable(Of Integer)

    Private _Customer As String

    Private _Site As String

    Private _OldServiceUnits As System.Nullable(Of Double)

    Private _OldServicePrice As System.Nullable(Of Double)

    Private _OldPerAnnumCharge As System.Nullable(Of Double)

    Private _NewServiceUnits As System.Nullable(Of Double)

    Private _NewServicePrice As System.Nullable(Of Double)

    Private _NewPerAnnumCharge As System.Nullable(Of Double)

    Private _ChangeReasonCode As System.Nullable(Of Integer)

    Private _User As String

    Private _ChangeDate As System.Nullable(Of Date)

    Private _ChangeTime As System.Nullable(Of Date)

    Private _EffectiveDate As System.Nullable(Of Date)

    Private _OldContractCeasedate As System.Nullable(Of Date)

    Private _NewContractCeasedate As System.Nullable(Of Date)

    Private _OldInvoiceCommencing As System.Nullable(Of Date)

    Private _NewInvoiceCommencing As System.Nullable(Of Date)

    Private _OldInvoicingFrequency As String

    Private _NewInvoicingFrequency As String

    Private _OldContractStartDate As System.Nullable(Of Date)

    Private _NewContractStartDate As System.Nullable(Of Date)

    Private _FieldType As String

    Private _OldService As String

    Private _RevenueChangeReason As String

    Private _ServiceDescription As String

    Private _ServiceCode As String

    Private _EffectiveDate1 As System.Nullable(Of Date)

    Private _InvoiceCommencing As System.Nullable(Of Date)

    Private _Frequency As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _FieldType1 As String

    Private _CustomerName As String

    Private _InvoiceMonth1 As System.Nullable(Of Integer)

    Private _InvoiceMonth2 As System.Nullable(Of Integer)

    Private _InvoiceMonth3 As System.Nullable(Of Integer)

    Private _InvoiceMonth4 As System.Nullable(Of Integer)

    Private _PurchaseOrderNumber As String

    Private _SiteCeaseDate1 As System.Nullable(Of Date)

    Private _OldService1 As String

    Private _CustormerSiteCeaseDate As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me._Aid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me._CSid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>
    Public Property Cid() As System.Nullable(Of Integer)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>
    Public Property Customer() As String
        Get
            Return Me._Customer
        End Get
        Set
            If (String.Equals(Me._Customer, Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>
    Public Property Site() As String
        Get
            Return Me._Site
        End Get
        Set
            If (String.Equals(Me._Site, Value) = False) Then
                Me._Site = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServiceUnits", DbType:="Float")>
    Public Property OldServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._OldServiceUnits
        End Get
        Set
            If (Me._OldServiceUnits.Equals(Value) = False) Then
                Me._OldServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServicePrice", DbType:="Float")>
    Public Property OldServicePrice() As System.Nullable(Of Double)
        Get
            Return Me._OldServicePrice
        End Get
        Set
            If (Me._OldServicePrice.Equals(Value) = False) Then
                Me._OldServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPerAnnumCharge", DbType:="Float")>
    Public Property OldPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._OldPerAnnumCharge
        End Get
        Set
            If (Me._OldPerAnnumCharge.Equals(Value) = False) Then
                Me._OldPerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServiceUnits", DbType:="Float")>
    Public Property NewServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._NewServiceUnits
        End Get
        Set
            If (Me._NewServiceUnits.Equals(Value) = False) Then
                Me._NewServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServicePrice", DbType:="Float")>
    Public Property NewServicePrice() As System.Nullable(Of Double)
        Get
            Return Me._NewServicePrice
        End Get
        Set
            If (Me._NewServicePrice.Equals(Value) = False) Then
                Me._NewServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPerAnnumCharge", DbType:="Float")>
    Public Property NewPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._NewPerAnnumCharge
        End Get
        Set
            If (Me._NewPerAnnumCharge.Equals(Value) = False) Then
                Me._NewPerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeReasonCode", DbType:="Int")>
    Public Property ChangeReasonCode() As System.Nullable(Of Integer)
        Get
            Return Me._ChangeReasonCode
        End Get
        Set
            If (Me._ChangeReasonCode.Equals(Value) = False) Then
                Me._ChangeReasonCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[User]", Storage:="_User", DbType:="NVarChar(50)")>
    Public Property User() As String
        Get
            Return Me._User
        End Get
        Set
            If (String.Equals(Me._User, Value) = False) Then
                Me._User = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>
    Public Property ChangeDate() As System.Nullable(Of Date)
        Get
            Return Me._ChangeDate
        End Get
        Set
            If (Me._ChangeDate.Equals(Value) = False) Then
                Me._ChangeDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeTime", DbType:="DateTime")>
    Public Property ChangeTime() As System.Nullable(Of Date)
        Get
            Return Me._ChangeTime
        End Get
        Set
            If (Me._ChangeTime.Equals(Value) = False) Then
                Me._ChangeTime = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="Date")>
    Public Property EffectiveDate() As System.Nullable(Of Date)
        Get
            Return Me._EffectiveDate
        End Get
        Set
            If (Me._EffectiveDate.Equals(Value) = False) Then
                Me._EffectiveDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractCeasedate", DbType:="Date")>
    Public Property OldContractCeasedate() As System.Nullable(Of Date)
        Get
            Return Me._OldContractCeasedate
        End Get
        Set
            If (Me._OldContractCeasedate.Equals(Value) = False) Then
                Me._OldContractCeasedate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractCeasedate", DbType:="Date")>
    Public Property NewContractCeasedate() As System.Nullable(Of Date)
        Get
            Return Me._NewContractCeasedate
        End Get
        Set
            If (Me._NewContractCeasedate.Equals(Value) = False) Then
                Me._NewContractCeasedate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoiceCommencing", DbType:="Date")>
    Public Property OldInvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._OldInvoiceCommencing
        End Get
        Set
            If (Me._OldInvoiceCommencing.Equals(Value) = False) Then
                Me._OldInvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoiceCommencing", DbType:="Date")>
    Public Property NewInvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._NewInvoiceCommencing
        End Get
        Set
            If (Me._NewInvoiceCommencing.Equals(Value) = False) Then
                Me._NewInvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoicingFrequency", DbType:="NVarChar(22)")>
    Public Property OldInvoicingFrequency() As String
        Get
            Return Me._OldInvoicingFrequency
        End Get
        Set
            If (String.Equals(Me._OldInvoicingFrequency, Value) = False) Then
                Me._OldInvoicingFrequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoicingFrequency", DbType:="NVarChar(22)")>
    Public Property NewInvoicingFrequency() As String
        Get
            Return Me._NewInvoicingFrequency
        End Get
        Set
            If (String.Equals(Me._NewInvoicingFrequency, Value) = False) Then
                Me._NewInvoicingFrequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractStartDate", DbType:="Date")>
    Public Property OldContractStartDate() As System.Nullable(Of Date)
        Get
            Return Me._OldContractStartDate
        End Get
        Set
            If (Me._OldContractStartDate.Equals(Value) = False) Then
                Me._OldContractStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractStartDate", DbType:="Date")>
    Public Property NewContractStartDate() As System.Nullable(Of Date)
        Get
            Return Me._NewContractStartDate
        End Get
        Set
            If (Me._NewContractStartDate.Equals(Value) = False) Then
                Me._NewContractStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="NVarChar(5)")>
    Public Property FieldType() As String
        Get
            Return Me._FieldType
        End Get
        Set
            If (String.Equals(Me._FieldType, Value) = False) Then
                Me._FieldType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldService", DbType:="NVarChar(50)")>
    Public Property OldService() As String
        Get
            Return Me._OldService
        End Get
        Set
            If (String.Equals(Me._OldService, Value) = False) Then
                Me._OldService = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReason", DbType:="NVarChar(50)")>
    Public Property RevenueChangeReason() As String
        Get
            Return Me._RevenueChangeReason
        End Get
        Set
            If (String.Equals(Me._RevenueChangeReason, Value) = False) Then
                Me._RevenueChangeReason = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me._ServiceCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate1", DbType:="Date")>
    Public Property EffectiveDate1() As System.Nullable(Of Date)
        Get
            Return Me._EffectiveDate1
        End Get
        Set
            If (Me._EffectiveDate1.Equals(Value) = False) Then
                Me._EffectiveDate1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>
    Public Property InvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceCommencing
        End Get
        Set
            If (Me._InvoiceCommencing.Equals(Value) = False) Then
                Me._InvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>
    Public Property Frequency() As String
        Get
            Return Me._Frequency
        End Get
        Set
            If (String.Equals(Me._Frequency, Value) = False) Then
                Me._Frequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType1", DbType:="NVarChar(5)")>
    Public Property FieldType1() As String
        Get
            Return Me._FieldType1
        End Get
        Set
            If (String.Equals(Me._FieldType1, Value) = False) Then
                Me._FieldType1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>
    Public Property InvoiceMonth1() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth1
        End Get
        Set
            If (Me._InvoiceMonth1.Equals(Value) = False) Then
                Me._InvoiceMonth1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>
    Public Property InvoiceMonth2() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth2
        End Get
        Set
            If (Me._InvoiceMonth2.Equals(Value) = False) Then
                Me._InvoiceMonth2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>
    Public Property InvoiceMonth3() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth3
        End Get
        Set
            If (Me._InvoiceMonth3.Equals(Value) = False) Then
                Me._InvoiceMonth3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>
    Public Property InvoiceMonth4() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth4
        End Get
        Set
            If (Me._InvoiceMonth4.Equals(Value) = False) Then
                Me._InvoiceMonth4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>
    Public Property PurchaseOrderNumber() As String
        Get
            Return Me._PurchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._PurchaseOrderNumber, Value) = False) Then
                Me._PurchaseOrderNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate1", DbType:="Date")>
    Public Property SiteCeaseDate1() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate1
        End Get
        Set
            If (Me._SiteCeaseDate1.Equals(Value) = False) Then
                Me._SiteCeaseDate1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldService1", DbType:="NVarChar(50)")>
    Public Property OldService1() As String
        Get
            Return Me._OldService1
        End Get
        Set
            If (String.Equals(Me._OldService1, Value) = False) Then
                Me._OldService1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustormerSiteCeaseDate", DbType:="VarChar(36)")>
    Public Property CustormerSiteCeaseDate() As String
        Get
            Return Me._CustormerSiteCeaseDate
        End Get
        Set
            If (String.Equals(Me._CustormerSiteCeaseDate, Value) = False) Then
                Me._CustormerSiteCeaseDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetAuditContractReportResult

    Private _FieldType As String

    Private _ChangeDate As System.Nullable(Of Date)

    Private _Customer As String

    Private _OldContractCeasedate As System.Nullable(Of Date)

    Private _NewContractCeasedate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="NVarChar(5)")>
    Public Property FieldType() As String
        Get
            Return Me._FieldType
        End Get
        Set
            If (String.Equals(Me._FieldType, Value) = False) Then
                Me._FieldType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>
    Public Property ChangeDate() As System.Nullable(Of Date)
        Get
            Return Me._ChangeDate
        End Get
        Set
            If (Me._ChangeDate.Equals(Value) = False) Then
                Me._ChangeDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>
    Public Property Customer() As String
        Get
            Return Me._Customer
        End Get
        Set
            If (String.Equals(Me._Customer, Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractCeasedate", DbType:="Date")>
    Public Property OldContractCeasedate() As System.Nullable(Of Date)
        Get
            Return Me._OldContractCeasedate
        End Get
        Set
            If (Me._OldContractCeasedate.Equals(Value) = False) Then
                Me._OldContractCeasedate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractCeasedate", DbType:="Date")>
    Public Property NewContractCeasedate() As System.Nullable(Of Date)
        Get
            Return Me._NewContractCeasedate
        End Get
        Set
            If (Me._NewContractCeasedate.Equals(Value) = False) Then
                Me._NewContractCeasedate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetAuditOfSiteDetailReportResult

    Private _FieldType As String

    Private _Customer As String

    Private _Site As String

    Private _OldContractCeasedate As System.Nullable(Of Date)

    Private _NewContractCeasedate As System.Nullable(Of Date)

    Private _OldInvoiceCommencing As System.Nullable(Of Date)

    Private _NewInvoiceCommencing As System.Nullable(Of Date)

    Private _OldInvoicingFrequency As String

    Private _NewInvoicingFrequency As String

    Private _OldContractStartDate As System.Nullable(Of Date)

    Private _NewContractStartDate As System.Nullable(Of Date)

    Private _ChangeDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="NVarChar(5)")>
    Public Property FieldType() As String
        Get
            Return Me._FieldType
        End Get
        Set
            If (String.Equals(Me._FieldType, Value) = False) Then
                Me._FieldType = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>
    Public Property Customer() As String
        Get
            Return Me._Customer
        End Get
        Set
            If (String.Equals(Me._Customer, Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>
    Public Property Site() As String
        Get
            Return Me._Site
        End Get
        Set
            If (String.Equals(Me._Site, Value) = False) Then
                Me._Site = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractCeasedate", DbType:="Date")>
    Public Property OldContractCeasedate() As System.Nullable(Of Date)
        Get
            Return Me._OldContractCeasedate
        End Get
        Set
            If (Me._OldContractCeasedate.Equals(Value) = False) Then
                Me._OldContractCeasedate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractCeasedate", DbType:="Date")>
    Public Property NewContractCeasedate() As System.Nullable(Of Date)
        Get
            Return Me._NewContractCeasedate
        End Get
        Set
            If (Me._NewContractCeasedate.Equals(Value) = False) Then
                Me._NewContractCeasedate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoiceCommencing", DbType:="Date")>
    Public Property OldInvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._OldInvoiceCommencing
        End Get
        Set
            If (Me._OldInvoiceCommencing.Equals(Value) = False) Then
                Me._OldInvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoiceCommencing", DbType:="Date")>
    Public Property NewInvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._NewInvoiceCommencing
        End Get
        Set
            If (Me._NewInvoiceCommencing.Equals(Value) = False) Then
                Me._NewInvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoicingFrequency", DbType:="NVarChar(22)")>
    Public Property OldInvoicingFrequency() As String
        Get
            Return Me._OldInvoicingFrequency
        End Get
        Set
            If (String.Equals(Me._OldInvoicingFrequency, Value) = False) Then
                Me._OldInvoicingFrequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoicingFrequency", DbType:="NVarChar(22)")>
    Public Property NewInvoicingFrequency() As String
        Get
            Return Me._NewInvoicingFrequency
        End Get
        Set
            If (String.Equals(Me._NewInvoicingFrequency, Value) = False) Then
                Me._NewInvoicingFrequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractStartDate", DbType:="Date")>
    Public Property OldContractStartDate() As System.Nullable(Of Date)
        Get
            Return Me._OldContractStartDate
        End Get
        Set
            If (Me._OldContractStartDate.Equals(Value) = False) Then
                Me._OldContractStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractStartDate", DbType:="Date")>
    Public Property NewContractStartDate() As System.Nullable(Of Date)
        Get
            Return Me._NewContractStartDate
        End Get
        Set
            If (Me._NewContractStartDate.Equals(Value) = False) Then
                Me._NewContractStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>
    Public Property ChangeDate() As System.Nullable(Of Date)
        Get
            Return Me._ChangeDate
        End Get
        Set
            If (Me._ChangeDate.Equals(Value) = False) Then
                Me._ChangeDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSitesBySiteZoneReportResult

    Private _Zone As String

    Private _Cid As Integer

    Private _SiteName As String

    Private _Customer As System.Nullable(Of Short)

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddressLine3 As String

    Private _Suburb As String

    Private _PostCode As System.Nullable(Of Short)

    Private _PostalAddressLine1 As String

    Private _PostalAddressLine2 As String

    Private _PostalSuburb As String

    Private _PostalPostCode As System.Nullable(Of Short)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="NVarChar(50)")>
    Public Property Zone() As String
        Get
            Return Me._Zone
        End Get
        Set
            If (String.Equals(Me._Zone, Value) = False) Then
                Me._Zone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>
    Public Property AddressLine3() As String
        Get
            Return Me._AddressLine3
        End Get
        Set
            If (String.Equals(Me._AddressLine3, Value) = False) Then
                Me._AddressLine3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>
    Public Property PostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostCode
        End Get
        Set
            If (Me._PostCode.Equals(Value) = False) Then
                Me._PostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine1() As String
        Get
            Return Me._PostalAddressLine1
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine1, Value) = False) Then
                Me._PostalAddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine2() As String
        Get
            Return Me._PostalAddressLine2
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine2, Value) = False) Then
                Me._PostalAddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(50)")>
    Public Property PostalSuburb() As String
        Get
            Return Me._PostalSuburb
        End Get
        Set
            If (String.Equals(Me._PostalSuburb, Value) = False) Then
                Me._PostalSuburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalPostCode", DbType:="SmallInt")>
    Public Property PostalPostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostalPostCode
        End Get
        Set
            If (Me._PostalPostCode.Equals(Value) = False) Then
                Me._PostalPostCode = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRunValuesReportResult

    Private _SiteName As String

    Private _Add As String

    Private _AddLastLine As String

    Private _ServiceDescription As String

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _ServiceRun As System.Nullable(Of Short)

    Private _RunDescription As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Add]", Storage:="_Add", DbType:="NVarChar(102)")>
    Public Property Add() As String
        Get
            Return Me._Add
        End Get
        Set
            If (String.Equals(Me._Add, Value) = False) Then
                Me._Add = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddLastLine", DbType:="NVarChar(67)")>
    Public Property AddLastLine() As String
        Get
            Return Me._AddLastLine
        End Get
        Set
            If (String.Equals(Me._AddLastLine, Value) = False) Then
                Me._AddLastLine = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>
    Public Property ServiceRun() As System.Nullable(Of Short)
        Get
            Return Me._ServiceRun
        End Get
        Set
            If (Me._ServiceRun.Equals(Value) = False) Then
                Me._ServiceRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me._RunDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRunValueSummaryReportResult

    Private _RunDescription As String

    Private _SumOfPerAnnumCharge As System.Nullable(Of Double)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me._RunDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfPerAnnumCharge", DbType:="Float")>
    Public Property SumOfPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._SumOfPerAnnumCharge
        End Get
        Set
            If (Me._SumOfPerAnnumCharge.Equals(Value) = False) Then
                Me._SumOfPerAnnumCharge = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRunListingReportResult

    Private _RunNUmber As System.Nullable(Of Integer)

    Private _RunNum As String

    Private _RunDescription As String

    Private _RunDriver As System.Nullable(Of Short)

    Private _DriverName As String

    Private _MondayRun As Boolean

    Private _TuesdayRun As Boolean

    Private _WednesdayRun As Boolean

    Private _ThursdayRun As Boolean

    Private _FridayRun As Boolean

    Private _SaturdayRun As Boolean

    Private _SundayRun As Boolean

    Private _InactiveRun As Boolean

    Private _Rid As Integer

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>
    Public Property RunNUmber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNUmber
        End Get
        Set
            If (Me._RunNUmber.Equals(Value) = False) Then
                Me._RunNUmber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNum", DbType:="VarChar(8)")>
    Public Property RunNum() As String
        Get
            Return Me._RunNum
        End Get
        Set
            If (String.Equals(Me._RunNum, Value) = False) Then
                Me._RunNum = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me._RunDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>
    Public Property RunDriver() As System.Nullable(Of Short)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me._RunDriver = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>
    Public Property MondayRun() As Boolean
        Get
            Return Me._MondayRun
        End Get
        Set
            If ((Me._MondayRun = Value) _
                        = False) Then
                Me._MondayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>
    Public Property TuesdayRun() As Boolean
        Get
            Return Me._TuesdayRun
        End Get
        Set
            If ((Me._TuesdayRun = Value) _
                        = False) Then
                Me._TuesdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>
    Public Property WednesdayRun() As Boolean
        Get
            Return Me._WednesdayRun
        End Get
        Set
            If ((Me._WednesdayRun = Value) _
                        = False) Then
                Me._WednesdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>
    Public Property ThursdayRun() As Boolean
        Get
            Return Me._ThursdayRun
        End Get
        Set
            If ((Me._ThursdayRun = Value) _
                        = False) Then
                Me._ThursdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>
    Public Property FridayRun() As Boolean
        Get
            Return Me._FridayRun
        End Get
        Set
            If ((Me._FridayRun = Value) _
                        = False) Then
                Me._FridayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>
    Public Property SaturdayRun() As Boolean
        Get
            Return Me._SaturdayRun
        End Get
        Set
            If ((Me._SaturdayRun = Value) _
                        = False) Then
                Me._SaturdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>
    Public Property SundayRun() As Boolean
        Get
            Return Me._SundayRun
        End Get
        Set
            If ((Me._SundayRun = Value) _
                        = False) Then
                Me._SundayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>
    Public Property InactiveRun() As Boolean
        Get
            Return Me._InactiveRun
        End Get
        Set
            If ((Me._InactiveRun = Value) _
                        = False) Then
                Me._InactiveRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>
    Public Property Rid() As Integer
        Get
            Return Me._Rid
        End Get
        Set
            If ((Me._Rid = Value) _
                        = False) Then
                Me._Rid = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRunDatesResult

    Private _RID As System.Nullable(Of Integer)

    Private _DateOfRun As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int")>
    Public Property RID() As System.Nullable(Of Integer)
        Get
            Return Me._RID
        End Get
        Set
            If (Me._RID.Equals(Value) = False) Then
                Me._RID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>
    Public Property DateOfRun() As System.Nullable(Of Date)
        Get
            Return Me._DateOfRun
        End Get
        Set
            If (Me._DateOfRun.Equals(Value) = False) Then
                Me._DateOfRun = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRunListByRunNumberReportResult

    Private _RunNUmber As System.Nullable(Of Integer)

    Private _RunNum As String

    Private _RunNo As String

    Private _RunDescription As String

    Private _RunDriver As System.Nullable(Of Short)

    Private _DriverName As String

    Private _MondayRun As Boolean

    Private _TuesdayRun As Boolean

    Private _WednesdayRun As Boolean

    Private _ThursdayRun As Boolean

    Private _FridayRun As Boolean

    Private _SaturdayRun As Boolean

    Private _SundayRun As Boolean

    Private _InactiveRun As Boolean

    Private _Rid As Integer

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>
    Public Property RunNUmber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNUmber
        End Get
        Set
            If (Me._RunNUmber.Equals(Value) = False) Then
                Me._RunNUmber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNum", DbType:="VarChar(8)")>
    Public Property RunNum() As String
        Get
            Return Me._RunNum
        End Get
        Set
            If (String.Equals(Me._RunNum, Value) = False) Then
                Me._RunNum = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNo", DbType:="VarChar(10)")>
    Public Property RunNo() As String
        Get
            Return Me._RunNo
        End Get
        Set
            If (String.Equals(Me._RunNo, Value) = False) Then
                Me._RunNo = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me._RunDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>
    Public Property RunDriver() As System.Nullable(Of Short)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me._RunDriver = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>
    Public Property MondayRun() As Boolean
        Get
            Return Me._MondayRun
        End Get
        Set
            If ((Me._MondayRun = Value) _
                        = False) Then
                Me._MondayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>
    Public Property TuesdayRun() As Boolean
        Get
            Return Me._TuesdayRun
        End Get
        Set
            If ((Me._TuesdayRun = Value) _
                        = False) Then
                Me._TuesdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>
    Public Property WednesdayRun() As Boolean
        Get
            Return Me._WednesdayRun
        End Get
        Set
            If ((Me._WednesdayRun = Value) _
                        = False) Then
                Me._WednesdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>
    Public Property ThursdayRun() As Boolean
        Get
            Return Me._ThursdayRun
        End Get
        Set
            If ((Me._ThursdayRun = Value) _
                        = False) Then
                Me._ThursdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>
    Public Property FridayRun() As Boolean
        Get
            Return Me._FridayRun
        End Get
        Set
            If ((Me._FridayRun = Value) _
                        = False) Then
                Me._FridayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>
    Public Property SaturdayRun() As Boolean
        Get
            Return Me._SaturdayRun
        End Get
        Set
            If ((Me._SaturdayRun = Value) _
                        = False) Then
                Me._SaturdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>
    Public Property SundayRun() As Boolean
        Get
            Return Me._SundayRun
        End Get
        Set
            If ((Me._SundayRun = Value) _
                        = False) Then
                Me._SundayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>
    Public Property InactiveRun() As Boolean
        Get
            Return Me._InactiveRun
        End Get
        Set
            If ((Me._InactiveRun = Value) _
                        = False) Then
                Me._InactiveRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>
    Public Property Rid() As Integer
        Get
            Return Me._Rid
        End Get
        Set
            If ((Me._Rid = Value) _
                        = False) Then
                Me._Rid = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGenerateRunSheetsDetailResult

    Private _SortOrder As String

    Private _Cid As System.Nullable(Of Integer)

    Private _SiteName As String

    Private _Add As String

    Private _Suburb As String

    Private _SiteContactName As String

    Private _SiteContactPhone As String

    Private _SiteContactMobile As String

    Private _RunDriver As System.Nullable(Of Integer)

    Private _GeneralSiteServiceComments As String

    Private _RunNumber As System.Nullable(Of Integer)

    Private _DriverName As String

    Private _RunDescription As String

    Private _Notes As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="NVarChar(12)")>
    Public Property SortOrder() As String
        Get
            Return Me._SortOrder
        End Get
        Set
            If (String.Equals(Me._SortOrder, Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>
    Public Property Cid() As System.Nullable(Of Integer)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Add]", Storage:="_Add", DbType:="NVarChar(203)")>
    Public Property Add() As String
        Get
            Return Me._Add
        End Get
        Set
            If (String.Equals(Me._Add, Value) = False) Then
                Me._Add = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>
    Public Property SiteContactName() As String
        Get
            Return Me._SiteContactName
        End Get
        Set
            If (String.Equals(Me._SiteContactName, Value) = False) Then
                Me._SiteContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>
    Public Property SiteContactPhone() As String
        Get
            Return Me._SiteContactPhone
        End Get
        Set
            If (String.Equals(Me._SiteContactPhone, Value) = False) Then
                Me._SiteContactPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>
    Public Property SiteContactMobile() As String
        Get
            Return Me._SiteContactMobile
        End Get
        Set
            If (String.Equals(Me._SiteContactMobile, Value) = False) Then
                Me._SiteContactMobile = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Int")>
    Public Property RunDriver() As System.Nullable(Of Integer)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me._RunDriver = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>
    Public Property GeneralSiteServiceComments() As String
        Get
            Return Me._GeneralSiteServiceComments
        End Get
        Set
            If (String.Equals(Me._GeneralSiteServiceComments, Value) = False) Then
                Me._GeneralSiteServiceComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNumber", DbType:="Int")>
    Public Property RunNumber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNumber
        End Get
        Set
            If (Me._RunNumber.Equals(Value) = False) Then
                Me._RunNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me._RunDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>
    Public Property Notes() As String
        Get
            Return Me._Notes
        End Get
        Set
            If (String.Equals(Me._Notes, Value) = False) Then
                Me._Notes = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGenerateRunSheetsDetailSubResult

    Private _Cid As System.Nullable(Of Integer)

    Private _CSid As System.Nullable(Of Integer)

    Private _SiteName As String

    Private _SortOrder As String

    Private _Add As String

    Private _Suburb As String

    Private _SiteContactName As String

    Private _SiteContactPhone As String

    Private _SiteContactMobile As String

    Private _ServiceDesc As String

    Private _ServiceUnits As System.Nullable(Of Double)

    Private _ServiceComments As String

    Private _RunDriver As System.Nullable(Of Integer)

    Private _DriverName As String

    Private _GeneralSiteServiceComments As String

    Private _RunNumber As System.Nullable(Of Integer)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>
    Public Property Cid() As System.Nullable(Of Integer)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me._CSid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="NVarChar(12)")>
    Public Property SortOrder() As String
        Get
            Return Me._SortOrder
        End Get
        Set
            If (String.Equals(Me._SortOrder, Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Add]", Storage:="_Add", DbType:="NVarChar(101)")>
    Public Property Add() As String
        Get
            Return Me._Add
        End Get
        Set
            If (String.Equals(Me._Add, Value) = False) Then
                Me._Add = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>
    Public Property SiteContactName() As String
        Get
            Return Me._SiteContactName
        End Get
        Set
            If (String.Equals(Me._SiteContactName, Value) = False) Then
                Me._SiteContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>
    Public Property SiteContactPhone() As String
        Get
            Return Me._SiteContactPhone
        End Get
        Set
            If (String.Equals(Me._SiteContactPhone, Value) = False) Then
                Me._SiteContactPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>
    Public Property SiteContactMobile() As String
        Get
            Return Me._SiteContactMobile
        End Get
        Set
            If (String.Equals(Me._SiteContactMobile, Value) = False) Then
                Me._SiteContactMobile = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDesc", DbType:="NVarChar(61)")>
    Public Property ServiceDesc() As String
        Get
            Return Me._ServiceDesc
        End Get
        Set
            If (String.Equals(Me._ServiceDesc, Value) = False) Then
                Me._ServiceDesc = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>
    Public Property ServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>
    Public Property ServiceComments() As String
        Get
            Return Me._ServiceComments
        End Get
        Set
            If (String.Equals(Me._ServiceComments, Value) = False) Then
                Me._ServiceComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Int")>
    Public Property RunDriver() As System.Nullable(Of Integer)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me._RunDriver = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>
    Public Property DriverName() As String
        Get
            Return Me._DriverName
        End Get
        Set
            If (String.Equals(Me._DriverName, Value) = False) Then
                Me._DriverName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>
    Public Property GeneralSiteServiceComments() As String
        Get
            Return Me._GeneralSiteServiceComments
        End Get
        Set
            If (String.Equals(Me._GeneralSiteServiceComments, Value) = False) Then
                Me._GeneralSiteServiceComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNumber", DbType:="Int")>
    Public Property RunNumber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNumber
        End Get
        Set
            If (Me._RunNumber.Equals(Value) = False) Then
                Me._RunNumber = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetTblRunsResult

    Private _RunID As System.Guid

    Private _Rid As Integer

    Private _RunNUmber As System.Nullable(Of Integer)

    Private _RunDescription As String

    Private _RunDriver As System.Nullable(Of Short)

    Private _MondayRun As Boolean

    Private _TuesdayRun As Boolean

    Private _WednesdayRun As Boolean

    Private _ThursdayRun As Boolean

    Private _FridayRun As Boolean

    Private _SaturdayRun As Boolean

    Private _SundayRun As Boolean

    Private _InactiveRun As Boolean

    Private _InactiveRun1 As Boolean

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property RunID() As System.Guid
        Get
            Return Me._RunID
        End Get
        Set
            If ((Me._RunID = Value) _
                        = False) Then
                Me._RunID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>
    Public Property Rid() As Integer
        Get
            Return Me._Rid
        End Get
        Set
            If ((Me._Rid = Value) _
                        = False) Then
                Me._Rid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>
    Public Property RunNUmber() As System.Nullable(Of Integer)
        Get
            Return Me._RunNUmber
        End Get
        Set
            If (Me._RunNUmber.Equals(Value) = False) Then
                Me._RunNUmber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>
    Public Property RunDescription() As String
        Get
            Return Me._RunDescription
        End Get
        Set
            If (String.Equals(Me._RunDescription, Value) = False) Then
                Me._RunDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>
    Public Property RunDriver() As System.Nullable(Of Short)
        Get
            Return Me._RunDriver
        End Get
        Set
            If (Me._RunDriver.Equals(Value) = False) Then
                Me._RunDriver = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>
    Public Property MondayRun() As Boolean
        Get
            Return Me._MondayRun
        End Get
        Set
            If ((Me._MondayRun = Value) _
                        = False) Then
                Me._MondayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>
    Public Property TuesdayRun() As Boolean
        Get
            Return Me._TuesdayRun
        End Get
        Set
            If ((Me._TuesdayRun = Value) _
                        = False) Then
                Me._TuesdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>
    Public Property WednesdayRun() As Boolean
        Get
            Return Me._WednesdayRun
        End Get
        Set
            If ((Me._WednesdayRun = Value) _
                        = False) Then
                Me._WednesdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>
    Public Property ThursdayRun() As Boolean
        Get
            Return Me._ThursdayRun
        End Get
        Set
            If ((Me._ThursdayRun = Value) _
                        = False) Then
                Me._ThursdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>
    Public Property FridayRun() As Boolean
        Get
            Return Me._FridayRun
        End Get
        Set
            If ((Me._FridayRun = Value) _
                        = False) Then
                Me._FridayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>
    Public Property SaturdayRun() As Boolean
        Get
            Return Me._SaturdayRun
        End Get
        Set
            If ((Me._SaturdayRun = Value) _
                        = False) Then
                Me._SaturdayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>
    Public Property SundayRun() As Boolean
        Get
            Return Me._SundayRun
        End Get
        Set
            If ((Me._SundayRun = Value) _
                        = False) Then
                Me._SundayRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>
    Public Property InactiveRun() As Boolean
        Get
            Return Me._InactiveRun
        End Get
        Set
            If ((Me._InactiveRun = Value) _
                        = False) Then
                Me._InactiveRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun1", DbType:="Bit NOT NULL")>
    Public Property InactiveRun1() As Boolean
        Get
            Return Me._InactiveRun1
        End Get
        Set
            If ((Me._InactiveRun1 = Value) _
                        = False) Then
                Me._InactiveRun1 = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSpecificDatesResult

    Private _DRid As Integer

    Private _Rid As System.Nullable(Of Integer)

    Private _DateOfRun As System.Nullable(Of Date)

    Private _DateOfRun1 As System.Nullable(Of Date)

    Private _Rid1 As System.Nullable(Of Integer)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRid", DbType:="Int NOT NULL")>
    Public Property DRid() As Integer
        Get
            Return Me._DRid
        End Get
        Set
            If ((Me._DRid = Value) _
                        = False) Then
                Me._DRid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>
    Public Property Rid() As System.Nullable(Of Integer)
        Get
            Return Me._Rid
        End Get
        Set
            If (Me._Rid.Equals(Value) = False) Then
                Me._Rid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>
    Public Property DateOfRun() As System.Nullable(Of Date)
        Get
            Return Me._DateOfRun
        End Get
        Set
            If (Me._DateOfRun.Equals(Value) = False) Then
                Me._DateOfRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun1", DbType:="DateTime")>
    Public Property DateOfRun1() As System.Nullable(Of Date)
        Get
            Return Me._DateOfRun1
        End Get
        Set
            If (Me._DateOfRun1.Equals(Value) = False) Then
                Me._DateOfRun1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid1", DbType:="Int")>
    Public Property Rid1() As System.Nullable(Of Integer)
        Get
            Return Me._Rid1
        End Get
        Set
            If (Me._Rid1.Equals(Value) = False) Then
                Me._Rid1 = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSitesAndCustomerServicesResult

    Private _CustomerServiceID As System.Guid

    Private _ID As Integer

    Private _CSid As System.Nullable(Of Integer)

    Private _CId As System.Nullable(Of Integer)

    Private _ServiceFrequencyCode As System.Nullable(Of Short)

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _ServiceRun As System.Nullable(Of Short)

    Private _ServiceComments As String

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _ServiceFrequency1 As System.Nullable(Of Short)

    Private _ServiceFrequency2 As System.Nullable(Of Short)

    Private _ServiceFrequency3 As System.Nullable(Of Short)

    Private _ServiceFrequency4 As System.Nullable(Of Short)

    Private _ServiceFrequency5 As System.Nullable(Of Short)

    Private _ServiceFrequency6 As System.Nullable(Of Short)

    Private _ServiceFrequency7 As System.Nullable(Of Short)

    Private _ServiceFrequency8 As System.Nullable(Of Short)

    Private _ServiceSortOrderCode As String

    Private _ServiceRun1 As System.Nullable(Of Short)

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServiceID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CustomerServiceID() As System.Guid
        Get
            Return Me._CustomerServiceID
        End Get
        Set
            If ((Me._CustomerServiceID = Value) _
                        = False) Then
                Me._CustomerServiceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>
    Public Property ID() As Integer
        Get
            Return Me._ID
        End Get
        Set
            If ((Me._ID = Value) _
                        = False) Then
                Me._ID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me._CSid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int")>
    Public Property CId() As System.Nullable(Of Integer)
        Get
            Return Me._CId
        End Get
        Set
            If (Me._CId.Equals(Value) = False) Then
                Me._CId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencyCode", DbType:="SmallInt")>
    Public Property ServiceFrequencyCode() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequencyCode
        End Get
        Set
            If (Me._ServiceFrequencyCode.Equals(Value) = False) Then
                Me._ServiceFrequencyCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>
    Public Property ServiceRun() As System.Nullable(Of Short)
        Get
            Return Me._ServiceRun
        End Get
        Set
            If (Me._ServiceRun.Equals(Value) = False) Then
                Me._ServiceRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>
    Public Property ServiceComments() As String
        Get
            Return Me._ServiceComments
        End Get
        Set
            If (String.Equals(Me._ServiceComments, Value) = False) Then
                Me._ServiceComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me._UnitsHaveMoreThanOneRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1", DbType:="SmallInt")>
    Public Property ServiceFrequency1() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency1
        End Get
        Set
            If (Me._ServiceFrequency1.Equals(Value) = False) Then
                Me._ServiceFrequency1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2", DbType:="SmallInt")>
    Public Property ServiceFrequency2() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency2
        End Get
        Set
            If (Me._ServiceFrequency2.Equals(Value) = False) Then
                Me._ServiceFrequency2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3", DbType:="SmallInt")>
    Public Property ServiceFrequency3() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency3
        End Get
        Set
            If (Me._ServiceFrequency3.Equals(Value) = False) Then
                Me._ServiceFrequency3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4", DbType:="SmallInt")>
    Public Property ServiceFrequency4() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency4
        End Get
        Set
            If (Me._ServiceFrequency4.Equals(Value) = False) Then
                Me._ServiceFrequency4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5", DbType:="SmallInt")>
    Public Property ServiceFrequency5() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency5
        End Get
        Set
            If (Me._ServiceFrequency5.Equals(Value) = False) Then
                Me._ServiceFrequency5 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6", DbType:="SmallInt")>
    Public Property ServiceFrequency6() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency6
        End Get
        Set
            If (Me._ServiceFrequency6.Equals(Value) = False) Then
                Me._ServiceFrequency6 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7", DbType:="SmallInt")>
    Public Property ServiceFrequency7() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency7
        End Get
        Set
            If (Me._ServiceFrequency7.Equals(Value) = False) Then
                Me._ServiceFrequency7 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8", DbType:="SmallInt")>
    Public Property ServiceFrequency8() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency8
        End Get
        Set
            If (Me._ServiceFrequency8.Equals(Value) = False) Then
                Me._ServiceFrequency8 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceSortOrderCode", DbType:="NVarChar(12)")>
    Public Property ServiceSortOrderCode() As String
        Get
            Return Me._ServiceSortOrderCode
        End Get
        Set
            If (String.Equals(Me._ServiceSortOrderCode, Value) = False) Then
                Me._ServiceSortOrderCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun1", DbType:="SmallInt")>
    Public Property ServiceRun1() As System.Nullable(Of Short)
        Get
            Return Me._ServiceRun1
        End Get
        Set
            If (Me._ServiceRun1.Equals(Value) = False) Then
                Me._ServiceRun1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGenerateRunSheetSummaryResult

    Private _ServiceCode As String

    Private _ServiceDescription As String

    Private _SumOfServiceUnits As System.Nullable(Of Double)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me._ServiceCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfServiceUnits", DbType:="Float")>
    Public Property SumOfServiceUnits() As System.Nullable(Of Double)
        Get
            Return Me._SumOfServiceUnits
        End Get
        Set
            If (Me._SumOfServiceUnits.Equals(Value) = False) Then
                Me._SumOfServiceUnits = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetIndustryGroupResult

    Private _IndustryID As System.Guid

    Private _Aid As Integer

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _IndustryDescription As String

    Private _SortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property IndustryID() As System.Guid
        Get
            Return Me._IndustryID
        End Get
        Set
            If ((Me._IndustryID = Value) _
                        = False) Then
                Me._IndustryID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me._Aid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryDescription", DbType:="NVarChar(50)")>
    Public Property IndustryDescription() As String
        Get
            Return Me._IndustryDescription
        End Get
        Set
            If (String.Equals(Me._IndustryDescription, Value) = False) Then
                Me._IndustryDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>
    Public Property SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._SortOrder
        End Get
        Set
            If (Me._SortOrder.Equals(Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetPreviousInvoiceSummaryReportResult

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _CustomerName As String

    Private _SumOfAnnualPriceExGST As System.Nullable(Of Double)

    Private _SumOfInvoiceAmountExGST As System.Nullable(Of Double)

    Private _SumOfGSTAmount As System.Nullable(Of Double)

    Private _SumOfInvoiceAmountIncGST As System.Nullable(Of Double)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me._ApplicationId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfAnnualPriceExGST", DbType:="Float")>
    Public Property SumOfAnnualPriceExGST() As System.Nullable(Of Double)
        Get
            Return Me._SumOfAnnualPriceExGST
        End Get
        Set
            If (Me._SumOfAnnualPriceExGST.Equals(Value) = False) Then
                Me._SumOfAnnualPriceExGST = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfInvoiceAmountExGST", DbType:="Float")>
    Public Property SumOfInvoiceAmountExGST() As System.Nullable(Of Double)
        Get
            Return Me._SumOfInvoiceAmountExGST
        End Get
        Set
            If (Me._SumOfInvoiceAmountExGST.Equals(Value) = False) Then
                Me._SumOfInvoiceAmountExGST = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfGSTAmount", DbType:="Float")>
    Public Property SumOfGSTAmount() As System.Nullable(Of Double)
        Get
            Return Me._SumOfGSTAmount
        End Get
        Set
            If (Me._SumOfGSTAmount.Equals(Value) = False) Then
                Me._SumOfGSTAmount = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfInvoiceAmountIncGST", DbType:="Float")>
    Public Property SumOfInvoiceAmountIncGST() As System.Nullable(Of Double)
        Get
            Return Me._SumOfInvoiceAmountIncGST
        End Get
        Set
            If (Me._SumOfInvoiceAmountIncGST.Equals(Value) = False) Then
                Me._SumOfInvoiceAmountIncGST = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetMYOBFileListResult

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _MYOBCustomerNumber As String

    Private _SiteId As Integer

    Private _CustomerName As String

    Private _SiteName As String

    Private _InvoiceCommencing As System.Nullable(Of Date)

    Private _InvoiceFrequency As System.Nullable(Of Integer)

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _InvoiceAddress As String

    Private _InvoiceAddress2 As String

    Private _CSid As System.Nullable(Of Integer)

    Private _PurchaseOrderNumber As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _SiteName1 As String

    Private _SeparateInvoice As Boolean

    Private _InvoiceMonth1 As System.Nullable(Of Integer)

    Private _InvoiceMonth2 As System.Nullable(Of Integer)

    Private _InvoiceMonth3 As System.Nullable(Of Integer)

    Private _InvoiceMonth4 As System.Nullable(Of Integer)

    Private _chkSitesExcludeFuelLevy As Boolean

    Private _chkCustomerExcludeFuelLevy As Boolean

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>
    Public Property MYOBCustomerNumber() As String
        Get
            Return Me._MYOBCustomerNumber
        End Get
        Set
            If (String.Equals(Me._MYOBCustomerNumber, Value) = False) Then
                Me._MYOBCustomerNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteId", DbType:="Int NOT NULL")>
    Public Property SiteId() As Integer
        Get
            Return Me._SiteId
        End Get
        Set
            If ((Me._SiteId = Value) _
                        = False) Then
                Me._SiteId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>
    Public Property InvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceCommencing
        End Get
        Set
            If (Me._InvoiceCommencing.Equals(Value) = False) Then
                Me._InvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequency", DbType:="Int")>
    Public Property InvoiceFrequency() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceFrequency
        End Get
        Set
            If (Me._InvoiceFrequency.Equals(Value) = False) Then
                Me._InvoiceFrequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me._UnitsHaveMoreThanOneRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAddress", DbType:="NVarChar(150)")>
    Public Property InvoiceAddress() As String
        Get
            Return Me._InvoiceAddress
        End Get
        Set
            If (String.Equals(Me._InvoiceAddress, Value) = False) Then
                Me._InvoiceAddress = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAddress2", DbType:="NVarChar(67)")>
    Public Property InvoiceAddress2() As String
        Get
            Return Me._InvoiceAddress2
        End Get
        Set
            If (String.Equals(Me._InvoiceAddress2, Value) = False) Then
                Me._InvoiceAddress2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me._CSid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>
    Public Property PurchaseOrderNumber() As String
        Get
            Return Me._PurchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._PurchaseOrderNumber, Value) = False) Then
                Me._PurchaseOrderNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName1", DbType:="NVarChar(50)")>
    Public Property SiteName1() As String
        Get
            Return Me._SiteName1
        End Get
        Set
            If (String.Equals(Me._SiteName1, Value) = False) Then
                Me._SiteName1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeparateInvoice", DbType:="Bit NOT NULL")>
    Public Property SeparateInvoice() As Boolean
        Get
            Return Me._SeparateInvoice
        End Get
        Set
            If ((Me._SeparateInvoice = Value) _
                        = False) Then
                Me._SeparateInvoice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>
    Public Property InvoiceMonth1() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth1
        End Get
        Set
            If (Me._InvoiceMonth1.Equals(Value) = False) Then
                Me._InvoiceMonth1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>
    Public Property InvoiceMonth2() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth2
        End Get
        Set
            If (Me._InvoiceMonth2.Equals(Value) = False) Then
                Me._InvoiceMonth2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>
    Public Property InvoiceMonth3() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth3
        End Get
        Set
            If (Me._InvoiceMonth3.Equals(Value) = False) Then
                Me._InvoiceMonth3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>
    Public Property InvoiceMonth4() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth4
        End Get
        Set
            If (Me._InvoiceMonth4.Equals(Value) = False) Then
                Me._InvoiceMonth4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkSitesExcludeFuelLevy", DbType:="Bit NOT NULL")>
    Public Property chkSitesExcludeFuelLevy() As Boolean
        Get
            Return Me._chkSitesExcludeFuelLevy
        End Get
        Set
            If ((Me._chkSitesExcludeFuelLevy = Value) _
                        = False) Then
                Me._chkSitesExcludeFuelLevy = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkCustomerExcludeFuelLevy", DbType:="Bit NOT NULL")>
    Public Property chkCustomerExcludeFuelLevy() As Boolean
        Get
            Return Me._chkCustomerExcludeFuelLevy
        End Get
        Set
            If ((Me._chkCustomerExcludeFuelLevy = Value) _
                        = False) Then
                Me._chkCustomerExcludeFuelLevy = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSiteListReportResult

    Private _Customer As System.Nullable(Of Short)

    Private _CustomerName As String

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _SiteID As System.Guid

    Private _SiteName As String

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddressLine3 As String

    Private _AddressLine4 As String

    Private _SubStatePC As String

    Private _SiteContactName As String

    Private _SiteContactPhone As String

    Private _SiteContactFax As String

    Private _SiteContactMobile As String

    Private _SiteContactEmail As String

    Private _Cid As Integer

    Private _PostalAddressLine1 As String

    Private _PostalAddressLine2 As String

    Private _PostalSubStatePC As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property SiteID() As System.Guid
        Get
            Return Me._SiteID
        End Get
        Set
            If ((Me._SiteID = Value) _
                        = False) Then
                Me._SiteID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>
    Public Property AddressLine3() As String
        Get
            Return Me._AddressLine3
        End Get
        Set
            If (String.Equals(Me._AddressLine3, Value) = False) Then
                Me._AddressLine3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(50)")>
    Public Property AddressLine4() As String
        Get
            Return Me._AddressLine4
        End Get
        Set
            If (String.Equals(Me._AddressLine4, Value) = False) Then
                Me._AddressLine4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubStatePC", DbType:="NVarChar(87)")>
    Public Property SubStatePC() As String
        Get
            Return Me._SubStatePC
        End Get
        Set
            If (String.Equals(Me._SubStatePC, Value) = False) Then
                Me._SubStatePC = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>
    Public Property SiteContactName() As String
        Get
            Return Me._SiteContactName
        End Get
        Set
            If (String.Equals(Me._SiteContactName, Value) = False) Then
                Me._SiteContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>
    Public Property SiteContactPhone() As String
        Get
            Return Me._SiteContactPhone
        End Get
        Set
            If (String.Equals(Me._SiteContactPhone, Value) = False) Then
                Me._SiteContactPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactFax", DbType:="NVarChar(50)")>
    Public Property SiteContactFax() As String
        Get
            Return Me._SiteContactFax
        End Get
        Set
            If (String.Equals(Me._SiteContactFax, Value) = False) Then
                Me._SiteContactFax = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>
    Public Property SiteContactMobile() As String
        Get
            Return Me._SiteContactMobile
        End Get
        Set
            If (String.Equals(Me._SiteContactMobile, Value) = False) Then
                Me._SiteContactMobile = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactEmail", DbType:="NVarChar(50)")>
    Public Property SiteContactEmail() As String
        Get
            Return Me._SiteContactEmail
        End Get
        Set
            If (String.Equals(Me._SiteContactEmail, Value) = False) Then
                Me._SiteContactEmail = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine1() As String
        Get
            Return Me._PostalAddressLine1
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine1, Value) = False) Then
                Me._PostalAddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine2() As String
        Get
            Return Me._PostalAddressLine2
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine2, Value) = False) Then
                Me._PostalAddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSubStatePC", DbType:="NVarChar(88)")>
    Public Property PostalSubStatePC() As String
        Get
            Return Me._PostalSubStatePC
        End Get
        Set
            If (String.Equals(Me._PostalSubStatePC, Value) = False) Then
                Me._PostalSubStatePC = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetIncludeServiceInformationReportResult

    Private _applicationid As System.Nullable(Of System.Guid)

    Private _Cid As System.Nullable(Of Integer)

    Private _ServiceCode As String

    Private _ServiceDescription As String

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _CSid As System.Nullable(Of Integer)

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _Customer As System.Nullable(Of Short)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_applicationid", DbType:="UniqueIdentifier")>
    Public Property applicationid() As System.Nullable(Of System.Guid)
        Get
            Return Me._applicationid
        End Get
        Set
            If (Me._applicationid.Equals(Value) = False) Then
                Me._applicationid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>
    Public Property Cid() As System.Nullable(Of Integer)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>
    Public Property ServiceCode() As String
        Get
            Return Me._ServiceCode
        End Get
        Set
            If (String.Equals(Me._ServiceCode, Value) = False) Then
                Me._ServiceCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me._CSid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me._UnitsHaveMoreThanOneRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetAnnualAnalysisReportResult

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _Frequency As String

    Private _CustomerName As String

    Private _Suburb As String

    Private _CustomerRating As System.Nullable(Of Short)

    Private _SiteName As String

    Private _ServiceDescription As String

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _SiteContractExpiry As System.Nullable(Of Date)

    Private _SiteCeaseReason As System.Nullable(Of Integer)

    Private _SiteStartDate As System.Nullable(Of Date)

    Private _CeaseReasonDescription As String

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _IndustryGroup As System.Nullable(Of Short)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>
    Public Property Frequency() As String
        Get
            Return Me._Frequency
        End Get
        Set
            If (String.Equals(Me._Frequency, Value) = False) Then
                Me._Frequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>
    Public Property CustomerRating() As System.Nullable(Of Short)
        Get
            Return Me._CustomerRating
        End Get
        Set
            If (Me._CustomerRating.Equals(Value) = False) Then
                Me._CustomerRating = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>
    Public Property SiteContractExpiry() As System.Nullable(Of Date)
        Get
            Return Me._SiteContractExpiry
        End Get
        Set
            If (Me._SiteContractExpiry.Equals(Value) = False) Then
                Me._SiteContractExpiry = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseReason", DbType:="Int")>
    Public Property SiteCeaseReason() As System.Nullable(Of Integer)
        Get
            Return Me._SiteCeaseReason
        End Get
        Set
            If (Me._SiteCeaseReason.Equals(Value) = False) Then
                Me._SiteCeaseReason = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>
    Public Property SiteStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteStartDate
        End Get
        Set
            If (Me._SiteStartDate.Equals(Value) = False) Then
                Me._SiteStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonDescription", DbType:="NVarChar(50)")>
    Public Property CeaseReasonDescription() As String
        Get
            Return Me._CeaseReasonDescription
        End Get
        Set
            If (String.Equals(Me._CeaseReasonDescription, Value) = False) Then
                Me._CeaseReasonDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroup", DbType:="SmallInt")>
    Public Property IndustryGroup() As System.Nullable(Of Short)
        Get
            Return Me._IndustryGroup
        End Get
        Set
            If (Me._IndustryGroup.Equals(Value) = False) Then
                Me._IndustryGroup = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRevenueReportByZoneResult

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _AreaDescription As String

    Private _CustomerName As String

    Private _CustomerContactName As String

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddLine2 As String

    Private _SuburbLine As String

    Private _CustomerPhone As String

    Private _Cid As Integer

    Private _Zone As System.Nullable(Of Integer)

    Private _Suburb As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>
    Public Property AreaDescription() As String
        Get
            Return Me._AreaDescription
        End Get
        Set
            If (String.Equals(Me._AreaDescription, Value) = False) Then
                Me._AreaDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>
    Public Property CustomerContactName() As String
        Get
            Return Me._CustomerContactName
        End Get
        Set
            If (String.Equals(Me._CustomerContactName, Value) = False) Then
                Me._CustomerContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddLine2", DbType:="NVarChar(50)")>
    Public Property AddLine2() As String
        Get
            Return Me._AddLine2
        End Get
        Set
            If (String.Equals(Me._AddLine2, Value) = False) Then
                Me._AddLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SuburbLine", DbType:="NVarChar(31)")>
    Public Property SuburbLine() As String
        Get
            Return Me._SuburbLine
        End Get
        Set
            If (String.Equals(Me._SuburbLine, Value) = False) Then
                Me._SuburbLine = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>
    Public Property CustomerPhone() As String
        Get
            Return Me._CustomerPhone
        End Get
        Set
            If (String.Equals(Me._CustomerPhone, Value) = False) Then
                Me._CustomerPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>
    Public Property Zone() As System.Nullable(Of Integer)
        Get
            Return Me._Zone
        End Get
        Set
            If (Me._Zone.Equals(Value) = False) Then
                Me._Zone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSalesReportSuburbResult

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _Customer As System.Nullable(Of Short)

    Private _Cid As Integer

    Private _ServiceDescription As String

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _SiteName As String

    Private _UnitsHaveMoreThanOneRun As System.Nullable(Of Boolean)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me._ApplicationId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit")>
    Public Property UnitsHaveMoreThanOneRun() As System.Nullable(Of Boolean)
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If (Me._UnitsHaveMoreThanOneRun.Equals(Value) = False) Then
                Me._UnitsHaveMoreThanOneRun = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetContractCeaseReasonsResult

    Private _CeaseReasonID As System.Guid

    Private _Aid As Integer

    Private _CeaseReasonDescription As String

    Private _SortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CeaseReasonID() As System.Guid
        Get
            Return Me._CeaseReasonID
        End Get
        Set
            If ((Me._CeaseReasonID = Value) _
                        = False) Then
                Me._CeaseReasonID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me._Aid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonDescription", DbType:="NVarChar(50)")>
    Public Property CeaseReasonDescription() As String
        Get
            Return Me._CeaseReasonDescription
        End Get
        Set
            If (String.Equals(Me._CeaseReasonDescription, Value) = False) Then
                Me._CeaseReasonDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>
    Public Property SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._SortOrder
        End Get
        Set
            If (Me._SortOrder.Equals(Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetPreviousSupplierResult

    Private _PreviousSupplierID As System.Guid

    Private _Aid As Integer

    Private _PreviousSupplier As String

    Private _SortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property PreviousSupplierID() As System.Guid
        Get
            Return Me._PreviousSupplierID
        End Get
        Set
            If ((Me._PreviousSupplierID = Value) _
                        = False) Then
                Me._PreviousSupplierID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me._Aid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="NVarChar(50)")>
    Public Property PreviousSupplier() As String
        Get
            Return Me._PreviousSupplier
        End Get
        Set
            If (String.Equals(Me._PreviousSupplier, Value) = False) Then
                Me._PreviousSupplier = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>
    Public Property SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._SortOrder
        End Get
        Set
            If (Me._SortOrder.Equals(Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetFortNightlyCyclesResult

    Private _FortnightlyCyclesID As System.Guid

    Private _Aid As Integer

    Private _CycleDescription As String

    Private _SortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FortnightlyCyclesID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property FortnightlyCyclesID() As System.Guid
        Get
            Return Me._FortnightlyCyclesID
        End Get
        Set
            If ((Me._FortnightlyCyclesID = Value) _
                        = False) Then
                Me._FortnightlyCyclesID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>
    Public Property Aid() As Integer
        Get
            Return Me._Aid
        End Get
        Set
            If ((Me._Aid = Value) _
                        = False) Then
                Me._Aid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CycleDescription", DbType:="NVarChar(50)")>
    Public Property CycleDescription() As String
        Get
            Return Me._CycleDescription
        End Get
        Set
            If (String.Equals(Me._CycleDescription, Value) = False) Then
                Me._CycleDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>
    Public Property SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._SortOrder
        End Get
        Set
            If (Me._SortOrder.Equals(Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetRevenueChangeReasonResult

    Private _RevenueChangeReasonID As System.Guid

    Private _Rid As Integer

    Private _RevenueChangeReason As String

    Private _SortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReasonID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property RevenueChangeReasonID() As System.Guid
        Get
            Return Me._RevenueChangeReasonID
        End Get
        Set
            If ((Me._RevenueChangeReasonID = Value) _
                        = False) Then
                Me._RevenueChangeReasonID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>
    Public Property Rid() As Integer
        Get
            Return Me._Rid
        End Get
        Set
            If ((Me._Rid = Value) _
                        = False) Then
                Me._Rid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReason", DbType:="NVarChar(50)")>
    Public Property RevenueChangeReason() As String
        Get
            Return Me._RevenueChangeReason
        End Get
        Set
            If (String.Equals(Me._RevenueChangeReason, Value) = False) Then
                Me._RevenueChangeReason = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>
    Public Property SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._SortOrder
        End Get
        Set
            If (Me._SortOrder.Equals(Value) = False) Then
                Me._SortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetPerAnnumValuesReportResult

    Private _ApplicationID As System.Nullable(Of System.Guid)

    Private _CustomerName As String

    Private _SumOfPerAnnumCharge As System.Nullable(Of Double)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>
    Public Property ApplicationID() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationID
        End Get
        Set
            If (Me._ApplicationID.Equals(Value) = False) Then
                Me._ApplicationID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfPerAnnumCharge", DbType:="Float")>
    Public Property SumOfPerAnnumCharge() As System.Nullable(Of Double)
        Get
            Return Me._SumOfPerAnnumCharge
        End Get
        Set
            If (Me._SumOfPerAnnumCharge.Equals(Value) = False) Then
                Me._SumOfPerAnnumCharge = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetGainAndLossesBySalesPersonReportResult

    Private _ApplicationId As System.Nullable(Of System.Guid)

    Private _AreaDescription As String

    Private _Suburb As String

    Private _SalesPerson As String

    Private _SiteName As String

    Private _SiteStartDate As System.Nullable(Of Date)

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _status As String

    Private _ServiceDescription As String

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>
    Public Property ApplicationId() As System.Nullable(Of System.Guid)
        Get
            Return Me._ApplicationId
        End Get
        Set
            If (Me._ApplicationId.Equals(Value) = False) Then
                Me._ApplicationId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>
    Public Property AreaDescription() As String
        Get
            Return Me._AreaDescription
        End Get
        Set
            If (String.Equals(Me._AreaDescription, Value) = False) Then
                Me._AreaDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>
    Public Property SalesPerson() As String
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (String.Equals(Me._SalesPerson, Value) = False) Then
                Me._SalesPerson = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>
    Public Property SiteStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteStartDate
        End Get
        Set
            If (Me._SiteStartDate.Equals(Value) = False) Then
                Me._SiteStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(4) NOT NULL", CanBeNull:=False)>
    Public Property status() As String
        Get
            Return Me._status
        End Get
        Set
            If (String.Equals(Me._status, Value) = False) Then
                Me._status = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>
    Public Property ServiceDescription() As String
        Get
            Return Me._ServiceDescription
        End Get
        Set
            If (String.Equals(Me._ServiceDescription, Value) = False) Then
                Me._ServiceDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetSitesResult

    Private _SiteID As System.Guid

    Private _Cid As Integer

    Private _SiteName As String

    Private _Customer As System.Nullable(Of Short)

    Private _AddressLine1 As String

    Private _AddressLine2 As String

    Private _AddressLine3 As String

    Private _AddressLine4 As String

    Private _Suburb As String

    Private _State As String

    Private _PostCode As System.Nullable(Of Short)

    Private _PhoneNo As String

    Private _FaxNo As String

    Private _SiteContactName As String

    Private _SiteContactPhone As String

    Private _SiteContactFax As String

    Private _SiteContactMobile As String

    Private _SiteContactEmail As String

    Private _PostalAddressLine1 As String

    Private _PostalAddressLine2 As String

    Private _PostalSuburb As String

    Private _PostalState As String

    Private _PostalPostCode As System.Nullable(Of Short)

    Private _SiteStartDate As System.Nullable(Of Date)

    Private _SitePeriod As System.Nullable(Of Integer)

    Private _SiteContractExpiry As System.Nullable(Of Date)

    Private _SiteCeaseDate As System.Nullable(Of Date)

    Private _SiteCeaseReason As System.Nullable(Of Integer)

    Private _InvoiceFrequency As System.Nullable(Of Integer)

    Private _InvoiceCommencing As System.Nullable(Of Date)

    Private _IndustryGroup As System.Nullable(Of Short)

    Private _PreviousSupplier As System.Nullable(Of Short)

    Private _LostBusinessTo As System.Nullable(Of Short)

    Private _SalesPerson As System.Nullable(Of Short)

    Private _InitialServiceAgreementNo As String

    Private _InvoiceMonth1 As System.Nullable(Of Integer)

    Private _InvoiceMonth2 As System.Nullable(Of Integer)

    Private _InvoiceMonth3 As System.Nullable(Of Integer)

    Private _InvoiceMonth4 As System.Nullable(Of Integer)

    Private _GeneralSiteServiceComments As String

    Private _TotalUnits As System.Nullable(Of Double)

    Private _TotalAmount As System.Nullable(Of Double)

    Private _Zone As System.Nullable(Of Integer)

    Private _SeparateInvoice As Boolean

    Private _PurchaseOrderNumber As String

    Private _chkSitesExcludeFuelLevy As Boolean

    Private _cmbRateIncrease As System.Nullable(Of Short)

    Private _ZoneSortOrder As System.Nullable(Of Long)

    Private _StateSortOrder As System.Nullable(Of Long)

    Private _CustomerSortOrder As System.Nullable(Of Long)

    Private _IndustrySortOrder As System.Nullable(Of Long)

    Private _PreviousSupplierSortOrder As System.Nullable(Of Long)

    Private _SalesPersonSortOrder As System.Nullable(Of Long)

    Private _InitialContractPeriodSortOrder As System.Nullable(Of Long)

    Private _ContractCeaseReasonsSortOrder As System.Nullable(Of Long)

    Private _LostBusinessToSortOrder As System.Nullable(Of Long)

    Private _InvoicingFrequencySortOrder As System.Nullable(Of Long)

    Private _cmbRateIncreaseSortOrder As System.Nullable(Of Long)

    Private _CustomerName As String

    Private _CustomerRating As System.Nullable(Of Short)

    Private _CustomerRatingDesc As String

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property SiteID() As System.Guid
        Get
            Return Me._SiteID
        End Get
        Set
            If ((Me._SiteID = Value) _
                        = False) Then
                Me._SiteID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>
    Public Property Cid() As Integer
        Get
            Return Me._Cid
        End Get
        Set
            If ((Me._Cid = Value) _
                        = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>
    Public Property SiteName() As String
        Get
            Return Me._SiteName
        End Get
        Set
            If (String.Equals(Me._SiteName, Value) = False) Then
                Me._SiteName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>
    Public Property Customer() As System.Nullable(Of Short)
        Get
            Return Me._Customer
        End Get
        Set
            If (Me._Customer.Equals(Value) = False) Then
                Me._Customer = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>
    Public Property AddressLine1() As String
        Get
            Return Me._AddressLine1
        End Get
        Set
            If (String.Equals(Me._AddressLine1, Value) = False) Then
                Me._AddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>
    Public Property AddressLine2() As String
        Get
            Return Me._AddressLine2
        End Get
        Set
            If (String.Equals(Me._AddressLine2, Value) = False) Then
                Me._AddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>
    Public Property AddressLine3() As String
        Get
            Return Me._AddressLine3
        End Get
        Set
            If (String.Equals(Me._AddressLine3, Value) = False) Then
                Me._AddressLine3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(50)")>
    Public Property AddressLine4() As String
        Get
            Return Me._AddressLine4
        End Get
        Set
            If (String.Equals(Me._AddressLine4, Value) = False) Then
                Me._AddressLine4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>
    Public Property Suburb() As String
        Get
            Return Me._Suburb
        End Get
        Set
            If (String.Equals(Me._Suburb, Value) = False) Then
                Me._Suburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(5)")>
    Public Property State() As String
        Get
            Return Me._State
        End Get
        Set
            If (String.Equals(Me._State, Value) = False) Then
                Me._State = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>
    Public Property PostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostCode
        End Get
        Set
            If (Me._PostCode.Equals(Value) = False) Then
                Me._PostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(50)")>
    Public Property PhoneNo() As String
        Get
            Return Me._PhoneNo
        End Get
        Set
            If (String.Equals(Me._PhoneNo, Value) = False) Then
                Me._PhoneNo = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(50)")>
    Public Property FaxNo() As String
        Get
            Return Me._FaxNo
        End Get
        Set
            If (String.Equals(Me._FaxNo, Value) = False) Then
                Me._FaxNo = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>
    Public Property SiteContactName() As String
        Get
            Return Me._SiteContactName
        End Get
        Set
            If (String.Equals(Me._SiteContactName, Value) = False) Then
                Me._SiteContactName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>
    Public Property SiteContactPhone() As String
        Get
            Return Me._SiteContactPhone
        End Get
        Set
            If (String.Equals(Me._SiteContactPhone, Value) = False) Then
                Me._SiteContactPhone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactFax", DbType:="NVarChar(50)")>
    Public Property SiteContactFax() As String
        Get
            Return Me._SiteContactFax
        End Get
        Set
            If (String.Equals(Me._SiteContactFax, Value) = False) Then
                Me._SiteContactFax = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>
    Public Property SiteContactMobile() As String
        Get
            Return Me._SiteContactMobile
        End Get
        Set
            If (String.Equals(Me._SiteContactMobile, Value) = False) Then
                Me._SiteContactMobile = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactEmail", DbType:="NVarChar(50)")>
    Public Property SiteContactEmail() As String
        Get
            Return Me._SiteContactEmail
        End Get
        Set
            If (String.Equals(Me._SiteContactEmail, Value) = False) Then
                Me._SiteContactEmail = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine1() As String
        Get
            Return Me._PostalAddressLine1
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine1, Value) = False) Then
                Me._PostalAddressLine1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>
    Public Property PostalAddressLine2() As String
        Get
            Return Me._PostalAddressLine2
        End Get
        Set
            If (String.Equals(Me._PostalAddressLine2, Value) = False) Then
                Me._PostalAddressLine2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(50)")>
    Public Property PostalSuburb() As String
        Get
            Return Me._PostalSuburb
        End Get
        Set
            If (String.Equals(Me._PostalSuburb, Value) = False) Then
                Me._PostalSuburb = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalState", DbType:="NVarChar(6)")>
    Public Property PostalState() As String
        Get
            Return Me._PostalState
        End Get
        Set
            If (String.Equals(Me._PostalState, Value) = False) Then
                Me._PostalState = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalPostCode", DbType:="SmallInt")>
    Public Property PostalPostCode() As System.Nullable(Of Short)
        Get
            Return Me._PostalPostCode
        End Get
        Set
            If (Me._PostalPostCode.Equals(Value) = False) Then
                Me._PostalPostCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>
    Public Property SiteStartDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteStartDate
        End Get
        Set
            If (Me._SiteStartDate.Equals(Value) = False) Then
                Me._SiteStartDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitePeriod", DbType:="Int")>
    Public Property SitePeriod() As System.Nullable(Of Integer)
        Get
            Return Me._SitePeriod
        End Get
        Set
            If (Me._SitePeriod.Equals(Value) = False) Then
                Me._SitePeriod = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>
    Public Property SiteContractExpiry() As System.Nullable(Of Date)
        Get
            Return Me._SiteContractExpiry
        End Get
        Set
            If (Me._SiteContractExpiry.Equals(Value) = False) Then
                Me._SiteContractExpiry = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>
    Public Property SiteCeaseDate() As System.Nullable(Of Date)
        Get
            Return Me._SiteCeaseDate
        End Get
        Set
            If (Me._SiteCeaseDate.Equals(Value) = False) Then
                Me._SiteCeaseDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseReason", DbType:="Int")>
    Public Property SiteCeaseReason() As System.Nullable(Of Integer)
        Get
            Return Me._SiteCeaseReason
        End Get
        Set
            If (Me._SiteCeaseReason.Equals(Value) = False) Then
                Me._SiteCeaseReason = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequency", DbType:="Int")>
    Public Property InvoiceFrequency() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceFrequency
        End Get
        Set
            If (Me._InvoiceFrequency.Equals(Value) = False) Then
                Me._InvoiceFrequency = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>
    Public Property InvoiceCommencing() As System.Nullable(Of Date)
        Get
            Return Me._InvoiceCommencing
        End Get
        Set
            If (Me._InvoiceCommencing.Equals(Value) = False) Then
                Me._InvoiceCommencing = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroup", DbType:="SmallInt")>
    Public Property IndustryGroup() As System.Nullable(Of Short)
        Get
            Return Me._IndustryGroup
        End Get
        Set
            If (Me._IndustryGroup.Equals(Value) = False) Then
                Me._IndustryGroup = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="SmallInt")>
    Public Property PreviousSupplier() As System.Nullable(Of Short)
        Get
            Return Me._PreviousSupplier
        End Get
        Set
            If (Me._PreviousSupplier.Equals(Value) = False) Then
                Me._PreviousSupplier = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LostBusinessTo", DbType:="SmallInt")>
    Public Property LostBusinessTo() As System.Nullable(Of Short)
        Get
            Return Me._LostBusinessTo
        End Get
        Set
            If (Me._LostBusinessTo.Equals(Value) = False) Then
                Me._LostBusinessTo = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="SmallInt")>
    Public Property SalesPerson() As System.Nullable(Of Short)
        Get
            Return Me._SalesPerson
        End Get
        Set
            If (Me._SalesPerson.Equals(Value) = False) Then
                Me._SalesPerson = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InitialServiceAgreementNo", DbType:="NVarChar(22)")>
    Public Property InitialServiceAgreementNo() As String
        Get
            Return Me._InitialServiceAgreementNo
        End Get
        Set
            If (String.Equals(Me._InitialServiceAgreementNo, Value) = False) Then
                Me._InitialServiceAgreementNo = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>
    Public Property InvoiceMonth1() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth1
        End Get
        Set
            If (Me._InvoiceMonth1.Equals(Value) = False) Then
                Me._InvoiceMonth1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>
    Public Property InvoiceMonth2() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth2
        End Get
        Set
            If (Me._InvoiceMonth2.Equals(Value) = False) Then
                Me._InvoiceMonth2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>
    Public Property InvoiceMonth3() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth3
        End Get
        Set
            If (Me._InvoiceMonth3.Equals(Value) = False) Then
                Me._InvoiceMonth3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>
    Public Property InvoiceMonth4() As System.Nullable(Of Integer)
        Get
            Return Me._InvoiceMonth4
        End Get
        Set
            If (Me._InvoiceMonth4.Equals(Value) = False) Then
                Me._InvoiceMonth4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>
    Public Property GeneralSiteServiceComments() As String
        Get
            Return Me._GeneralSiteServiceComments
        End Get
        Set
            If (String.Equals(Me._GeneralSiteServiceComments, Value) = False) Then
                Me._GeneralSiteServiceComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalUnits", DbType:="Float")>
    Public Property TotalUnits() As System.Nullable(Of Double)
        Get
            Return Me._TotalUnits
        End Get
        Set
            If (Me._TotalUnits.Equals(Value) = False) Then
                Me._TotalUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>
    Public Property TotalAmount() As System.Nullable(Of Double)
        Get
            Return Me._TotalAmount
        End Get
        Set
            If (Me._TotalAmount.Equals(Value) = False) Then
                Me._TotalAmount = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>
    Public Property Zone() As System.Nullable(Of Integer)
        Get
            Return Me._Zone
        End Get
        Set
            If (Me._Zone.Equals(Value) = False) Then
                Me._Zone = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeparateInvoice", DbType:="Bit NOT NULL")>
    Public Property SeparateInvoice() As Boolean
        Get
            Return Me._SeparateInvoice
        End Get
        Set
            If ((Me._SeparateInvoice = Value) _
                        = False) Then
                Me._SeparateInvoice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>
    Public Property PurchaseOrderNumber() As String
        Get
            Return Me._PurchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._PurchaseOrderNumber, Value) = False) Then
                Me._PurchaseOrderNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkSitesExcludeFuelLevy", DbType:="Bit NOT NULL")>
    Public Property chkSitesExcludeFuelLevy() As Boolean
        Get
            Return Me._chkSitesExcludeFuelLevy
        End Get
        Set
            If ((Me._chkSitesExcludeFuelLevy = Value) _
                        = False) Then
                Me._chkSitesExcludeFuelLevy = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>
    Public Property cmbRateIncrease() As System.Nullable(Of Short)
        Get
            Return Me._cmbRateIncrease
        End Get
        Set
            If (Me._cmbRateIncrease.Equals(Value) = False) Then
                Me._cmbRateIncrease = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSortOrder", DbType:="BigInt")>
    Public Property ZoneSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ZoneSortOrder
        End Get
        Set
            If (Me._ZoneSortOrder.Equals(Value) = False) Then
                Me._ZoneSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateSortOrder", DbType:="BigInt")>
    Public Property StateSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._StateSortOrder
        End Get
        Set
            If (Me._StateSortOrder.Equals(Value) = False) Then
                Me._StateSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerSortOrder", DbType:="BigInt")>
    Public Property CustomerSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._CustomerSortOrder
        End Get
        Set
            If (Me._CustomerSortOrder.Equals(Value) = False) Then
                Me._CustomerSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustrySortOrder", DbType:="BigInt")>
    Public Property IndustrySortOrder() As System.Nullable(Of Long)
        Get
            Return Me._IndustrySortOrder
        End Get
        Set
            If (Me._IndustrySortOrder.Equals(Value) = False) Then
                Me._IndustrySortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierSortOrder", DbType:="BigInt")>
    Public Property PreviousSupplierSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._PreviousSupplierSortOrder
        End Get
        Set
            If (Me._PreviousSupplierSortOrder.Equals(Value) = False) Then
                Me._PreviousSupplierSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonSortOrder", DbType:="BigInt")>
    Public Property SalesPersonSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._SalesPersonSortOrder
        End Get
        Set
            If (Me._SalesPersonSortOrder.Equals(Value) = False) Then
                Me._SalesPersonSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InitialContractPeriodSortOrder", DbType:="BigInt")>
    Public Property InitialContractPeriodSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._InitialContractPeriodSortOrder
        End Get
        Set
            If (Me._InitialContractPeriodSortOrder.Equals(Value) = False) Then
                Me._InitialContractPeriodSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractCeaseReasonsSortOrder", DbType:="BigInt")>
    Public Property ContractCeaseReasonsSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ContractCeaseReasonsSortOrder
        End Get
        Set
            If (Me._ContractCeaseReasonsSortOrder.Equals(Value) = False) Then
                Me._ContractCeaseReasonsSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LostBusinessToSortOrder", DbType:="BigInt")>
    Public Property LostBusinessToSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._LostBusinessToSortOrder
        End Get
        Set
            If (Me._LostBusinessToSortOrder.Equals(Value) = False) Then
                Me._LostBusinessToSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoicingFrequencySortOrder", DbType:="BigInt")>
    Public Property InvoicingFrequencySortOrder() As System.Nullable(Of Long)
        Get
            Return Me._InvoicingFrequencySortOrder
        End Get
        Set
            If (Me._InvoicingFrequencySortOrder.Equals(Value) = False) Then
                Me._InvoicingFrequencySortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncreaseSortOrder", DbType:="BigInt")>
    Public Property cmbRateIncreaseSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._cmbRateIncreaseSortOrder
        End Get
        Set
            If (Me._cmbRateIncreaseSortOrder.Equals(Value) = False) Then
                Me._cmbRateIncreaseSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>
    Public Property CustomerName() As String
        Get
            Return Me._CustomerName
        End Get
        Set
            If (String.Equals(Me._CustomerName, Value) = False) Then
                Me._CustomerName = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>
    Public Property CustomerRating() As System.Nullable(Of Short)
        Get
            Return Me._CustomerRating
        End Get
        Set
            If (Me._CustomerRating.Equals(Value) = False) Then
                Me._CustomerRating = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingDesc", DbType:="NVarChar(50)")>
    Public Property CustomerRatingDesc() As String
        Get
            Return Me._CustomerRatingDesc
        End Get
        Set
            If (String.Equals(Me._CustomerRatingDesc, Value) = False) Then
                Me._CustomerRatingDesc = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetCustomerServicesResult

    Private _CustomerServiceID As System.Guid

    Private _ID As Integer

    Private _CSid As System.Nullable(Of Integer)

    Private _CId As System.Nullable(Of Integer)

    Private _ServiceFrequencyCode As System.Nullable(Of Short)

    Private _ServiceUnits As System.Nullable(Of Single)

    Private _ServicePrice As System.Nullable(Of Single)

    Private _PerAnnumCharge As System.Nullable(Of Single)

    Private _ServiceRun As System.Nullable(Of Short)

    Private _ServiceComments As String

    Private _UnitsHaveMoreThanOneRun As Boolean

    Private _ServiceFrequency1 As System.Nullable(Of Short)

    Private _ServiceFrequency2 As System.Nullable(Of Short)

    Private _ServiceFrequency3 As System.Nullable(Of Short)

    Private _ServiceFrequency4 As System.Nullable(Of Short)

    Private _ServiceFrequency5 As System.Nullable(Of Short)

    Private _ServiceFrequency6 As System.Nullable(Of Short)

    Private _ServiceFrequency7 As System.Nullable(Of Short)

    Private _ServiceFrequency8 As System.Nullable(Of Short)

    Private _ServiceSortOrderCode As String

    Private _ServicesSortOrder As System.Nullable(Of Long)

    Private _ServiceFrequencySortOrder As System.Nullable(Of Long)

    Private _ServiceRunSortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency1SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency2SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency3SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency4SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency5SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency6SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency7SortOrder As System.Nullable(Of Long)

    Private _ServiceFrequency8SortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServiceID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property CustomerServiceID() As System.Guid
        Get
            Return Me._CustomerServiceID
        End Get
        Set
            If ((Me._CustomerServiceID = Value) _
                        = False) Then
                Me._CustomerServiceID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>
    Public Property ID() As Integer
        Get
            Return Me._ID
        End Get
        Set
            If ((Me._ID = Value) _
                        = False) Then
                Me._ID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>
    Public Property CSid() As System.Nullable(Of Integer)
        Get
            Return Me._CSid
        End Get
        Set
            If (Me._CSid.Equals(Value) = False) Then
                Me._CSid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int")>
    Public Property CId() As System.Nullable(Of Integer)
        Get
            Return Me._CId
        End Get
        Set
            If (Me._CId.Equals(Value) = False) Then
                Me._CId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencyCode", DbType:="SmallInt")>
    Public Property ServiceFrequencyCode() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequencyCode
        End Get
        Set
            If (Me._ServiceFrequencyCode.Equals(Value) = False) Then
                Me._ServiceFrequencyCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>
    Public Property ServiceUnits() As System.Nullable(Of Single)
        Get
            Return Me._ServiceUnits
        End Get
        Set
            If (Me._ServiceUnits.Equals(Value) = False) Then
                Me._ServiceUnits = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>
    Public Property ServicePrice() As System.Nullable(Of Single)
        Get
            Return Me._ServicePrice
        End Get
        Set
            If (Me._ServicePrice.Equals(Value) = False) Then
                Me._ServicePrice = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>
    Public Property PerAnnumCharge() As System.Nullable(Of Single)
        Get
            Return Me._PerAnnumCharge
        End Get
        Set
            If (Me._PerAnnumCharge.Equals(Value) = False) Then
                Me._PerAnnumCharge = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>
    Public Property ServiceRun() As System.Nullable(Of Short)
        Get
            Return Me._ServiceRun
        End Get
        Set
            If (Me._ServiceRun.Equals(Value) = False) Then
                Me._ServiceRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>
    Public Property ServiceComments() As String
        Get
            Return Me._ServiceComments
        End Get
        Set
            If (String.Equals(Me._ServiceComments, Value) = False) Then
                Me._ServiceComments = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>
    Public Property UnitsHaveMoreThanOneRun() As Boolean
        Get
            Return Me._UnitsHaveMoreThanOneRun
        End Get
        Set
            If ((Me._UnitsHaveMoreThanOneRun = Value) _
                        = False) Then
                Me._UnitsHaveMoreThanOneRun = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1", DbType:="SmallInt")>
    Public Property ServiceFrequency1() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency1
        End Get
        Set
            If (Me._ServiceFrequency1.Equals(Value) = False) Then
                Me._ServiceFrequency1 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2", DbType:="SmallInt")>
    Public Property ServiceFrequency2() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency2
        End Get
        Set
            If (Me._ServiceFrequency2.Equals(Value) = False) Then
                Me._ServiceFrequency2 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3", DbType:="SmallInt")>
    Public Property ServiceFrequency3() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency3
        End Get
        Set
            If (Me._ServiceFrequency3.Equals(Value) = False) Then
                Me._ServiceFrequency3 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4", DbType:="SmallInt")>
    Public Property ServiceFrequency4() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency4
        End Get
        Set
            If (Me._ServiceFrequency4.Equals(Value) = False) Then
                Me._ServiceFrequency4 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5", DbType:="SmallInt")>
    Public Property ServiceFrequency5() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency5
        End Get
        Set
            If (Me._ServiceFrequency5.Equals(Value) = False) Then
                Me._ServiceFrequency5 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6", DbType:="SmallInt")>
    Public Property ServiceFrequency6() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency6
        End Get
        Set
            If (Me._ServiceFrequency6.Equals(Value) = False) Then
                Me._ServiceFrequency6 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7", DbType:="SmallInt")>
    Public Property ServiceFrequency7() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency7
        End Get
        Set
            If (Me._ServiceFrequency7.Equals(Value) = False) Then
                Me._ServiceFrequency7 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8", DbType:="SmallInt")>
    Public Property ServiceFrequency8() As System.Nullable(Of Short)
        Get
            Return Me._ServiceFrequency8
        End Get
        Set
            If (Me._ServiceFrequency8.Equals(Value) = False) Then
                Me._ServiceFrequency8 = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceSortOrderCode", DbType:="NVarChar(12)")>
    Public Property ServiceSortOrderCode() As String
        Get
            Return Me._ServiceSortOrderCode
        End Get
        Set
            If (String.Equals(Me._ServiceSortOrderCode, Value) = False) Then
                Me._ServiceSortOrderCode = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesSortOrder", DbType:="BigInt")>
    Public Property ServicesSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServicesSortOrder
        End Get
        Set
            If (Me._ServicesSortOrder.Equals(Value) = False) Then
                Me._ServicesSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencySortOrder", DbType:="BigInt")>
    Public Property ServiceFrequencySortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequencySortOrder
        End Get
        Set
            If (Me._ServiceFrequencySortOrder.Equals(Value) = False) Then
                Me._ServiceFrequencySortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRunSortOrder", DbType:="BigInt")>
    Public Property ServiceRunSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceRunSortOrder
        End Get
        Set
            If (Me._ServiceRunSortOrder.Equals(Value) = False) Then
                Me._ServiceRunSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency1SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency1SortOrder
        End Get
        Set
            If (Me._ServiceFrequency1SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency1SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency2SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency2SortOrder
        End Get
        Set
            If (Me._ServiceFrequency2SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency2SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency3SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency3SortOrder
        End Get
        Set
            If (Me._ServiceFrequency3SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency3SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency4SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency4SortOrder
        End Get
        Set
            If (Me._ServiceFrequency4SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency4SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency5SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency5SortOrder
        End Get
        Set
            If (Me._ServiceFrequency5SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency5SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency6SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency6SortOrder
        End Get
        Set
            If (Me._ServiceFrequency6SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency6SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency7SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency7SortOrder
        End Get
        Set
            If (Me._ServiceFrequency7SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency7SortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8SortOrder", DbType:="BigInt")>
    Public Property ServiceFrequency8SortOrder() As System.Nullable(Of Long)
        Get
            Return Me._ServiceFrequency8SortOrder
        End Get
        Set
            If (Me._ServiceFrequency8SortOrder.Equals(Value) = False) Then
                Me._ServiceFrequency8SortOrder = Value
            End If
        End Set
    End Property
End Class

Partial Public Class usp_GetCIRHistoryResult

    Private _HistoryID As System.Guid

    Private _NCId As Integer

    Private _Cid As System.Nullable(Of Short)

    Private _NCRDate As System.Nullable(Of Date)

    Private _NCRNumber As System.Nullable(Of Integer)

    Private _NCRDescription As String

    Private _NCRRecordedBY As String

    Private _NCRClosedBy As String

    Private _Driver As System.Nullable(Of Short)

    Private _NCRReason As System.Nullable(Of Short)

    Private _NCRReasonSortOrder As System.Nullable(Of Long)

    Private _DriverSortOrder As System.Nullable(Of Long)

    Public Sub New()
        MyBase.New
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HistoryID", DbType:="UniqueIdentifier NOT NULL")>
    Public Property HistoryID() As System.Guid
        Get
            Return Me._HistoryID
        End Get
        Set
            If ((Me._HistoryID = Value) _
                        = False) Then
                Me._HistoryID = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCId", DbType:="Int NOT NULL")>
    Public Property NCId() As Integer
        Get
            Return Me._NCId
        End Get
        Set
            If ((Me._NCId = Value) _
                        = False) Then
                Me._NCId = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="SmallInt")>
    Public Property Cid() As System.Nullable(Of Short)
        Get
            Return Me._Cid
        End Get
        Set
            If (Me._Cid.Equals(Value) = False) Then
                Me._Cid = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDate", DbType:="DateTime")>
    Public Property NCRDate() As System.Nullable(Of Date)
        Get
            Return Me._NCRDate
        End Get
        Set
            If (Me._NCRDate.Equals(Value) = False) Then
                Me._NCRDate = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRNumber", DbType:="Int")>
    Public Property NCRNumber() As System.Nullable(Of Integer)
        Get
            Return Me._NCRNumber
        End Get
        Set
            If (Me._NCRNumber.Equals(Value) = False) Then
                Me._NCRNumber = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDescription", DbType:="NVarChar(MAX)")>
    Public Property NCRDescription() As String
        Get
            Return Me._NCRDescription
        End Get
        Set
            If (String.Equals(Me._NCRDescription, Value) = False) Then
                Me._NCRDescription = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRRecordedBY", DbType:="NVarChar(50)")>
    Public Property NCRRecordedBY() As String
        Get
            Return Me._NCRRecordedBY
        End Get
        Set
            If (String.Equals(Me._NCRRecordedBY, Value) = False) Then
                Me._NCRRecordedBY = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRClosedBy", DbType:="NVarChar(50)")>
    Public Property NCRClosedBy() As String
        Get
            Return Me._NCRClosedBy
        End Get
        Set
            If (String.Equals(Me._NCRClosedBy, Value) = False) Then
                Me._NCRClosedBy = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver", DbType:="SmallInt")>
    Public Property Driver() As System.Nullable(Of Short)
        Get
            Return Me._Driver
        End Get
        Set
            If (Me._Driver.Equals(Value) = False) Then
                Me._Driver = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRReason", DbType:="SmallInt")>
    Public Property NCRReason() As System.Nullable(Of Short)
        Get
            Return Me._NCRReason
        End Get
        Set
            If (Me._NCRReason.Equals(Value) = False) Then
                Me._NCRReason = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRReasonSortOrder", DbType:="BigInt")>
    Public Property NCRReasonSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._NCRReasonSortOrder
        End Get
        Set
            If (Me._NCRReasonSortOrder.Equals(Value) = False) Then
                Me._NCRReasonSortOrder = Value
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverSortOrder", DbType:="BigInt")>
    Public Property DriverSortOrder() As System.Nullable(Of Long)
        Get
            Return Me._DriverSortOrder
        End Get
        Set
            If (Me._DriverSortOrder.Equals(Value) = False) Then
                Me._DriverSortOrder = Value
            End If
        End Set
    End Property
End Class
