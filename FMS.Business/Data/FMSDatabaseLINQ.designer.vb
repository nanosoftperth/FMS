'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FMS")>  _
Partial Public Class LINQtoSQLClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
  Partial Private Sub UpdateAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
  Partial Private Sub DeleteAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
  Partial Private Sub InsertWorkRequest(instance As WorkRequest)
    End Sub
  Partial Private Sub UpdateWorkRequest(instance As WorkRequest)
    End Sub
  Partial Private Sub DeleteWorkRequest(instance As WorkRequest)
    End Sub
  Partial Private Sub InsertAlertType(instance As AlertType)
    End Sub
  Partial Private Sub UpdateAlertType(instance As AlertType)
    End Sub
  Partial Private Sub DeleteAlertType(instance As AlertType)
    End Sub
  Partial Private Sub InsertAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
  Partial Private Sub UpdateAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
  Partial Private Sub DeleteAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
  Partial Private Sub InsertAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
  Partial Private Sub UpdateAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
  Partial Private Sub DeleteAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
  Partial Private Sub InsertApplicationBooking(instance As ApplicationBooking)
    End Sub
  Partial Private Sub UpdateApplicationBooking(instance As ApplicationBooking)
    End Sub
  Partial Private Sub DeleteApplicationBooking(instance As ApplicationBooking)
    End Sub
  Partial Private Sub InsertApplicationDriver(instance As ApplicationDriver)
    End Sub
  Partial Private Sub UpdateApplicationDriver(instance As ApplicationDriver)
    End Sub
  Partial Private Sub DeleteApplicationDriver(instance As ApplicationDriver)
    End Sub
  Partial Private Sub InsertApplicationFeature(instance As ApplicationFeature)
    End Sub
  Partial Private Sub UpdateApplicationFeature(instance As ApplicationFeature)
    End Sub
  Partial Private Sub DeleteApplicationFeature(instance As ApplicationFeature)
    End Sub
  Partial Private Sub InsertApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
  Partial Private Sub UpdateApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
  Partial Private Sub DeleteApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
  Partial Private Sub InsertApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
  Partial Private Sub UpdateApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
  Partial Private Sub DeleteApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
  Partial Private Sub InsertApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
  Partial Private Sub UpdateApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
  Partial Private Sub DeleteApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
  Partial Private Sub InsertApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
  Partial Private Sub UpdateApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
  Partial Private Sub DeleteApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
  Partial Private Sub InsertApplicationImage(instance As ApplicationImage)
    End Sub
  Partial Private Sub UpdateApplicationImage(instance As ApplicationImage)
    End Sub
  Partial Private Sub DeleteApplicationImage(instance As ApplicationImage)
    End Sub
  Partial Private Sub InsertApplicationLocation(instance As ApplicationLocation)
    End Sub
  Partial Private Sub UpdateApplicationLocation(instance As ApplicationLocation)
    End Sub
  Partial Private Sub DeleteApplicationLocation(instance As ApplicationLocation)
    End Sub
  Partial Private Sub InsertApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
  Partial Private Sub UpdateApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
  Partial Private Sub DeleteApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
  Partial Private Sub InsertApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
  Partial Private Sub UpdateApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
  Partial Private Sub DeleteApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
  Partial Private Sub InsertApplicationVehicle(instance As ApplicationVehicle)
    End Sub
  Partial Private Sub UpdateApplicationVehicle(instance As ApplicationVehicle)
    End Sub
  Partial Private Sub DeleteApplicationVehicle(instance As ApplicationVehicle)
    End Sub
  Partial Private Sub InsertApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
  Partial Private Sub UpdateApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
  Partial Private Sub DeleteApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
  Partial Private Sub InsertApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
  Partial Private Sub UpdateApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
  Partial Private Sub DeleteApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
  Partial Private Sub Insertaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Updateaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Deleteaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Insertaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Updateaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Deleteaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Insertaspnet_Path(instance As aspnet_Path)
    End Sub
  Partial Private Sub Updateaspnet_Path(instance As aspnet_Path)
    End Sub
  Partial Private Sub Deleteaspnet_Path(instance As aspnet_Path)
    End Sub
  Partial Private Sub Insertaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
  Partial Private Sub Updateaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
  Partial Private Sub Deleteaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
  Partial Private Sub Insertaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
  Partial Private Sub Updateaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
  Partial Private Sub Deleteaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
  Partial Private Sub Insertaspnet_Profile(instance As aspnet_Profile)
    End Sub
  Partial Private Sub Updateaspnet_Profile(instance As aspnet_Profile)
    End Sub
  Partial Private Sub Deleteaspnet_Profile(instance As aspnet_Profile)
    End Sub
  Partial Private Sub Insertaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Updateaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Deleteaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Insertaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
  Partial Private Sub Updateaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
  Partial Private Sub Deleteaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
  Partial Private Sub Insertaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Updateaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Insertaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Updateaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Deleteaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Insertaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
  Partial Private Sub Updateaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
  Partial Private Sub Deleteaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
  Partial Private Sub InsertAuthenticationToken(instance As AuthenticationToken)
    End Sub
  Partial Private Sub UpdateAuthenticationToken(instance As AuthenticationToken)
    End Sub
  Partial Private Sub DeleteAuthenticationToken(instance As AuthenticationToken)
    End Sub
  Partial Private Sub InsertCAN_Data(instance As CAN_Data)
    End Sub
  Partial Private Sub UpdateCAN_Data(instance As CAN_Data)
    End Sub
  Partial Private Sub DeleteCAN_Data(instance As CAN_Data)
    End Sub
  Partial Private Sub InsertCannonData(instance As CannonData)
    End Sub
  Partial Private Sub UpdateCannonData(instance As CannonData)
    End Sub
  Partial Private Sub DeleteCannonData(instance As CannonData)
    End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertDevelopment(instance As Development)
    End Sub
  Partial Private Sub UpdateDevelopment(instance As Development)
    End Sub
  Partial Private Sub DeleteDevelopment(instance As Development)
    End Sub
  Partial Private Sub InsertDevice(instance As Device)
    End Sub
  Partial Private Sub UpdateDevice(instance As Device)
    End Sub
  Partial Private Sub DeleteDevice(instance As Device)
    End Sub
  Partial Private Sub InsertFeature(instance As Feature)
    End Sub
  Partial Private Sub UpdateFeature(instance As Feature)
    End Sub
  Partial Private Sub DeleteFeature(instance As Feature)
    End Sub
  Partial Private Sub InsertFleetMapMarker(instance As FleetMapMarker)
    End Sub
  Partial Private Sub UpdateFleetMapMarker(instance As FleetMapMarker)
    End Sub
  Partial Private Sub DeleteFleetMapMarker(instance As FleetMapMarker)
    End Sub
  Partial Private Sub InsertGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
  Partial Private Sub UpdateGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
  Partial Private Sub DeleteGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
  Partial Private Sub InsertGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
  Partial Private Sub UpdateGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
  Partial Private Sub DeleteGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
  Partial Private Sub InsertGroup(instance As [Group])
    End Sub
  Partial Private Sub UpdateGroup(instance As [Group])
    End Sub
  Partial Private Sub DeleteGroup(instance As [Group])
    End Sub
  Partial Private Sub InsertGroupSubscriber(instance As GroupSubscriber)
    End Sub
  Partial Private Sub UpdateGroupSubscriber(instance As GroupSubscriber)
    End Sub
  Partial Private Sub DeleteGroupSubscriber(instance As GroupSubscriber)
    End Sub
  Partial Private Sub InsertPaidFeature(instance As PaidFeature)
    End Sub
  Partial Private Sub UpdatePaidFeature(instance As PaidFeature)
    End Sub
  Partial Private Sub DeletePaidFeature(instance As PaidFeature)
    End Sub
  Partial Private Sub InsertReportSchdeule(instance As ReportSchdeule)
    End Sub
  Partial Private Sub UpdateReportSchdeule(instance As ReportSchdeule)
    End Sub
  Partial Private Sub DeleteReportSchdeule(instance As ReportSchdeule)
    End Sub
  Partial Private Sub InsertSetting(instance As Setting)
    End Sub
  Partial Private Sub UpdateSetting(instance As Setting)
    End Sub
  Partial Private Sub DeleteSetting(instance As Setting)
    End Sub
  Partial Private Sub InsertSimulatorSetting(instance As SimulatorSetting)
    End Sub
  Partial Private Sub UpdateSimulatorSetting(instance As SimulatorSetting)
    End Sub
  Partial Private Sub DeleteSimulatorSetting(instance As SimulatorSetting)
    End Sub
  Partial Private Sub InsertWebServiceLog(instance As WebServiceLog)
    End Sub
  Partial Private Sub UpdateWebServiceLog(instance As WebServiceLog)
    End Sub
  Partial Private Sub DeleteWebServiceLog(instance As WebServiceLog)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.FMS.Business.My.MySettings.Default.FMSConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AlertSubscriber_deletemes() As System.Data.Linq.Table(Of AlertSubscriber_deleteme)
		Get
			Return Me.GetTable(Of AlertSubscriber_deleteme)
		End Get
	End Property
	
	Public ReadOnly Property WorkRequests() As System.Data.Linq.Table(Of WorkRequest)
		Get
			Return Me.GetTable(Of WorkRequest)
		End Get
	End Property
	
	Public ReadOnly Property AlertTypes() As System.Data.Linq.Table(Of AlertType)
		Get
			Return Me.GetTable(Of AlertType)
		End Get
	End Property
	
	Public ReadOnly Property AlertTypeOccurances() As System.Data.Linq.Table(Of AlertTypeOccurance)
		Get
			Return Me.GetTable(Of AlertTypeOccurance)
		End Get
	End Property
	
	Public ReadOnly Property AlertTypeSubscriber_deletemes() As System.Data.Linq.Table(Of AlertTypeSubscriber_deleteme)
		Get
			Return Me.GetTable(Of AlertTypeSubscriber_deleteme)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationBookings() As System.Data.Linq.Table(Of ApplicationBooking)
		Get
			Return Me.GetTable(Of ApplicationBooking)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationBooking_20170222s() As System.Data.Linq.Table(Of ApplicationBooking_20170222)
		Get
			Return Me.GetTable(Of ApplicationBooking_20170222)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationDrivers() As System.Data.Linq.Table(Of ApplicationDriver)
		Get
			Return Me.GetTable(Of ApplicationDriver)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationFeatures() As System.Data.Linq.Table(Of ApplicationFeature)
		Get
			Return Me.GetTable(Of ApplicationFeature)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationFeatureRoles() As System.Data.Linq.Table(Of ApplicationFeatureRole)
		Get
			Return Me.GetTable(Of ApplicationFeatureRole)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFences() As System.Data.Linq.Table(Of ApplicationGeoFence)
		Get
			Return Me.GetTable(Of ApplicationGeoFence)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFence_20160615s() As System.Data.Linq.Table(Of ApplicationGeoFence_20160615)
		Get
			Return Me.GetTable(Of ApplicationGeoFence_20160615)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFence_20160842s() As System.Data.Linq.Table(Of ApplicationGeoFence_20160842)
		Get
			Return Me.GetTable(Of ApplicationGeoFence_20160842)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeofenceProperties() As System.Data.Linq.Table(Of ApplicationGeofenceProperty)
		Get
			Return Me.GetTable(Of ApplicationGeofenceProperty)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFenceSides() As System.Data.Linq.Table(Of ApplicationGeoFenceSide)
		Get
			Return Me.GetTable(Of ApplicationGeoFenceSide)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFenceSide_20160615s() As System.Data.Linq.Table(Of ApplicationGeoFenceSide_20160615)
		Get
			Return Me.GetTable(Of ApplicationGeoFenceSide_20160615)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationImages() As System.Data.Linq.Table(Of ApplicationImage)
		Get
			Return Me.GetTable(Of ApplicationImage)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationLocations() As System.Data.Linq.Table(Of ApplicationLocation)
		Get
			Return Me.GetTable(Of ApplicationLocation)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationSettingValues() As System.Data.Linq.Table(Of ApplicationSettingValue)
		Get
			Return Me.GetTable(Of ApplicationSettingValue)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationTimeZones() As System.Data.Linq.Table(Of ApplicationTimeZone)
		Get
			Return Me.GetTable(Of ApplicationTimeZone)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationVehicles() As System.Data.Linq.Table(Of ApplicationVehicle)
		Get
			Return Me.GetTable(Of ApplicationVehicle)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationVehicleDriverTimes() As System.Data.Linq.Table(Of ApplicationVehicleDriverTime)
		Get
			Return Me.GetTable(Of ApplicationVehicleDriverTime)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationVehicleOdometerReadings() As System.Data.Linq.Table(Of ApplicationVehicleOdometerReading)
		Get
			Return Me.GetTable(Of ApplicationVehicleOdometerReading)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Applications() As System.Data.Linq.Table(Of aspnet_Application)
		Get
			Return Me.GetTable(Of aspnet_Application)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Memberships() As System.Data.Linq.Table(Of aspnet_Membership)
		Get
			Return Me.GetTable(Of aspnet_Membership)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Paths() As System.Data.Linq.Table(Of aspnet_Path)
		Get
			Return Me.GetTable(Of aspnet_Path)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_PersonalizationAllUsers() As System.Data.Linq.Table(Of aspnet_PersonalizationAllUser)
		Get
			Return Me.GetTable(Of aspnet_PersonalizationAllUser)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_PersonalizationPerUsers() As System.Data.Linq.Table(Of aspnet_PersonalizationPerUser)
		Get
			Return Me.GetTable(Of aspnet_PersonalizationPerUser)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Profiles() As System.Data.Linq.Table(Of aspnet_Profile)
		Get
			Return Me.GetTable(Of aspnet_Profile)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Roles() As System.Data.Linq.Table(Of aspnet_Role)
		Get
			Return Me.GetTable(Of aspnet_Role)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_SchemaVersions() As System.Data.Linq.Table(Of aspnet_SchemaVersion)
		Get
			Return Me.GetTable(Of aspnet_SchemaVersion)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
		Get
			Return Me.GetTable(Of aspnet_User)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_UsersInRoles() As System.Data.Linq.Table(Of aspnet_UsersInRole)
		Get
			Return Me.GetTable(Of aspnet_UsersInRole)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_WebEvent_Events() As System.Data.Linq.Table(Of aspnet_WebEvent_Event)
		Get
			Return Me.GetTable(Of aspnet_WebEvent_Event)
		End Get
	End Property
	
	Public ReadOnly Property AuthenticationTokens() As System.Data.Linq.Table(Of AuthenticationToken)
		Get
			Return Me.GetTable(Of AuthenticationToken)
		End Get
	End Property
	
	Public ReadOnly Property CAN_Datas() As System.Data.Linq.Table(Of CAN_Data)
		Get
			Return Me.GetTable(Of CAN_Data)
		End Get
	End Property
	
	Public ReadOnly Property CAN_MessageDefinitions() As System.Data.Linq.Table(Of CAN_MessageDefinition)
		Get
			Return Me.GetTable(Of CAN_MessageDefinition)
		End Get
	End Property
	
	Public ReadOnly Property CannonDatas() As System.Data.Linq.Table(Of CannonData)
		Get
			Return Me.GetTable(Of CannonData)
		End Get
	End Property
	
	Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property Developments() As System.Data.Linq.Table(Of Development)
		Get
			Return Me.GetTable(Of Development)
		End Get
	End Property
	
	Public ReadOnly Property Devices() As System.Data.Linq.Table(Of Device)
		Get
			Return Me.GetTable(Of Device)
		End Get
	End Property
	
	Public ReadOnly Property Features() As System.Data.Linq.Table(Of Feature)
		Get
			Return Me.GetTable(Of Feature)
		End Get
	End Property
	
	Public ReadOnly Property FleetMapMarkers() As System.Data.Linq.Table(Of FleetMapMarker)
		Get
			Return Me.GetTable(Of FleetMapMarker)
		End Get
	End Property
	
	Public ReadOnly Property GeoFenceDeviceCollisionAlerts() As System.Data.Linq.Table(Of GeoFenceDeviceCollisionAlert)
		Get
			Return Me.GetTable(Of GeoFenceDeviceCollisionAlert)
		End Get
	End Property
	
	Public ReadOnly Property GeoFenceDeviceCollissions() As System.Data.Linq.Table(Of GeoFenceDeviceCollission)
		Get
			Return Me.GetTable(Of GeoFenceDeviceCollission)
		End Get
	End Property
	
	Public ReadOnly Property GeoFenceDeviceCollission_20160604s() As System.Data.Linq.Table(Of GeoFenceDeviceCollission_20160604)
		Get
			Return Me.GetTable(Of GeoFenceDeviceCollission_20160604)
		End Get
	End Property
	
	Public ReadOnly Property Groups() As System.Data.Linq.Table(Of [Group])
		Get
			Return Me.GetTable(Of [Group])
		End Get
	End Property
	
	Public ReadOnly Property GroupMember_olds() As System.Data.Linq.Table(Of GroupMember_old)
		Get
			Return Me.GetTable(Of GroupMember_old)
		End Get
	End Property
	
	Public ReadOnly Property GroupSubscribers() As System.Data.Linq.Table(Of GroupSubscriber)
		Get
			Return Me.GetTable(Of GroupSubscriber)
		End Get
	End Property
	
	Public ReadOnly Property j1939s() As System.Data.Linq.Table(Of j1939)
		Get
			Return Me.GetTable(Of j1939)
		End Get
	End Property
	
	Public ReadOnly Property PaidFeatures() As System.Data.Linq.Table(Of PaidFeature)
		Get
			Return Me.GetTable(Of PaidFeature)
		End Get
	End Property
	
	Public ReadOnly Property ReportSchdeules() As System.Data.Linq.Table(Of ReportSchdeule)
		Get
			Return Me.GetTable(Of ReportSchdeule)
		End Get
	End Property
	
	Public ReadOnly Property Settings() As System.Data.Linq.Table(Of Setting)
		Get
			Return Me.GetTable(Of Setting)
		End Get
	End Property
	
	Public ReadOnly Property SimulatorSettings() As System.Data.Linq.Table(Of SimulatorSetting)
		Get
			Return Me.GetTable(Of SimulatorSetting)
		End Get
	End Property
	
	Public ReadOnly Property WebServiceLogs() As System.Data.Linq.Table(Of WebServiceLog)
		Get
			Return Me.GetTable(Of WebServiceLog)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Membership_CreateUser")>  _
	Public Function aspnet_Membership_CreateUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(256)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Password", DbType:="NVarChar(128)")> ByVal password As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordSalt", DbType:="NVarChar(128)")> ByVal passwordSalt As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NVarChar(256)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordQuestion", DbType:="NVarChar(256)")> ByVal passwordQuestion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordAnswer", DbType:="NVarChar(128)")> ByVal passwordAnswer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsApproved", DbType:="Bit")> ByVal isApproved As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentTimeUtc", DbType:="DateTime")> ByVal currentTimeUtc As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CreateDate", DbType:="DateTime")> ByVal createDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueEmail", DbType:="Int")> ByVal uniqueEmail As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordFormat", DbType:="Int")> ByVal passwordFormat As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserId", DbType:="UniqueIdentifier")> ByRef userId As System.Nullable(Of System.Guid)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, userName, password, passwordSalt, email, passwordQuestion, passwordAnswer, isApproved, currentTimeUtc, createDate, uniqueEmail, passwordFormat, userId)
		userId = CType(result.GetParameterValue(12),System.Nullable(Of System.Guid))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_GetAllRoles")>  _
	Public Function aspnet_Roles_GetAllRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String) As ISingleResult(Of aspnet_Roles_GetAllRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName)
		Return CType(result.ReturnValue,ISingleResult(Of aspnet_Roles_GetAllRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_UsersInRoles_AddUsersToRoles")>  _
	Public Function aspnet_UsersInRoles_AddUsersToRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserNames", DbType:="NVarChar(4000)")> ByVal userNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleNames", DbType:="NVarChar(4000)")> ByVal roleNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentTimeUtc", DbType:="DateTime")> ByVal currentTimeUtc As System.Nullable(Of Date)) As ISingleResult(Of aspnet_UsersInRoles_AddUsersToRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, userNames, roleNames, currentTimeUtc)
		Return CType(result.ReturnValue,ISingleResult(Of aspnet_UsersInRoles_AddUsersToRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_UsersInRoles_RemoveUsersFromRoles")>  _
	Public Function aspnet_UsersInRoles_RemoveUsersFromRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserNames", DbType:="NVarChar(4000)")> ByVal userNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleNames", DbType:="NVarChar(4000)")> ByVal roleNames As String) As ISingleResult(Of aspnet_UsersInRoles_RemoveUsersFromRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, userNames, roleNames)
		Return CType(result.ReturnValue,ISingleResult(Of aspnet_UsersInRoles_RemoveUsersFromRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_RemoveAllrolesForUserAndAssignRole")>  _
	Public Function usp_RemoveAllrolesForUserAndAssignRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="UniqueIdentifier")> ByVal userID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleID", DbType:="UniqueIdentifier")> ByVal roleID As System.Nullable(Of System.Guid)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, roleID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_deleteGeoFenceCollisions")>  _
	Public Function usp_deleteGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal deviceid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), deviceid, startDate, endDate)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetVehiclesAndDriversFortimePeriod")>  _
	Public Function usp_GetVehiclesAndDriversFortimePeriod(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateStart", DbType:="DateTime")> ByVal dateStart As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateEnd", DbType:="DateTime")> ByVal dateEnd As System.Nullable(Of Date)) As ISingleResult(Of usp_GetVehiclesAndDriversFortimePeriodResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID, dateStart, dateEnd)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetVehiclesAndDriversFortimePeriodResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSettingsForApplication")>  _
	Public Function usp_GetSettingsForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="VarChar(MAX)")> ByVal applicationName As String) As ISingleResult(Of usp_GetSettingsForApplicationResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSettingsForApplicationResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSubscribersForApplication")>  _
	Public Function usp_GetSubscribersForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSubscribersForApplicationResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSubscribersForApplicationResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_CreateRole")>  _
	Public Function aspnet_Roles_CreateRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleName", DbType:="NVarChar(256)")> ByVal roleName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(256)")> ByVal description As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, roleName, description)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGeoFenceCollisions")>  _
	Public Function usp_GetGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGeoFenceCollisionsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGeoFenceCollisionsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAssignedVehiclestoDrivers")>  _
	Public Function usp_GetAssignedVehiclestoDrivers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetAssignedVehiclestoDriversResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetAssignedVehiclestoDriversResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[AlertSubscriber.deleteme]")>  _
Partial Public Class AlertSubscriber_deleteme
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlertSubscriberID As System.Guid
	
	Private _SubscriberTypeID As System.Nullable(Of Integer)
	
	Private _SubscriberID As System.Guid
	
	Private _AlertTypeID As System.Guid
	
	Private _Email As System.Nullable(Of Boolean)
	
	Private _Text As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertSubscriberIDChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanged()
    End Sub
    Partial Private Sub OnSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubscriberIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AlertSubscriberID() As System.Guid
		Get
			Return Me._AlertSubscriberID
		End Get
		Set
			If ((Me._AlertSubscriberID = value)  _
						= false) Then
				Me.OnAlertSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertSubscriberID = value
				Me.SendPropertyChanged("AlertSubscriberID")
				Me.OnAlertSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeID", DbType:="Int")>  _
	Public Property SubscriberTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._SubscriberTypeID
		End Get
		Set
			If (Me._SubscriberTypeID.Equals(value) = false) Then
				Me.OnSubscriberTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeID = value
				Me.SendPropertyChanged("SubscriberTypeID")
				Me.OnSubscriberTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SubscriberID() As System.Guid
		Get
			Return Me._SubscriberID
		End Get
		Set
			If ((Me._SubscriberID = value)  _
						= false) Then
				Me.OnSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberID = value
				Me.SendPropertyChanged("SubscriberID")
				Me.OnSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property AlertTypeID() As System.Guid
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If ((Me._AlertTypeID = value)  _
						= false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="Bit")>  _
	Public Property Email() As System.Nullable(Of Boolean)
		Get
			Return Me._Email
		End Get
		Set
			If (Me._Email.Equals(value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Bit")>  _
	Public Property Text() As System.Nullable(Of Boolean)
		Get
			Return Me._Text
		End Get
		Set
			If (Me._Text.Equals(value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WorkRequest")>  _
Partial Public Class WorkRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WorkRequestID As Integer
	
	Private _isBug As System.Nullable(Of Boolean)
	
	Private _Name As String
	
	Private _Description As String
	
	Private _LoggedDate As System.Nullable(Of Date)
	
	Private _EstimateDeliveryDate As System.Nullable(Of Date)
	
	Private _DeveloperComment As String
	
	Private _Complete As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWorkRequestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkRequestIDChanged()
    End Sub
    Partial Private Sub OnisBugChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBugChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnLoggedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLoggedDateChanged()
    End Sub
    Partial Private Sub OnEstimateDeliveryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstimateDeliveryDateChanged()
    End Sub
    Partial Private Sub OnDeveloperCommentChanging(value As String)
    End Sub
    Partial Private Sub OnDeveloperCommentChanged()
    End Sub
    Partial Private Sub OnCompleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCompleteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkRequestID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WorkRequestID() As Integer
		Get
			Return Me._WorkRequestID
		End Get
		Set
			If ((Me._WorkRequestID = value)  _
						= false) Then
				Me.OnWorkRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkRequestID = value
				Me.SendPropertyChanged("WorkRequestID")
				Me.OnWorkRequestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBug", DbType:="Bit")>  _
	Public Property isBug() As System.Nullable(Of Boolean)
		Get
			Return Me._isBug
		End Get
		Set
			If (Me._isBug.Equals(value) = false) Then
				Me.OnisBugChanging(value)
				Me.SendPropertyChanging
				Me._isBug = value
				Me.SendPropertyChanged("isBug")
				Me.OnisBugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(1000)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoggedDate", DbType:="DateTime")>  _
	Public Property LoggedDate() As System.Nullable(Of Date)
		Get
			Return Me._LoggedDate
		End Get
		Set
			If (Me._LoggedDate.Equals(value) = false) Then
				Me.OnLoggedDateChanging(value)
				Me.SendPropertyChanging
				Me._LoggedDate = value
				Me.SendPropertyChanged("LoggedDate")
				Me.OnLoggedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimateDeliveryDate", DbType:="DateTime")>  _
	Public Property EstimateDeliveryDate() As System.Nullable(Of Date)
		Get
			Return Me._EstimateDeliveryDate
		End Get
		Set
			If (Me._EstimateDeliveryDate.Equals(value) = false) Then
				Me.OnEstimateDeliveryDateChanging(value)
				Me.SendPropertyChanging
				Me._EstimateDeliveryDate = value
				Me.SendPropertyChanged("EstimateDeliveryDate")
				Me.OnEstimateDeliveryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeveloperComment", DbType:="NChar(10)")>  _
	Public Property DeveloperComment() As String
		Get
			Return Me._DeveloperComment
		End Get
		Set
			If (String.Equals(Me._DeveloperComment, value) = false) Then
				Me.OnDeveloperCommentChanging(value)
				Me.SendPropertyChanging
				Me._DeveloperComment = value
				Me.SendPropertyChanged("DeveloperComment")
				Me.OnDeveloperCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complete", DbType:="Bit")>  _
	Public Property Complete() As System.Nullable(Of Boolean)
		Get
			Return Me._Complete
		End Get
		Set
			If (Me._Complete.Equals(value) = false) Then
				Me.OnCompleteChanging(value)
				Me.SendPropertyChanging
				Me._Complete = value
				Me.SendPropertyChanged("Complete")
				Me.OnCompleteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AlertType")>  _
Partial Public Class AlertType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationAlertTypeID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _DriverId As System.Nullable(Of System.Guid)
	
	Private _GeoFenceID As System.Nullable(Of System.Guid)
	
	Private _Timespan_seconds As System.Nullable(Of Integer)
	
	Private _DeliveryGroup As System.Nullable(Of System.Guid)
	
	Private _Action As Integer
	
	Private _SubscriberNativeID As System.Nullable(Of System.Guid)
	
	Private _SendEmail As System.Nullable(Of Boolean)
	
	Private _SendText As System.Nullable(Of Boolean)
	
	Private _isBooking As System.Nullable(Of Boolean)
	
	Private _isSent As System.Nullable(Of Boolean)
	
	Private _BookingID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDriverIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDriverIdChanged()
    End Sub
    Partial Private Sub OnGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnTimespan_secondsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimespan_secondsChanged()
    End Sub
    Partial Private Sub OnDeliveryGroupChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDeliveryGroupChanged()
    End Sub
    Partial Private Sub OnActionChanging(value As Integer)
    End Sub
    Partial Private Sub OnActionChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnisBookingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBookingChanged()
    End Sub
    Partial Private Sub OnisSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisSentChanged()
    End Sub
    Partial Private Sub OnBookingIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBookingIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationAlertTypeID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationAlertTypeID() As System.Guid
		Get
			Return Me._ApplicationAlertTypeID
		End Get
		Set
			If ((Me._ApplicationAlertTypeID = value)  _
						= false) Then
				Me.OnApplicationAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationAlertTypeID = value
				Me.SendPropertyChanged("ApplicationAlertTypeID")
				Me.OnApplicationAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverId", DbType:="UniqueIdentifier")>  _
	Public Property DriverId() As System.Nullable(Of System.Guid)
		Get
			Return Me._DriverId
		End Get
		Set
			If (Me._DriverId.Equals(value) = false) Then
				Me.OnDriverIdChanging(value)
				Me.SendPropertyChanging
				Me._DriverId = value
				Me.SendPropertyChanged("DriverId")
				Me.OnDriverIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property GeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GeoFenceID
		End Get
		Set
			If (Me._GeoFenceID.Equals(value) = false) Then
				Me.OnGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceID = value
				Me.SendPropertyChanged("GeoFenceID")
				Me.OnGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timespan_seconds", DbType:="Int")>  _
	Public Property Timespan_seconds() As System.Nullable(Of Integer)
		Get
			Return Me._Timespan_seconds
		End Get
		Set
			If (Me._Timespan_seconds.Equals(value) = false) Then
				Me.OnTimespan_secondsChanging(value)
				Me.SendPropertyChanging
				Me._Timespan_seconds = value
				Me.SendPropertyChanged("Timespan_seconds")
				Me.OnTimespan_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryGroup", DbType:="UniqueIdentifier")>  _
	Public Property DeliveryGroup() As System.Nullable(Of System.Guid)
		Get
			Return Me._DeliveryGroup
		End Get
		Set
			If (Me._DeliveryGroup.Equals(value) = false) Then
				Me.OnDeliveryGroupChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryGroup = value
				Me.SendPropertyChanged("DeliveryGroup")
				Me.OnDeliveryGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Action", DbType:="Int NOT NULL")>  _
	Public Property Action() As Integer
		Get
			Return Me._Action
		End Get
		Set
			If ((Me._Action = value)  _
						= false) Then
				Me.OnActionChanging(value)
				Me.SendPropertyChanging
				Me._Action = value
				Me.SendPropertyChanged("Action")
				Me.OnActionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier")>  _
	Public Property SubscriberNativeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SubscriberNativeID
		End Get
		Set
			If (Me._SubscriberNativeID.Equals(value) = false) Then
				Me.OnSubscriberNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberNativeID = value
				Me.SendPropertyChanged("SubscriberNativeID")
				Me.OnSubscriberNativeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>  _
	Public Property SendEmail() As System.Nullable(Of Boolean)
		Get
			Return Me._SendEmail
		End Get
		Set
			If (Me._SendEmail.Equals(value) = false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>  _
	Public Property SendText() As System.Nullable(Of Boolean)
		Get
			Return Me._SendText
		End Get
		Set
			If (Me._SendText.Equals(value) = false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBooking", DbType:="Bit")>  _
	Public Property isBooking() As System.Nullable(Of Boolean)
		Get
			Return Me._isBooking
		End Get
		Set
			If (Me._isBooking.Equals(value) = false) Then
				Me.OnisBookingChanging(value)
				Me.SendPropertyChanging
				Me._isBooking = value
				Me.SendPropertyChanged("isBooking")
				Me.OnisBookingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isSent", DbType:="Bit")>  _
	Public Property isSent() As System.Nullable(Of Boolean)
		Get
			Return Me._isSent
		End Get
		Set
			If (Me._isSent.Equals(value) = false) Then
				Me.OnisSentChanging(value)
				Me.SendPropertyChanging
				Me._isSent = value
				Me.SendPropertyChanged("isSent")
				Me.OnisSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingID", DbType:="UniqueIdentifier")>  _
	Public Property BookingID() As System.Nullable(Of System.Guid)
		Get
			Return Me._BookingID
		End Get
		Set
			If (Me._BookingID.Equals(value) = false) Then
				Me.OnBookingIDChanging(value)
				Me.SendPropertyChanging
				Me._BookingID = value
				Me.SendPropertyChanged("BookingID")
				Me.OnBookingIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AlertTypeOccurance")>  _
Partial Public Class AlertTypeOccurance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlertTypeOccuranceID As System.Guid
	
	Private _AlertTypeID As System.Guid
	
	Private _GeoFenceCollisionID As System.Guid
	
	Private _SubscriberTypeStr As String
	
	Private _SubscriberTypeName As String
	
	Private _SubscriberNativeID As System.Nullable(Of System.Guid)
	
	Private _Emails As String
	
	Private _Texts As String
	
	Private _DateSend As System.Nullable(Of Date)
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _ApplicationGeoFenceName As String
	
	Private _MessageContent As String
	
	Private _DriverName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertTypeOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeOccuranceIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnGeoFenceCollisionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceCollisionIDChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeStrChanging(value As String)
    End Sub
    Partial Private Sub OnSubscriberTypeStrChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubscriberTypeNameChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnEmailsChanging(value As String)
    End Sub
    Partial Private Sub OnEmailsChanged()
    End Sub
    Partial Private Sub OnTextsChanging(value As String)
    End Sub
    Partial Private Sub OnTextsChanged()
    End Sub
    Partial Private Sub OnDateSendChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSendChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationGeoFenceNameChanged()
    End Sub
    Partial Private Sub OnMessageContentChanging(value As String)
    End Sub
    Partial Private Sub OnMessageContentChanged()
    End Sub
    Partial Private Sub OnDriverNameChanging(value As String)
    End Sub
    Partial Private Sub OnDriverNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeOccuranceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AlertTypeOccuranceID() As System.Guid
		Get
			Return Me._AlertTypeOccuranceID
		End Get
		Set
			If ((Me._AlertTypeOccuranceID = value)  _
						= false) Then
				Me.OnAlertTypeOccuranceIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeOccuranceID = value
				Me.SendPropertyChanged("AlertTypeOccuranceID")
				Me.OnAlertTypeOccuranceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property AlertTypeID() As System.Guid
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If ((Me._AlertTypeID = value)  _
						= false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceCollisionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceCollisionID() As System.Guid
		Get
			Return Me._GeoFenceCollisionID
		End Get
		Set
			If ((Me._GeoFenceCollisionID = value)  _
						= false) Then
				Me.OnGeoFenceCollisionIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceCollisionID = value
				Me.SendPropertyChanged("GeoFenceCollisionID")
				Me.OnGeoFenceCollisionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeStr", DbType:="VarChar(200)")>  _
	Public Property SubscriberTypeStr() As String
		Get
			Return Me._SubscriberTypeStr
		End Get
		Set
			If (String.Equals(Me._SubscriberTypeStr, value) = false) Then
				Me.OnSubscriberTypeStrChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeStr = value
				Me.SendPropertyChanged("SubscriberTypeStr")
				Me.OnSubscriberTypeStrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeName", DbType:="VarChar(500)")>  _
	Public Property SubscriberTypeName() As String
		Get
			Return Me._SubscriberTypeName
		End Get
		Set
			If (String.Equals(Me._SubscriberTypeName, value) = false) Then
				Me.OnSubscriberTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeName = value
				Me.SendPropertyChanged("SubscriberTypeName")
				Me.OnSubscriberTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier")>  _
	Public Property SubscriberNativeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SubscriberNativeID
		End Get
		Set
			If (Me._SubscriberNativeID.Equals(value) = false) Then
				Me.OnSubscriberNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberNativeID = value
				Me.SendPropertyChanged("SubscriberNativeID")
				Me.OnSubscriberNativeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Emails", DbType:="VarChar(MAX)")>  _
	Public Property Emails() As String
		Get
			Return Me._Emails
		End Get
		Set
			If (String.Equals(Me._Emails, value) = false) Then
				Me.OnEmailsChanging(value)
				Me.SendPropertyChanging
				Me._Emails = value
				Me.SendPropertyChanged("Emails")
				Me.OnEmailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Texts", DbType:="VarChar(MAX)")>  _
	Public Property Texts() As String
		Get
			Return Me._Texts
		End Get
		Set
			If (String.Equals(Me._Texts, value) = false) Then
				Me.OnTextsChanging(value)
				Me.SendPropertyChanging
				Me._Texts = value
				Me.SendPropertyChanged("Texts")
				Me.OnTextsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="DateTime")>  _
	Public Property DateSend() As System.Nullable(Of Date)
		Get
			Return Me._DateSend
		End Get
		Set
			If (Me._DateSend.Equals(value) = false) Then
				Me.OnDateSendChanging(value)
				Me.SendPropertyChanging
				Me._DateSend = value
				Me.SendPropertyChanged("DateSend")
				Me.OnDateSendChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceName", DbType:="VarChar(1000)")>  _
	Public Property ApplicationGeoFenceName() As String
		Get
			Return Me._ApplicationGeoFenceName
		End Get
		Set
			If (String.Equals(Me._ApplicationGeoFenceName, value) = false) Then
				Me.OnApplicationGeoFenceNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceName = value
				Me.SendPropertyChanged("ApplicationGeoFenceName")
				Me.OnApplicationGeoFenceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>  _
	Public Property MessageContent() As String
		Get
			Return Me._MessageContent
		End Get
		Set
			If (String.Equals(Me._MessageContent, value) = false) Then
				Me.OnMessageContentChanging(value)
				Me.SendPropertyChanging
				Me._MessageContent = value
				Me.SendPropertyChanged("MessageContent")
				Me.OnMessageContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="VarChar(500)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me.OnDriverNameChanging(value)
				Me.SendPropertyChanging
				Me._DriverName = value
				Me.SendPropertyChanged("DriverName")
				Me.OnDriverNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[AlertTypeSubscriber.deleteme]")>  _
Partial Public Class AlertTypeSubscriber_deleteme
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlertTypeSubscriberID As System.Guid
	
	Private _AlertTypeID As System.Guid
	
	Private _SendEmail As System.Nullable(Of Boolean)
	
	Private _SendText As System.Nullable(Of Boolean)
	
	Private _SubscriberTypeID As Integer
	
	Private _NativeID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertTypeSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeSubscriberIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanged()
    End Sub
    Partial Private Sub OnNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNativeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AlertTypeSubscriberID() As System.Guid
		Get
			Return Me._AlertTypeSubscriberID
		End Get
		Set
			If ((Me._AlertTypeSubscriberID = value)  _
						= false) Then
				Me.OnAlertTypeSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeSubscriberID = value
				Me.SendPropertyChanged("AlertTypeSubscriberID")
				Me.OnAlertTypeSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property AlertTypeID() As System.Guid
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If ((Me._AlertTypeID = value)  _
						= false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>  _
	Public Property SendEmail() As System.Nullable(Of Boolean)
		Get
			Return Me._SendEmail
		End Get
		Set
			If (Me._SendEmail.Equals(value) = false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>  _
	Public Property SendText() As System.Nullable(Of Boolean)
		Get
			Return Me._SendText
		End Get
		Set
			If (Me._SendText.Equals(value) = false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeID", DbType:="Int NOT NULL")>  _
	Public Property SubscriberTypeID() As Integer
		Get
			Return Me._SubscriberTypeID
		End Get
		Set
			If ((Me._SubscriberTypeID = value)  _
						= false) Then
				Me.OnSubscriberTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeID = value
				Me.SendPropertyChanged("SubscriberTypeID")
				Me.OnSubscriberTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NativeID() As System.Guid
		Get
			Return Me._NativeID
		End Get
		Set
			If ((Me._NativeID = value)  _
						= false) Then
				Me.OnNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._NativeID = value
				Me.SendPropertyChanged("NativeID")
				Me.OnNativeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationBooking")>  _
Partial Public Class ApplicationBooking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationBookingId As System.Guid
	
	Private _ApplicationDriverID As System.Guid
	
	Private _ApplicationId As System.Guid
	
	Private _ArrivalTime As System.Nullable(Of Date)
	
	Private _GeofenceLeaveId As System.Guid
	
	Private _GeofenceDestinationId As System.Guid
	
	Private _IsAlert5min As System.Nullable(Of Boolean)
	
	Private _IsAlertLeaveForPickup As System.Nullable(Of Boolean)
	
	Private _ContactID As System.Guid
	
	Private _CustomerPhone As String
	
	Private _CustomerEmail As String
	
	Private _GeofenceLeave As String
	
	Private _GeofenceDestination As String
	
	Private _ApplicationDriver As EntityRef(Of ApplicationDriver)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationBookingIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationBookingIdChanged()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnArrivalTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnArrivalTimeChanged()
    End Sub
    Partial Private Sub OnGeofenceLeaveIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeofenceLeaveIdChanged()
    End Sub
    Partial Private Sub OnGeofenceDestinationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeofenceDestinationIdChanged()
    End Sub
    Partial Private Sub OnIsAlert5minChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlert5minChanged()
    End Sub
    Partial Private Sub OnIsAlertLeaveForPickupChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlertLeaveForPickupChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnCustomerPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPhoneChanged()
    End Sub
    Partial Private Sub OnCustomerEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerEmailChanged()
    End Sub
    Partial Private Sub OnGeofenceLeaveChanging(value As String)
    End Sub
    Partial Private Sub OnGeofenceLeaveChanged()
    End Sub
    Partial Private Sub OnGeofenceDestinationChanging(value As String)
    End Sub
    Partial Private Sub OnGeofenceDestinationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationDriver = CType(Nothing, EntityRef(Of ApplicationDriver))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationBookingId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationBookingId() As System.Guid
		Get
			Return Me._ApplicationBookingId
		End Get
		Set
			If ((Me._ApplicationBookingId = value)  _
						= false) Then
				Me.OnApplicationBookingIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationBookingId = value
				Me.SendPropertyChanged("ApplicationBookingId")
				Me.OnApplicationBookingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				If Me._ApplicationDriver.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDriverID = value
				Me.SendPropertyChanged("ApplicationDriverID")
				Me.OnApplicationDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime")>  _
	Public Property ArrivalTime() As System.Nullable(Of Date)
		Get
			Return Me._ArrivalTime
		End Get
		Set
			If (Me._ArrivalTime.Equals(value) = false) Then
				Me.OnArrivalTimeChanging(value)
				Me.SendPropertyChanging
				Me._ArrivalTime = value
				Me.SendPropertyChanged("ArrivalTime")
				Me.OnArrivalTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeaveId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceLeaveId() As System.Guid
		Get
			Return Me._GeofenceLeaveId
		End Get
		Set
			If ((Me._GeofenceLeaveId = value)  _
						= false) Then
				Me.OnGeofenceLeaveIdChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceLeaveId = value
				Me.SendPropertyChanged("GeofenceLeaveId")
				Me.OnGeofenceLeaveIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestinationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceDestinationId() As System.Guid
		Get
			Return Me._GeofenceDestinationId
		End Get
		Set
			If ((Me._GeofenceDestinationId = value)  _
						= false) Then
				Me.OnGeofenceDestinationIdChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceDestinationId = value
				Me.SendPropertyChanged("GeofenceDestinationId")
				Me.OnGeofenceDestinationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlert5min", DbType:="Bit")>  _
	Public Property IsAlert5min() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlert5min
		End Get
		Set
			If (Me._IsAlert5min.Equals(value) = false) Then
				Me.OnIsAlert5minChanging(value)
				Me.SendPropertyChanging
				Me._IsAlert5min = value
				Me.SendPropertyChanged("IsAlert5min")
				Me.OnIsAlert5minChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlertLeaveForPickup", DbType:="Bit")>  _
	Public Property IsAlertLeaveForPickup() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlertLeaveForPickup
		End Get
		Set
			If (Me._IsAlertLeaveForPickup.Equals(value) = false) Then
				Me.OnIsAlertLeaveForPickupChanging(value)
				Me.SendPropertyChanging
				Me._IsAlertLeaveForPickup = value
				Me.SendPropertyChanged("IsAlertLeaveForPickup")
				Me.OnIsAlertLeaveForPickupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ContactID() As System.Guid
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me.OnCustomerPhoneChanging(value)
				Me.SendPropertyChanging
				Me._CustomerPhone = value
				Me.SendPropertyChanged("CustomerPhone")
				Me.OnCustomerPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerEmail() As String
		Get
			Return Me._CustomerEmail
		End Get
		Set
			If (String.Equals(Me._CustomerEmail, value) = false) Then
				Me.OnCustomerEmailChanging(value)
				Me.SendPropertyChanging
				Me._CustomerEmail = value
				Me.SendPropertyChanged("CustomerEmail")
				Me.OnCustomerEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeave", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceLeave() As String
		Get
			Return Me._GeofenceLeave
		End Get
		Set
			If (String.Equals(Me._GeofenceLeave, value) = false) Then
				Me.OnGeofenceLeaveChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceLeave = value
				Me.SendPropertyChanged("GeofenceLeave")
				Me.OnGeofenceLeaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestination", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceDestination() As String
		Get
			Return Me._GeofenceDestination
		End Get
		Set
			If (String.Equals(Me._GeofenceDestination, value) = false) Then
				Me.OnGeofenceDestinationChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceDestination = value
				Me.SendPropertyChanged("GeofenceDestination")
				Me.OnGeofenceDestinationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationDriver_ApplicationBooking", Storage:="_ApplicationDriver", ThisKey:="ApplicationDriverID", OtherKey:="ApplicationDriverID", IsForeignKey:=true)>  _
	Public Property ApplicationDriver() As ApplicationDriver
		Get
			Return Me._ApplicationDriver.Entity
		End Get
		Set
			Dim previousValue As ApplicationDriver = Me._ApplicationDriver.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationDriver.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationDriver.Entity = Nothing
					previousValue.ApplicationBookings.Remove(Me)
				End If
				Me._ApplicationDriver.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationBookings.Add(Me)
					Me._ApplicationDriverID = value.ApplicationDriverID
				Else
					Me._ApplicationDriverID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("ApplicationDriver")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationBooking_20170222")>  _
Partial Public Class ApplicationBooking_20170222
	
	Private _ApplicationBookingId As System.Guid
	
	Private _ApplicationDriverID As System.Guid
	
	Private _ApplicationId As System.Guid
	
	Private _ArrivalTime As System.Nullable(Of Date)
	
	Private _GeofenceLeaveId As System.Guid
	
	Private _GeofenceDestinationId As System.Guid
	
	Private _IsAlert5min As System.Nullable(Of Boolean)
	
	Private _IsAlertLeaveForPickup As System.Nullable(Of Boolean)
	
	Private _ContactID As System.Guid
	
	Private _CustomerPhone As String
	
	Private _CustomerEmail As String
	
	Private _GeofenceLeave As String
	
	Private _GeofenceDestination As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationBookingId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationBookingId() As System.Guid
		Get
			Return Me._ApplicationBookingId
		End Get
		Set
			If ((Me._ApplicationBookingId = value)  _
						= false) Then
				Me._ApplicationBookingId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime")>  _
	Public Property ArrivalTime() As System.Nullable(Of Date)
		Get
			Return Me._ArrivalTime
		End Get
		Set
			If (Me._ArrivalTime.Equals(value) = false) Then
				Me._ArrivalTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeaveId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceLeaveId() As System.Guid
		Get
			Return Me._GeofenceLeaveId
		End Get
		Set
			If ((Me._GeofenceLeaveId = value)  _
						= false) Then
				Me._GeofenceLeaveId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestinationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceDestinationId() As System.Guid
		Get
			Return Me._GeofenceDestinationId
		End Get
		Set
			If ((Me._GeofenceDestinationId = value)  _
						= false) Then
				Me._GeofenceDestinationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlert5min", DbType:="Bit")>  _
	Public Property IsAlert5min() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlert5min
		End Get
		Set
			If (Me._IsAlert5min.Equals(value) = false) Then
				Me._IsAlert5min = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlertLeaveForPickup", DbType:="Bit")>  _
	Public Property IsAlertLeaveForPickup() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlertLeaveForPickup
		End Get
		Set
			If (Me._IsAlertLeaveForPickup.Equals(value) = false) Then
				Me._IsAlertLeaveForPickup = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ContactID() As System.Guid
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me._ContactID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerEmail() As String
		Get
			Return Me._CustomerEmail
		End Get
		Set
			If (String.Equals(Me._CustomerEmail, value) = false) Then
				Me._CustomerEmail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeave", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceLeave() As String
		Get
			Return Me._GeofenceLeave
		End Get
		Set
			If (String.Equals(Me._GeofenceLeave, value) = false) Then
				Me._GeofenceLeave = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestination", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceDestination() As String
		Get
			Return Me._GeofenceDestination
		End Get
		Set
			If (String.Equals(Me._GeofenceDestination, value) = false) Then
				Me._GeofenceDestination = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationDriver")>  _
Partial Public Class ApplicationDriver
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationDriverID As System.Guid
	
	Private _FirstName As String
	
	Private _Surname As String
	
	Private _PhoneNumber As String
	
	Private _photo As String
	
	Private _photoBinary As System.Data.Linq.Binary
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Notes As String
	
	Private _emailaddress As String
	
	Private _ApplicationLocationID As System.Nullable(Of System.Guid)
	
	Private _ApplicationBookings As EntitySet(Of ApplicationBooking)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnphotoChanging(value As String)
    End Sub
    Partial Private Sub OnphotoChanged()
    End Sub
    Partial Private Sub OnphotoBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnphotoBinaryChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnemailaddressChanging(value As String)
    End Sub
    Partial Private Sub OnemailaddressChanged()
    End Sub
    Partial Private Sub OnApplicationLocationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationLocationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationBookings = New EntitySet(Of ApplicationBooking)(AddressOf Me.attach_ApplicationBookings, AddressOf Me.detach_ApplicationBookings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				Me.OnApplicationDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDriverID = value
				Me.SendPropertyChanged("ApplicationDriverID")
				Me.OnApplicationDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(MAX)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(MAX)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photo", DbType:="VarChar(MAX)")>  _
	Public Property photo() As String
		Get
			Return Me._photo
		End Get
		Set
			If (String.Equals(Me._photo, value) = false) Then
				Me.OnphotoChanging(value)
				Me.SendPropertyChanging
				Me._photo = value
				Me.SendPropertyChanged("photo")
				Me.OnphotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoBinary", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoBinary() As System.Data.Linq.Binary
		Get
			Return Me._photoBinary
		End Get
		Set
			If (Object.Equals(Me._photoBinary, value) = false) Then
				Me.OnphotoBinaryChanging(value)
				Me.SendPropertyChanging
				Me._photoBinary = value
				Me.SendPropertyChanged("photoBinary")
				Me.OnphotoBinaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emailaddress", DbType:="VarChar(500)")>  _
	Public Property emailaddress() As String
		Get
			Return Me._emailaddress
		End Get
		Set
			If (String.Equals(Me._emailaddress, value) = false) Then
				Me.OnemailaddressChanging(value)
				Me.SendPropertyChanging
				Me._emailaddress = value
				Me.SendPropertyChanged("emailaddress")
				Me.OnemailaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationLocationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationLocationID
		End Get
		Set
			If (Me._ApplicationLocationID.Equals(value) = false) Then
				Me.OnApplicationLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationLocationID = value
				Me.SendPropertyChanged("ApplicationLocationID")
				Me.OnApplicationLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationDriver_ApplicationBooking", Storage:="_ApplicationBookings", ThisKey:="ApplicationDriverID", OtherKey:="ApplicationDriverID")>  _
	Public Property ApplicationBookings() As EntitySet(Of ApplicationBooking)
		Get
			Return Me._ApplicationBookings
		End Get
		Set
			Me._ApplicationBookings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationBookings(ByVal entity As ApplicationBooking)
		Me.SendPropertyChanging
		entity.ApplicationDriver = Me
	End Sub
	
	Private Sub detach_ApplicationBookings(ByVal entity As ApplicationBooking)
		Me.SendPropertyChanging
		entity.ApplicationDriver = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationFeature")>  _
Partial Public Class ApplicationFeature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationFeatureID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _FeatureID As System.Guid
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _Feature As EntityRef(Of Feature)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationFeatureIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._Feature = CType(Nothing, EntityRef(Of Feature))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFeatureID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationFeatureID() As System.Guid
		Get
			Return Me._ApplicationFeatureID
		End Get
		Set
			If ((Me._ApplicationFeatureID = value)  _
						= false) Then
				Me.OnApplicationFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationFeatureID = value
				Me.SendPropertyChanged("ApplicationFeatureID")
				Me.OnApplicationFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property FeatureID() As System.Guid
		Get
			Return Me._FeatureID
		End Get
		Set
			If ((Me._FeatureID = value)  _
						= false) Then
				If Me._Feature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._FeatureID = value
				Me.SendPropertyChanged("FeatureID")
				Me.OnFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeature", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationFeatures.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatures.Add(Me)
					Me._ApplicationID = value.ApplicationId
				Else
					Me._ApplicationID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeature", Storage:="_Feature", ThisKey:="FeatureID", OtherKey:="FeatureID", IsForeignKey:=true)>  _
	Public Property Feature() As Feature
		Get
			Return Me._Feature.Entity
		End Get
		Set
			Dim previousValue As Feature = Me._Feature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Feature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Feature.Entity = Nothing
					previousValue.ApplicationFeatures.Remove(Me)
				End If
				Me._Feature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatures.Add(Me)
					Me._FeatureID = value.FeatureID
				Else
					Me._FeatureID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Feature")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationFeatureRole")>  _
Partial Public Class ApplicationFeatureRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationFeatureRoledID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _FeatureID As System.Guid
	
	Private _RoleID As System.Guid
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _aspnet_Role As EntityRef(Of aspnet_Role)
	
	Private _Feature As EntityRef(Of Feature)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationFeatureRoledIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationFeatureRoledIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
		Me._Feature = CType(Nothing, EntityRef(Of Feature))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFeatureRoledID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationFeatureRoledID() As System.Guid
		Get
			Return Me._ApplicationFeatureRoledID
		End Get
		Set
			If ((Me._ApplicationFeatureRoledID = value)  _
						= false) Then
				Me.OnApplicationFeatureRoledIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationFeatureRoledID = value
				Me.SendPropertyChanged("ApplicationFeatureRoledID")
				Me.OnApplicationFeatureRoledIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property FeatureID() As System.Guid
		Get
			Return Me._FeatureID
		End Get
		Set
			If ((Me._FeatureID = value)  _
						= false) Then
				If Me._Feature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._FeatureID = value
				Me.SendPropertyChanged("FeatureID")
				Me.OnFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RoleID() As System.Guid
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				If Me._aspnet_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeatureRole", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationFeatureRoles.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatureRoles.Add(Me)
					Me._ApplicationID = value.ApplicationId
				Else
					Me._ApplicationID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_ApplicationFeatureRole", Storage:="_aspnet_Role", ThisKey:="RoleID", OtherKey:="RoleId", IsForeignKey:=true)>  _
	Public Property aspnet_Role() As aspnet_Role
		Get
			Return Me._aspnet_Role.Entity
		End Get
		Set
			Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Role.Entity = Nothing
					previousValue.ApplicationFeatureRoles.Remove(Me)
				End If
				Me._aspnet_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatureRoles.Add(Me)
					Me._RoleID = value.RoleId
				Else
					Me._RoleID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeatureRole", Storage:="_Feature", ThisKey:="FeatureID", OtherKey:="FeatureID", IsForeignKey:=true)>  _
	Public Property Feature() As Feature
		Get
			Return Me._Feature.Entity
		End Get
		Set
			Dim previousValue As Feature = Me._Feature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Feature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Feature.Entity = Nothing
					previousValue.ApplicationFeatureRoles.Remove(Me)
				End If
				Me._Feature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatureRoles.Add(Me)
					Me._FeatureID = value.FeatureID
				Else
					Me._FeatureID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Feature")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence")>  _
Partial Public Class ApplicationGeoFence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationGeoFenceID As System.Guid
	
	Private _ApplictionID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Colour As String
	
	Private _isCircular As System.Nullable(Of Boolean)
	
	Private _CircleRadiusMetres As System.Nullable(Of Double)
	
	Private _CircleCentre As String
	
	Private _isBooking As System.Nullable(Of Boolean)
	
	Private _ApplicationGeoFenceSides As EntitySet(Of ApplicationGeoFenceSide)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnApplictionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplictionIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnColourChanging(value As String)
    End Sub
    Partial Private Sub OnColourChanged()
    End Sub
    Partial Private Sub OnisCircularChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisCircularChanged()
    End Sub
    Partial Private Sub OnCircleRadiusMetresChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircleRadiusMetresChanged()
    End Sub
    Partial Private Sub OnCircleCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCircleCentreChanged()
    End Sub
    Partial Private Sub OnisBookingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBookingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationGeoFenceSides = New EntitySet(Of ApplicationGeoFenceSide)(AddressOf Me.attach_ApplicationGeoFenceSides, AddressOf Me.detach_ApplicationGeoFenceSides)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationGeoFenceID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If ((Me._ApplicationGeoFenceID = value)  _
						= false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplictionID() As System.Guid
		Get
			Return Me._ApplictionID
		End Get
		Set
			If ((Me._ApplictionID = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplictionIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplictionID = value
				Me.SendPropertyChanged("ApplictionID")
				Me.OnApplictionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>  _
	Public Property Colour() As String
		Get
			Return Me._Colour
		End Get
		Set
			If (String.Equals(Me._Colour, value) = false) Then
				Me.OnColourChanging(value)
				Me.SendPropertyChanging
				Me._Colour = value
				Me.SendPropertyChanged("Colour")
				Me.OnColourChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>  _
	Public Property isCircular() As System.Nullable(Of Boolean)
		Get
			Return Me._isCircular
		End Get
		Set
			If (Me._isCircular.Equals(value) = false) Then
				Me.OnisCircularChanging(value)
				Me.SendPropertyChanging
				Me._isCircular = value
				Me.SendPropertyChanged("isCircular")
				Me.OnisCircularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>  _
	Public Property CircleRadiusMetres() As System.Nullable(Of Double)
		Get
			Return Me._CircleRadiusMetres
		End Get
		Set
			If (Me._CircleRadiusMetres.Equals(value) = false) Then
				Me.OnCircleRadiusMetresChanging(value)
				Me.SendPropertyChanging
				Me._CircleRadiusMetres = value
				Me.SendPropertyChanged("CircleRadiusMetres")
				Me.OnCircleRadiusMetresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>  _
	Public Property CircleCentre() As String
		Get
			Return Me._CircleCentre
		End Get
		Set
			If (String.Equals(Me._CircleCentre, value) = false) Then
				Me.OnCircleCentreChanging(value)
				Me.SendPropertyChanging
				Me._CircleCentre = value
				Me.SendPropertyChanged("CircleCentre")
				Me.OnCircleCentreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBooking", DbType:="Bit")>  _
	Public Property isBooking() As System.Nullable(Of Boolean)
		Get
			Return Me._isBooking
		End Get
		Set
			If (Me._isBooking.Equals(value) = false) Then
				Me.OnisBookingChanging(value)
				Me.SendPropertyChanging
				Me._isBooking = value
				Me.SendPropertyChanged("isBooking")
				Me.OnisBookingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationGeoFence_ApplicationGeoFenceSide", Storage:="_ApplicationGeoFenceSides", ThisKey:="ApplicationGeoFenceID", OtherKey:="ApplicationGeoFenceID")>  _
	Public Property ApplicationGeoFenceSides() As EntitySet(Of ApplicationGeoFenceSide)
		Get
			Return Me._ApplicationGeoFenceSides
		End Get
		Set
			Me._ApplicationGeoFenceSides.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationGeoFence", Storage:="_aspnet_Application", ThisKey:="ApplictionID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationGeoFences.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationGeoFences.Add(Me)
					Me._ApplictionID = value.ApplicationId
				Else
					Me._ApplictionID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationGeoFenceSides(ByVal entity As ApplicationGeoFenceSide)
		Me.SendPropertyChanging
		entity.ApplicationGeoFence = Me
	End Sub
	
	Private Sub detach_ApplicationGeoFenceSides(ByVal entity As ApplicationGeoFenceSide)
		Me.SendPropertyChanging
		entity.ApplicationGeoFence = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence_20160615")>  _
Partial Public Class ApplicationGeoFence_20160615
	
	Private _ApplicationGeoFenceID As System.Guid
	
	Private _ApplictionID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Colour As String
	
	Private _isCircular As System.Nullable(Of Boolean)
	
	Private _CircleRadiusMetres As System.Nullable(Of Double)
	
	Private _CircleCentre As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationGeoFenceID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If ((Me._ApplicationGeoFenceID = value)  _
						= false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplictionID() As System.Guid
		Get
			Return Me._ApplictionID
		End Get
		Set
			If ((Me._ApplictionID = value)  _
						= false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me._DateCreated = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>  _
	Public Property Colour() As String
		Get
			Return Me._Colour
		End Get
		Set
			If (String.Equals(Me._Colour, value) = false) Then
				Me._Colour = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>  _
	Public Property isCircular() As System.Nullable(Of Boolean)
		Get
			Return Me._isCircular
		End Get
		Set
			If (Me._isCircular.Equals(value) = false) Then
				Me._isCircular = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>  _
	Public Property CircleRadiusMetres() As System.Nullable(Of Double)
		Get
			Return Me._CircleRadiusMetres
		End Get
		Set
			If (Me._CircleRadiusMetres.Equals(value) = false) Then
				Me._CircleRadiusMetres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>  _
	Public Property CircleCentre() As String
		Get
			Return Me._CircleCentre
		End Get
		Set
			If (String.Equals(Me._CircleCentre, value) = false) Then
				Me._CircleCentre = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence_20160842")>  _
Partial Public Class ApplicationGeoFence_20160842
	
	Private _ApplicationGeoFenceID As System.Guid
	
	Private _ApplictionID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Colour As String
	
	Private _isCircular As System.Nullable(Of Boolean)
	
	Private _CircleRadiusMetres As System.Nullable(Of Double)
	
	Private _CircleCentre As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationGeoFenceID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If ((Me._ApplicationGeoFenceID = value)  _
						= false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplictionID() As System.Guid
		Get
			Return Me._ApplictionID
		End Get
		Set
			If ((Me._ApplictionID = value)  _
						= false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me._DateCreated = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>  _
	Public Property Colour() As String
		Get
			Return Me._Colour
		End Get
		Set
			If (String.Equals(Me._Colour, value) = false) Then
				Me._Colour = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>  _
	Public Property isCircular() As System.Nullable(Of Boolean)
		Get
			Return Me._isCircular
		End Get
		Set
			If (Me._isCircular.Equals(value) = false) Then
				Me._isCircular = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>  _
	Public Property CircleRadiusMetres() As System.Nullable(Of Double)
		Get
			Return Me._CircleRadiusMetres
		End Get
		Set
			If (Me._CircleRadiusMetres.Equals(value) = false) Then
				Me._CircleRadiusMetres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>  _
	Public Property CircleCentre() As String
		Get
			Return Me._CircleCentre
		End Get
		Set
			If (String.Equals(Me._CircleCentre, value) = false) Then
				Me._CircleCentre = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeofenceProperty")>  _
Partial Public Class ApplicationGeofenceProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationGeoFencePropertyID As Integer
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _PropertyName As String
	
	Private _PropertyValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFencePropertyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApplicationGeoFencePropertyIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFencePropertyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ApplicationGeoFencePropertyID() As Integer
		Get
			Return Me._ApplicationGeoFencePropertyID
		End Get
		Set
			If ((Me._ApplicationGeoFencePropertyID = value)  _
						= false) Then
				Me.OnApplicationGeoFencePropertyIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFencePropertyID = value
				Me.SendPropertyChanged("ApplicationGeoFencePropertyID")
				Me.OnApplicationGeoFencePropertyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(1000)")>  _
	Public Property PropertyName() As String
		Get
			Return Me._PropertyName
		End Get
		Set
			If (String.Equals(Me._PropertyName, value) = false) Then
				Me.OnPropertyNameChanging(value)
				Me.SendPropertyChanging
				Me._PropertyName = value
				Me.SendPropertyChanged("PropertyName")
				Me.OnPropertyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="VarChar(1000)")>  _
	Public Property PropertyValue() As String
		Get
			Return Me._PropertyValue
		End Get
		Set
			If (String.Equals(Me._PropertyValue, value) = false) Then
				Me.OnPropertyValueChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValue = value
				Me.SendPropertyChanged("PropertyValue")
				Me.OnPropertyValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFenceSide")>  _
Partial Public Class ApplicationGeoFenceSide
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationGeoFenceSideID As System.Guid
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _loadOrder As Integer
	
	Private _ApplicationGeoFence As EntityRef(Of ApplicationGeoFence)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFenceSideIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationGeoFenceSideIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnloadOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnloadOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationGeoFence = CType(Nothing, EntityRef(Of ApplicationGeoFence))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceSideID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationGeoFenceSideID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceSideID
		End Get
		Set
			If ((Me._ApplicationGeoFenceSideID = value)  _
						= false) Then
				Me.OnApplicationGeoFenceSideIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceSideID = value
				Me.SendPropertyChanged("ApplicationGeoFenceSideID")
				Me.OnApplicationGeoFenceSideIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				If Me._ApplicationGeoFence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me.OnLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._Latitude = value
				Me.SendPropertyChanged("Latitude")
				Me.OnLatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadOrder", DbType:="Int NOT NULL")>  _
	Public Property loadOrder() As Integer
		Get
			Return Me._loadOrder
		End Get
		Set
			If ((Me._loadOrder = value)  _
						= false) Then
				Me.OnloadOrderChanging(value)
				Me.SendPropertyChanging
				Me._loadOrder = value
				Me.SendPropertyChanged("loadOrder")
				Me.OnloadOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationGeoFence_ApplicationGeoFenceSide", Storage:="_ApplicationGeoFence", ThisKey:="ApplicationGeoFenceID", OtherKey:="ApplicationGeoFenceID", IsForeignKey:=true)>  _
	Public Property ApplicationGeoFence() As ApplicationGeoFence
		Get
			Return Me._ApplicationGeoFence.Entity
		End Get
		Set
			Dim previousValue As ApplicationGeoFence = Me._ApplicationGeoFence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationGeoFence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationGeoFence.Entity = Nothing
					previousValue.ApplicationGeoFenceSides.Remove(Me)
				End If
				Me._ApplicationGeoFence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationGeoFenceSides.Add(Me)
					Me._ApplicationGeoFenceID = value.ApplicationGeoFenceID
				Else
					Me._ApplicationGeoFenceID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("ApplicationGeoFence")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFenceSide_20160615")>  _
Partial Public Class ApplicationGeoFenceSide_20160615
	
	Private _ApplicationGeoFenceSideID As System.Guid
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _loadOrder As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceSideID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationGeoFenceSideID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceSideID
		End Get
		Set
			If ((Me._ApplicationGeoFenceSideID = value)  _
						= false) Then
				Me._ApplicationGeoFenceSideID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadOrder", DbType:="Int NOT NULL")>  _
	Public Property loadOrder() As Integer
		Get
			Return Me._loadOrder
		End Get
		Set
			If ((Me._loadOrder = value)  _
						= false) Then
				Me._loadOrder = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationImage")>  _
Partial Public Class ApplicationImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationImageID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Img As System.Data.Linq.Binary
	
	Private _Name As String
	
	Private _Type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationImageID() As System.Guid
		Get
			Return Me._ApplicationImageID
		End Get
		Set
			If ((Me._ApplicationImageID = value)  _
						= false) Then
				Me.OnApplicationImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationImageID = value
				Me.SendPropertyChanged("ApplicationImageID")
				Me.OnApplicationImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Img", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Img() As System.Data.Linq.Binary
		Get
			Return Me._Img
		End Get
		Set
			If (Object.Equals(Me._Img, value) = false) Then
				Me.OnImgChanging(value)
				Me.SendPropertyChanging
				Me._Img = value
				Me.SendPropertyChanged("Img")
				Me.OnImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(350)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(350)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationLocation")>  _
Partial Public Class ApplicationLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationLocationID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _Name As String
	
	Private _Longitude As String
	
	Private _Lattitude As String
	
	Private _Address As String
	
	Private _ApplicationImageID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationLocationIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnLattitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLattitudeChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationLocationID() As System.Guid
		Get
			Return Me._ApplicationLocationID
		End Get
		Set
			If ((Me._ApplicationLocationID = value)  _
						= false) Then
				Me.OnApplicationLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationLocationID = value
				Me.SendPropertyChanged("ApplicationLocationID")
				Me.OnApplicationLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(100)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lattitude", DbType:="VarChar(100)")>  _
	Public Property Lattitude() As String
		Get
			Return Me._Lattitude
		End Get
		Set
			If (String.Equals(Me._Lattitude, value) = false) Then
				Me.OnLattitudeChanging(value)
				Me.SendPropertyChanging
				Me._Lattitude = value
				Me.SendPropertyChanged("Lattitude")
				Me.OnLattitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationImageID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationImageID
		End Get
		Set
			If (Me._ApplicationImageID.Equals(value) = false) Then
				Me.OnApplicationImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationImageID = value
				Me.SendPropertyChanged("ApplicationImageID")
				Me.OnApplicationImageIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationSettingValue")>  _
Partial Public Class ApplicationSettingValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _SettingID As System.Nullable(Of System.Guid)
	
	Private _Value As String
	
	Private _ApplicationSettingValueID As System.Guid
	
	Private _ValueObj As System.Data.Linq.Binary
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _Setting As EntityRef(Of Setting)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnApplicationSettingValueIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationSettingValueIDChanged()
    End Sub
    Partial Private Sub OnValueObjChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnValueObjChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._Setting = CType(Nothing, EntityRef(Of Setting))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier")>  _
	Public Property SettingID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SettingID
		End Get
		Set
			If (Me._SettingID.Equals(value) = false) Then
				If Me._Setting.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SettingID = value
				Me.SendPropertyChanged("SettingID")
				Me.OnSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(MAX)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationSettingValueID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationSettingValueID() As System.Guid
		Get
			Return Me._ApplicationSettingValueID
		End Get
		Set
			If ((Me._ApplicationSettingValueID = value)  _
						= false) Then
				Me.OnApplicationSettingValueIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationSettingValueID = value
				Me.SendPropertyChanged("ApplicationSettingValueID")
				Me.OnApplicationSettingValueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueObj", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ValueObj() As System.Data.Linq.Binary
		Get
			Return Me._ValueObj
		End Get
		Set
			If (Object.Equals(Me._ValueObj, value) = false) Then
				Me.OnValueObjChanging(value)
				Me.SendPropertyChanging
				Me._ValueObj = value
				Me.SendPropertyChanged("ValueObj")
				Me.OnValueObjChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationSettingValue", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationSettingValues.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationSettingValues.Add(Me)
					Me._ApplicationID = value.ApplicationId
				Else
					Me._ApplicationID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Setting_ApplicationSettingValue", Storage:="_Setting", ThisKey:="SettingID", OtherKey:="SettingID", IsForeignKey:=true)>  _
	Public Property Setting() As Setting
		Get
			Return Me._Setting.Entity
		End Get
		Set
			Dim previousValue As Setting = Me._Setting.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Setting.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Setting.Entity = Nothing
					previousValue.ApplicationSettingValues.Remove(Me)
				End If
				Me._Setting.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationSettingValues.Add(Me)
					Me._SettingID = value.SettingID
				Else
					Me._SettingID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("Setting")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationTimeZone")>  _
Partial Public Class ApplicationTimeZone
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Guid
	
	Private _timeZoneID As String
	
	Private _timeZoneDesc As String
	
	Private _TimeZoneSerialzed As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OntimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneIDChanged()
    End Sub
    Partial Private Sub OntimeZoneDescChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneDescChanged()
    End Sub
    Partial Private Sub OnTimeZoneSerialzedChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSerialzedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZoneID", DbType:="VarChar(500)")>  _
	Public Property timeZoneID() As String
		Get
			Return Me._timeZoneID
		End Get
		Set
			If (String.Equals(Me._timeZoneID, value) = false) Then
				Me.OntimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._timeZoneID = value
				Me.SendPropertyChanged("timeZoneID")
				Me.OntimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZoneDesc", DbType:="VarChar(500)")>  _
	Public Property timeZoneDesc() As String
		Get
			Return Me._timeZoneDesc
		End Get
		Set
			If (String.Equals(Me._timeZoneDesc, value) = false) Then
				Me.OntimeZoneDescChanging(value)
				Me.SendPropertyChanging
				Me._timeZoneDesc = value
				Me.SendPropertyChanged("timeZoneDesc")
				Me.OntimeZoneDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSerialzed", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property TimeZoneSerialzed() As String
		Get
			Return Me._TimeZoneSerialzed
		End Get
		Set
			If (String.Equals(Me._TimeZoneSerialzed, value) = false) Then
				Me.OnTimeZoneSerialzedChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneSerialzed = value
				Me.SendPropertyChanged("TimeZoneSerialzed")
				Me.OnTimeZoneSerialzedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicle")>  _
Partial Public Class ApplicationVehicle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _Name As String
	
	Private _Registration As String
	
	Private _Notes As String
	
	Private _DeviceID As String
	
	Private _ApplicationID As System.Guid
	
	Private _VINNumber As String
	
	Private _ApplicationImageID As System.Nullable(Of System.Guid)
	
	Private _CAN_Protocol_Type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRegistrationChanging(value As String)
    End Sub
    Partial Private Sub OnRegistrationChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnVINNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVINNumberChanged()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    Partial Private Sub OnCAN_Protocol_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnCAN_Protocol_TypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me.OnApplicationVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVehicleID = value
				Me.SendPropertyChanged("ApplicationVehicleID")
				Me.OnApplicationVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Registration", DbType:="VarChar(50)")>  _
	Public Property Registration() As String
		Get
			Return Me._Registration
		End Get
		Set
			If (String.Equals(Me._Registration, value) = false) Then
				Me.OnRegistrationChanging(value)
				Me.SendPropertyChanging
				Me._Registration = value
				Me.SendPropertyChanged("Registration")
				Me.OnRegistrationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VINNumber", DbType:="VarChar(100)")>  _
	Public Property VINNumber() As String
		Get
			Return Me._VINNumber
		End Get
		Set
			If (String.Equals(Me._VINNumber, value) = false) Then
				Me.OnVINNumberChanging(value)
				Me.SendPropertyChanging
				Me._VINNumber = value
				Me.SendPropertyChanged("VINNumber")
				Me.OnVINNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationImageID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationImageID
		End Get
		Set
			If (Me._ApplicationImageID.Equals(value) = false) Then
				Me.OnApplicationImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationImageID = value
				Me.SendPropertyChanged("ApplicationImageID")
				Me.OnApplicationImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_Protocol_Type", DbType:="VarChar(100)")>  _
	Public Property CAN_Protocol_Type() As String
		Get
			Return Me._CAN_Protocol_Type
		End Get
		Set
			If (String.Equals(Me._CAN_Protocol_Type, value) = false) Then
				Me.OnCAN_Protocol_TypeChanging(value)
				Me.SendPropertyChanging
				Me._CAN_Protocol_Type = value
				Me.SendPropertyChanged("CAN_Protocol_Type")
				Me.OnCAN_Protocol_TypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicleDriverTime")>  _
Partial Public Class ApplicationVehicleDriverTime
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationVehicleDriverTimeID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _VehicleID As System.Nullable(Of System.Guid)
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Private _Notes As String
	
	Private _ApplicationDriverID As System.Guid
	
	Private _PassengerID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationVehicleDriverTimeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleDriverTimeIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
    Partial Private Sub OnStartDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateTimeChanged()
    End Sub
    Partial Private Sub OnEndDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateTimeChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnPassengerIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPassengerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationVehicleDriverTimeID() As System.Guid
		Get
			Return Me._ApplicationVehicleDriverTimeID
		End Get
		Set
			If ((Me._ApplicationVehicleDriverTimeID = value)  _
						= false) Then
				Me.OnApplicationVehicleDriverTimeIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVehicleDriverTimeID = value
				Me.SendPropertyChanged("ApplicationVehicleDriverTimeID")
				Me.OnApplicationVehicleDriverTimeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier")>  _
	Public Property VehicleID() As System.Nullable(Of System.Guid)
		Get
			Return Me._VehicleID
		End Get
		Set
			If (Me._VehicleID.Equals(value) = false) Then
				Me.OnVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._VehicleID = value
				Me.SendPropertyChanged("VehicleID")
				Me.OnVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me.OnStartDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartDateTime = value
				Me.SendPropertyChanged("StartDateTime")
				Me.OnStartDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me.OnEndDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndDateTime = value
				Me.SendPropertyChanged("EndDateTime")
				Me.OnEndDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				Me.OnApplicationDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDriverID = value
				Me.SendPropertyChanged("ApplicationDriverID")
				Me.OnApplicationDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>  _
	Public Property PassengerID() As System.Nullable(Of System.Guid)
		Get
			Return Me._PassengerID
		End Get
		Set
			If (Me._PassengerID.Equals(value) = false) Then
				Me.OnPassengerIDChanging(value)
				Me.SendPropertyChanging
				Me._PassengerID = value
				Me.SendPropertyChanged("PassengerID")
				Me.OnPassengerIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicleOdometerReading")>  _
Partial Public Class ApplicationVehicleOdometerReading
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AppliationVehicleOdometerReadingID As System.Guid
	
	Private _OdometerReading As System.Nullable(Of Decimal)
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _TimeReadingTaken As System.Nullable(Of Date)
	
	Private _RecordCreatedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAppliationVehicleOdometerReadingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAppliationVehicleOdometerReadingIDChanged()
    End Sub
    Partial Private Sub OnOdometerReadingChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOdometerReadingChanged()
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanged()
    End Sub
    Partial Private Sub OnTimeReadingTakenChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTimeReadingTakenChanged()
    End Sub
    Partial Private Sub OnRecordCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRecordCreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppliationVehicleOdometerReadingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AppliationVehicleOdometerReadingID() As System.Guid
		Get
			Return Me._AppliationVehicleOdometerReadingID
		End Get
		Set
			If ((Me._AppliationVehicleOdometerReadingID = value)  _
						= false) Then
				Me.OnAppliationVehicleOdometerReadingIDChanging(value)
				Me.SendPropertyChanging
				Me._AppliationVehicleOdometerReadingID = value
				Me.SendPropertyChanged("AppliationVehicleOdometerReadingID")
				Me.OnAppliationVehicleOdometerReadingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdometerReading", DbType:="Decimal(18,2)")>  _
	Public Property OdometerReading() As System.Nullable(Of Decimal)
		Get
			Return Me._OdometerReading
		End Get
		Set
			If (Me._OdometerReading.Equals(value) = false) Then
				Me.OnOdometerReadingChanging(value)
				Me.SendPropertyChanging
				Me._OdometerReading = value
				Me.SendPropertyChanged("OdometerReading")
				Me.OnOdometerReadingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me.OnApplicationVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVehicleID = value
				Me.SendPropertyChanged("ApplicationVehicleID")
				Me.OnApplicationVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeReadingTaken", DbType:="DateTime")>  _
	Public Property TimeReadingTaken() As System.Nullable(Of Date)
		Get
			Return Me._TimeReadingTaken
		End Get
		Set
			If (Me._TimeReadingTaken.Equals(value) = false) Then
				Me.OnTimeReadingTakenChanging(value)
				Me.SendPropertyChanging
				Me._TimeReadingTaken = value
				Me.SendPropertyChanged("TimeReadingTaken")
				Me.OnTimeReadingTakenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordCreatedDate", DbType:="DateTime")>  _
	Public Property RecordCreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._RecordCreatedDate
		End Get
		Set
			If (Me._RecordCreatedDate.Equals(value) = false) Then
				Me.OnRecordCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._RecordCreatedDate = value
				Me.SendPropertyChanged("RecordCreatedDate")
				Me.OnRecordCreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Applications")>  _
Partial Public Class aspnet_Application
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationName As String
	
	Private _LoweredApplicationName As String
	
	Private _ApplicationId As System.Guid
	
	Private _Description As String
	
	Private _TimeZoneSerialisedObj As String
	
	Private _TimeZoneID As String
	
	Private _TimeZoneOffset As String
	
	Private _TimeZoneDSTOffset As String
	
	Private _TimezoneDescription As String
	
	Private _DefaultApplicationLocationID As System.Nullable(Of System.Guid)
	
	Private _ApplicationFeatures As EntitySet(Of ApplicationFeature)
	
	Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)
	
	Private _ApplicationGeoFences As EntitySet(Of ApplicationGeoFence)
	
	Private _ApplicationSettingValues As EntitySet(Of ApplicationSettingValue)
	
	Private _aspnet_Memberships As EntitySet(Of aspnet_Membership)
	
	Private _aspnet_Paths As EntitySet(Of aspnet_Path)
	
	Private _aspnet_Roles As EntitySet(Of aspnet_Role)
	
	Private _aspnet_Users As EntitySet(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTimeZoneSerialisedObjChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSerialisedObjChanged()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanged()
    End Sub
    Partial Private Sub OnTimeZoneDSTOffsetChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneDSTOffsetChanged()
    End Sub
    Partial Private Sub OnTimezoneDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnTimezoneDescriptionChanged()
    End Sub
    Partial Private Sub OnDefaultApplicationLocationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDefaultApplicationLocationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationFeatures = New EntitySet(Of ApplicationFeature)(AddressOf Me.attach_ApplicationFeatures, AddressOf Me.detach_ApplicationFeatures)
		Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
		Me._ApplicationGeoFences = New EntitySet(Of ApplicationGeoFence)(AddressOf Me.attach_ApplicationGeoFences, AddressOf Me.detach_ApplicationGeoFences)
		Me._ApplicationSettingValues = New EntitySet(Of ApplicationSettingValue)(AddressOf Me.attach_ApplicationSettingValues, AddressOf Me.detach_ApplicationSettingValues)
		Me._aspnet_Memberships = New EntitySet(Of aspnet_Membership)(AddressOf Me.attach_aspnet_Memberships, AddressOf Me.detach_aspnet_Memberships)
		Me._aspnet_Paths = New EntitySet(Of aspnet_Path)(AddressOf Me.attach_aspnet_Paths, AddressOf Me.detach_aspnet_Paths)
		Me._aspnet_Roles = New EntitySet(Of aspnet_Role)(AddressOf Me.attach_aspnet_Roles, AddressOf Me.detach_aspnet_Roles)
		Me._aspnet_Users = New EntitySet(Of aspnet_User)(AddressOf Me.attach_aspnet_Users, AddressOf Me.detach_aspnet_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredApplicationName() As String
		Get
			Return Me._LoweredApplicationName
		End Get
		Set
			If (String.Equals(Me._LoweredApplicationName, value) = false) Then
				Me.OnLoweredApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredApplicationName = value
				Me.SendPropertyChanged("LoweredApplicationName")
				Me.OnLoweredApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSerialisedObj", DbType:="VarChar(MAX)")>  _
	Public Property TimeZoneSerialisedObj() As String
		Get
			Return Me._TimeZoneSerialisedObj
		End Get
		Set
			If (String.Equals(Me._TimeZoneSerialisedObj, value) = false) Then
				Me.OnTimeZoneSerialisedObjChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneSerialisedObj = value
				Me.SendPropertyChanged("TimeZoneSerialisedObj")
				Me.OnTimeZoneSerialisedObjChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", DbType:="VarChar(100)")>  _
	Public Property TimeZoneID() As String
		Get
			Return Me._TimeZoneID
		End Get
		Set
			If (String.Equals(Me._TimeZoneID, value) = false) Then
				Me.OnTimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneID = value
				Me.SendPropertyChanged("TimeZoneID")
				Me.OnTimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneOffset", DbType:="NChar(10)")>  _
	Public Property TimeZoneOffset() As String
		Get
			Return Me._TimeZoneOffset
		End Get
		Set
			If (String.Equals(Me._TimeZoneOffset, value) = false) Then
				Me.OnTimeZoneOffsetChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneOffset = value
				Me.SendPropertyChanged("TimeZoneOffset")
				Me.OnTimeZoneOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneDSTOffset", DbType:="NChar(10)")>  _
	Public Property TimeZoneDSTOffset() As String
		Get
			Return Me._TimeZoneDSTOffset
		End Get
		Set
			If (String.Equals(Me._TimeZoneDSTOffset, value) = false) Then
				Me.OnTimeZoneDSTOffsetChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneDSTOffset = value
				Me.SendPropertyChanged("TimeZoneDSTOffset")
				Me.OnTimeZoneDSTOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimezoneDescription", DbType:="VarChar(500)")>  _
	Public Property TimezoneDescription() As String
		Get
			Return Me._TimezoneDescription
		End Get
		Set
			If (String.Equals(Me._TimezoneDescription, value) = false) Then
				Me.OnTimezoneDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._TimezoneDescription = value
				Me.SendPropertyChanged("TimezoneDescription")
				Me.OnTimezoneDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultApplicationLocationID", DbType:="UniqueIdentifier")>  _
	Public Property DefaultApplicationLocationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._DefaultApplicationLocationID
		End Get
		Set
			If (Me._DefaultApplicationLocationID.Equals(value) = false) Then
				Me.OnDefaultApplicationLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._DefaultApplicationLocationID = value
				Me.SendPropertyChanged("DefaultApplicationLocationID")
				Me.OnDefaultApplicationLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeature", Storage:="_ApplicationFeatures", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>  _
	Public Property ApplicationFeatures() As EntitySet(Of ApplicationFeature)
		Get
			Return Me._ApplicationFeatures
		End Get
		Set
			Me._ApplicationFeatures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>  _
	Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
		Get
			Return Me._ApplicationFeatureRoles
		End Get
		Set
			Me._ApplicationFeatureRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationGeoFence", Storage:="_ApplicationGeoFences", ThisKey:="ApplicationId", OtherKey:="ApplictionID")>  _
	Public Property ApplicationGeoFences() As EntitySet(Of ApplicationGeoFence)
		Get
			Return Me._ApplicationGeoFences
		End Get
		Set
			Me._ApplicationGeoFences.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationSettingValue", Storage:="_ApplicationSettingValues", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>  _
	Public Property ApplicationSettingValues() As EntitySet(Of ApplicationSettingValue)
		Get
			Return Me._ApplicationSettingValues
		End Get
		Set
			Me._ApplicationSettingValues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Memberships", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Memberships() As EntitySet(Of aspnet_Membership)
		Get
			Return Me._aspnet_Memberships
		End Get
		Set
			Me._aspnet_Memberships.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Path", Storage:="_aspnet_Paths", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Paths() As EntitySet(Of aspnet_Path)
		Get
			Return Me._aspnet_Paths
		End Get
		Set
			Me._aspnet_Paths.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Roles", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Roles() As EntitySet(Of aspnet_Role)
		Get
			Return Me._aspnet_Roles
		End Get
		Set
			Me._aspnet_Roles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Users", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Users() As EntitySet(Of aspnet_User)
		Get
			Return Me._aspnet_Users
		End Get
		Set
			Me._aspnet_Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_ApplicationGeoFences(ByVal entity As ApplicationGeoFence)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationGeoFences(ByVal entity As ApplicationGeoFence)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Memberships(ByVal entity As aspnet_Membership)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Memberships(ByVal entity As aspnet_Membership)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Paths(ByVal entity As aspnet_Path)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Paths(ByVal entity As aspnet_Path)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Roles(ByVal entity As aspnet_Role)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Roles(ByVal entity As aspnet_Role)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Membership")>  _
Partial Public Class aspnet_Membership
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _Password As String
	
	Private _PasswordFormat As Integer
	
	Private _PasswordSalt As String
	
	Private _MobilePIN As String
	
	Private _Email As String
	
	Private _LoweredEmail As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _IsApproved As Boolean
	
	Private _IsLockedOut As Boolean
	
	Private _CreateDate As Date
	
	Private _LastLoginDate As Date
	
	Private _LastPasswordChangedDate As Date
	
	Private _LastLockoutDate As Date
	
	Private _FailedPasswordAttemptCount As Integer
	
	Private _FailedPasswordAttemptWindowStart As Date
	
	Private _FailedPasswordAnswerAttemptCount As Integer
	
	Private _FailedPasswordAnswerAttemptWindowStart As Date
	
	Private _Comment As String
	
	Private _Mobile As String
	
	Private _TimeZoneSyncObj As String
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPasswordFormatChanging(value As Integer)
    End Sub
    Partial Private Sub OnPasswordFormatChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnMobilePINChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePINChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnLoweredEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredEmailChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnIsLockedOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLockedOutChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnLastLockoutDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLockoutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnTimeZoneSyncObjChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSyncObjChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordFormat", DbType:="Int NOT NULL")>  _
	Public Property PasswordFormat() As Integer
		Get
			Return Me._PasswordFormat
		End Get
		Set
			If ((Me._PasswordFormat = value)  _
						= false) Then
				Me.OnPasswordFormatChanging(value)
				Me.SendPropertyChanging
				Me._PasswordFormat = value
				Me.SendPropertyChanged("PasswordFormat")
				Me.OnPasswordFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePIN", DbType:="NVarChar(16)")>  _
	Public Property MobilePIN() As String
		Get
			Return Me._MobilePIN
		End Get
		Set
			If (String.Equals(Me._MobilePIN, value) = false) Then
				Me.OnMobilePINChanging(value)
				Me.SendPropertyChanging
				Me._MobilePIN = value
				Me.SendPropertyChanged("MobilePIN")
				Me.OnMobilePINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredEmail", DbType:="NVarChar(256)")>  _
	Public Property LoweredEmail() As String
		Get
			Return Me._LoweredEmail
		End Get
		Set
			If (String.Equals(Me._LoweredEmail, value) = false) Then
				Me.OnLoweredEmailChanging(value)
				Me.SendPropertyChanging
				Me._LoweredEmail = value
				Me.SendPropertyChanged("LoweredEmail")
				Me.OnLoweredEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me.OnPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._PasswordQuestion = value
				Me.SendPropertyChanged("PasswordQuestion")
				Me.OnPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me.OnPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._PasswordAnswer = value
				Me.SendPropertyChanged("PasswordAnswer")
				Me.OnPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit NOT NULL")>  _
	Public Property IsApproved() As Boolean
		Get
			Return Me._IsApproved
		End Get
		Set
			If ((Me._IsApproved = value)  _
						= false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLockedOut", DbType:="Bit NOT NULL")>  _
	Public Property IsLockedOut() As Boolean
		Get
			Return Me._IsLockedOut
		End Get
		Set
			If ((Me._IsLockedOut = value)  _
						= false) Then
				Me.OnIsLockedOutChanging(value)
				Me.SendPropertyChanging
				Me._IsLockedOut = value
				Me.SendPropertyChanged("IsLockedOut")
				Me.OnIsLockedOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastPasswordChangedDate() As Date
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If ((Me._LastPasswordChangedDate = value)  _
						= false) Then
				Me.OnLastPasswordChangedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPasswordChangedDate = value
				Me.SendPropertyChanged("LastPasswordChangedDate")
				Me.OnLastPasswordChangedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockoutDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLockoutDate() As Date
		Get
			Return Me._LastLockoutDate
		End Get
		Set
			If ((Me._LastLockoutDate = value)  _
						= false) Then
				Me.OnLastLockoutDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLockoutDate = value
				Me.SendPropertyChanged("LastLockoutDate")
				Me.OnLastLockoutDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAttemptCount")
				Me.OnFailedPasswordAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
				Me.OnFailedPasswordAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAnswerAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
				Me.OnFailedPasswordAnswerAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAnswerAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart")
				Me.OnFailedPasswordAnswerAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(100)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSyncObj", DbType:="VarChar(8000)")>  _
	Public Property TimeZoneSyncObj() As String
		Get
			Return Me._TimeZoneSyncObj
		End Get
		Set
			If (String.Equals(Me._TimeZoneSyncObj, value) = false) Then
				Me.OnTimeZoneSyncObjChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneSyncObj = value
				Me.SendPropertyChanged("TimeZoneSyncObj")
				Me.OnTimeZoneSyncObjChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Memberships.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Memberships.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_Membership = Nothing
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Membership = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Paths")>  _
Partial Public Class aspnet_Path
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _PathId As System.Guid
	
	Private _Path As String
	
	Private _LoweredPath As String
	
	Private _aspnet_PersonalizationAllUser As EntityRef(Of aspnet_PersonalizationAllUser)
	
	Private _aspnet_PersonalizationPerUsers As EntitySet(Of aspnet_PersonalizationPerUser)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnLoweredPathChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredPathChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_PersonalizationAllUser = CType(Nothing, EntityRef(Of aspnet_PersonalizationAllUser))
		Me._aspnet_PersonalizationPerUsers = New EntitySet(Of aspnet_PersonalizationPerUser)(AddressOf Me.attach_aspnet_PersonalizationPerUsers, AddressOf Me.detach_aspnet_PersonalizationPerUsers)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PathId() As System.Guid
		Get
			Return Me._PathId
		End Get
		Set
			If ((Me._PathId = value)  _
						= false) Then
				Me.OnPathIdChanging(value)
				Me.SendPropertyChanging
				Me._PathId = value
				Me.SendPropertyChanged("PathId")
				Me.OnPathIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Path() As String
		Get
			Return Me._Path
		End Get
		Set
			If (String.Equals(Me._Path, value) = false) Then
				Me.OnPathChanging(value)
				Me.SendPropertyChanging
				Me._Path = value
				Me.SendPropertyChanged("Path")
				Me.OnPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredPath", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredPath() As String
		Get
			Return Me._LoweredPath
		End Get
		Set
			If (String.Equals(Me._LoweredPath, value) = false) Then
				Me.OnLoweredPathChanging(value)
				Me.SendPropertyChanging
				Me._LoweredPath = value
				Me.SendPropertyChanged("LoweredPath")
				Me.OnLoweredPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationAllUser", Storage:="_aspnet_PersonalizationAllUser", ThisKey:="PathId", OtherKey:="PathId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_PersonalizationAllUser() As aspnet_PersonalizationAllUser
		Get
			Return Me._aspnet_PersonalizationAllUser.Entity
		End Get
		Set
			Dim previousValue As aspnet_PersonalizationAllUser = Me._aspnet_PersonalizationAllUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_PersonalizationAllUser.Entity = Nothing
					previousValue.aspnet_Path = Nothing
				End If
				Me._aspnet_PersonalizationAllUser.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_Path = Me
				End If
				Me.SendPropertyChanged("aspnet_PersonalizationAllUser")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationPerUser", Storage:="_aspnet_PersonalizationPerUsers", ThisKey:="PathId", OtherKey:="PathId")>  _
	Public Property aspnet_PersonalizationPerUsers() As EntitySet(Of aspnet_PersonalizationPerUser)
		Get
			Return Me._aspnet_PersonalizationPerUsers
		End Get
		Set
			Me._aspnet_PersonalizationPerUsers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Path", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Paths.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Paths.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_Path = Me
	End Sub
	
	Private Sub detach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_Path = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_PersonalizationAllUsers")>  _
Partial Public Class aspnet_PersonalizationAllUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PathId As System.Guid
	
	Private _PageSettings As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _aspnet_Path As EntityRef(Of aspnet_Path)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnPageSettingsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPageSettingsChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Path = CType(Nothing, EntityRef(Of aspnet_Path))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PathId() As System.Guid
		Get
			Return Me._PathId
		End Get
		Set
			If ((Me._PathId = value)  _
						= false) Then
				If Me._aspnet_Path.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPathIdChanging(value)
				Me.SendPropertyChanging
				Me._PathId = value
				Me.SendPropertyChanged("PathId")
				Me.OnPathIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageSettings", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PageSettings() As System.Data.Linq.Binary
		Get
			Return Me._PageSettings
		End Get
		Set
			If (Object.Equals(Me._PageSettings, value) = false) Then
				Me.OnPageSettingsChanging(value)
				Me.SendPropertyChanging
				Me._PageSettings = value
				Me.SendPropertyChanged("PageSettings")
				Me.OnPageSettingsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationAllUser", Storage:="_aspnet_Path", ThisKey:="PathId", OtherKey:="PathId", IsForeignKey:=true)>  _
	Public Property aspnet_Path() As aspnet_Path
		Get
			Return Me._aspnet_Path.Entity
		End Get
		Set
			Dim previousValue As aspnet_Path = Me._aspnet_Path.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Path.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Path.Entity = Nothing
					previousValue.aspnet_PersonalizationAllUser = Nothing
				End If
				Me._aspnet_Path.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_PersonalizationAllUser = Me
					Me._PathId = value.PathId
				Else
					Me._PathId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Path")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_PersonalizationPerUser")>  _
Partial Public Class aspnet_PersonalizationPerUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As System.Guid
	
	Private _PathId As System.Nullable(Of System.Guid)
	
	Private _UserId As System.Nullable(Of System.Guid)
	
	Private _PageSettings As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _aspnet_Path As EntityRef(Of aspnet_Path)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPageSettingsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPageSettingsChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Path = CType(Nothing, EntityRef(Of aspnet_Path))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As System.Guid
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier")>  _
	Public Property PathId() As System.Nullable(Of System.Guid)
		Get
			Return Me._PathId
		End Get
		Set
			If (Me._PathId.Equals(value) = false) Then
				If Me._aspnet_Path.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPathIdChanging(value)
				Me.SendPropertyChanging
				Me._PathId = value
				Me.SendPropertyChanged("PathId")
				Me.OnPathIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier")>  _
	Public Property UserId() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageSettings", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PageSettings() As System.Data.Linq.Binary
		Get
			Return Me._PageSettings
		End Get
		Set
			If (Object.Equals(Me._PageSettings, value) = false) Then
				Me.OnPageSettingsChanging(value)
				Me.SendPropertyChanging
				Me._PageSettings = value
				Me.SendPropertyChanged("PageSettings")
				Me.OnPageSettingsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationPerUser", Storage:="_aspnet_Path", ThisKey:="PathId", OtherKey:="PathId", IsForeignKey:=true)>  _
	Public Property aspnet_Path() As aspnet_Path
		Get
			Return Me._aspnet_Path.Entity
		End Get
		Set
			Dim previousValue As aspnet_Path = Me._aspnet_Path.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Path.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Path.Entity = Nothing
					previousValue.aspnet_PersonalizationPerUsers.Remove(Me)
				End If
				Me._aspnet_Path.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_PersonalizationPerUsers.Add(Me)
					Me._PathId = value.PathId
				Else
					Me._PathId = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("aspnet_Path")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_PersonalizationPerUser", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_PersonalizationPerUsers.Remove(Me)
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_PersonalizationPerUsers.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Profile")>  _
Partial Public Class aspnet_Profile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _PropertyNames As String
	
	Private _PropertyValuesString As String
	
	Private _PropertyValuesBinary As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPropertyNamesChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNamesChanged()
    End Sub
    Partial Private Sub OnPropertyValuesStringChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValuesStringChanged()
    End Sub
    Partial Private Sub OnPropertyValuesBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPropertyValuesBinaryChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyNames", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyNames() As String
		Get
			Return Me._PropertyNames
		End Get
		Set
			If (String.Equals(Me._PropertyNames, value) = false) Then
				Me.OnPropertyNamesChanging(value)
				Me.SendPropertyChanging
				Me._PropertyNames = value
				Me.SendPropertyChanged("PropertyNames")
				Me.OnPropertyNamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValuesString", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyValuesString() As String
		Get
			Return Me._PropertyValuesString
		End Get
		Set
			If (String.Equals(Me._PropertyValuesString, value) = false) Then
				Me.OnPropertyValuesStringChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValuesString = value
				Me.SendPropertyChanged("PropertyValuesString")
				Me.OnPropertyValuesStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValuesBinary", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyValuesBinary() As System.Data.Linq.Binary
		Get
			Return Me._PropertyValuesBinary
		End Get
		Set
			If (Object.Equals(Me._PropertyValuesBinary, value) = false) Then
				Me.OnPropertyValuesBinaryChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValuesBinary = value
				Me.SendPropertyChanged("PropertyValuesBinary")
				Me.OnPropertyValuesBinaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Profile", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_Profile = Nothing
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Profile = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Roles")>  _
Partial Public Class aspnet_Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _RoleName As String
	
	Private _LoweredRoleName As String
	
	Private _Description As String
	
	Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)
	
	Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnLoweredRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredRoleNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
		Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredRoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredRoleName() As String
		Get
			Return Me._LoweredRoleName
		End Get
		Set
			If (String.Equals(Me._LoweredRoleName, value) = false) Then
				Me.OnLoweredRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredRoleName = value
				Me.SendPropertyChanged("LoweredRoleName")
				Me.OnLoweredRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="RoleId", OtherKey:="RoleID")>  _
	Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
		Get
			Return Me._ApplicationFeatureRoles
		End Get
		Set
			Me._ApplicationFeatureRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="RoleId", OtherKey:="RoleId")>  _
	Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
		Get
			Return Me._aspnet_UsersInRoles
		End Get
		Set
			Me._aspnet_UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Roles.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Roles.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Me
	End Sub
	
	Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Nothing
	End Sub
	
	Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Me
	End Sub
	
	Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_SchemaVersions")>  _
Partial Public Class aspnet_SchemaVersion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Feature As String
	
	Private _CompatibleSchemaVersion As String
	
	Private _IsCurrentVersion As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureChanged()
    End Sub
    Partial Private Sub OnCompatibleSchemaVersionChanging(value As String)
    End Sub
    Partial Private Sub OnCompatibleSchemaVersionChanged()
    End Sub
    Partial Private Sub OnIsCurrentVersionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsCurrentVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feature", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Feature() As String
		Get
			Return Me._Feature
		End Get
		Set
			If (String.Equals(Me._Feature, value) = false) Then
				Me.OnFeatureChanging(value)
				Me.SendPropertyChanging
				Me._Feature = value
				Me.SendPropertyChanged("Feature")
				Me.OnFeatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompatibleSchemaVersion", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CompatibleSchemaVersion() As String
		Get
			Return Me._CompatibleSchemaVersion
		End Get
		Set
			If (String.Equals(Me._CompatibleSchemaVersion, value) = false) Then
				Me.OnCompatibleSchemaVersionChanging(value)
				Me.SendPropertyChanging
				Me._CompatibleSchemaVersion = value
				Me.SendPropertyChanged("CompatibleSchemaVersion")
				Me.OnCompatibleSchemaVersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCurrentVersion", DbType:="Bit NOT NULL")>  _
	Public Property IsCurrentVersion() As Boolean
		Get
			Return Me._IsCurrentVersion
		End Get
		Set
			If ((Me._IsCurrentVersion = value)  _
						= false) Then
				Me.OnIsCurrentVersionChanging(value)
				Me.SendPropertyChanging
				Me._IsCurrentVersion = value
				Me.SendPropertyChanged("IsCurrentVersion")
				Me.OnIsCurrentVersionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")>  _
Partial Public Class aspnet_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _UserName As String
	
	Private _LoweredUserName As String
	
	Private _MobileAlias As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _TimeZoneID As String
	
	Private _ApplicationLocation As System.Nullable(Of System.Guid)
	
	Private _aspnet_Membership As EntityRef(Of aspnet_Membership)
	
	Private _aspnet_PersonalizationPerUsers As EntitySet(Of aspnet_PersonalizationPerUser)
	
	Private _aspnet_Profile As EntityRef(Of aspnet_Profile)
	
	Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLoweredUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredUserNameChanged()
    End Sub
    Partial Private Sub OnMobileAliasChanging(value As String)
    End Sub
    Partial Private Sub OnMobileAliasChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnApplicationLocationChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationLocationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Membership = CType(Nothing, EntityRef(Of aspnet_Membership))
		Me._aspnet_PersonalizationPerUsers = New EntitySet(Of aspnet_PersonalizationPerUser)(AddressOf Me.attach_aspnet_PersonalizationPerUsers, AddressOf Me.detach_aspnet_PersonalizationPerUsers)
		Me._aspnet_Profile = CType(Nothing, EntityRef(Of aspnet_Profile))
		Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredUserName() As String
		Get
			Return Me._LoweredUserName
		End Get
		Set
			If (String.Equals(Me._LoweredUserName, value) = false) Then
				Me.OnLoweredUserNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredUserName = value
				Me.SendPropertyChanged("LoweredUserName")
				Me.OnLoweredUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>  _
	Public Property MobileAlias() As String
		Get
			Return Me._MobileAlias
		End Get
		Set
			If (String.Equals(Me._MobileAlias, value) = false) Then
				Me.OnMobileAliasChanging(value)
				Me.SendPropertyChanging
				Me._MobileAlias = value
				Me.SendPropertyChanged("MobileAlias")
				Me.OnMobileAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", DbType:="VarChar(100)")>  _
	Public Property TimeZoneID() As String
		Get
			Return Me._TimeZoneID
		End Get
		Set
			If (String.Equals(Me._TimeZoneID, value) = false) Then
				Me.OnTimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneID = value
				Me.SendPropertyChanged("TimeZoneID")
				Me.OnTimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocation", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationLocation() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationLocation
		End Get
		Set
			If (Me._ApplicationLocation.Equals(value) = false) Then
				Me.OnApplicationLocationChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationLocation = value
				Me.SendPropertyChanged("ApplicationLocation")
				Me.OnApplicationLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_Membership", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_Membership() As aspnet_Membership
		Get
			Return Me._aspnet_Membership.Entity
		End Get
		Set
			Dim previousValue As aspnet_Membership = Me._aspnet_Membership.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Membership.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Membership.Entity = Nothing
					previousValue.aspnet_User = Nothing
				End If
				Me._aspnet_Membership.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_User = Me
				End If
				Me.SendPropertyChanged("aspnet_Membership")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_PersonalizationPerUser", Storage:="_aspnet_PersonalizationPerUsers", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property aspnet_PersonalizationPerUsers() As EntitySet(Of aspnet_PersonalizationPerUser)
		Get
			Return Me._aspnet_PersonalizationPerUsers
		End Get
		Set
			Me._aspnet_PersonalizationPerUsers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Profile", Storage:="_aspnet_Profile", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_Profile() As aspnet_Profile
		Get
			Return Me._aspnet_Profile.Entity
		End Get
		Set
			Dim previousValue As aspnet_Profile = Me._aspnet_Profile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Profile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Profile.Entity = Nothing
					previousValue.aspnet_User = Nothing
				End If
				Me._aspnet_Profile.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_User = Me
				End If
				Me.SendPropertyChanged("aspnet_Profile")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
		Get
			Return Me._aspnet_UsersInRoles
		End Get
		Set
			Me._aspnet_UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Users.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Users.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_User = Me
	End Sub
	
	Private Sub detach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_User = Nothing
	End Sub
	
	Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_User = Me
	End Sub
	
	Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_UsersInRoles")>  _
Partial Public Class aspnet_UsersInRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _aspnet_Role As EntityRef(Of aspnet_Role)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				If Me._aspnet_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_Role", ThisKey:="RoleId", OtherKey:="RoleId", IsForeignKey:=true)>  _
	Public Property aspnet_Role() As aspnet_Role
		Get
			Return Me._aspnet_Role.Entity
		End Get
		Set
			Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Role.Entity = Nothing
					previousValue.aspnet_UsersInRoles.Remove(Me)
				End If
				Me._aspnet_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_UsersInRoles.Add(Me)
					Me._RoleId = value.RoleId
				Else
					Me._RoleId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_UsersInRoles.Remove(Me)
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_UsersInRoles.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_WebEvent_Events")>  _
Partial Public Class aspnet_WebEvent_Event
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventId As String
	
	Private _EventTimeUtc As Date
	
	Private _EventTime As Date
	
	Private _EventType As String
	
	Private _EventSequence As Decimal
	
	Private _EventOccurrence As Decimal
	
	Private _EventCode As Integer
	
	Private _EventDetailCode As Integer
	
	Private _Message As String
	
	Private _ApplicationPath As String
	
	Private _ApplicationVirtualPath As String
	
	Private _MachineName As String
	
	Private _RequestUrl As String
	
	Private _ExceptionType As String
	
	Private _Details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventIdChanging(value As String)
    End Sub
    Partial Private Sub OnEventIdChanged()
    End Sub
    Partial Private Sub OnEventTimeUtcChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeUtcChanged()
    End Sub
    Partial Private Sub OnEventTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeChanged()
    End Sub
    Partial Private Sub OnEventTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEventTypeChanged()
    End Sub
    Partial Private Sub OnEventSequenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventSequenceChanged()
    End Sub
    Partial Private Sub OnEventOccurrenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventOccurrenceChanged()
    End Sub
    Partial Private Sub OnEventCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventCodeChanged()
    End Sub
    Partial Private Sub OnEventDetailCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventDetailCodeChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnApplicationPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationPathChanged()
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanged()
    End Sub
    Partial Private Sub OnMachineNameChanging(value As String)
    End Sub
    Partial Private Sub OnMachineNameChanged()
    End Sub
    Partial Private Sub OnRequestUrlChanging(value As String)
    End Sub
    Partial Private Sub OnRequestUrlChanged()
    End Sub
    Partial Private Sub OnExceptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnExceptionTypeChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventId", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property EventId() As String
		Get
			Return Me._EventId
		End Get
		Set
			If (String.Equals(Me._EventId, value) = false) Then
				Me.OnEventIdChanging(value)
				Me.SendPropertyChanging
				Me._EventId = value
				Me.SendPropertyChanged("EventId")
				Me.OnEventIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTimeUtc", DbType:="DateTime NOT NULL")>  _
	Public Property EventTimeUtc() As Date
		Get
			Return Me._EventTimeUtc
		End Get
		Set
			If ((Me._EventTimeUtc = value)  _
						= false) Then
				Me.OnEventTimeUtcChanging(value)
				Me.SendPropertyChanging
				Me._EventTimeUtc = value
				Me.SendPropertyChanged("EventTimeUtc")
				Me.OnEventTimeUtcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTime", DbType:="DateTime NOT NULL")>  _
	Public Property EventTime() As Date
		Get
			Return Me._EventTime
		End Get
		Set
			If ((Me._EventTime = value)  _
						= false) Then
				Me.OnEventTimeChanging(value)
				Me.SendPropertyChanging
				Me._EventTime = value
				Me.SendPropertyChanged("EventTime")
				Me.OnEventTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property EventType() As String
		Get
			Return Me._EventType
		End Get
		Set
			If (String.Equals(Me._EventType, value) = false) Then
				Me.OnEventTypeChanging(value)
				Me.SendPropertyChanging
				Me._EventType = value
				Me.SendPropertyChanged("EventType")
				Me.OnEventTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventSequence", DbType:="Decimal(19,0) NOT NULL")>  _
	Public Property EventSequence() As Decimal
		Get
			Return Me._EventSequence
		End Get
		Set
			If ((Me._EventSequence = value)  _
						= false) Then
				Me.OnEventSequenceChanging(value)
				Me.SendPropertyChanging
				Me._EventSequence = value
				Me.SendPropertyChanged("EventSequence")
				Me.OnEventSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventOccurrence", DbType:="Decimal(19,0) NOT NULL")>  _
	Public Property EventOccurrence() As Decimal
		Get
			Return Me._EventOccurrence
		End Get
		Set
			If ((Me._EventOccurrence = value)  _
						= false) Then
				Me.OnEventOccurrenceChanging(value)
				Me.SendPropertyChanging
				Me._EventOccurrence = value
				Me.SendPropertyChanged("EventOccurrence")
				Me.OnEventOccurrenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventCode", DbType:="Int NOT NULL")>  _
	Public Property EventCode() As Integer
		Get
			Return Me._EventCode
		End Get
		Set
			If ((Me._EventCode = value)  _
						= false) Then
				Me.OnEventCodeChanging(value)
				Me.SendPropertyChanging
				Me._EventCode = value
				Me.SendPropertyChanged("EventCode")
				Me.OnEventCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDetailCode", DbType:="Int NOT NULL")>  _
	Public Property EventDetailCode() As Integer
		Get
			Return Me._EventDetailCode
		End Get
		Set
			If ((Me._EventDetailCode = value)  _
						= false) Then
				Me.OnEventDetailCodeChanging(value)
				Me.SendPropertyChanging
				Me._EventDetailCode = value
				Me.SendPropertyChanged("EventDetailCode")
				Me.OnEventDetailCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NVarChar(1024)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPath", DbType:="NVarChar(256)")>  _
	Public Property ApplicationPath() As String
		Get
			Return Me._ApplicationPath
		End Get
		Set
			If (String.Equals(Me._ApplicationPath, value) = false) Then
				Me.OnApplicationPathChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationPath = value
				Me.SendPropertyChanged("ApplicationPath")
				Me.OnApplicationPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVirtualPath", DbType:="NVarChar(256)")>  _
	Public Property ApplicationVirtualPath() As String
		Get
			Return Me._ApplicationVirtualPath
		End Get
		Set
			If (String.Equals(Me._ApplicationVirtualPath, value) = false) Then
				Me.OnApplicationVirtualPathChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVirtualPath = value
				Me.SendPropertyChanged("ApplicationVirtualPath")
				Me.OnApplicationVirtualPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MachineName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property MachineName() As String
		Get
			Return Me._MachineName
		End Get
		Set
			If (String.Equals(Me._MachineName, value) = false) Then
				Me.OnMachineNameChanging(value)
				Me.SendPropertyChanging
				Me._MachineName = value
				Me.SendPropertyChanged("MachineName")
				Me.OnMachineNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestUrl", DbType:="NVarChar(1024)")>  _
	Public Property RequestUrl() As String
		Get
			Return Me._RequestUrl
		End Get
		Set
			If (String.Equals(Me._RequestUrl, value) = false) Then
				Me.OnRequestUrlChanging(value)
				Me.SendPropertyChanging
				Me._RequestUrl = value
				Me.SendPropertyChanged("RequestUrl")
				Me.OnRequestUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionType", DbType:="NVarChar(256)")>  _
	Public Property ExceptionType() As String
		Get
			Return Me._ExceptionType
		End Get
		Set
			If (String.Equals(Me._ExceptionType, value) = false) Then
				Me.OnExceptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._ExceptionType = value
				Me.SendPropertyChanged("ExceptionType")
				Me.OnExceptionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuthenticationToken")>  _
Partial Public Class AuthenticationToken
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TokenId As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _UserID As System.Guid
	
	Private _ExpiryDate As Date
	
	Private _StartDate As Date
	
	Private _TokenType As String
	
	Private _isUsedForChangePassword As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTokenIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTokenIdChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnTokenTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTokenTypeChanged()
    End Sub
    Partial Private Sub OnisUsedForChangePasswordChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisUsedForChangePasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TokenId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TokenId() As System.Guid
		Get
			Return Me._TokenId
		End Get
		Set
			If ((Me._TokenId = value)  _
						= false) Then
				Me.OnTokenIdChanging(value)
				Me.SendPropertyChanging
				Me._TokenId = value
				Me.SendPropertyChanged("TokenId")
				Me.OnTokenIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserID() As System.Guid
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="DateTime NOT NULL")>  _
	Public Property ExpiryDate() As Date
		Get
			Return Me._ExpiryDate
		End Get
		Set
			If ((Me._ExpiryDate = value)  _
						= false) Then
				Me.OnExpiryDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiryDate = value
				Me.SendPropertyChanged("ExpiryDate")
				Me.OnExpiryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TokenType", DbType:="NVarChar(150)")>  _
	Public Property TokenType() As String
		Get
			Return Me._TokenType
		End Get
		Set
			If (String.Equals(Me._TokenType, value) = false) Then
				Me.OnTokenTypeChanging(value)
				Me.SendPropertyChanging
				Me._TokenType = value
				Me.SendPropertyChanged("TokenType")
				Me.OnTokenTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isUsedForChangePassword", DbType:="Bit")>  _
	Public Property isUsedForChangePassword() As System.Nullable(Of Boolean)
		Get
			Return Me._isUsedForChangePassword
		End Get
		Set
			If (Me._isUsedForChangePassword.Equals(value) = false) Then
				Me.OnisUsedForChangePasswordChanging(value)
				Me.SendPropertyChanging
				Me._isUsedForChangePassword = value
				Me.SendPropertyChanged("isUsedForChangePassword")
				Me.OnisUsedForChangePasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_Data")>  _
Partial Public Class CAN_Data
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _arbritration_id As String
	
	Private _data As String
	
	Private _dlc As System.Nullable(Of Integer)
	
	Private _is_extended_id As System.Nullable(Of Integer)
	
	Private _is_error_frame As System.Nullable(Of Integer)
	
	Private _is_remote_frame As System.Nullable(Of Integer)
	
	Private _timestamp As System.Nullable(Of Date)
	
	Private _Id As Integer
	
	Private _DeviceID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onarbritration_idChanging(value As String)
    End Sub
    Partial Private Sub Onarbritration_idChanged()
    End Sub
    Partial Private Sub OndataChanging(value As String)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OndlcChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndlcChanged()
    End Sub
    Partial Private Sub Onis_extended_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_extended_idChanged()
    End Sub
    Partial Private Sub Onis_error_frameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_error_frameChanged()
    End Sub
    Partial Private Sub Onis_remote_frameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_remote_frameChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arbritration_id", DbType:="NChar(10)")>  _
	Public Property arbritration_id() As String
		Get
			Return Me._arbritration_id
		End Get
		Set
			If (String.Equals(Me._arbritration_id, value) = false) Then
				Me.Onarbritration_idChanging(value)
				Me.SendPropertyChanging
				Me._arbritration_id = value
				Me.SendPropertyChanged("arbritration_id")
				Me.Onarbritration_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarChar(200)")>  _
	Public Property data() As String
		Get
			Return Me._data
		End Get
		Set
			If (String.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dlc", DbType:="Int")>  _
	Public Property dlc() As System.Nullable(Of Integer)
		Get
			Return Me._dlc
		End Get
		Set
			If (Me._dlc.Equals(value) = false) Then
				Me.OndlcChanging(value)
				Me.SendPropertyChanging
				Me._dlc = value
				Me.SendPropertyChanged("dlc")
				Me.OndlcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_extended_id", DbType:="Int")>  _
	Public Property is_extended_id() As System.Nullable(Of Integer)
		Get
			Return Me._is_extended_id
		End Get
		Set
			If (Me._is_extended_id.Equals(value) = false) Then
				Me.Onis_extended_idChanging(value)
				Me.SendPropertyChanging
				Me._is_extended_id = value
				Me.SendPropertyChanged("is_extended_id")
				Me.Onis_extended_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_error_frame", DbType:="Int")>  _
	Public Property is_error_frame() As System.Nullable(Of Integer)
		Get
			Return Me._is_error_frame
		End Get
		Set
			If (Me._is_error_frame.Equals(value) = false) Then
				Me.Onis_error_frameChanging(value)
				Me.SendPropertyChanging
				Me._is_error_frame = value
				Me.SendPropertyChanged("is_error_frame")
				Me.Onis_error_frameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_remote_frame", DbType:="Int")>  _
	Public Property is_remote_frame() As System.Nullable(Of Integer)
		Get
			Return Me._is_remote_frame
		End Get
		Set
			If (Me._is_remote_frame.Equals(value) = false) Then
				Me.Onis_remote_frameChanging(value)
				Me.SendPropertyChanging
				Me._is_remote_frame = value
				Me.SendPropertyChanged("is_remote_frame")
				Me.Onis_remote_frameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timestamp", DbType:="DateTime")>  _
	Public Property timestamp() As System.Nullable(Of Date)
		Get
			Return Me._timestamp
		End Get
		Set
			If (Me._timestamp.Equals(value) = false) Then
				Me.OntimestampChanging(value)
				Me.SendPropertyChanging
				Me._timestamp = value
				Me.SendPropertyChanged("timestamp")
				Me.OntimestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_MessageDefinitions")>  _
Partial Public Class CAN_MessageDefinition
	
	Private _Standard As String
	
	Private _PGN As System.Nullable(Of Double)
	
	Private _Parameter_Group_Label As String
	
	Private _PGN_Length As String
	
	Private _Transmission_Rate As String
	
	Private _Acronym As String
	
	Private _pos As String
	
	Private _SPN_length As System.Nullable(Of Double)
	
	Private _SPN As System.Nullable(Of Double)
	
	Private __51_CAT_793F_Haul_Trucks As String
	
	Private __0_CAT_16M_Grader As String
	
	Private __0_Komatsu_1200_Wheel_Loaders As String
	
	Private __0_Liebherr_R9400_Excavators As String
	
	Private __0_Liebherr_R996B_Excavators As String
	
	Private __0_Atlas_Copco_PV271_Drills As String
	
	Private __0_Atlas_Copco_D65_Drills As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Data_Range As String
	
	Private _Operational_Range As String
	
	Private _Resolution As String
	
	Private _Offset As System.Nullable(Of Double)
	
	Private _Units As String
	
	Private _Date_SPN_was_added_to_PGN As System.Nullable(Of Date)
	
	Private _Status_of_SPN_addition_to_PGN As String
	
	Private _Date_SPN_was_added_modified As System.Nullable(Of Date)
	
	Private _Status_of_SPN As String
	
	Private _SPN_Doc As String
	
	Private _PGN_Doc As String
	
	Private _F30 As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>  _
	Public Property Standard() As String
		Get
			Return Me._Standard
		End Get
		Set
			If (String.Equals(Me._Standard, value) = false) Then
				Me._Standard = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>  _
	Public Property PGN() As System.Nullable(Of Double)
		Get
			Return Me._PGN
		End Get
		Set
			If (Me._PGN.Equals(value) = false) Then
				Me._PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Parameter Group Label]", Storage:="_Parameter_Group_Label", DbType:="NVarChar(255)")>  _
	Public Property Parameter_Group_Label() As String
		Get
			Return Me._Parameter_Group_Label
		End Get
		Set
			If (String.Equals(Me._Parameter_Group_Label, value) = false) Then
				Me._Parameter_Group_Label = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Length]", Storage:="_PGN_Length", DbType:="NVarChar(255)")>  _
	Public Property PGN_Length() As String
		Get
			Return Me._PGN_Length
		End Get
		Set
			If (String.Equals(Me._PGN_Length, value) = false) Then
				Me._PGN_Length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Transmission Rate]", Storage:="_Transmission_Rate", DbType:="NVarChar(255)")>  _
	Public Property Transmission_Rate() As String
		Get
			Return Me._Transmission_Rate
		End Get
		Set
			If (String.Equals(Me._Transmission_Rate, value) = false) Then
				Me._Transmission_Rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acronym", DbType:="NVarChar(255)")>  _
	Public Property Acronym() As String
		Get
			Return Me._Acronym
		End Get
		Set
			If (String.Equals(Me._Acronym, value) = false) Then
				Me._Acronym = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(255)")>  _
	Public Property pos() As String
		Get
			Return Me._pos
		End Get
		Set
			If (String.Equals(Me._pos, value) = false) Then
				Me._pos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN length]", Storage:="_SPN_length", DbType:="Float")>  _
	Public Property SPN_length() As System.Nullable(Of Double)
		Get
			Return Me._SPN_length
		End Get
		Set
			If (Me._SPN_length.Equals(value) = false) Then
				Me._SPN_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>  _
	Public Property SPN() As System.Nullable(Of Double)
		Get
			Return Me._SPN
		End Get
		Set
			If (Me._SPN.Equals(value) = false) Then
				Me._SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[51 CAT 793F Haul Trucks]", Storage:="__51_CAT_793F_Haul_Trucks", DbType:="NVarChar(255)")>  _
	Public Property _51_CAT_793F_Haul_Trucks() As String
		Get
			Return Me.__51_CAT_793F_Haul_Trucks
		End Get
		Set
			If (String.Equals(Me.__51_CAT_793F_Haul_Trucks, value) = false) Then
				Me.__51_CAT_793F_Haul_Trucks = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 CAT 16M Grader]", Storage:="__0_CAT_16M_Grader", DbType:="NVarChar(255)")>  _
	Public Property _0_CAT_16M_Grader() As String
		Get
			Return Me.__0_CAT_16M_Grader
		End Get
		Set
			If (String.Equals(Me.__0_CAT_16M_Grader, value) = false) Then
				Me.__0_CAT_16M_Grader = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Komatsu 1200 Wheel Loaders]", Storage:="__0_Komatsu_1200_Wheel_Loaders", DbType:="NVarChar(255)")>  _
	Public Property _0_Komatsu_1200_Wheel_Loaders() As String
		Get
			Return Me.__0_Komatsu_1200_Wheel_Loaders
		End Get
		Set
			If (String.Equals(Me.__0_Komatsu_1200_Wheel_Loaders, value) = false) Then
				Me.__0_Komatsu_1200_Wheel_Loaders = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R9400 Excavators]", Storage:="__0_Liebherr_R9400_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R9400_Excavators() As String
		Get
			Return Me.__0_Liebherr_R9400_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R9400_Excavators, value) = false) Then
				Me.__0_Liebherr_R9400_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R996B Excavators]", Storage:="__0_Liebherr_R996B_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R996B_Excavators() As String
		Get
			Return Me.__0_Liebherr_R996B_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R996B_Excavators, value) = false) Then
				Me.__0_Liebherr_R996B_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco PV271 Drills]", Storage:="__0_Atlas_Copco_PV271_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_PV271_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_PV271_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_PV271_Drills, value) = false) Then
				Me.__0_Atlas_Copco_PV271_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco D65 Drills]", Storage:="__0_Atlas_Copco_D65_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_D65_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_D65_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_D65_Drills, value) = false) Then
				Me.__0_Atlas_Copco_D65_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Data Range]", Storage:="_Data_Range", DbType:="NVarChar(255)")>  _
	Public Property Data_Range() As String
		Get
			Return Me._Data_Range
		End Get
		Set
			If (String.Equals(Me._Data_Range, value) = false) Then
				Me._Data_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Operational Range]", Storage:="_Operational_Range", DbType:="NVarChar(255)")>  _
	Public Property Operational_Range() As String
		Get
			Return Me._Operational_Range
		End Get
		Set
			If (String.Equals(Me._Operational_Range, value) = false) Then
				Me._Operational_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolution", DbType:="NVarChar(255)")>  _
	Public Property Resolution() As String
		Get
			Return Me._Resolution
		End Get
		Set
			If (String.Equals(Me._Resolution, value) = false) Then
				Me._Resolution = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offset", DbType:="Float")>  _
	Public Property Offset() As System.Nullable(Of Double)
		Get
			Return Me._Offset
		End Get
		Set
			If (Me._Offset.Equals(value) = false) Then
				Me._Offset = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units", DbType:="NVarChar(255)")>  _
	Public Property Units() As String
		Get
			Return Me._Units
		End Get
		Set
			If (String.Equals(Me._Units, value) = false) Then
				Me._Units = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added to PGN]", Storage:="_Date_SPN_was_added_to_PGN", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_to_PGN() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_to_PGN
		End Get
		Set
			If (Me._Date_SPN_was_added_to_PGN.Equals(value) = false) Then
				Me._Date_SPN_was_added_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN addition to PGN]", Storage:="_Status_of_SPN_addition_to_PGN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN_addition_to_PGN() As String
		Get
			Return Me._Status_of_SPN_addition_to_PGN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN_addition_to_PGN, value) = false) Then
				Me._Status_of_SPN_addition_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added/modified]", Storage:="_Date_SPN_was_added_modified", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_modified() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_modified
		End Get
		Set
			If (Me._Date_SPN_was_added_modified.Equals(value) = false) Then
				Me._Date_SPN_was_added_modified = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN]", Storage:="_Status_of_SPN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN() As String
		Get
			Return Me._Status_of_SPN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN, value) = false) Then
				Me._Status_of_SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN Doc]", Storage:="_SPN_Doc", DbType:="NVarChar(255)")>  _
	Public Property SPN_Doc() As String
		Get
			Return Me._SPN_Doc
		End Get
		Set
			If (String.Equals(Me._SPN_Doc, value) = false) Then
				Me._SPN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Doc]", Storage:="_PGN_Doc", DbType:="NVarChar(255)")>  _
	Public Property PGN_Doc() As String
		Get
			Return Me._PGN_Doc
		End Get
		Set
			If (String.Equals(Me._PGN_Doc, value) = false) Then
				Me._PGN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F30", DbType:="NVarChar(255)")>  _
	Public Property F30() As String
		Get
			Return Me._F30
		End Get
		Set
			If (String.Equals(Me._F30, value) = false) Then
				Me._F30 = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CannonData")>  _
Partial Public Class CannonData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _RunNUmber As System.Nullable(Of Double)
	
	Private _RunDescription As String
	
	Private _RunDriver As System.Nullable(Of Double)
	
	Private _ServiceComments As String
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _InactiveRun As Boolean
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Double)
	
	Private _ServicePrice As System.Nullable(Of Double)
	
	Private _PerAnnumCharge As System.Nullable(Of Double)
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _AddressLine4 As String
	
	Private _Suburb As String
	
	Private _State As String
	
	Private _PostCode As System.Nullable(Of Double)
	
	Private _PhoneNo As String
	
	Private _FaxNo As String
	
	Private _SiteCeaseDate As String
	
	Private _calc_lat As String
	
	Private _calc_lng As String
	
	Private _calc_field1 As String
	
	Private _pk As Integer
	
	Private _NW_latlng As String
	
	Private _NE_latlng As String
	
	Private _SE_latlng As String
	
	Private _SW_latlng As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnRunNUmberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRunNUmberChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanged()
    End Sub
    Partial Private Sub OnInactiveRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveRunChanged()
    End Sub
    Partial Private Sub OnServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeChanged()
    End Sub
    Partial Private Sub OnServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceDescriptionChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnServicePriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServicePriceChanged()
    End Sub
    Partial Private Sub OnPerAnnumChargeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPerAnnumChargeChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnAddressLine3Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine3Changed()
    End Sub
    Partial Private Sub OnAddressLine4Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine4Changed()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFaxNoChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNoChanged()
    End Sub
    Partial Private Sub OnSiteCeaseDateChanging(value As String)
    End Sub
    Partial Private Sub OnSiteCeaseDateChanged()
    End Sub
    Partial Private Sub Oncalc_latChanging(value As String)
    End Sub
    Partial Private Sub Oncalc_latChanged()
    End Sub
    Partial Private Sub Oncalc_lngChanging(value As String)
    End Sub
    Partial Private Sub Oncalc_lngChanged()
    End Sub
    Partial Private Sub Oncalc_field1Changing(value As String)
    End Sub
    Partial Private Sub Oncalc_field1Changed()
    End Sub
    Partial Private Sub OnpkChanging(value As Integer)
    End Sub
    Partial Private Sub OnpkChanged()
    End Sub
    Partial Private Sub OnNW_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnNW_latlngChanged()
    End Sub
    Partial Private Sub OnNE_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnNE_latlngChanged()
    End Sub
    Partial Private Sub OnSE_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnSE_latlngChanged()
    End Sub
    Partial Private Sub OnSW_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnSW_latlngChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Float")>  _
	Public Property RunNUmber() As System.Nullable(Of Double)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me.OnRunNUmberChanging(value)
				Me.SendPropertyChanging
				Me._RunNUmber = value
				Me.SendPropertyChanged("RunNUmber")
				Me.OnRunNUmberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me.OnRunDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RunDescription = value
				Me.SendPropertyChanged("RunDescription")
				Me.OnRunDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Float")>  _
	Public Property RunDriver() As System.Nullable(Of Double)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me.OnRunDriverChanging(value)
				Me.SendPropertyChanging
				Me._RunDriver = value
				Me.SendPropertyChanged("RunDriver")
				Me.OnRunDriverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(255)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me.OnServiceCommentsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceComments = value
				Me.SendPropertyChanged("ServiceComments")
				Me.OnServiceCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me.OnUnitsHaveMoreThanOneRunChanging(value)
				Me.SendPropertyChanging
				Me._UnitsHaveMoreThanOneRun = value
				Me.SendPropertyChanged("UnitsHaveMoreThanOneRun")
				Me.OnUnitsHaveMoreThanOneRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me.OnInactiveRunChanging(value)
				Me.SendPropertyChanging
				Me._InactiveRun = value
				Me.SendPropertyChanged("InactiveRun")
				Me.OnInactiveRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(255)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me.OnServiceCodeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCode = value
				Me.SendPropertyChanged("ServiceCode")
				Me.OnServiceCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(255)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me.OnServiceDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ServiceDescription = value
				Me.SendPropertyChanged("ServiceDescription")
				Me.OnServiceDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>  _
	Public Property ServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me.OnServiceUnitsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUnits = value
				Me.SendPropertyChanged("ServiceUnits")
				Me.OnServiceUnitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Float")>  _
	Public Property ServicePrice() As System.Nullable(Of Double)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me.OnServicePriceChanging(value)
				Me.SendPropertyChanging
				Me._ServicePrice = value
				Me.SendPropertyChanged("ServicePrice")
				Me.OnServicePriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Float")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me.OnPerAnnumChargeChanging(value)
				Me.SendPropertyChanging
				Me._PerAnnumCharge = value
				Me.SendPropertyChanged("PerAnnumCharge")
				Me.OnPerAnnumChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(255)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me.OnAddressLine1Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine1 = value
				Me.SendPropertyChanged("AddressLine1")
				Me.OnAddressLine1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(255)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me.OnAddressLine2Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine2 = value
				Me.SendPropertyChanged("AddressLine2")
				Me.OnAddressLine2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(255)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me.OnAddressLine3Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine3 = value
				Me.SendPropertyChanged("AddressLine3")
				Me.OnAddressLine3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(255)")>  _
	Public Property AddressLine4() As String
		Get
			Return Me._AddressLine4
		End Get
		Set
			If (String.Equals(Me._AddressLine4, value) = false) Then
				Me.OnAddressLine4Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine4 = value
				Me.SendPropertyChanged("AddressLine4")
				Me.OnAddressLine4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(255)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me.OnSuburbChanging(value)
				Me.SendPropertyChanging
				Me._Suburb = value
				Me.SendPropertyChanged("Suburb")
				Me.OnSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(255)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="Float")>  _
	Public Property PostCode() As System.Nullable(Of Double)
		Get
			Return Me._PostCode
		End Get
		Set
			If (Me._PostCode.Equals(value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(255)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(255)")>  _
	Public Property FaxNo() As String
		Get
			Return Me._FaxNo
		End Get
		Set
			If (String.Equals(Me._FaxNo, value) = false) Then
				Me.OnFaxNoChanging(value)
				Me.SendPropertyChanging
				Me._FaxNo = value
				Me.SendPropertyChanged("FaxNo")
				Me.OnFaxNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="NVarChar(255)")>  _
	Public Property SiteCeaseDate() As String
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (String.Equals(Me._SiteCeaseDate, value) = false) Then
				Me.OnSiteCeaseDateChanging(value)
				Me.SendPropertyChanging
				Me._SiteCeaseDate = value
				Me.SendPropertyChanged("SiteCeaseDate")
				Me.OnSiteCeaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_lat", DbType:="VarChar(200)")>  _
	Public Property calc_lat() As String
		Get
			Return Me._calc_lat
		End Get
		Set
			If (String.Equals(Me._calc_lat, value) = false) Then
				Me.Oncalc_latChanging(value)
				Me.SendPropertyChanging
				Me._calc_lat = value
				Me.SendPropertyChanged("calc_lat")
				Me.Oncalc_latChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_lng", DbType:="VarChar(200)")>  _
	Public Property calc_lng() As String
		Get
			Return Me._calc_lng
		End Get
		Set
			If (String.Equals(Me._calc_lng, value) = false) Then
				Me.Oncalc_lngChanging(value)
				Me.SendPropertyChanging
				Me._calc_lng = value
				Me.SendPropertyChanged("calc_lng")
				Me.Oncalc_lngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_field1", DbType:="VarChar(200)")>  _
	Public Property calc_field1() As String
		Get
			Return Me._calc_field1
		End Get
		Set
			If (String.Equals(Me._calc_field1, value) = false) Then
				Me.Oncalc_field1Changing(value)
				Me.SendPropertyChanging
				Me._calc_field1 = value
				Me.SendPropertyChanged("calc_field1")
				Me.Oncalc_field1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pk", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property pk() As Integer
		Get
			Return Me._pk
		End Get
		Set
			If ((Me._pk = value)  _
						= false) Then
				Me.OnpkChanging(value)
				Me.SendPropertyChanging
				Me._pk = value
				Me.SendPropertyChanged("pk")
				Me.OnpkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NW_latlng", DbType:="VarChar(500)")>  _
	Public Property NW_latlng() As String
		Get
			Return Me._NW_latlng
		End Get
		Set
			If (String.Equals(Me._NW_latlng, value) = false) Then
				Me.OnNW_latlngChanging(value)
				Me.SendPropertyChanging
				Me._NW_latlng = value
				Me.SendPropertyChanged("NW_latlng")
				Me.OnNW_latlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NE_latlng", DbType:="VarChar(500)")>  _
	Public Property NE_latlng() As String
		Get
			Return Me._NE_latlng
		End Get
		Set
			If (String.Equals(Me._NE_latlng, value) = false) Then
				Me.OnNE_latlngChanging(value)
				Me.SendPropertyChanging
				Me._NE_latlng = value
				Me.SendPropertyChanged("NE_latlng")
				Me.OnNE_latlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SE_latlng", DbType:="VarChar(500)")>  _
	Public Property SE_latlng() As String
		Get
			Return Me._SE_latlng
		End Get
		Set
			If (String.Equals(Me._SE_latlng, value) = false) Then
				Me.OnSE_latlngChanging(value)
				Me.SendPropertyChanging
				Me._SE_latlng = value
				Me.SendPropertyChanged("SE_latlng")
				Me.OnSE_latlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SW_latlng", DbType:="VarChar(500)")>  _
	Public Property SW_latlng() As String
		Get
			Return Me._SW_latlng
		End Get
		Set
			If (String.Equals(Me._SW_latlng, value) = false) Then
				Me.OnSW_latlngChanging(value)
				Me.SendPropertyChanging
				Me._SW_latlng = value
				Me.SendPropertyChanged("SW_latlng")
				Me.OnSW_latlngChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contact")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Guid
	
	Private _Forname As String
	
	Private _Surname As String
	
	Private _EmailAddress As String
	
	Private _MobileNumber As String
	
	Private _CompanyName As String
	
	Private _ContactID As System.Guid
	
	Private _Notes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFornameChanging(value As String)
    End Sub
    Partial Private Sub OnFornameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnMobileNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNumberChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Forname", DbType:="VarChar(250)")>  _
	Public Property Forname() As String
		Get
			Return Me._Forname
		End Get
		Set
			If (String.Equals(Me._Forname, value) = false) Then
				Me.OnFornameChanging(value)
				Me.SendPropertyChanging
				Me._Forname = value
				Me.SendPropertyChanged("Forname")
				Me.OnFornameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(250)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(250)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNumber", DbType:="VarChar(50)")>  _
	Public Property MobileNumber() As String
		Get
			Return Me._MobileNumber
		End Get
		Set
			If (String.Equals(Me._MobileNumber, value) = false) Then
				Me.OnMobileNumberChanging(value)
				Me.SendPropertyChanging
				Me._MobileNumber = value
				Me.SendPropertyChanged("MobileNumber")
				Me.OnMobileNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="VarChar(300)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ContactID() As System.Guid
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Development")>  _
Partial Public Class Development
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DevelopmentID As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Notes As String
	
	Private _EstimateReleaseDate As System.Nullable(Of Date)
	
	Private _Released As System.Nullable(Of Date)
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDevelopmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDevelopmentIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnEstimateReleaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstimateReleaseDateChanged()
    End Sub
    Partial Private Sub OnReleasedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReleasedChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DevelopmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DevelopmentID() As Integer
		Get
			Return Me._DevelopmentID
		End Get
		Set
			If ((Me._DevelopmentID = value)  _
						= false) Then
				Me.OnDevelopmentIDChanging(value)
				Me.SendPropertyChanging
				Me._DevelopmentID = value
				Me.SendPropertyChanged("DevelopmentID")
				Me.OnDevelopmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NChar(10)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimateReleaseDate", DbType:="DateTime")>  _
	Public Property EstimateReleaseDate() As System.Nullable(Of Date)
		Get
			Return Me._EstimateReleaseDate
		End Get
		Set
			If (Me._EstimateReleaseDate.Equals(value) = false) Then
				Me.OnEstimateReleaseDateChanging(value)
				Me.SendPropertyChanging
				Me._EstimateReleaseDate = value
				Me.SendPropertyChanged("EstimateReleaseDate")
				Me.OnEstimateReleaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Released", DbType:="DateTime")>  _
	Public Property Released() As System.Nullable(Of Date)
		Get
			Return Me._Released
		End Get
		Set
			If (Me._Released.Equals(value) = false) Then
				Me.OnReleasedChanging(value)
				Me.SendPropertyChanging
				Me._Released = value
				Me.SendPropertyChanged("Released")
				Me.OnReleasedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(MAX)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Device")>  _
Partial Public Class Device
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DeviceID As String
	
	Private _PhoneNumber As String
	
	Private _IMEI As String
	
	Private _notes As String
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CreationDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnIMEIChanging(value As String)
    End Sub
    Partial Private Sub OnIMEIChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMEI", DbType:="VarChar(50)")>  _
	Public Property IMEI() As String
		Get
			Return Me._IMEI
		End Get
		Set
			If (String.Equals(Me._IMEI, value) = false) Then
				Me.OnIMEIChanging(value)
				Me.SendPropertyChanging
				Me._IMEI = value
				Me.SendPropertyChanged("IMEI")
				Me.OnIMEIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="VarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me.OnCreationDateChanging(value)
				Me.SendPropertyChanging
				Me._CreationDate = value
				Me.SendPropertyChanged("CreationDate")
				Me.OnCreationDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Feature")>  _
Partial Public Class Feature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FeatureID As System.Guid
	
	Private _FeatureName As String
	
	Private _FeatureDescription As String
	
	Private _ApplicationFeatures As EntitySet(Of ApplicationFeature)
	
	Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    Partial Private Sub OnFeatureNameChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureNameChanged()
    End Sub
    Partial Private Sub OnFeatureDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationFeatures = New EntitySet(Of ApplicationFeature)(AddressOf Me.attach_ApplicationFeatures, AddressOf Me.detach_ApplicationFeatures)
		Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FeatureID() As System.Guid
		Get
			Return Me._FeatureID
		End Get
		Set
			If ((Me._FeatureID = value)  _
						= false) Then
				Me.OnFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._FeatureID = value
				Me.SendPropertyChanged("FeatureID")
				Me.OnFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureName", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property FeatureName() As String
		Get
			Return Me._FeatureName
		End Get
		Set
			If (String.Equals(Me._FeatureName, value) = false) Then
				Me.OnFeatureNameChanging(value)
				Me.SendPropertyChanging
				Me._FeatureName = value
				Me.SendPropertyChanged("FeatureName")
				Me.OnFeatureNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureDescription", DbType:="VarChar(MAX)")>  _
	Public Property FeatureDescription() As String
		Get
			Return Me._FeatureDescription
		End Get
		Set
			If (String.Equals(Me._FeatureDescription, value) = false) Then
				Me.OnFeatureDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._FeatureDescription = value
				Me.SendPropertyChanged("FeatureDescription")
				Me.OnFeatureDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeature", Storage:="_ApplicationFeatures", ThisKey:="FeatureID", OtherKey:="FeatureID")>  _
	Public Property ApplicationFeatures() As EntitySet(Of ApplicationFeature)
		Get
			Return Me._ApplicationFeatures
		End Get
		Set
			Me._ApplicationFeatures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="FeatureID", OtherKey:="FeatureID")>  _
	Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
		Get
			Return Me._ApplicationFeatureRoles
		End Get
		Set
			Me._ApplicationFeatureRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.Feature = Me
	End Sub
	
	Private Sub detach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.Feature = Nothing
	End Sub
	
	Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.Feature = Me
	End Sub
	
	Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.Feature = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetMapMarker")>  _
Partial Public Class FleetMapMarker
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FleetMapMarkerId As System.Guid
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Vehicle_ApplicationImageId As System.Nullable(Of System.Guid)
	
	Private _Home_ApplicationImageId As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFleetMapMarkerIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFleetMapMarkerIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnVehicle_ApplicationImageIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVehicle_ApplicationImageIdChanged()
    End Sub
    Partial Private Sub OnHome_ApplicationImageIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnHome_ApplicationImageIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FleetMapMarkerId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FleetMapMarkerId() As System.Guid
		Get
			Return Me._FleetMapMarkerId
		End Get
		Set
			If ((Me._FleetMapMarkerId = value)  _
						= false) Then
				Me.OnFleetMapMarkerIdChanging(value)
				Me.SendPropertyChanging
				Me._FleetMapMarkerId = value
				Me.SendPropertyChanged("FleetMapMarkerId")
				Me.OnFleetMapMarkerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_ApplicationImageId", DbType:="UniqueIdentifier")>  _
	Public Property Vehicle_ApplicationImageId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Vehicle_ApplicationImageId
		End Get
		Set
			If (Me._Vehicle_ApplicationImageId.Equals(value) = false) Then
				Me.OnVehicle_ApplicationImageIdChanging(value)
				Me.SendPropertyChanging
				Me._Vehicle_ApplicationImageId = value
				Me.SendPropertyChanged("Vehicle_ApplicationImageId")
				Me.OnVehicle_ApplicationImageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Home_ApplicationImageId", DbType:="UniqueIdentifier")>  _
	Public Property Home_ApplicationImageId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Home_ApplicationImageId
		End Get
		Set
			If (Me._Home_ApplicationImageId.Equals(value) = false) Then
				Me.OnHome_ApplicationImageIdChanging(value)
				Me.SendPropertyChanging
				Me._Home_ApplicationImageId = value
				Me.SendPropertyChanged("Home_ApplicationImageId")
				Me.OnHome_ApplicationImageIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollisionAlert")>  _
Partial Public Class GeoFenceDeviceCollisionAlert
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GeoFenceDeviceCollisionAlertID As System.Guid
	
	Private _GeoFenceDeviceCollisionID As System.Guid
	
	Private _MessageSentEmail As String
	
	Private _MessageSendText As String
	
	Private _DeliveryEmailAddresses As String
	
	Private _DeliveryTexts As String
	
	Private _DeliveryGroups As String
	
	Private _MessageSent As System.Nullable(Of Date)
	
	Private _AlertTypeID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionAlertIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionAlertIDChanged()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionIDChanged()
    End Sub
    Partial Private Sub OnMessageSentEmailChanging(value As String)
    End Sub
    Partial Private Sub OnMessageSentEmailChanged()
    End Sub
    Partial Private Sub OnMessageSendTextChanging(value As String)
    End Sub
    Partial Private Sub OnMessageSendTextChanged()
    End Sub
    Partial Private Sub OnDeliveryEmailAddressesChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryEmailAddressesChanged()
    End Sub
    Partial Private Sub OnDeliveryTextsChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryTextsChanged()
    End Sub
    Partial Private Sub OnDeliveryGroupsChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryGroupsChanged()
    End Sub
    Partial Private Sub OnMessageSentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMessageSentChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollisionAlertID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GeoFenceDeviceCollisionAlertID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollisionAlertID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollisionAlertID = value)  _
						= false) Then
				Me.OnGeoFenceDeviceCollisionAlertIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceDeviceCollisionAlertID = value
				Me.SendPropertyChanged("GeoFenceDeviceCollisionAlertID")
				Me.OnGeoFenceDeviceCollisionAlertIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollisionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceDeviceCollisionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollisionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollisionID = value)  _
						= false) Then
				Me.OnGeoFenceDeviceCollisionIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceDeviceCollisionID = value
				Me.SendPropertyChanged("GeoFenceDeviceCollisionID")
				Me.OnGeoFenceDeviceCollisionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSentEmail", DbType:="VarChar(MAX)")>  _
	Public Property MessageSentEmail() As String
		Get
			Return Me._MessageSentEmail
		End Get
		Set
			If (String.Equals(Me._MessageSentEmail, value) = false) Then
				Me.OnMessageSentEmailChanging(value)
				Me.SendPropertyChanging
				Me._MessageSentEmail = value
				Me.SendPropertyChanged("MessageSentEmail")
				Me.OnMessageSentEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSendText", DbType:="VarChar(MAX)")>  _
	Public Property MessageSendText() As String
		Get
			Return Me._MessageSendText
		End Get
		Set
			If (String.Equals(Me._MessageSendText, value) = false) Then
				Me.OnMessageSendTextChanging(value)
				Me.SendPropertyChanging
				Me._MessageSendText = value
				Me.SendPropertyChanged("MessageSendText")
				Me.OnMessageSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryEmailAddresses", DbType:="VarChar(MAX)")>  _
	Public Property DeliveryEmailAddresses() As String
		Get
			Return Me._DeliveryEmailAddresses
		End Get
		Set
			If (String.Equals(Me._DeliveryEmailAddresses, value) = false) Then
				Me.OnDeliveryEmailAddressesChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryEmailAddresses = value
				Me.SendPropertyChanged("DeliveryEmailAddresses")
				Me.OnDeliveryEmailAddressesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryTexts", DbType:="VarChar(MAX)")>  _
	Public Property DeliveryTexts() As String
		Get
			Return Me._DeliveryTexts
		End Get
		Set
			If (String.Equals(Me._DeliveryTexts, value) = false) Then
				Me.OnDeliveryTextsChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryTexts = value
				Me.SendPropertyChanged("DeliveryTexts")
				Me.OnDeliveryTextsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryGroups", DbType:="VarChar(1000)")>  _
	Public Property DeliveryGroups() As String
		Get
			Return Me._DeliveryGroups
		End Get
		Set
			If (String.Equals(Me._DeliveryGroups, value) = false) Then
				Me.OnDeliveryGroupsChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryGroups = value
				Me.SendPropertyChanged("DeliveryGroups")
				Me.OnDeliveryGroupsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSent", DbType:="Date")>  _
	Public Property MessageSent() As System.Nullable(Of Date)
		Get
			Return Me._MessageSent
		End Get
		Set
			If (Me._MessageSent.Equals(value) = false) Then
				Me.OnMessageSentChanging(value)
				Me.SendPropertyChanging
				Me._MessageSent = value
				Me.SendPropertyChanged("MessageSent")
				Me.OnMessageSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier")>  _
	Public Property AlertTypeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If (Me._AlertTypeID.Equals(value) = false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollission")>  _
Partial Public Class GeoFenceDeviceCollission
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GeoFenceDeviceCollissionID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollissionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollissionIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GeoFenceDeviceCollissionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollissionID = value)  _
						= false) Then
				Me.OnGeoFenceDeviceCollissionIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceDeviceCollissionID = value
				Me.SendPropertyChanged("GeoFenceDeviceCollissionID")
				Me.OnGeoFenceDeviceCollissionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollission_20160604")>  _
Partial Public Class GeoFenceDeviceCollission_20160604
	
	Private _GeoFenceDeviceCollissionID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceDeviceCollissionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollissionID = value)  _
						= false) Then
				Me._GeoFenceDeviceCollissionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Group]")>  _
Partial Public Class [Group]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupID As System.Guid
	
	Private _GroupName As String
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GroupID() As System.Guid
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(200)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[GroupMember.old]")>  _
Partial Public Class GroupMember_old
	
	Private _GroupMemberID As System.Guid
	
	Private _GroupID As System.Guid
	
	Private _MemberType As Integer
	
	Private _MemberID As System.Guid
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupMemberID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupMemberID() As System.Guid
		Get
			Return Me._GroupMemberID
		End Get
		Set
			If ((Me._GroupMemberID = value)  _
						= false) Then
				Me._GroupMemberID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupID() As System.Guid
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me._GroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberType", DbType:="Int NOT NULL")>  _
	Public Property MemberType() As Integer
		Get
			Return Me._MemberType
		End Get
		Set
			If ((Me._MemberType = value)  _
						= false) Then
				Me._MemberType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property MemberID() As System.Guid
		Get
			Return Me._MemberID
		End Get
		Set
			If ((Me._MemberID = value)  _
						= false) Then
				Me._MemberID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GroupSubscriber")>  _
Partial Public Class GroupSubscriber
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupSubscriberID As System.Guid
	
	Private _GroupID As System.Guid
	
	Private _SubsciberTypeID As Integer
	
	Private _SendEmail As System.Nullable(Of Boolean)
	
	Private _SendText As System.Nullable(Of Boolean)
	
	Private _NativeID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupSubscriberIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnSubsciberTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubsciberTypeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNativeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GroupSubscriberID() As System.Guid
		Get
			Return Me._GroupSubscriberID
		End Get
		Set
			If ((Me._GroupSubscriberID = value)  _
						= false) Then
				Me.OnGroupSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubscriberID = value
				Me.SendPropertyChanged("GroupSubscriberID")
				Me.OnGroupSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupID() As System.Guid
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsciberTypeID", DbType:="Int NOT NULL")>  _
	Public Property SubsciberTypeID() As Integer
		Get
			Return Me._SubsciberTypeID
		End Get
		Set
			If ((Me._SubsciberTypeID = value)  _
						= false) Then
				Me.OnSubsciberTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubsciberTypeID = value
				Me.SendPropertyChanged("SubsciberTypeID")
				Me.OnSubsciberTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>  _
	Public Property SendEmail() As System.Nullable(Of Boolean)
		Get
			Return Me._SendEmail
		End Get
		Set
			If (Me._SendEmail.Equals(value) = false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>  _
	Public Property SendText() As System.Nullable(Of Boolean)
		Get
			Return Me._SendText
		End Get
		Set
			If (Me._SendText.Equals(value) = false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NativeID() As System.Guid
		Get
			Return Me._NativeID
		End Get
		Set
			If ((Me._NativeID = value)  _
						= false) Then
				Me.OnNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._NativeID = value
				Me.SendPropertyChanged("NativeID")
				Me.OnNativeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.j1939")>  _
Partial Public Class j1939
	
	Private _PGN As System.Nullable(Of Double)
	
	Private _Parameter_Group_Label As String
	
	Private _PGN_Length As String
	
	Private _Transmission_Rate As String
	
	Private _Acronym As String
	
	Private _pos As String
	
	Private _SPN_length As System.Nullable(Of Double)
	
	Private _SPN As System.Nullable(Of Double)
	
	Private __51_CAT_793F_Haul_Trucks As String
	
	Private __0_CAT_16M_Grader As String
	
	Private __0_Komatsu_1200_Wheel_Loaders As String
	
	Private __0_Liebherr_R9400_Excavators As String
	
	Private __0_Liebherr_R996B_Excavators As String
	
	Private __0_Atlas_Copco_PV271_Drills As String
	
	Private __0_Atlas_Copco_D65_Drills As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Data_Range As String
	
	Private _Operational_Range As String
	
	Private _Resolution As String
	
	Private _Offset As System.Nullable(Of Double)
	
	Private _Units As String
	
	Private _Date_SPN_was_added_to_PGN As System.Nullable(Of Date)
	
	Private _Status_of_SPN_addition_to_PGN As String
	
	Private _Date_SPN_was_added_modified As System.Nullable(Of Date)
	
	Private _Status_of_SPN As String
	
	Private _SPN_Doc As String
	
	Private _PGN_Doc As String
	
	Private _F29 As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>  _
	Public Property PGN() As System.Nullable(Of Double)
		Get
			Return Me._PGN
		End Get
		Set
			If (Me._PGN.Equals(value) = false) Then
				Me._PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Parameter Group Label]", Storage:="_Parameter_Group_Label", DbType:="NVarChar(255)")>  _
	Public Property Parameter_Group_Label() As String
		Get
			Return Me._Parameter_Group_Label
		End Get
		Set
			If (String.Equals(Me._Parameter_Group_Label, value) = false) Then
				Me._Parameter_Group_Label = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Length]", Storage:="_PGN_Length", DbType:="NVarChar(255)")>  _
	Public Property PGN_Length() As String
		Get
			Return Me._PGN_Length
		End Get
		Set
			If (String.Equals(Me._PGN_Length, value) = false) Then
				Me._PGN_Length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Transmission Rate]", Storage:="_Transmission_Rate", DbType:="NVarChar(255)")>  _
	Public Property Transmission_Rate() As String
		Get
			Return Me._Transmission_Rate
		End Get
		Set
			If (String.Equals(Me._Transmission_Rate, value) = false) Then
				Me._Transmission_Rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acronym", DbType:="NVarChar(255)")>  _
	Public Property Acronym() As String
		Get
			Return Me._Acronym
		End Get
		Set
			If (String.Equals(Me._Acronym, value) = false) Then
				Me._Acronym = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(255)")>  _
	Public Property pos() As String
		Get
			Return Me._pos
		End Get
		Set
			If (String.Equals(Me._pos, value) = false) Then
				Me._pos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN length]", Storage:="_SPN_length", DbType:="Float")>  _
	Public Property SPN_length() As System.Nullable(Of Double)
		Get
			Return Me._SPN_length
		End Get
		Set
			If (Me._SPN_length.Equals(value) = false) Then
				Me._SPN_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>  _
	Public Property SPN() As System.Nullable(Of Double)
		Get
			Return Me._SPN
		End Get
		Set
			If (Me._SPN.Equals(value) = false) Then
				Me._SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[51 CAT 793F Haul Trucks]", Storage:="__51_CAT_793F_Haul_Trucks", DbType:="NVarChar(255)")>  _
	Public Property _51_CAT_793F_Haul_Trucks() As String
		Get
			Return Me.__51_CAT_793F_Haul_Trucks
		End Get
		Set
			If (String.Equals(Me.__51_CAT_793F_Haul_Trucks, value) = false) Then
				Me.__51_CAT_793F_Haul_Trucks = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 CAT 16M Grader]", Storage:="__0_CAT_16M_Grader", DbType:="NVarChar(255)")>  _
	Public Property _0_CAT_16M_Grader() As String
		Get
			Return Me.__0_CAT_16M_Grader
		End Get
		Set
			If (String.Equals(Me.__0_CAT_16M_Grader, value) = false) Then
				Me.__0_CAT_16M_Grader = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Komatsu 1200 Wheel Loaders]", Storage:="__0_Komatsu_1200_Wheel_Loaders", DbType:="NVarChar(255)")>  _
	Public Property _0_Komatsu_1200_Wheel_Loaders() As String
		Get
			Return Me.__0_Komatsu_1200_Wheel_Loaders
		End Get
		Set
			If (String.Equals(Me.__0_Komatsu_1200_Wheel_Loaders, value) = false) Then
				Me.__0_Komatsu_1200_Wheel_Loaders = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R9400 Excavators]", Storage:="__0_Liebherr_R9400_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R9400_Excavators() As String
		Get
			Return Me.__0_Liebherr_R9400_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R9400_Excavators, value) = false) Then
				Me.__0_Liebherr_R9400_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R996B Excavators]", Storage:="__0_Liebherr_R996B_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R996B_Excavators() As String
		Get
			Return Me.__0_Liebherr_R996B_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R996B_Excavators, value) = false) Then
				Me.__0_Liebherr_R996B_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco PV271 Drills]", Storage:="__0_Atlas_Copco_PV271_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_PV271_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_PV271_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_PV271_Drills, value) = false) Then
				Me.__0_Atlas_Copco_PV271_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco D65 Drills]", Storage:="__0_Atlas_Copco_D65_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_D65_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_D65_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_D65_Drills, value) = false) Then
				Me.__0_Atlas_Copco_D65_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Data Range]", Storage:="_Data_Range", DbType:="NVarChar(255)")>  _
	Public Property Data_Range() As String
		Get
			Return Me._Data_Range
		End Get
		Set
			If (String.Equals(Me._Data_Range, value) = false) Then
				Me._Data_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Operational Range]", Storage:="_Operational_Range", DbType:="NVarChar(255)")>  _
	Public Property Operational_Range() As String
		Get
			Return Me._Operational_Range
		End Get
		Set
			If (String.Equals(Me._Operational_Range, value) = false) Then
				Me._Operational_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolution", DbType:="NVarChar(255)")>  _
	Public Property Resolution() As String
		Get
			Return Me._Resolution
		End Get
		Set
			If (String.Equals(Me._Resolution, value) = false) Then
				Me._Resolution = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offset", DbType:="Float")>  _
	Public Property Offset() As System.Nullable(Of Double)
		Get
			Return Me._Offset
		End Get
		Set
			If (Me._Offset.Equals(value) = false) Then
				Me._Offset = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units", DbType:="NVarChar(255)")>  _
	Public Property Units() As String
		Get
			Return Me._Units
		End Get
		Set
			If (String.Equals(Me._Units, value) = false) Then
				Me._Units = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added to PGN]", Storage:="_Date_SPN_was_added_to_PGN", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_to_PGN() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_to_PGN
		End Get
		Set
			If (Me._Date_SPN_was_added_to_PGN.Equals(value) = false) Then
				Me._Date_SPN_was_added_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN addition to PGN]", Storage:="_Status_of_SPN_addition_to_PGN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN_addition_to_PGN() As String
		Get
			Return Me._Status_of_SPN_addition_to_PGN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN_addition_to_PGN, value) = false) Then
				Me._Status_of_SPN_addition_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added/modified]", Storage:="_Date_SPN_was_added_modified", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_modified() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_modified
		End Get
		Set
			If (Me._Date_SPN_was_added_modified.Equals(value) = false) Then
				Me._Date_SPN_was_added_modified = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN]", Storage:="_Status_of_SPN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN() As String
		Get
			Return Me._Status_of_SPN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN, value) = false) Then
				Me._Status_of_SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN Doc]", Storage:="_SPN_Doc", DbType:="NVarChar(255)")>  _
	Public Property SPN_Doc() As String
		Get
			Return Me._SPN_Doc
		End Get
		Set
			If (String.Equals(Me._SPN_Doc, value) = false) Then
				Me._SPN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Doc]", Storage:="_PGN_Doc", DbType:="NVarChar(255)")>  _
	Public Property PGN_Doc() As String
		Get
			Return Me._PGN_Doc
		End Get
		Set
			If (String.Equals(Me._PGN_Doc, value) = false) Then
				Me._PGN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F29", DbType:="NVarChar(255)")>  _
	Public Property F29() As String
		Get
			Return Me._F29
		End Get
		Set
			If (String.Equals(Me._F29, value) = false) Then
				Me._F29 = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaidFeatures")>  _
Partial Public Class PaidFeature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationPaidFeaturesID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _PaidFeatureDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationPaidFeaturesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationPaidFeaturesIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnPaidFeatureDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPaidFeatureDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPaidFeaturesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationPaidFeaturesID() As System.Guid
		Get
			Return Me._ApplicationPaidFeaturesID
		End Get
		Set
			If ((Me._ApplicationPaidFeaturesID = value)  _
						= false) Then
				Me.OnApplicationPaidFeaturesIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationPaidFeaturesID = value
				Me.SendPropertyChanged("ApplicationPaidFeaturesID")
				Me.OnApplicationPaidFeaturesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaidFeatureDescription", DbType:="NVarChar(MAX)")>  _
	Public Property PaidFeatureDescription() As String
		Get
			Return Me._PaidFeatureDescription
		End Get
		Set
			If (String.Equals(Me._PaidFeatureDescription, value) = false) Then
				Me.OnPaidFeatureDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PaidFeatureDescription = value
				Me.SendPropertyChanged("PaidFeatureDescription")
				Me.OnPaidFeatureDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ReportSchdeule")>  _
Partial Public Class ReportSchdeule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReportScheduleID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _ReportName As String
	
	Private _ReportType As String
	
	Private _ReportTypeSpecific As String
	
	Private _ReportTime As System.Nullable(Of Date)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Creator As String
	
	Private _ReportParams As String
	
	Private _SubscriberID As System.Nullable(Of System.Guid)
	
	Private _Schedule As String
	
	Private _Recipients As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReportScheduleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnReportScheduleIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnReportNameChanging(value As String)
    End Sub
    Partial Private Sub OnReportNameChanged()
    End Sub
    Partial Private Sub OnReportTypeChanging(value As String)
    End Sub
    Partial Private Sub OnReportTypeChanged()
    End Sub
    Partial Private Sub OnReportTypeSpecificChanging(value As String)
    End Sub
    Partial Private Sub OnReportTypeSpecificChanged()
    End Sub
    Partial Private Sub OnReportTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReportTimeChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnCreatorChanging(value As String)
    End Sub
    Partial Private Sub OnCreatorChanged()
    End Sub
    Partial Private Sub OnReportParamsChanging(value As String)
    End Sub
    Partial Private Sub OnReportParamsChanged()
    End Sub
    Partial Private Sub OnSubscriberIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberIDChanged()
    End Sub
    Partial Private Sub OnScheduleChanging(value As String)
    End Sub
    Partial Private Sub OnScheduleChanged()
    End Sub
    Partial Private Sub OnRecipientsChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRecipientsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportScheduleID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ReportScheduleID() As System.Guid
		Get
			Return Me._ReportScheduleID
		End Get
		Set
			If ((Me._ReportScheduleID = value)  _
						= false) Then
				Me.OnReportScheduleIDChanging(value)
				Me.SendPropertyChanging
				Me._ReportScheduleID = value
				Me.SendPropertyChanged("ReportScheduleID")
				Me.OnReportScheduleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportName", DbType:="VarChar(100)")>  _
	Public Property ReportName() As String
		Get
			Return Me._ReportName
		End Get
		Set
			If (String.Equals(Me._ReportName, value) = false) Then
				Me.OnReportNameChanging(value)
				Me.SendPropertyChanging
				Me._ReportName = value
				Me.SendPropertyChanged("ReportName")
				Me.OnReportNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportType", DbType:="VarChar(100)")>  _
	Public Property ReportType() As String
		Get
			Return Me._ReportType
		End Get
		Set
			If (String.Equals(Me._ReportType, value) = false) Then
				Me.OnReportTypeChanging(value)
				Me.SendPropertyChanging
				Me._ReportType = value
				Me.SendPropertyChanged("ReportType")
				Me.OnReportTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportTypeSpecific", DbType:="VarChar(100)")>  _
	Public Property ReportTypeSpecific() As String
		Get
			Return Me._ReportTypeSpecific
		End Get
		Set
			If (String.Equals(Me._ReportTypeSpecific, value) = false) Then
				Me.OnReportTypeSpecificChanging(value)
				Me.SendPropertyChanging
				Me._ReportTypeSpecific = value
				Me.SendPropertyChanged("ReportTypeSpecific")
				Me.OnReportTypeSpecificChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportTime", DbType:="DateTime")>  _
	Public Property ReportTime() As System.Nullable(Of Date)
		Get
			Return Me._ReportTime
		End Get
		Set
			If (Me._ReportTime.Equals(value) = false) Then
				Me.OnReportTimeChanging(value)
				Me.SendPropertyChanging
				Me._ReportTime = value
				Me.SendPropertyChanged("ReportTime")
				Me.OnReportTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Creator", DbType:="VarChar(500)")>  _
	Public Property Creator() As String
		Get
			Return Me._Creator
		End Get
		Set
			If (String.Equals(Me._Creator, value) = false) Then
				Me.OnCreatorChanging(value)
				Me.SendPropertyChanging
				Me._Creator = value
				Me.SendPropertyChanged("Creator")
				Me.OnCreatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportParams", DbType:="VarChar(MAX)")>  _
	Public Property ReportParams() As String
		Get
			Return Me._ReportParams
		End Get
		Set
			If (String.Equals(Me._ReportParams, value) = false) Then
				Me.OnReportParamsChanging(value)
				Me.SendPropertyChanging
				Me._ReportParams = value
				Me.SendPropertyChanged("ReportParams")
				Me.OnReportParamsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberID", DbType:="UniqueIdentifier")>  _
	Public Property SubscriberID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SubscriberID
		End Get
		Set
			If (Me._SubscriberID.Equals(value) = false) Then
				Me.OnSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberID = value
				Me.SendPropertyChanged("SubscriberID")
				Me.OnSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule", DbType:="VarChar(MAX)")>  _
	Public Property Schedule() As String
		Get
			Return Me._Schedule
		End Get
		Set
			If (String.Equals(Me._Schedule, value) = false) Then
				Me.OnScheduleChanging(value)
				Me.SendPropertyChanging
				Me._Schedule = value
				Me.SendPropertyChanged("Schedule")
				Me.OnScheduleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Recipients", DbType:="UniqueIdentifier")>  _
	Public Property Recipients() As System.Nullable(Of System.Guid)
		Get
			Return Me._Recipients
		End Get
		Set
			If (Me._Recipients.Equals(value) = false) Then
				Me.OnRecipientsChanging(value)
				Me.SendPropertyChanging
				Me._Recipients = value
				Me.SendPropertyChanged("Recipients")
				Me.OnRecipientsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Setting")>  _
Partial Public Class Setting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SettingID As System.Guid
	
	Private _Name As String
	
	Private _ApplicationSettingValues As EntitySet(Of ApplicationSettingValue)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationSettingValues = New EntitySet(Of ApplicationSettingValue)(AddressOf Me.attach_ApplicationSettingValues, AddressOf Me.detach_ApplicationSettingValues)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SettingID() As System.Guid
		Get
			Return Me._SettingID
		End Get
		Set
			If ((Me._SettingID = value)  _
						= false) Then
				Me.OnSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SettingID = value
				Me.SendPropertyChanged("SettingID")
				Me.OnSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Setting_ApplicationSettingValue", Storage:="_ApplicationSettingValues", ThisKey:="SettingID", OtherKey:="SettingID")>  _
	Public Property ApplicationSettingValues() As EntitySet(Of ApplicationSettingValue)
		Get
			Return Me._ApplicationSettingValues
		End Get
		Set
			Me._ApplicationSettingValues.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.Setting = Me
	End Sub
	
	Private Sub detach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.Setting = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SimulatorSetting")>  _
Partial Public Class SimulatorSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SimulatorSettingID As System.Guid
	
	Private _SourceDeviceID As String
	
	Private _StartTime As Date
	
	Private _EndTime As Date
	
	Private _DestinationDeviceID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSimulatorSettingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSimulatorSettingIDChanged()
    End Sub
    Partial Private Sub OnSourceDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnSourceDeviceIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnDestinationDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDestinationDeviceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SimulatorSettingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SimulatorSettingID() As System.Guid
		Get
			Return Me._SimulatorSettingID
		End Get
		Set
			If ((Me._SimulatorSettingID = value)  _
						= false) Then
				Me.OnSimulatorSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SimulatorSettingID = value
				Me.SendPropertyChanged("SimulatorSettingID")
				Me.OnSimulatorSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDeviceID", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property SourceDeviceID() As String
		Get
			Return Me._SourceDeviceID
		End Get
		Set
			If (String.Equals(Me._SourceDeviceID, value) = false) Then
				Me.OnSourceDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceDeviceID = value
				Me.SendPropertyChanged("SourceDeviceID")
				Me.OnSourceDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime NOT NULL")>  _
	Public Property StartTime() As Date
		Get
			Return Me._StartTime
		End Get
		Set
			If ((Me._StartTime = value)  _
						= false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime NOT NULL")>  _
	Public Property EndTime() As Date
		Get
			Return Me._EndTime
		End Get
		Set
			If ((Me._EndTime = value)  _
						= false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DestinationDeviceID", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DestinationDeviceID() As String
		Get
			Return Me._DestinationDeviceID
		End Get
		Set
			If (String.Equals(Me._DestinationDeviceID, value) = false) Then
				Me.OnDestinationDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DestinationDeviceID = value
				Me.SendPropertyChanged("DestinationDeviceID")
				Me.OnDestinationDeviceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WebServiceLog")>  _
Partial Public Class WebServiceLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WebServiceLog As Integer
	
	Private _RequestMethod As String
	
	Private _login As String
	
	Private _XMLRequest As String
	
	Private _company As String
	
	Private _XMLResponse As String
	
	Private _DateLogged As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWebServiceLogChanging(value As Integer)
    End Sub
    Partial Private Sub OnWebServiceLogChanged()
    End Sub
    Partial Private Sub OnRequestMethodChanging(value As String)
    End Sub
    Partial Private Sub OnRequestMethodChanged()
    End Sub
    Partial Private Sub OnloginChanging(value As String)
    End Sub
    Partial Private Sub OnloginChanged()
    End Sub
    Partial Private Sub OnXMLRequestChanging(value As String)
    End Sub
    Partial Private Sub OnXMLRequestChanged()
    End Sub
    Partial Private Sub OncompanyChanging(value As String)
    End Sub
    Partial Private Sub OncompanyChanged()
    End Sub
    Partial Private Sub OnXMLResponseChanging(value As String)
    End Sub
    Partial Private Sub OnXMLResponseChanged()
    End Sub
    Partial Private Sub OnDateLoggedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateLoggedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebServiceLog", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WebServiceLog() As Integer
		Get
			Return Me._WebServiceLog
		End Get
		Set
			If ((Me._WebServiceLog = value)  _
						= false) Then
				Me.OnWebServiceLogChanging(value)
				Me.SendPropertyChanging
				Me._WebServiceLog = value
				Me.SendPropertyChanged("WebServiceLog")
				Me.OnWebServiceLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestMethod", DbType:="NVarChar(200)")>  _
	Public Property RequestMethod() As String
		Get
			Return Me._RequestMethod
		End Get
		Set
			If (String.Equals(Me._RequestMethod, value) = false) Then
				Me.OnRequestMethodChanging(value)
				Me.SendPropertyChanging
				Me._RequestMethod = value
				Me.SendPropertyChanged("RequestMethod")
				Me.OnRequestMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_login", DbType:="VarChar(200)")>  _
	Public Property login() As String
		Get
			Return Me._login
		End Get
		Set
			If (String.Equals(Me._login, value) = false) Then
				Me.OnloginChanging(value)
				Me.SendPropertyChanging
				Me._login = value
				Me.SendPropertyChanged("login")
				Me.OnloginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLRequest", DbType:="VarChar(MAX)")>  _
	Public Property XMLRequest() As String
		Get
			Return Me._XMLRequest
		End Get
		Set
			If (String.Equals(Me._XMLRequest, value) = false) Then
				Me.OnXMLRequestChanging(value)
				Me.SendPropertyChanging
				Me._XMLRequest = value
				Me.SendPropertyChanged("XMLRequest")
				Me.OnXMLRequestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="VarChar(200)")>  _
	Public Property company() As String
		Get
			Return Me._company
		End Get
		Set
			If (String.Equals(Me._company, value) = false) Then
				Me.OncompanyChanging(value)
				Me.SendPropertyChanging
				Me._company = value
				Me.SendPropertyChanged("company")
				Me.OncompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLResponse", DbType:="VarChar(MAX)")>  _
	Public Property XMLResponse() As String
		Get
			Return Me._XMLResponse
		End Get
		Set
			If (String.Equals(Me._XMLResponse, value) = false) Then
				Me.OnXMLResponseChanging(value)
				Me.SendPropertyChanging
				Me._XMLResponse = value
				Me.SendPropertyChanged("XMLResponse")
				Me.OnXMLResponseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLogged", DbType:="DateTime NOT NULL")>  _
	Public Property DateLogged() As Date
		Get
			Return Me._DateLogged
		End Get
		Set
			If ((Me._DateLogged = value)  _
						= false) Then
				Me.OnDateLoggedChanging(value)
				Me.SendPropertyChanging
				Me._DateLogged = value
				Me.SendPropertyChanged("DateLogged")
				Me.OnDateLoggedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class aspnet_Roles_GetAllRolesResult
	
	Private _RoleName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me._RoleName = value
			End If
		End Set
	End Property
End Class

Partial Public Class aspnet_UsersInRoles_AddUsersToRolesResult
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class

Partial Public Class aspnet_UsersInRoles_RemoveUsersFromRolesResult
	
	Private _Column1 As String
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="NVarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Column1() As String
		Get
			Return Me._Column1
		End Get
		Set
			If (String.Equals(Me._Column1, value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetVehiclesAndDriversFortimePeriodResult
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _Name As String
	
	Private _DeviceID As String
	
	Private _ApplicationVehicleDriverTimeID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _PassengerID As System.Nullable(Of System.Guid)
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleDriverTimeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleDriverTimeID
		End Get
		Set
			If (Me._ApplicationVehicleDriverTimeID.Equals(value) = false) Then
				Me._ApplicationVehicleDriverTimeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>  _
	Public Property PassengerID() As System.Nullable(Of System.Guid)
		Get
			Return Me._PassengerID
		End Get
		Set
			If (Me._PassengerID.Equals(value) = false) Then
				Me._PassengerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me._StartDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me._EndDateTime = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSettingsForApplicationResult
	
	Private _SettingID As System.Guid
	
	Private _ApplicationSettingValueID As System.Nullable(Of System.Guid)
	
	Private _ApplicationId As System.Guid
	
	Private _Name As String
	
	Private _ApplicationName As String
	
	Private _Value As String
	
	Private _ValueObj As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SettingID() As System.Guid
		Get
			Return Me._SettingID
		End Get
		Set
			If ((Me._SettingID = value)  _
						= false) Then
				Me._SettingID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationSettingValueID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationSettingValueID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationSettingValueID
		End Get
		Set
			If (Me._ApplicationSettingValueID.Equals(value) = false) Then
				Me._ApplicationSettingValueID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me._ApplicationName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(MAX)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueObj", DbType:="VarBinary(MAX)")>  _
	Public Property ValueObj() As System.Data.Linq.Binary
		Get
			Return Me._ValueObj
		End Get
		Set
			If (Object.Equals(Me._ValueObj, value) = false) Then
				Me._ValueObj = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSubscribersForApplicationResult
	
	Private _SubcriberType As String
	
	Private _SubcriberType_ID As Integer
	
	Private _NativeID As System.Guid
	
	Private _Name As String
	
	Private _Email As String
	
	Private _Mobile As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubcriberType", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property SubcriberType() As String
		Get
			Return Me._SubcriberType
		End Get
		Set
			If (String.Equals(Me._SubcriberType, value) = false) Then
				Me._SubcriberType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubcriberType_ID", DbType:="Int NOT NULL")>  _
	Public Property SubcriberType_ID() As Integer
		Get
			Return Me._SubcriberType_ID
		End Get
		Set
			If ((Me._SubcriberType_ID = value)  _
						= false) Then
				Me._SubcriberType_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NativeID() As System.Guid
		Get
			Return Me._NativeID
		End Get
		Set
			If ((Me._NativeID = value)  _
						= false) Then
				Me._NativeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(MAX)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me._Mobile = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGeoFenceCollisionsResult
	
	Private _id As System.Nullable(Of Long)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _GeoFence_Description As String
	
	Private _Vehicle_Name As String
	
	Private _GeoFence_Name As String
	
	Private _Driver_Name As String
	
	Private _GeoFence_Name1 As String
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _ApplicationVehicleID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _GeoFenceDeviceCollissionID As System.Guid
	
	Private _ApplictionID As System.Nullable(Of System.Guid)
	
	Private _PhoneNumber As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="BigInt")>  _
	Public Property id() As System.Nullable(Of Long)
		Get
			Return Me._id
		End Get
		Set
			If (Me._id.Equals(value) = false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Description", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Description() As String
		Get
			Return Me._GeoFence_Description
		End Get
		Set
			If (String.Equals(Me._GeoFence_Description, value) = false) Then
				Me._GeoFence_Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_Name", DbType:="VarChar(500)")>  _
	Public Property Vehicle_Name() As String
		Get
			Return Me._Vehicle_Name
		End Get
		Set
			If (String.Equals(Me._Vehicle_Name, value) = false) Then
				Me._Vehicle_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Name() As String
		Get
			Return Me._GeoFence_Name
		End Get
		Set
			If (String.Equals(Me._GeoFence_Name, value) = false) Then
				Me._GeoFence_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver_Name", DbType:="VarChar(MAX)")>  _
	Public Property Driver_Name() As String
		Get
			Return Me._Driver_Name
		End Get
		Set
			If (String.Equals(Me._Driver_Name, value) = false) Then
				Me._Driver_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name1", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Name1() As String
		Get
			Return Me._GeoFence_Name1
		End Get
		Set
			If (String.Equals(Me._GeoFence_Name1, value) = false) Then
				Me._GeoFence_Name1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If (Me._ApplicationVehicleID.Equals(value) = false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceDeviceCollissionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollissionID = value)  _
						= false) Then
				Me._GeoFenceDeviceCollissionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier")>  _
	Public Property ApplictionID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplictionID
		End Get
		Set
			If (Me._ApplictionID.Equals(value) = false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me._PhoneNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetAssignedVehiclestoDriversResult
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _Name As String
	
	Private _DeviceID As String
	
	Private _ApplicationVehicleDriverTimeID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _PassengerID As System.Nullable(Of System.Guid)
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleDriverTimeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleDriverTimeID
		End Get
		Set
			If (Me._ApplicationVehicleDriverTimeID.Equals(value) = false) Then
				Me._ApplicationVehicleDriverTimeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>  _
	Public Property PassengerID() As System.Nullable(Of System.Guid)
		Get
			Return Me._PassengerID
		End Get
		Set
			If (Me._PassengerID.Equals(value) = false) Then
				Me._PassengerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me._StartDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me._EndDateTime = value
			End If
		End Set
	End Property
End Class
