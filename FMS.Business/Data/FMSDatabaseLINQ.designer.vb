'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FMSDev")>  _
Partial Public Class LINQtoSQLClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
  Partial Private Sub UpdateAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
  Partial Private Sub DeleteAlertSubscriber_deleteme(instance As AlertSubscriber_deleteme)
    End Sub
  Partial Private Sub InsertWorkRequest(instance As WorkRequest)
    End Sub
  Partial Private Sub UpdateWorkRequest(instance As WorkRequest)
    End Sub
  Partial Private Sub DeleteWorkRequest(instance As WorkRequest)
    End Sub
  Partial Private Sub InsertAlertType(instance As AlertType)
    End Sub
  Partial Private Sub UpdateAlertType(instance As AlertType)
    End Sub
  Partial Private Sub DeleteAlertType(instance As AlertType)
    End Sub
  Partial Private Sub InsertAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
  Partial Private Sub UpdateAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
  Partial Private Sub DeleteAlertTypeOccurance(instance As AlertTypeOccurance)
    End Sub
  Partial Private Sub InsertAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
  Partial Private Sub UpdateAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
  Partial Private Sub DeleteAlertTypeSubscriber_deleteme(instance As AlertTypeSubscriber_deleteme)
    End Sub
  Partial Private Sub InsertApplicationDriver(instance As ApplicationDriver)
    End Sub
  Partial Private Sub UpdateApplicationDriver(instance As ApplicationDriver)
    End Sub
  Partial Private Sub DeleteApplicationDriver(instance As ApplicationDriver)
    End Sub
  Partial Private Sub InsertApplicationFeature(instance As ApplicationFeature)
    End Sub
  Partial Private Sub UpdateApplicationFeature(instance As ApplicationFeature)
    End Sub
  Partial Private Sub DeleteApplicationFeature(instance As ApplicationFeature)
    End Sub
  Partial Private Sub InsertApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
  Partial Private Sub UpdateApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
  Partial Private Sub DeleteApplicationFeatureRole(instance As ApplicationFeatureRole)
    End Sub
  Partial Private Sub InsertApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
  Partial Private Sub UpdateApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
  Partial Private Sub DeleteApplicationGeoFence(instance As ApplicationGeoFence)
    End Sub
  Partial Private Sub InsertApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
  Partial Private Sub UpdateApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
  Partial Private Sub DeleteApplicationGeofenceProperty(instance As ApplicationGeofenceProperty)
    End Sub
  Partial Private Sub InsertApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
  Partial Private Sub UpdateApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
  Partial Private Sub DeleteApplicationGeoFenceSide(instance As ApplicationGeoFenceSide)
    End Sub
  Partial Private Sub InsertApplicationImage(instance As ApplicationImage)
    End Sub
  Partial Private Sub UpdateApplicationImage(instance As ApplicationImage)
    End Sub
  Partial Private Sub DeleteApplicationImage(instance As ApplicationImage)
    End Sub
  Partial Private Sub InsertApplicationLocation(instance As ApplicationLocation)
    End Sub
  Partial Private Sub UpdateApplicationLocation(instance As ApplicationLocation)
    End Sub
  Partial Private Sub DeleteApplicationLocation(instance As ApplicationLocation)
    End Sub
  Partial Private Sub InsertApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
  Partial Private Sub UpdateApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
  Partial Private Sub DeleteApplicationSettingValue(instance As ApplicationSettingValue)
    End Sub
  Partial Private Sub InsertApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
  Partial Private Sub UpdateApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
  Partial Private Sub DeleteApplicationTimeZone(instance As ApplicationTimeZone)
    End Sub
  Partial Private Sub InsertApplicationVehicle(instance As ApplicationVehicle)
    End Sub
  Partial Private Sub UpdateApplicationVehicle(instance As ApplicationVehicle)
    End Sub
  Partial Private Sub DeleteApplicationVehicle(instance As ApplicationVehicle)
    End Sub
  Partial Private Sub InsertApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
  Partial Private Sub UpdateApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
  Partial Private Sub DeleteApplicationVehicleDriverTime(instance As ApplicationVehicleDriverTime)
    End Sub
  Partial Private Sub InsertApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
  Partial Private Sub UpdateApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
  Partial Private Sub DeleteApplicationVehicleOdometerReading(instance As ApplicationVehicleOdometerReading)
    End Sub
  Partial Private Sub Insertaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Updateaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Deleteaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Insertaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Updateaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Deleteaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Insertaspnet_Path(instance As aspnet_Path)
    End Sub
  Partial Private Sub Updateaspnet_Path(instance As aspnet_Path)
    End Sub
  Partial Private Sub Deleteaspnet_Path(instance As aspnet_Path)
    End Sub
  Partial Private Sub Insertaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
  Partial Private Sub Updateaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
  Partial Private Sub Deleteaspnet_PersonalizationAllUser(instance As aspnet_PersonalizationAllUser)
    End Sub
  Partial Private Sub Insertaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
  Partial Private Sub Updateaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
  Partial Private Sub Deleteaspnet_PersonalizationPerUser(instance As aspnet_PersonalizationPerUser)
    End Sub
  Partial Private Sub Insertaspnet_Profile(instance As aspnet_Profile)
    End Sub
  Partial Private Sub Updateaspnet_Profile(instance As aspnet_Profile)
    End Sub
  Partial Private Sub Deleteaspnet_Profile(instance As aspnet_Profile)
    End Sub
  Partial Private Sub Insertaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Updateaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Deleteaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Insertaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
  Partial Private Sub Updateaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
  Partial Private Sub Deleteaspnet_SchemaVersion(instance As aspnet_SchemaVersion)
    End Sub
  Partial Private Sub Insertaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Updateaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Insertaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Updateaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Deleteaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Insertaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
  Partial Private Sub Updateaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
  Partial Private Sub Deleteaspnet_WebEvent_Event(instance As aspnet_WebEvent_Event)
    End Sub
  Partial Private Sub InsertAuthenticationToken(instance As AuthenticationToken)
    End Sub
  Partial Private Sub UpdateAuthenticationToken(instance As AuthenticationToken)
    End Sub
  Partial Private Sub DeleteAuthenticationToken(instance As AuthenticationToken)
    End Sub
  Partial Private Sub InsertCAN_Data(instance As CAN_Data)
    End Sub
  Partial Private Sub UpdateCAN_Data(instance As CAN_Data)
    End Sub
  Partial Private Sub DeleteCAN_Data(instance As CAN_Data)
    End Sub
  Partial Private Sub InsertCannonData(instance As CannonData)
    End Sub
  Partial Private Sub UpdateCannonData(instance As CannonData)
    End Sub
  Partial Private Sub DeleteCannonData(instance As CannonData)
    End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertDevelopment(instance As Development)
    End Sub
  Partial Private Sub UpdateDevelopment(instance As Development)
    End Sub
  Partial Private Sub DeleteDevelopment(instance As Development)
    End Sub
  Partial Private Sub InsertDevice(instance As Device)
    End Sub
  Partial Private Sub UpdateDevice(instance As Device)
    End Sub
  Partial Private Sub DeleteDevice(instance As Device)
    End Sub
  Partial Private Sub InsertFeature(instance As Feature)
    End Sub
  Partial Private Sub UpdateFeature(instance As Feature)
    End Sub
  Partial Private Sub DeleteFeature(instance As Feature)
    End Sub
  Partial Private Sub InsertFleetMapMarker(instance As FleetMapMarker)
    End Sub
  Partial Private Sub UpdateFleetMapMarker(instance As FleetMapMarker)
    End Sub
  Partial Private Sub DeleteFleetMapMarker(instance As FleetMapMarker)
    End Sub
  Partial Private Sub InsertGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
  Partial Private Sub UpdateGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
  Partial Private Sub DeleteGeoFenceDeviceCollisionAlert(instance As GeoFenceDeviceCollisionAlert)
    End Sub
  Partial Private Sub InsertGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
  Partial Private Sub UpdateGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
  Partial Private Sub DeleteGeoFenceDeviceCollission(instance As GeoFenceDeviceCollission)
    End Sub
  Partial Private Sub InsertGroup(instance As [Group])
    End Sub
  Partial Private Sub UpdateGroup(instance As [Group])
    End Sub
  Partial Private Sub DeleteGroup(instance As [Group])
    End Sub
  Partial Private Sub InsertGroupSubscriber(instance As GroupSubscriber)
    End Sub
  Partial Private Sub UpdateGroupSubscriber(instance As GroupSubscriber)
    End Sub
  Partial Private Sub DeleteGroupSubscriber(instance As GroupSubscriber)
    End Sub
  Partial Private Sub InsertPaidFeature(instance As PaidFeature)
    End Sub
  Partial Private Sub UpdatePaidFeature(instance As PaidFeature)
    End Sub
  Partial Private Sub DeletePaidFeature(instance As PaidFeature)
    End Sub
  Partial Private Sub InsertSetting(instance As Setting)
    End Sub
  Partial Private Sub UpdateSetting(instance As Setting)
    End Sub
  Partial Private Sub DeleteSetting(instance As Setting)
    End Sub
  Partial Private Sub InsertSimulatorSetting(instance As SimulatorSetting)
    End Sub
  Partial Private Sub UpdateSimulatorSetting(instance As SimulatorSetting)
    End Sub
  Partial Private Sub DeleteSimulatorSetting(instance As SimulatorSetting)
    End Sub
  Partial Private Sub InsertWebServiceLog(instance As WebServiceLog)
    End Sub
  Partial Private Sub UpdateWebServiceLog(instance As WebServiceLog)
    End Sub
  Partial Private Sub DeleteWebServiceLog(instance As WebServiceLog)
    End Sub
  Partial Private Sub InsertReportSchdeule(instance As ReportSchdeule)
    End Sub
  Partial Private Sub UpdateReportSchdeule(instance As ReportSchdeule)
    End Sub
  Partial Private Sub DeleteReportSchdeule(instance As ReportSchdeule)
    End Sub
  Partial Private Sub InsertApplicationBooking(instance As ApplicationBooking)
    End Sub
  Partial Private Sub UpdateApplicationBooking(instance As ApplicationBooking)
    End Sub
  Partial Private Sub DeleteApplicationBooking(instance As ApplicationBooking)
    End Sub
  Partial Private Sub InsertCAN_EventDefinition(instance As CAN_EventDefinition)
    End Sub
  Partial Private Sub UpdateCAN_EventDefinition(instance As CAN_EventDefinition)
    End Sub
  Partial Private Sub DeleteCAN_EventDefinition(instance As CAN_EventDefinition)
    End Sub
  Partial Private Sub InsertCAN_AlertDefinition(instance As CAN_AlertDefinition)
    End Sub
  Partial Private Sub UpdateCAN_AlertDefinition(instance As CAN_AlertDefinition)
    End Sub
  Partial Private Sub DeleteCAN_AlertDefinition(instance As CAN_AlertDefinition)
    End Sub
  Partial Private Sub InsertCAN_EventOccuranceAlert(instance As CAN_EventOccuranceAlert)
    End Sub
  Partial Private Sub UpdateCAN_EventOccuranceAlert(instance As CAN_EventOccuranceAlert)
    End Sub
  Partial Private Sub DeleteCAN_EventOccuranceAlert(instance As CAN_EventOccuranceAlert)
    End Sub
  Partial Private Sub InsertCanBusLog(instance As CanBusLog)
    End Sub
  Partial Private Sub UpdateCanBusLog(instance As CanBusLog)
    End Sub
  Partial Private Sub DeleteCanBusLog(instance As CanBusLog)
    End Sub
  Partial Private Sub InsertCAN_EventOccurance(instance As CAN_EventOccurance)
    End Sub
  Partial Private Sub UpdateCAN_EventOccurance(instance As CAN_EventOccurance)
    End Sub
  Partial Private Sub DeleteCAN_EventOccurance(instance As CAN_EventOccurance)
    End Sub
  Partial Private Sub InsertCanBusEventOccuranceLog(instance As CanBusEventOccuranceLog)
    End Sub
  Partial Private Sub UpdateCanBusEventOccuranceLog(instance As CanBusEventOccuranceLog)
    End Sub
  Partial Private Sub DeleteCanBusEventOccuranceLog(instance As CanBusEventOccuranceLog)
    End Sub
  Partial Private Sub InserttblContractPeriod(instance As tblContractPeriod)
    End Sub
  Partial Private Sub UpdatetblContractPeriod(instance As tblContractPeriod)
    End Sub
  Partial Private Sub DeletetblContractPeriod(instance As tblContractPeriod)
    End Sub
  Partial Private Sub InserttblState(instance As tblState)
    End Sub
  Partial Private Sub UpdatetblState(instance As tblState)
    End Sub
  Partial Private Sub DeletetblState(instance As tblState)
    End Sub
  Partial Private Sub InserttblMonth(instance As tblMonth)
    End Sub
  Partial Private Sub UpdatetblMonth(instance As tblMonth)
    End Sub
  Partial Private Sub DeletetblMonth(instance As tblMonth)
    End Sub
  Partial Private Sub InserttblSiteComment(instance As tblSiteComment)
    End Sub
  Partial Private Sub UpdatetblSiteComment(instance As tblSiteComment)
    End Sub
  Partial Private Sub DeletetblSiteComment(instance As tblSiteComment)
    End Sub
  Partial Private Sub InsertFleetClient(instance As FleetClient)
    End Sub
  Partial Private Sub UpdateFleetClient(instance As FleetClient)
    End Sub
  Partial Private Sub DeleteFleetClient(instance As FleetClient)
    End Sub
  Partial Private Sub InsertFleetDocument(instance As FleetDocument)
    End Sub
  Partial Private Sub UpdateFleetDocument(instance As FleetDocument)
    End Sub
  Partial Private Sub DeleteFleetDocument(instance As FleetDocument)
    End Sub
  Partial Private Sub InsertFleetRun(instance As FleetRun)
    End Sub
  Partial Private Sub UpdateFleetRun(instance As FleetRun)
    End Sub
  Partial Private Sub DeleteFleetRun(instance As FleetRun)
    End Sub
  Partial Private Sub InsertFleetRunClient(instance As FleetRunClient)
    End Sub
  Partial Private Sub UpdateFleetRunClient(instance As FleetRunClient)
    End Sub
  Partial Private Sub DeleteFleetRunClient(instance As FleetRunClient)
    End Sub
  Partial Private Sub InsertFleetRunCompletion(instance As FleetRunCompletion)
    End Sub
  Partial Private Sub UpdateFleetRunCompletion(instance As FleetRunCompletion)
    End Sub
  Partial Private Sub DeleteFleetRunCompletion(instance As FleetRunCompletion)
    End Sub
  Partial Private Sub InsertVehicleLocation(instance As VehicleLocation)
    End Sub
  Partial Private Sub UpdateVehicleLocation(instance As VehicleLocation)
    End Sub
  Partial Private Sub DeleteVehicleLocation(instance As VehicleLocation)
    End Sub
  Partial Private Sub InserttblMYOBMatch(instance As tblMYOBMatch)
    End Sub
  Partial Private Sub UpdatetblMYOBMatch(instance As tblMYOBMatch)
    End Sub
  Partial Private Sub DeletetblMYOBMatch(instance As tblMYOBMatch)
    End Sub
  Partial Private Sub InserttbZone(instance As tbZone)
    End Sub
  Partial Private Sub UpdatetbZone(instance As tbZone)
    End Sub
  Partial Private Sub DeletetbZone(instance As tbZone)
    End Sub
  Partial Private Sub InserttblCustomerAgent(instance As tblCustomerAgent)
    End Sub
  Partial Private Sub UpdatetblCustomerAgent(instance As tblCustomerAgent)
    End Sub
  Partial Private Sub DeletetblCustomerAgent(instance As tblCustomerAgent)
    End Sub
  Partial Private Sub InserttblRateIncreaseReference(instance As tblRateIncreaseReference)
    End Sub
  Partial Private Sub UpdatetblRateIncreaseReference(instance As tblRateIncreaseReference)
    End Sub
  Partial Private Sub DeletetblRateIncreaseReference(instance As tblRateIncreaseReference)
    End Sub
  Partial Private Sub InserttblService(instance As tblService)
    End Sub
  Partial Private Sub UpdatetblService(instance As tblService)
    End Sub
  Partial Private Sub DeletetblService(instance As tblService)
    End Sub
  Partial Private Sub InserttblIndustryGroup(instance As tblIndustryGroup)
    End Sub
  Partial Private Sub UpdatetblIndustryGroup(instance As tblIndustryGroup)
    End Sub
  Partial Private Sub DeletetblIndustryGroup(instance As tblIndustryGroup)
    End Sub
  Partial Private Sub InserttblPublicHolidayRegister(instance As tblPublicHolidayRegister)
    End Sub
  Partial Private Sub UpdatetblPublicHolidayRegister(instance As tblPublicHolidayRegister)
    End Sub
  Partial Private Sub DeletetblPublicHolidayRegister(instance As tblPublicHolidayRegister)
    End Sub
  Partial Private Sub InserttblUserGroup(instance As tblUserGroup)
    End Sub
  Partial Private Sub UpdatetblUserGroup(instance As tblUserGroup)
    End Sub
  Partial Private Sub DeletetblUserGroup(instance As tblUserGroup)
    End Sub
  Partial Private Sub InserttblParameter(instance As tblParameter)
    End Sub
  Partial Private Sub UpdatetblParameter(instance As tblParameter)
    End Sub
  Partial Private Sub DeletetblParameter(instance As tblParameter)
    End Sub
  Partial Private Sub InserttblUserSecurity(instance As tblUserSecurity)
    End Sub
  Partial Private Sub UpdatetblUserSecurity(instance As tblUserSecurity)
    End Sub
  Partial Private Sub DeletetblUserSecurity(instance As tblUserSecurity)
    End Sub
  Partial Private Sub InserttblDriverCommentsReason(instance As tblDriverCommentsReason)
    End Sub
  Partial Private Sub UpdatetblDriverCommentsReason(instance As tblDriverCommentsReason)
    End Sub
  Partial Private Sub DeletetblDriverCommentsReason(instance As tblDriverCommentsReason)
    End Sub
  Partial Private Sub InserttblDriverComment(instance As tblDriverComment)
    End Sub
  Partial Private Sub UpdatetblDriverComment(instance As tblDriverComment)
    End Sub
  Partial Private Sub DeletetblDriverComment(instance As tblDriverComment)
    End Sub
  Partial Private Sub InserttblMYOBInvoicing(instance As tblMYOBInvoicing)
    End Sub
  Partial Private Sub UpdatetblMYOBInvoicing(instance As tblMYOBInvoicing)
    End Sub
  Partial Private Sub DeletetblMYOBInvoicing(instance As tblMYOBInvoicing)
    End Sub
  Partial Private Sub InserttblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub UpdatetblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub DeletetblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub InserttblFuelLevy(instance As tblFuelLevy)
    End Sub
  Partial Private Sub UpdatetblFuelLevy(instance As tblFuelLevy)
    End Sub
  Partial Private Sub DeletetblFuelLevy(instance As tblFuelLevy)
    End Sub
  Partial Private Sub InserttblInvoicingFrequency(instance As tblInvoicingFrequency)
    End Sub
  Partial Private Sub UpdatetblInvoicingFrequency(instance As tblInvoicingFrequency)
    End Sub
  Partial Private Sub DeletetblInvoicingFrequency(instance As tblInvoicingFrequency)
    End Sub
  Partial Private Sub InserttblSite(instance As tblSite)
    End Sub
  Partial Private Sub UpdatetblSite(instance As tblSite)
    End Sub
  Partial Private Sub DeletetblSite(instance As tblSite)
    End Sub
  Partial Private Sub InserttblCustomerRating(instance As tblCustomerRating)
    End Sub
  Partial Private Sub UpdatetblCustomerRating(instance As tblCustomerRating)
    End Sub
  Partial Private Sub DeletetblCustomerRating(instance As tblCustomerRating)
    End Sub
  Partial Private Sub InserttblSalesPerson(instance As tblSalesPerson)
    End Sub
  Partial Private Sub UpdatetblSalesPerson(instance As tblSalesPerson)
    End Sub
  Partial Private Sub DeletetblSalesPerson(instance As tblSalesPerson)
    End Sub
  Partial Private Sub InserttblContractCeaseReason(instance As tblContractCeaseReason)
    End Sub
  Partial Private Sub UpdatetblContractCeaseReason(instance As tblContractCeaseReason)
    End Sub
  Partial Private Sub DeletetblContractCeaseReason(instance As tblContractCeaseReason)
    End Sub
  Partial Private Sub InserttblPreviousSupplier(instance As tblPreviousSupplier)
    End Sub
  Partial Private Sub UpdatetblPreviousSupplier(instance As tblPreviousSupplier)
    End Sub
  Partial Private Sub DeletetblPreviousSupplier(instance As tblPreviousSupplier)
    End Sub
  Partial Private Sub InserttblCIRReason(instance As tblCIRReason)
    End Sub
  Partial Private Sub UpdatetblCIRReason(instance As tblCIRReason)
    End Sub
  Partial Private Sub DeletetblCIRReason(instance As tblCIRReason)
    End Sub
  Partial Private Sub InserttblRunFortnightlyCycle(instance As tblRunFortnightlyCycle)
    End Sub
  Partial Private Sub UpdatetblRunFortnightlyCycle(instance As tblRunFortnightlyCycle)
    End Sub
  Partial Private Sub DeletetblRunFortnightlyCycle(instance As tblRunFortnightlyCycle)
    End Sub
  Partial Private Sub InserttblRevenueChangeReason(instance As tblRevenueChangeReason)
    End Sub
  Partial Private Sub UpdatetblRevenueChangeReason(instance As tblRevenueChangeReason)
    End Sub
  Partial Private Sub DeletetblRevenueChangeReason(instance As tblRevenueChangeReason)
    End Sub
  Partial Private Sub InserttblServiceFrequency(instance As tblServiceFrequency)
    End Sub
  Partial Private Sub UpdatetblServiceFrequency(instance As tblServiceFrequency)
    End Sub
  Partial Private Sub DeletetblServiceFrequency(instance As tblServiceFrequency)
    End Sub
  Partial Private Sub InserttblSiteReSignDetail(instance As tblSiteReSignDetail)
    End Sub
  Partial Private Sub UpdatetblSiteReSignDetail(instance As tblSiteReSignDetail)
    End Sub
  Partial Private Sub DeletetblSiteReSignDetail(instance As tblSiteReSignDetail)
    End Sub
  Partial Private Sub InserttblCIRHistory(instance As tblCIRHistory)
    End Sub
  Partial Private Sub UpdatetblCIRHistory(instance As tblCIRHistory)
    End Sub
  Partial Private Sub DeletetblCIRHistory(instance As tblCIRHistory)
    End Sub
  Partial Private Sub InserttblCustomerService(instance As tblCustomerService)
    End Sub
  Partial Private Sub UpdatetblCustomerService(instance As tblCustomerService)
    End Sub
  Partial Private Sub DeletetblCustomerService(instance As tblCustomerService)
    End Sub
  Partial Private Sub InserttblzGenerateRunSheet(instance As tblzGenerateRunSheet)
    End Sub
  Partial Private Sub UpdatetblzGenerateRunSheet(instance As tblzGenerateRunSheet)
    End Sub
  Partial Private Sub DeletetblzGenerateRunSheet(instance As tblzGenerateRunSheet)
    End Sub
  Partial Private Sub InserttblRun(instance As tblRun)
    End Sub
  Partial Private Sub UpdatetblRun(instance As tblRun)
    End Sub
  Partial Private Sub DeletetblRun(instance As tblRun)
    End Sub
  Partial Private Sub InserttblDriver(instance As tblDriver)
    End Sub
  Partial Private Sub UpdatetblDriver(instance As tblDriver)
    End Sub
  Partial Private Sub DeletetblDriver(instance As tblDriver)
    End Sub
  Partial Private Sub InserttblRunDate(instance As tblRunDate)
    End Sub
  Partial Private Sub UpdatetblRunDate(instance As tblRunDate)
    End Sub
  Partial Private Sub DeletetblRunDate(instance As tblRunDate)
    End Sub
  Partial Private Sub InserttblProjectID(instance As tblProjectID)
    End Sub
  Partial Private Sub UpdatetblProjectID(instance As tblProjectID)
    End Sub
  Partial Private Sub DeletetblProjectID(instance As tblProjectID)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.FMS.Business.My.MySettings.Default.FMSDevConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AlertSubscriber_deletemes() As System.Data.Linq.Table(Of AlertSubscriber_deleteme)
		Get
			Return Me.GetTable(Of AlertSubscriber_deleteme)
		End Get
	End Property
	
	Public ReadOnly Property WorkRequests() As System.Data.Linq.Table(Of WorkRequest)
		Get
			Return Me.GetTable(Of WorkRequest)
		End Get
	End Property
	
	Public ReadOnly Property AlertTypes() As System.Data.Linq.Table(Of AlertType)
		Get
			Return Me.GetTable(Of AlertType)
		End Get
	End Property
	
	Public ReadOnly Property AlertTypeOccurances() As System.Data.Linq.Table(Of AlertTypeOccurance)
		Get
			Return Me.GetTable(Of AlertTypeOccurance)
		End Get
	End Property
	
	Public ReadOnly Property AlertTypeSubscriber_deletemes() As System.Data.Linq.Table(Of AlertTypeSubscriber_deleteme)
		Get
			Return Me.GetTable(Of AlertTypeSubscriber_deleteme)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationBooking_20170222s() As System.Data.Linq.Table(Of ApplicationBooking_20170222)
		Get
			Return Me.GetTable(Of ApplicationBooking_20170222)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationDrivers() As System.Data.Linq.Table(Of ApplicationDriver)
		Get
			Return Me.GetTable(Of ApplicationDriver)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationFeatures() As System.Data.Linq.Table(Of ApplicationFeature)
		Get
			Return Me.GetTable(Of ApplicationFeature)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationFeatureRoles() As System.Data.Linq.Table(Of ApplicationFeatureRole)
		Get
			Return Me.GetTable(Of ApplicationFeatureRole)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFences() As System.Data.Linq.Table(Of ApplicationGeoFence)
		Get
			Return Me.GetTable(Of ApplicationGeoFence)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFence_20160615s() As System.Data.Linq.Table(Of ApplicationGeoFence_20160615)
		Get
			Return Me.GetTable(Of ApplicationGeoFence_20160615)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFence_20160842s() As System.Data.Linq.Table(Of ApplicationGeoFence_20160842)
		Get
			Return Me.GetTable(Of ApplicationGeoFence_20160842)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeofenceProperties() As System.Data.Linq.Table(Of ApplicationGeofenceProperty)
		Get
			Return Me.GetTable(Of ApplicationGeofenceProperty)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFenceSides() As System.Data.Linq.Table(Of ApplicationGeoFenceSide)
		Get
			Return Me.GetTable(Of ApplicationGeoFenceSide)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationGeoFenceSide_20160615s() As System.Data.Linq.Table(Of ApplicationGeoFenceSide_20160615)
		Get
			Return Me.GetTable(Of ApplicationGeoFenceSide_20160615)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationImages() As System.Data.Linq.Table(Of ApplicationImage)
		Get
			Return Me.GetTable(Of ApplicationImage)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationLocations() As System.Data.Linq.Table(Of ApplicationLocation)
		Get
			Return Me.GetTable(Of ApplicationLocation)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationSettingValues() As System.Data.Linq.Table(Of ApplicationSettingValue)
		Get
			Return Me.GetTable(Of ApplicationSettingValue)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationTimeZones() As System.Data.Linq.Table(Of ApplicationTimeZone)
		Get
			Return Me.GetTable(Of ApplicationTimeZone)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationVehicles() As System.Data.Linq.Table(Of ApplicationVehicle)
		Get
			Return Me.GetTable(Of ApplicationVehicle)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationVehicleDriverTimes() As System.Data.Linq.Table(Of ApplicationVehicleDriverTime)
		Get
			Return Me.GetTable(Of ApplicationVehicleDriverTime)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationVehicleOdometerReadings() As System.Data.Linq.Table(Of ApplicationVehicleOdometerReading)
		Get
			Return Me.GetTable(Of ApplicationVehicleOdometerReading)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Applications() As System.Data.Linq.Table(Of aspnet_Application)
		Get
			Return Me.GetTable(Of aspnet_Application)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Memberships() As System.Data.Linq.Table(Of aspnet_Membership)
		Get
			Return Me.GetTable(Of aspnet_Membership)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Paths() As System.Data.Linq.Table(Of aspnet_Path)
		Get
			Return Me.GetTable(Of aspnet_Path)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_PersonalizationAllUsers() As System.Data.Linq.Table(Of aspnet_PersonalizationAllUser)
		Get
			Return Me.GetTable(Of aspnet_PersonalizationAllUser)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_PersonalizationPerUsers() As System.Data.Linq.Table(Of aspnet_PersonalizationPerUser)
		Get
			Return Me.GetTable(Of aspnet_PersonalizationPerUser)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Profiles() As System.Data.Linq.Table(Of aspnet_Profile)
		Get
			Return Me.GetTable(Of aspnet_Profile)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Roles() As System.Data.Linq.Table(Of aspnet_Role)
		Get
			Return Me.GetTable(Of aspnet_Role)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_SchemaVersions() As System.Data.Linq.Table(Of aspnet_SchemaVersion)
		Get
			Return Me.GetTable(Of aspnet_SchemaVersion)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
		Get
			Return Me.GetTable(Of aspnet_User)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_UsersInRoles() As System.Data.Linq.Table(Of aspnet_UsersInRole)
		Get
			Return Me.GetTable(Of aspnet_UsersInRole)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_WebEvent_Events() As System.Data.Linq.Table(Of aspnet_WebEvent_Event)
		Get
			Return Me.GetTable(Of aspnet_WebEvent_Event)
		End Get
	End Property
	
	Public ReadOnly Property AuthenticationTokens() As System.Data.Linq.Table(Of AuthenticationToken)
		Get
			Return Me.GetTable(Of AuthenticationToken)
		End Get
	End Property
	
	Public ReadOnly Property CAN_Datas() As System.Data.Linq.Table(Of CAN_Data)
		Get
			Return Me.GetTable(Of CAN_Data)
		End Get
	End Property
	
	Public ReadOnly Property CAN_MessageDefinitions() As System.Data.Linq.Table(Of CAN_MessageDefinition)
		Get
			Return Me.GetTable(Of CAN_MessageDefinition)
		End Get
	End Property
	
	Public ReadOnly Property CannonDatas() As System.Data.Linq.Table(Of CannonData)
		Get
			Return Me.GetTable(Of CannonData)
		End Get
	End Property
	
	Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property Developments() As System.Data.Linq.Table(Of Development)
		Get
			Return Me.GetTable(Of Development)
		End Get
	End Property
	
	Public ReadOnly Property Devices() As System.Data.Linq.Table(Of Device)
		Get
			Return Me.GetTable(Of Device)
		End Get
	End Property
	
	Public ReadOnly Property Features() As System.Data.Linq.Table(Of Feature)
		Get
			Return Me.GetTable(Of Feature)
		End Get
	End Property
	
	Public ReadOnly Property FleetMapMarkers() As System.Data.Linq.Table(Of FleetMapMarker)
		Get
			Return Me.GetTable(Of FleetMapMarker)
		End Get
	End Property
	
	Public ReadOnly Property GeoFenceDeviceCollisionAlerts() As System.Data.Linq.Table(Of GeoFenceDeviceCollisionAlert)
		Get
			Return Me.GetTable(Of GeoFenceDeviceCollisionAlert)
		End Get
	End Property
	
	Public ReadOnly Property GeoFenceDeviceCollissions() As System.Data.Linq.Table(Of GeoFenceDeviceCollission)
		Get
			Return Me.GetTable(Of GeoFenceDeviceCollission)
		End Get
	End Property
	
	Public ReadOnly Property GeoFenceDeviceCollission_20160604s() As System.Data.Linq.Table(Of GeoFenceDeviceCollission_20160604)
		Get
			Return Me.GetTable(Of GeoFenceDeviceCollission_20160604)
		End Get
	End Property
	
	Public ReadOnly Property Groups() As System.Data.Linq.Table(Of [Group])
		Get
			Return Me.GetTable(Of [Group])
		End Get
	End Property
	
	Public ReadOnly Property GroupMember_olds() As System.Data.Linq.Table(Of GroupMember_old)
		Get
			Return Me.GetTable(Of GroupMember_old)
		End Get
	End Property
	
	Public ReadOnly Property GroupSubscribers() As System.Data.Linq.Table(Of GroupSubscriber)
		Get
			Return Me.GetTable(Of GroupSubscriber)
		End Get
	End Property
	
	Public ReadOnly Property j1939s() As System.Data.Linq.Table(Of j1939)
		Get
			Return Me.GetTable(Of j1939)
		End Get
	End Property
	
	Public ReadOnly Property PaidFeatures() As System.Data.Linq.Table(Of PaidFeature)
		Get
			Return Me.GetTable(Of PaidFeature)
		End Get
	End Property
	
	Public ReadOnly Property Settings() As System.Data.Linq.Table(Of Setting)
		Get
			Return Me.GetTable(Of Setting)
		End Get
	End Property
	
	Public ReadOnly Property SimulatorSettings() As System.Data.Linq.Table(Of SimulatorSetting)
		Get
			Return Me.GetTable(Of SimulatorSetting)
		End Get
	End Property
	
	Public ReadOnly Property WebServiceLogs() As System.Data.Linq.Table(Of WebServiceLog)
		Get
			Return Me.GetTable(Of WebServiceLog)
		End Get
	End Property
	
	Public ReadOnly Property ReportSchdeules() As System.Data.Linq.Table(Of ReportSchdeule)
		Get
			Return Me.GetTable(Of ReportSchdeule)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationBookings() As System.Data.Linq.Table(Of ApplicationBooking)
		Get
			Return Me.GetTable(Of ApplicationBooking)
		End Get
	End Property
	
	Public ReadOnly Property CAN_EventDefinitions() As System.Data.Linq.Table(Of CAN_EventDefinition)
		Get
			Return Me.GetTable(Of CAN_EventDefinition)
		End Get
	End Property
	
	Public ReadOnly Property CAN_AlertDefinitions() As System.Data.Linq.Table(Of CAN_AlertDefinition)
		Get
			Return Me.GetTable(Of CAN_AlertDefinition)
		End Get
	End Property
	
	Public ReadOnly Property CAN_EventOccuranceAlerts() As System.Data.Linq.Table(Of CAN_EventOccuranceAlert)
		Get
			Return Me.GetTable(Of CAN_EventOccuranceAlert)
		End Get
	End Property
	
	Public ReadOnly Property CanBusLogs() As System.Data.Linq.Table(Of CanBusLog)
		Get
			Return Me.GetTable(Of CanBusLog)
		End Get
	End Property
	
	Public ReadOnly Property CAN_EventOccurances() As System.Data.Linq.Table(Of CAN_EventOccurance)
		Get
			Return Me.GetTable(Of CAN_EventOccurance)
		End Get
	End Property
	
	Public ReadOnly Property CanBusEventOccuranceLogs() As System.Data.Linq.Table(Of CanBusEventOccuranceLog)
		Get
			Return Me.GetTable(Of CanBusEventOccuranceLog)
		End Get
	End Property
	
	Public ReadOnly Property tblContractPeriods() As System.Data.Linq.Table(Of tblContractPeriod)
		Get
			Return Me.GetTable(Of tblContractPeriod)
		End Get
	End Property
	
	Public ReadOnly Property tblStates() As System.Data.Linq.Table(Of tblState)
		Get
			Return Me.GetTable(Of tblState)
		End Get
	End Property
	
	Public ReadOnly Property tblMonths() As System.Data.Linq.Table(Of tblMonth)
		Get
			Return Me.GetTable(Of tblMonth)
		End Get
	End Property
	
	Public ReadOnly Property tblSiteComments() As System.Data.Linq.Table(Of tblSiteComment)
		Get
			Return Me.GetTable(Of tblSiteComment)
		End Get
	End Property
	
	Public ReadOnly Property FleetClients() As System.Data.Linq.Table(Of FleetClient)
		Get
			Return Me.GetTable(Of FleetClient)
		End Get
	End Property
	
	Public ReadOnly Property FleetDocuments() As System.Data.Linq.Table(Of FleetDocument)
		Get
			Return Me.GetTable(Of FleetDocument)
		End Get
	End Property
	
	Public ReadOnly Property FleetRuns() As System.Data.Linq.Table(Of FleetRun)
		Get
			Return Me.GetTable(Of FleetRun)
		End Get
	End Property
	
	Public ReadOnly Property FleetRunClients() As System.Data.Linq.Table(Of FleetRunClient)
		Get
			Return Me.GetTable(Of FleetRunClient)
		End Get
	End Property
	
	Public ReadOnly Property FleetRunCompletions() As System.Data.Linq.Table(Of FleetRunCompletion)
		Get
			Return Me.GetTable(Of FleetRunCompletion)
		End Get
	End Property
	
	Public ReadOnly Property VehicleLocations() As System.Data.Linq.Table(Of VehicleLocation)
		Get
			Return Me.GetTable(Of VehicleLocation)
		End Get
	End Property
	
	Public ReadOnly Property vw_GetVehicleLocations() As System.Data.Linq.Table(Of vw_GetVehicleLocation)
		Get
			Return Me.GetTable(Of vw_GetVehicleLocation)
		End Get
	End Property
	
	Public ReadOnly Property CUSTs() As System.Data.Linq.Table(Of CUST)
		Get
			Return Me.GetTable(Of CUST)
		End Get
	End Property
	
	Public ReadOnly Property tblMYOBMatches() As System.Data.Linq.Table(Of tblMYOBMatch)
		Get
			Return Me.GetTable(Of tblMYOBMatch)
		End Get
	End Property
	
	Public ReadOnly Property tbZones() As System.Data.Linq.Table(Of tbZone)
		Get
			Return Me.GetTable(Of tbZone)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomerAgents() As System.Data.Linq.Table(Of tblCustomerAgent)
		Get
			Return Me.GetTable(Of tblCustomerAgent)
		End Get
	End Property
	
	Public ReadOnly Property tblRateIncreaseReferences() As System.Data.Linq.Table(Of tblRateIncreaseReference)
		Get
			Return Me.GetTable(Of tblRateIncreaseReference)
		End Get
	End Property
	
	Public ReadOnly Property tblServices() As System.Data.Linq.Table(Of tblService)
		Get
			Return Me.GetTable(Of tblService)
		End Get
	End Property
	
	Public ReadOnly Property tblIndustryGroups() As System.Data.Linq.Table(Of tblIndustryGroup)
		Get
			Return Me.GetTable(Of tblIndustryGroup)
		End Get
	End Property
	
	Public ReadOnly Property tblPublicHolidayRegisters() As System.Data.Linq.Table(Of tblPublicHolidayRegister)
		Get
			Return Me.GetTable(Of tblPublicHolidayRegister)
		End Get
	End Property
	
	Public ReadOnly Property tblUserGroups() As System.Data.Linq.Table(Of tblUserGroup)
		Get
			Return Me.GetTable(Of tblUserGroup)
		End Get
	End Property
	
	Public ReadOnly Property tblParameters() As System.Data.Linq.Table(Of tblParameter)
		Get
			Return Me.GetTable(Of tblParameter)
		End Get
	End Property
	
	Public ReadOnly Property tblUserSecurities() As System.Data.Linq.Table(Of tblUserSecurity)
		Get
			Return Me.GetTable(Of tblUserSecurity)
		End Get
	End Property
	
	Public ReadOnly Property tblDriverCommentsReasons() As System.Data.Linq.Table(Of tblDriverCommentsReason)
		Get
			Return Me.GetTable(Of tblDriverCommentsReason)
		End Get
	End Property
	
	Public ReadOnly Property tblDriverComments() As System.Data.Linq.Table(Of tblDriverComment)
		Get
			Return Me.GetTable(Of tblDriverComment)
		End Get
	End Property
	
	Public ReadOnly Property tblMYOBInvoicings() As System.Data.Linq.Table(Of tblMYOBInvoicing)
		Get
			Return Me.GetTable(Of tblMYOBInvoicing)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomers() As System.Data.Linq.Table(Of tblCustomer)
		Get
			Return Me.GetTable(Of tblCustomer)
		End Get
	End Property
	
	Public ReadOnly Property tblFuelLevies() As System.Data.Linq.Table(Of tblFuelLevy)
		Get
			Return Me.GetTable(Of tblFuelLevy)
		End Get
	End Property
	
	Public ReadOnly Property tblInvoicingFrequencies() As System.Data.Linq.Table(Of tblInvoicingFrequency)
		Get
			Return Me.GetTable(Of tblInvoicingFrequency)
		End Get
	End Property
	
	Public ReadOnly Property tblSites() As System.Data.Linq.Table(Of tblSite)
		Get
			Return Me.GetTable(Of tblSite)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomerRatings() As System.Data.Linq.Table(Of tblCustomerRating)
		Get
			Return Me.GetTable(Of tblCustomerRating)
		End Get
	End Property
	
	Public ReadOnly Property tblSalesPersons() As System.Data.Linq.Table(Of tblSalesPerson)
		Get
			Return Me.GetTable(Of tblSalesPerson)
		End Get
	End Property
	
	Public ReadOnly Property tblContractCeaseReasons() As System.Data.Linq.Table(Of tblContractCeaseReason)
		Get
			Return Me.GetTable(Of tblContractCeaseReason)
		End Get
	End Property
	
	Public ReadOnly Property tblPreviousSuppliers() As System.Data.Linq.Table(Of tblPreviousSupplier)
		Get
			Return Me.GetTable(Of tblPreviousSupplier)
		End Get
	End Property
	
	Public ReadOnly Property tblCIRReasons() As System.Data.Linq.Table(Of tblCIRReason)
		Get
			Return Me.GetTable(Of tblCIRReason)
		End Get
	End Property
	
	Public ReadOnly Property tblRunFortnightlyCycles() As System.Data.Linq.Table(Of tblRunFortnightlyCycle)
		Get
			Return Me.GetTable(Of tblRunFortnightlyCycle)
		End Get
	End Property
	
	Public ReadOnly Property tblRevenueChangeReasons() As System.Data.Linq.Table(Of tblRevenueChangeReason)
		Get
			Return Me.GetTable(Of tblRevenueChangeReason)
		End Get
	End Property
	
	Public ReadOnly Property tblServiceFrequencies() As System.Data.Linq.Table(Of tblServiceFrequency)
		Get
			Return Me.GetTable(Of tblServiceFrequency)
		End Get
	End Property
	
	Public ReadOnly Property tblSiteReSignDetails() As System.Data.Linq.Table(Of tblSiteReSignDetail)
		Get
			Return Me.GetTable(Of tblSiteReSignDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblCIRHistories() As System.Data.Linq.Table(Of tblCIRHistory)
		Get
			Return Me.GetTable(Of tblCIRHistory)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomerServices() As System.Data.Linq.Table(Of tblCustomerService)
		Get
			Return Me.GetTable(Of tblCustomerService)
		End Get
	End Property
	
	Public ReadOnly Property tblzGenerateRunSheets() As System.Data.Linq.Table(Of tblzGenerateRunSheet)
		Get
			Return Me.GetTable(Of tblzGenerateRunSheet)
		End Get
	End Property
	
	Public ReadOnly Property tblRuns() As System.Data.Linq.Table(Of tblRun)
		Get
			Return Me.GetTable(Of tblRun)
		End Get
	End Property
	
	Public ReadOnly Property tblDrivers() As System.Data.Linq.Table(Of tblDriver)
		Get
			Return Me.GetTable(Of tblDriver)
		End Get
	End Property
	
	Public ReadOnly Property tblRunDates() As System.Data.Linq.Table(Of tblRunDate)
		Get
			Return Me.GetTable(Of tblRunDate)
		End Get
	End Property
	
	Public ReadOnly Property tblProjectIDs() As System.Data.Linq.Table(Of tblProjectID)
		Get
			Return Me.GetTable(Of tblProjectID)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Membership_CreateUser")>  _
	Public Function aspnet_Membership_CreateUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserName", DbType:="NVarChar(256)")> ByVal userName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Password", DbType:="NVarChar(128)")> ByVal password As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordSalt", DbType:="NVarChar(128)")> ByVal passwordSalt As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NVarChar(256)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordQuestion", DbType:="NVarChar(256)")> ByVal passwordQuestion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordAnswer", DbType:="NVarChar(128)")> ByVal passwordAnswer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsApproved", DbType:="Bit")> ByVal isApproved As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentTimeUtc", DbType:="DateTime")> ByVal currentTimeUtc As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CreateDate", DbType:="DateTime")> ByVal createDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueEmail", DbType:="Int")> ByVal uniqueEmail As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PasswordFormat", DbType:="Int")> ByVal passwordFormat As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserId", DbType:="UniqueIdentifier")> ByRef userId As System.Nullable(Of System.Guid)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, userName, password, passwordSalt, email, passwordQuestion, passwordAnswer, isApproved, currentTimeUtc, createDate, uniqueEmail, passwordFormat, userId)
		userId = CType(result.GetParameterValue(12),System.Nullable(Of System.Guid))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_GetAllRoles")>  _
	Public Function aspnet_Roles_GetAllRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String) As ISingleResult(Of aspnet_Roles_GetAllRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName)
		Return CType(result.ReturnValue,ISingleResult(Of aspnet_Roles_GetAllRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_UsersInRoles_AddUsersToRoles")>  _
	Public Function aspnet_UsersInRoles_AddUsersToRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserNames", DbType:="NVarChar(4000)")> ByVal userNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleNames", DbType:="NVarChar(4000)")> ByVal roleNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentTimeUtc", DbType:="DateTime")> ByVal currentTimeUtc As System.Nullable(Of Date)) As ISingleResult(Of aspnet_UsersInRoles_AddUsersToRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, userNames, roleNames, currentTimeUtc)
		Return CType(result.ReturnValue,ISingleResult(Of aspnet_UsersInRoles_AddUsersToRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_UsersInRoles_RemoveUsersFromRoles")>  _
	Public Function aspnet_UsersInRoles_RemoveUsersFromRoles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserNames", DbType:="NVarChar(4000)")> ByVal userNames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleNames", DbType:="NVarChar(4000)")> ByVal roleNames As String) As ISingleResult(Of aspnet_UsersInRoles_RemoveUsersFromRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, userNames, roleNames)
		Return CType(result.ReturnValue,ISingleResult(Of aspnet_UsersInRoles_RemoveUsersFromRolesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_RemoveAllrolesForUserAndAssignRole")>  _
	Public Function usp_RemoveAllrolesForUserAndAssignRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UserID", DbType:="UniqueIdentifier")> ByVal userID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleID", DbType:="UniqueIdentifier")> ByVal roleID As System.Nullable(Of System.Guid)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, roleID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_deleteGeoFenceCollisions")>  _
	Public Function usp_deleteGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal deviceid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), deviceid, startDate, endDate)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetVehiclesAndDriversFortimePeriod")>  _
	Public Function usp_GetVehiclesAndDriversFortimePeriod(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateStart", DbType:="DateTime")> ByVal dateStart As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateEnd", DbType:="DateTime")> ByVal dateEnd As System.Nullable(Of Date)) As ISingleResult(Of usp_GetVehiclesAndDriversFortimePeriodResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID, dateStart, dateEnd)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetVehiclesAndDriversFortimePeriodResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSettingsForApplication")>  _
	Public Function usp_GetSettingsForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="VarChar(MAX)")> ByVal applicationName As String) As ISingleResult(Of usp_GetSettingsForApplicationResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSettingsForApplicationResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSubscribersForApplication")>  _
	Public Function usp_GetSubscribersForApplication(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSubscribersForApplicationResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSubscribersForApplicationResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.aspnet_Roles_CreateRole")>  _
	Public Function aspnet_Roles_CreateRole(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(256)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RoleName", DbType:="NVarChar(256)")> ByVal roleName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(256)")> ByVal description As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, roleName, description)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGeoFenceCollisions")>  _
	Public Function usp_GetGeoFenceCollisions(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGeoFenceCollisionsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGeoFenceCollisionsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAssignedVehiclestoDrivers")>  _
	Public Function usp_GetAssignedVehiclestoDrivers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetAssignedVehiclestoDriversResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetAssignedVehiclestoDriversResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetUnprocessedCollissionsForAlertType")>  _
	Public Function usp_GetUnprocessedCollissionsForAlertType(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AlertTypeID", DbType:="UniqueIdentifier")> ByVal alertTypeID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetUnprocessedCollissionsForAlertTypeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID, startDate, endDate, alertTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetUnprocessedCollissionsForAlertTypeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerUpdateValue")>  _
	Public Function usp_GetCustomerUpdateValue(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cid", DbType:="Int")> ByVal cid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetCustomerUpdateValueResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), cid)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetCustomerUpdateValueResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAllDrivers")>  _
	Public Function usp_GetAllDrivers() As ISingleResult(Of usp_GetAllDriversResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetAllDriversResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomers")>  _
	Public Function usp_GetCustomers() As ISingleResult(Of usp_GetCustomersResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetCustomersResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunDates")>  _
	Public Function usp_GetRunDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="Int")> ByVal rid As System.Nullable(Of Integer)) As ISingleResult(Of usp_GetRunDatesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rid)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRunDatesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetVehiclesForUser")>  _
	Public Function usp_GetVehiclesForUser(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="UniqueIdentifier")> ByVal userid As System.Nullable(Of System.Guid)) As ISingleResult(Of ApplicationVehicle)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userid)
		Return CType(result.ReturnValue,ISingleResult(Of ApplicationVehicle))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetsDetail")>  _
	Public Function usp_GetGenerateRunSheetsDetail() As ISingleResult(Of usp_GetGenerateRunSheetsDetailResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGenerateRunSheetsDetailResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetsDetailSub")>  _
	Public Function usp_GetGenerateRunSheetsDetailSub() As ISingleResult(Of usp_GetGenerateRunSheetsDetailSubResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGenerateRunSheetsDetailSubResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGenerateRunSheetSummary")>  _
	Public Function usp_GetGenerateRunSheetSummary() As ISingleResult(Of usp_GetGenerateRunSheetSummaryResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGenerateRunSheetSummaryResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateCustomersBaseOnCardID")>  _
	Public Function usp_UpdateCustomersBaseOnCardID() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIndustryGroup")>  _
	Public Function usp_GetIndustryGroup() As ISingleResult(Of usp_GetIndustryGroupResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetIndustryGroupResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateRunsBasedOnRunDriver")>  _
	Public Function usp_UpdateRunsBasedOnRunDriver(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OldRunDriver", DbType:="Int")> ByVal oldRunDriver As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NewRunDriver", DbType:="Int")> ByVal newRunDriver As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), oldRunDriver, newRunDriver)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPreviousInvoiceSummaryReport")>  _
	Public Function usp_GetPreviousInvoiceSummaryReport() As ISingleResult(Of usp_GetPreviousInvoiceSummaryReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetPreviousInvoiceSummaryReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetMYOBFileList")>  _
	Public Function usp_GetMYOBFileList() As ISingleResult(Of usp_GetMYOBFileListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetMYOBFileListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSiteListReport")>  _
	Public Function usp_GetSiteListReport() As ISingleResult(Of usp_GetSiteListReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSiteListReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIncludeServiceInformationReport")>  _
	Public Function usp_GetIncludeServiceInformationReport() As ISingleResult(Of usp_GetIncludeServiceInformationReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetIncludeServiceInformationReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAnnualAnalysisReport")>  _
	Public Function usp_GetAnnualAnalysisReport() As ISingleResult(Of usp_GetAnnualAnalysisReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetAnnualAnalysisReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRevenueReportByZone")>  _
	Public Function usp_GetRevenueReportByZone() As ISingleResult(Of usp_GetRevenueReportByZoneResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRevenueReportByZoneResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSalesReportSuburb")>  _
	Public Function usp_GetSalesReportSuburb() As ISingleResult(Of usp_GetSalesReportSuburbResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSalesReportSuburbResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetContractCeaseReasons")>  _
	Public Function usp_GetContractCeaseReasons(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetContractCeaseReasonsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetContractCeaseReasonsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPreviousSupplier")>  _
	Public Function usp_GetPreviousSupplier(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetPreviousSupplierResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetPreviousSupplierResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetFortNightlyCycles")>  _
	Public Function usp_GetFortNightlyCycles(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetFortNightlyCyclesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetFortNightlyCyclesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRevenueChangeReason")>  _
	Public Function usp_GetRevenueChangeReason(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRevenueChangeReasonResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRevenueChangeReasonResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_UpdateCustomeRating")>  _
	Public Function usp_UpdateCustomeRating(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByVal applicationID As System.Nullable(Of System.Guid)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetPerAnnumValuesReport")>  _
	Public Function usp_GetPerAnnumValuesReport() As ISingleResult(Of usp_GetPerAnnumValuesReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetPerAnnumValuesReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainAndLossesBySalesPersonReport")>  _
	Public Function usp_GetGainAndLossesBySalesPersonReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetGainAndLossesBySalesPersonReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGainAndLossesBySalesPersonReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSites")>  _
	Public Function usp_GetSites(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSitesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSitesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerServices")>  _
	Public Function usp_GetCustomerServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetCustomerServicesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetCustomerServicesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCIRHistory")>  _
	Public Function usp_GetCIRHistory(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetCIRHistoryResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetCIRHistoryResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetContractRenewalsReport")>  _
	Public Function usp_GetContractRenewalsReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetContractRenewalsReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetContractRenewalsReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunListingReport")>  _
	Public Function usp_GetRunListingReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRunListingReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRunListingReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunListByRunNumberReport")>  _
	Public Function usp_GetRunListByRunNumberReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRunListByRunNumberReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRunListByRunNumberReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunValuesReport")>  _
	Public Function usp_GetRunValuesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ServiceRun", DbType:="VarChar(20)")> ByVal serviceRun As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRunValuesReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), serviceRun, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRunValuesReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetRunValueSummaryReport")>  _
	Public Function usp_GetRunValueSummaryReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetRunValueSummaryReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetRunValueSummaryReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetServiceSummaryReport")>  _
	Public Function usp_GetServiceSummaryReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetServiceSummaryReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetServiceSummaryReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetLengthOfServicesReport")>  _
	Public Function usp_GetLengthOfServicesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="GreaterThanYears", DbType:="Int")> ByVal greaterThanYears As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetLengthOfServicesReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), greaterThanYears, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetLengthOfServicesReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerByCustZone")>  _
	Public Function usp_GetCustomerByCustZone(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetCustomerByCustZoneResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetCustomerByCustZoneResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetCustomerContactDetailsReport")>  _
	Public Function usp_GetCustomerContactDetailsReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetCustomerContactDetailsReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetCustomerContactDetailsReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetIndustryListReport")>  _
	Public Function usp_GetIndustryListReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IndustryID", DbType:="Int")> ByVal industryID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetIndustryListReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), industryID, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetIndustryListReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetDriversLicenseExpiryReport")>  _
	Public Function usp_GetDriversLicenseExpiryReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetDriversLicenseExpiryReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetDriversLicenseExpiryReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesWithNoContractsReport")>  _
	Public Function usp_GetSitesWithNoContractsReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSitesWithNoContractsReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSitesWithNoContractsReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetServiceRunDates")>  _
	Public Function usp_GetServiceRunDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationId", DbType:="UniqueIdentifier")> ByVal applicationId As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetServiceRunDatesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationId, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetServiceRunDatesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesBySiteZoneReport")>  _
	Public Function usp_GetSitesBySiteZoneReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSitesBySiteZoneReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSitesBySiteZoneReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainsAndLossesReport")>  _
	Public Function usp_GetGainsAndLossesReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetGainsAndLossesReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGainsAndLossesReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetGainsAndLossesPerAnnumReport")>  _
	Public Function usp_GetGainsAndLossesPerAnnumReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetGainsAndLossesPerAnnumReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetGainsAndLossesPerAnnumReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetStandardAuditReport")>  _
	Public Function usp_GetStandardAuditReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetStandardAuditReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetStandardAuditReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAuditContractReport")>  _
	Public Function usp_GetAuditContractReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetAuditContractReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetAuditContractReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetAuditOfSiteDetailReport")>  _
	Public Function usp_GetAuditOfSiteDetailReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetAuditOfSiteDetailReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), startDate, endDate, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetAuditOfSiteDetailReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetInvoiceBasicCheckReport")>  _
	Public Function usp_GetInvoiceBasicCheckReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetInvoiceBasicCheckReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetInvoiceBasicCheckReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetMYOBCustomerInvoiceReport")>  _
	Public Function usp_GetMYOBCustomerInvoiceReport(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerName", DbType:="NVarChar(50)")> ByVal customerName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetMYOBCustomerInvoiceReportResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), customerName, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetMYOBCustomerInvoiceReportResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetNotCompletedRun")>  _
	Public Function usp_GetNotCompletedRun() As ISingleResult(Of usp_GetNotCompletedRunResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetNotCompletedRunResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetTblRuns")>  _
	Public Function usp_GetTblRuns(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecificRun", DbType:="VarChar(10)")> ByVal specificRun As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetTblRunsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), specificRun, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetTblRunsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSitesAndCustomerServices")>  _
	Public Function usp_GetSitesAndCustomerServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="Int")> ByVal rid As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSitesAndCustomerServicesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rid, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSitesAndCustomerServicesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetSpecificDates")>  _
	Public Function usp_GetSpecificDates(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SqlDate", DbType:="VarChar(20)")> ByVal sqlDate As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Rid", DbType:="VarChar(10)")> ByVal rid As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AppID", DbType:="UniqueIdentifier")> ByVal appID As System.Nullable(Of System.Guid)) As ISingleResult(Of usp_GetSpecificDatesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), sqlDate, rid, appID)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetSpecificDatesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_GetUnAssignedRuns")>  _
	Public Function usp_GetUnAssignedRuns(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationId", DbType:="UniqueIdentifier")> ByVal applicationId As System.Nullable(Of System.Guid), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="DateTime")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndDate", DbType:="DateTime")> ByVal endDate As System.Nullable(Of Date)) As ISingleResult(Of usp_GetUnAssignedRunsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationId, startDate, endDate)
		Return CType(result.ReturnValue,ISingleResult(Of usp_GetUnAssignedRunsResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[AlertSubscriber.deleteme]")>  _
Partial Public Class AlertSubscriber_deleteme
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlertSubscriberID As System.Guid
	
	Private _SubscriberTypeID As System.Nullable(Of Integer)
	
	Private _SubscriberID As System.Guid
	
	Private _AlertTypeID As System.Guid
	
	Private _Email As System.Nullable(Of Boolean)
	
	Private _Text As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertSubscriberIDChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanged()
    End Sub
    Partial Private Sub OnSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubscriberIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AlertSubscriberID() As System.Guid
		Get
			Return Me._AlertSubscriberID
		End Get
		Set
			If ((Me._AlertSubscriberID = value)  _
						= false) Then
				Me.OnAlertSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertSubscriberID = value
				Me.SendPropertyChanged("AlertSubscriberID")
				Me.OnAlertSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeID", DbType:="Int")>  _
	Public Property SubscriberTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._SubscriberTypeID
		End Get
		Set
			If (Me._SubscriberTypeID.Equals(value) = false) Then
				Me.OnSubscriberTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeID = value
				Me.SendPropertyChanged("SubscriberTypeID")
				Me.OnSubscriberTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SubscriberID() As System.Guid
		Get
			Return Me._SubscriberID
		End Get
		Set
			If ((Me._SubscriberID = value)  _
						= false) Then
				Me.OnSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberID = value
				Me.SendPropertyChanged("SubscriberID")
				Me.OnSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property AlertTypeID() As System.Guid
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If ((Me._AlertTypeID = value)  _
						= false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="Bit")>  _
	Public Property Email() As System.Nullable(Of Boolean)
		Get
			Return Me._Email
		End Get
		Set
			If (Me._Email.Equals(value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="Bit")>  _
	Public Property Text() As System.Nullable(Of Boolean)
		Get
			Return Me._Text
		End Get
		Set
			If (Me._Text.Equals(value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WorkRequest")>  _
Partial Public Class WorkRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WorkRequestID As Integer
	
	Private _isBug As System.Nullable(Of Boolean)
	
	Private _Name As String
	
	Private _Description As String
	
	Private _LoggedDate As System.Nullable(Of Date)
	
	Private _EstimateDeliveryDate As System.Nullable(Of Date)
	
	Private _DeveloperComment As String
	
	Private _Complete As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWorkRequestIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWorkRequestIDChanged()
    End Sub
    Partial Private Sub OnisBugChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBugChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnLoggedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLoggedDateChanged()
    End Sub
    Partial Private Sub OnEstimateDeliveryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstimateDeliveryDateChanged()
    End Sub
    Partial Private Sub OnDeveloperCommentChanging(value As String)
    End Sub
    Partial Private Sub OnDeveloperCommentChanged()
    End Sub
    Partial Private Sub OnCompleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCompleteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkRequestID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WorkRequestID() As Integer
		Get
			Return Me._WorkRequestID
		End Get
		Set
			If ((Me._WorkRequestID = value)  _
						= false) Then
				Me.OnWorkRequestIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkRequestID = value
				Me.SendPropertyChanged("WorkRequestID")
				Me.OnWorkRequestIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBug", DbType:="Bit")>  _
	Public Property isBug() As System.Nullable(Of Boolean)
		Get
			Return Me._isBug
		End Get
		Set
			If (Me._isBug.Equals(value) = false) Then
				Me.OnisBugChanging(value)
				Me.SendPropertyChanging
				Me._isBug = value
				Me.SendPropertyChanged("isBug")
				Me.OnisBugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(1000)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoggedDate", DbType:="DateTime")>  _
	Public Property LoggedDate() As System.Nullable(Of Date)
		Get
			Return Me._LoggedDate
		End Get
		Set
			If (Me._LoggedDate.Equals(value) = false) Then
				Me.OnLoggedDateChanging(value)
				Me.SendPropertyChanging
				Me._LoggedDate = value
				Me.SendPropertyChanged("LoggedDate")
				Me.OnLoggedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimateDeliveryDate", DbType:="DateTime")>  _
	Public Property EstimateDeliveryDate() As System.Nullable(Of Date)
		Get
			Return Me._EstimateDeliveryDate
		End Get
		Set
			If (Me._EstimateDeliveryDate.Equals(value) = false) Then
				Me.OnEstimateDeliveryDateChanging(value)
				Me.SendPropertyChanging
				Me._EstimateDeliveryDate = value
				Me.SendPropertyChanged("EstimateDeliveryDate")
				Me.OnEstimateDeliveryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeveloperComment", DbType:="NChar(10)")>  _
	Public Property DeveloperComment() As String
		Get
			Return Me._DeveloperComment
		End Get
		Set
			If (String.Equals(Me._DeveloperComment, value) = false) Then
				Me.OnDeveloperCommentChanging(value)
				Me.SendPropertyChanging
				Me._DeveloperComment = value
				Me.SendPropertyChanged("DeveloperComment")
				Me.OnDeveloperCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complete", DbType:="Bit")>  _
	Public Property Complete() As System.Nullable(Of Boolean)
		Get
			Return Me._Complete
		End Get
		Set
			If (Me._Complete.Equals(value) = false) Then
				Me.OnCompleteChanging(value)
				Me.SendPropertyChanging
				Me._Complete = value
				Me.SendPropertyChanged("Complete")
				Me.OnCompleteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AlertType")>  _
Partial Public Class AlertType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationAlertTypeID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _DriverId As System.Nullable(Of System.Guid)
	
	Private _GeoFenceID As System.Nullable(Of System.Guid)
	
	Private _Timespan_seconds As System.Nullable(Of Integer)
	
	Private _DeliveryGroup As System.Nullable(Of System.Guid)
	
	Private _Action As Integer
	
	Private _SubscriberNativeID As System.Nullable(Of System.Guid)
	
	Private _SendEmail As System.Nullable(Of Boolean)
	
	Private _SendText As System.Nullable(Of Boolean)
	
	Private _isBooking As System.Nullable(Of Boolean)
	
	Private _isSent As System.Nullable(Of Boolean)
	
	Private _BookingID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDriverIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDriverIdChanged()
    End Sub
    Partial Private Sub OnGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnTimespan_secondsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimespan_secondsChanged()
    End Sub
    Partial Private Sub OnDeliveryGroupChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDeliveryGroupChanged()
    End Sub
    Partial Private Sub OnActionChanging(value As Integer)
    End Sub
    Partial Private Sub OnActionChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnisBookingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBookingChanged()
    End Sub
    Partial Private Sub OnisSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisSentChanged()
    End Sub
    Partial Private Sub OnBookingIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBookingIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationAlertTypeID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationAlertTypeID() As System.Guid
		Get
			Return Me._ApplicationAlertTypeID
		End Get
		Set
			If ((Me._ApplicationAlertTypeID = value)  _
						= false) Then
				Me.OnApplicationAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationAlertTypeID = value
				Me.SendPropertyChanged("ApplicationAlertTypeID")
				Me.OnApplicationAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverId", DbType:="UniqueIdentifier")>  _
	Public Property DriverId() As System.Nullable(Of System.Guid)
		Get
			Return Me._DriverId
		End Get
		Set
			If (Me._DriverId.Equals(value) = false) Then
				Me.OnDriverIdChanging(value)
				Me.SendPropertyChanging
				Me._DriverId = value
				Me.SendPropertyChanged("DriverId")
				Me.OnDriverIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property GeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GeoFenceID
		End Get
		Set
			If (Me._GeoFenceID.Equals(value) = false) Then
				Me.OnGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceID = value
				Me.SendPropertyChanged("GeoFenceID")
				Me.OnGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timespan_seconds", DbType:="Int")>  _
	Public Property Timespan_seconds() As System.Nullable(Of Integer)
		Get
			Return Me._Timespan_seconds
		End Get
		Set
			If (Me._Timespan_seconds.Equals(value) = false) Then
				Me.OnTimespan_secondsChanging(value)
				Me.SendPropertyChanging
				Me._Timespan_seconds = value
				Me.SendPropertyChanged("Timespan_seconds")
				Me.OnTimespan_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryGroup", DbType:="UniqueIdentifier")>  _
	Public Property DeliveryGroup() As System.Nullable(Of System.Guid)
		Get
			Return Me._DeliveryGroup
		End Get
		Set
			If (Me._DeliveryGroup.Equals(value) = false) Then
				Me.OnDeliveryGroupChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryGroup = value
				Me.SendPropertyChanged("DeliveryGroup")
				Me.OnDeliveryGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Action", DbType:="Int NOT NULL")>  _
	Public Property Action() As Integer
		Get
			Return Me._Action
		End Get
		Set
			If ((Me._Action = value)  _
						= false) Then
				Me.OnActionChanging(value)
				Me.SendPropertyChanging
				Me._Action = value
				Me.SendPropertyChanged("Action")
				Me.OnActionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier")>  _
	Public Property SubscriberNativeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SubscriberNativeID
		End Get
		Set
			If (Me._SubscriberNativeID.Equals(value) = false) Then
				Me.OnSubscriberNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberNativeID = value
				Me.SendPropertyChanged("SubscriberNativeID")
				Me.OnSubscriberNativeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>  _
	Public Property SendEmail() As System.Nullable(Of Boolean)
		Get
			Return Me._SendEmail
		End Get
		Set
			If (Me._SendEmail.Equals(value) = false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>  _
	Public Property SendText() As System.Nullable(Of Boolean)
		Get
			Return Me._SendText
		End Get
		Set
			If (Me._SendText.Equals(value) = false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBooking", DbType:="Bit")>  _
	Public Property isBooking() As System.Nullable(Of Boolean)
		Get
			Return Me._isBooking
		End Get
		Set
			If (Me._isBooking.Equals(value) = false) Then
				Me.OnisBookingChanging(value)
				Me.SendPropertyChanging
				Me._isBooking = value
				Me.SendPropertyChanged("isBooking")
				Me.OnisBookingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isSent", DbType:="Bit")>  _
	Public Property isSent() As System.Nullable(Of Boolean)
		Get
			Return Me._isSent
		End Get
		Set
			If (Me._isSent.Equals(value) = false) Then
				Me.OnisSentChanging(value)
				Me.SendPropertyChanging
				Me._isSent = value
				Me.SendPropertyChanged("isSent")
				Me.OnisSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingID", DbType:="UniqueIdentifier")>  _
	Public Property BookingID() As System.Nullable(Of System.Guid)
		Get
			Return Me._BookingID
		End Get
		Set
			If (Me._BookingID.Equals(value) = false) Then
				Me.OnBookingIDChanging(value)
				Me.SendPropertyChanging
				Me._BookingID = value
				Me.SendPropertyChanged("BookingID")
				Me.OnBookingIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AlertTypeOccurance")>  _
Partial Public Class AlertTypeOccurance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlertTypeOccuranceID As System.Guid
	
	Private _AlertTypeID As System.Guid
	
	Private _GeoFenceCollisionID As System.Guid
	
	Private _SubscriberTypeStr As String
	
	Private _SubscriberTypeName As String
	
	Private _SubscriberNativeID As System.Nullable(Of System.Guid)
	
	Private _Emails As String
	
	Private _Texts As String
	
	Private _DateSend As System.Nullable(Of Date)
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _ApplicationGeoFenceName As String
	
	Private _MessageContent As String
	
	Private _DriverName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertTypeOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeOccuranceIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnGeoFenceCollisionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceCollisionIDChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeStrChanging(value As String)
    End Sub
    Partial Private Sub OnSubscriberTypeStrChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnSubscriberTypeNameChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnEmailsChanging(value As String)
    End Sub
    Partial Private Sub OnEmailsChanged()
    End Sub
    Partial Private Sub OnTextsChanging(value As String)
    End Sub
    Partial Private Sub OnTextsChanged()
    End Sub
    Partial Private Sub OnDateSendChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSendChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationGeoFenceNameChanged()
    End Sub
    Partial Private Sub OnMessageContentChanging(value As String)
    End Sub
    Partial Private Sub OnMessageContentChanged()
    End Sub
    Partial Private Sub OnDriverNameChanging(value As String)
    End Sub
    Partial Private Sub OnDriverNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeOccuranceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AlertTypeOccuranceID() As System.Guid
		Get
			Return Me._AlertTypeOccuranceID
		End Get
		Set
			If ((Me._AlertTypeOccuranceID = value)  _
						= false) Then
				Me.OnAlertTypeOccuranceIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeOccuranceID = value
				Me.SendPropertyChanged("AlertTypeOccuranceID")
				Me.OnAlertTypeOccuranceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property AlertTypeID() As System.Guid
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If ((Me._AlertTypeID = value)  _
						= false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceCollisionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceCollisionID() As System.Guid
		Get
			Return Me._GeoFenceCollisionID
		End Get
		Set
			If ((Me._GeoFenceCollisionID = value)  _
						= false) Then
				Me.OnGeoFenceCollisionIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceCollisionID = value
				Me.SendPropertyChanged("GeoFenceCollisionID")
				Me.OnGeoFenceCollisionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeStr", DbType:="VarChar(200)")>  _
	Public Property SubscriberTypeStr() As String
		Get
			Return Me._SubscriberTypeStr
		End Get
		Set
			If (String.Equals(Me._SubscriberTypeStr, value) = false) Then
				Me.OnSubscriberTypeStrChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeStr = value
				Me.SendPropertyChanged("SubscriberTypeStr")
				Me.OnSubscriberTypeStrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeName", DbType:="VarChar(500)")>  _
	Public Property SubscriberTypeName() As String
		Get
			Return Me._SubscriberTypeName
		End Get
		Set
			If (String.Equals(Me._SubscriberTypeName, value) = false) Then
				Me.OnSubscriberTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeName = value
				Me.SendPropertyChanged("SubscriberTypeName")
				Me.OnSubscriberTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier")>  _
	Public Property SubscriberNativeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SubscriberNativeID
		End Get
		Set
			If (Me._SubscriberNativeID.Equals(value) = false) Then
				Me.OnSubscriberNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberNativeID = value
				Me.SendPropertyChanged("SubscriberNativeID")
				Me.OnSubscriberNativeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Emails", DbType:="VarChar(MAX)")>  _
	Public Property Emails() As String
		Get
			Return Me._Emails
		End Get
		Set
			If (String.Equals(Me._Emails, value) = false) Then
				Me.OnEmailsChanging(value)
				Me.SendPropertyChanging
				Me._Emails = value
				Me.SendPropertyChanged("Emails")
				Me.OnEmailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Texts", DbType:="VarChar(MAX)")>  _
	Public Property Texts() As String
		Get
			Return Me._Texts
		End Get
		Set
			If (String.Equals(Me._Texts, value) = false) Then
				Me.OnTextsChanging(value)
				Me.SendPropertyChanging
				Me._Texts = value
				Me.SendPropertyChanged("Texts")
				Me.OnTextsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="DateTime")>  _
	Public Property DateSend() As System.Nullable(Of Date)
		Get
			Return Me._DateSend
		End Get
		Set
			If (Me._DateSend.Equals(value) = false) Then
				Me.OnDateSendChanging(value)
				Me.SendPropertyChanging
				Me._DateSend = value
				Me.SendPropertyChanged("DateSend")
				Me.OnDateSendChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceName", DbType:="VarChar(1000)")>  _
	Public Property ApplicationGeoFenceName() As String
		Get
			Return Me._ApplicationGeoFenceName
		End Get
		Set
			If (String.Equals(Me._ApplicationGeoFenceName, value) = false) Then
				Me.OnApplicationGeoFenceNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceName = value
				Me.SendPropertyChanged("ApplicationGeoFenceName")
				Me.OnApplicationGeoFenceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>  _
	Public Property MessageContent() As String
		Get
			Return Me._MessageContent
		End Get
		Set
			If (String.Equals(Me._MessageContent, value) = false) Then
				Me.OnMessageContentChanging(value)
				Me.SendPropertyChanging
				Me._MessageContent = value
				Me.SendPropertyChanged("MessageContent")
				Me.OnMessageContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="VarChar(500)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me.OnDriverNameChanging(value)
				Me.SendPropertyChanging
				Me._DriverName = value
				Me.SendPropertyChanged("DriverName")
				Me.OnDriverNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[AlertTypeSubscriber.deleteme]")>  _
Partial Public Class AlertTypeSubscriber_deleteme
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AlertTypeSubscriberID As System.Guid
	
	Private _AlertTypeID As System.Guid
	
	Private _SendEmail As System.Nullable(Of Boolean)
	
	Private _SendText As System.Nullable(Of Boolean)
	
	Private _SubscriberTypeID As Integer
	
	Private _NativeID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAlertTypeSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeSubscriberIDChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubscriberTypeIDChanged()
    End Sub
    Partial Private Sub OnNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNativeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AlertTypeSubscriberID() As System.Guid
		Get
			Return Me._AlertTypeSubscriberID
		End Get
		Set
			If ((Me._AlertTypeSubscriberID = value)  _
						= false) Then
				Me.OnAlertTypeSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeSubscriberID = value
				Me.SendPropertyChanged("AlertTypeSubscriberID")
				Me.OnAlertTypeSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property AlertTypeID() As System.Guid
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If ((Me._AlertTypeID = value)  _
						= false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>  _
	Public Property SendEmail() As System.Nullable(Of Boolean)
		Get
			Return Me._SendEmail
		End Get
		Set
			If (Me._SendEmail.Equals(value) = false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>  _
	Public Property SendText() As System.Nullable(Of Boolean)
		Get
			Return Me._SendText
		End Get
		Set
			If (Me._SendText.Equals(value) = false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberTypeID", DbType:="Int NOT NULL")>  _
	Public Property SubscriberTypeID() As Integer
		Get
			Return Me._SubscriberTypeID
		End Get
		Set
			If ((Me._SubscriberTypeID = value)  _
						= false) Then
				Me.OnSubscriberTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberTypeID = value
				Me.SendPropertyChanged("SubscriberTypeID")
				Me.OnSubscriberTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NativeID() As System.Guid
		Get
			Return Me._NativeID
		End Get
		Set
			If ((Me._NativeID = value)  _
						= false) Then
				Me.OnNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._NativeID = value
				Me.SendPropertyChanged("NativeID")
				Me.OnNativeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationBooking_20170222")>  _
Partial Public Class ApplicationBooking_20170222
	
	Private _ApplicationBookingId As System.Guid
	
	Private _ApplicationDriverID As System.Guid
	
	Private _ApplicationId As System.Guid
	
	Private _ArrivalTime As System.Nullable(Of Date)
	
	Private _GeofenceLeaveId As System.Guid
	
	Private _GeofenceDestinationId As System.Guid
	
	Private _IsAlert5min As System.Nullable(Of Boolean)
	
	Private _IsAlertLeaveForPickup As System.Nullable(Of Boolean)
	
	Private _ContactID As System.Guid
	
	Private _CustomerPhone As String
	
	Private _CustomerEmail As String
	
	Private _GeofenceLeave As String
	
	Private _GeofenceDestination As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationBookingId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationBookingId() As System.Guid
		Get
			Return Me._ApplicationBookingId
		End Get
		Set
			If ((Me._ApplicationBookingId = value)  _
						= false) Then
				Me._ApplicationBookingId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime")>  _
	Public Property ArrivalTime() As System.Nullable(Of Date)
		Get
			Return Me._ArrivalTime
		End Get
		Set
			If (Me._ArrivalTime.Equals(value) = false) Then
				Me._ArrivalTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeaveId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceLeaveId() As System.Guid
		Get
			Return Me._GeofenceLeaveId
		End Get
		Set
			If ((Me._GeofenceLeaveId = value)  _
						= false) Then
				Me._GeofenceLeaveId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestinationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceDestinationId() As System.Guid
		Get
			Return Me._GeofenceDestinationId
		End Get
		Set
			If ((Me._GeofenceDestinationId = value)  _
						= false) Then
				Me._GeofenceDestinationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlert5min", DbType:="Bit")>  _
	Public Property IsAlert5min() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlert5min
		End Get
		Set
			If (Me._IsAlert5min.Equals(value) = false) Then
				Me._IsAlert5min = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlertLeaveForPickup", DbType:="Bit")>  _
	Public Property IsAlertLeaveForPickup() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlertLeaveForPickup
		End Get
		Set
			If (Me._IsAlertLeaveForPickup.Equals(value) = false) Then
				Me._IsAlertLeaveForPickup = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ContactID() As System.Guid
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me._ContactID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerEmail() As String
		Get
			Return Me._CustomerEmail
		End Get
		Set
			If (String.Equals(Me._CustomerEmail, value) = false) Then
				Me._CustomerEmail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeave", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceLeave() As String
		Get
			Return Me._GeofenceLeave
		End Get
		Set
			If (String.Equals(Me._GeofenceLeave, value) = false) Then
				Me._GeofenceLeave = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestination", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceDestination() As String
		Get
			Return Me._GeofenceDestination
		End Get
		Set
			If (String.Equals(Me._GeofenceDestination, value) = false) Then
				Me._GeofenceDestination = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationDriver")>  _
Partial Public Class ApplicationDriver
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationDriverID As System.Guid
	
	Private _FirstName As String
	
	Private _Surname As String
	
	Private _PhoneNumber As String
	
	Private _photo As String
	
	Private _photoBinary As System.Data.Linq.Binary
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Notes As String
	
	Private _emailaddress As String
	
	Private _ApplicationLocationID As System.Nullable(Of System.Guid)
	
	Private _ApplicationBookings As EntitySet(Of ApplicationBooking)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnphotoChanging(value As String)
    End Sub
    Partial Private Sub OnphotoChanged()
    End Sub
    Partial Private Sub OnphotoBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnphotoBinaryChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnemailaddressChanging(value As String)
    End Sub
    Partial Private Sub OnemailaddressChanged()
    End Sub
    Partial Private Sub OnApplicationLocationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationLocationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationBookings = New EntitySet(Of ApplicationBooking)(AddressOf Me.attach_ApplicationBookings, AddressOf Me.detach_ApplicationBookings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				Me.OnApplicationDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDriverID = value
				Me.SendPropertyChanged("ApplicationDriverID")
				Me.OnApplicationDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(MAX)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(MAX)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photo", DbType:="VarChar(MAX)")>  _
	Public Property photo() As String
		Get
			Return Me._photo
		End Get
		Set
			If (String.Equals(Me._photo, value) = false) Then
				Me.OnphotoChanging(value)
				Me.SendPropertyChanging
				Me._photo = value
				Me.SendPropertyChanged("photo")
				Me.OnphotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoBinary", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property photoBinary() As System.Data.Linq.Binary
		Get
			Return Me._photoBinary
		End Get
		Set
			If (Object.Equals(Me._photoBinary, value) = false) Then
				Me.OnphotoBinaryChanging(value)
				Me.SendPropertyChanging
				Me._photoBinary = value
				Me.SendPropertyChanged("photoBinary")
				Me.OnphotoBinaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emailaddress", DbType:="VarChar(500)")>  _
	Public Property emailaddress() As String
		Get
			Return Me._emailaddress
		End Get
		Set
			If (String.Equals(Me._emailaddress, value) = false) Then
				Me.OnemailaddressChanging(value)
				Me.SendPropertyChanging
				Me._emailaddress = value
				Me.SendPropertyChanged("emailaddress")
				Me.OnemailaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationLocationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationLocationID
		End Get
		Set
			If (Me._ApplicationLocationID.Equals(value) = false) Then
				Me.OnApplicationLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationLocationID = value
				Me.SendPropertyChanged("ApplicationLocationID")
				Me.OnApplicationLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationDriver_ApplicationBooking", Storage:="_ApplicationBookings", ThisKey:="ApplicationDriverID", OtherKey:="ApplicationDriverID")>  _
	Public Property ApplicationBookings() As EntitySet(Of ApplicationBooking)
		Get
			Return Me._ApplicationBookings
		End Get
		Set
			Me._ApplicationBookings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationBookings(ByVal entity As ApplicationBooking)
		Me.SendPropertyChanging
		entity.ApplicationDriver = Me
	End Sub
	
	Private Sub detach_ApplicationBookings(ByVal entity As ApplicationBooking)
		Me.SendPropertyChanging
		entity.ApplicationDriver = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationFeature")>  _
Partial Public Class ApplicationFeature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationFeatureID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _FeatureID As System.Guid
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _Feature As EntityRef(Of Feature)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationFeatureIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._Feature = CType(Nothing, EntityRef(Of Feature))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFeatureID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationFeatureID() As System.Guid
		Get
			Return Me._ApplicationFeatureID
		End Get
		Set
			If ((Me._ApplicationFeatureID = value)  _
						= false) Then
				Me.OnApplicationFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationFeatureID = value
				Me.SendPropertyChanged("ApplicationFeatureID")
				Me.OnApplicationFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property FeatureID() As System.Guid
		Get
			Return Me._FeatureID
		End Get
		Set
			If ((Me._FeatureID = value)  _
						= false) Then
				If Me._Feature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._FeatureID = value
				Me.SendPropertyChanged("FeatureID")
				Me.OnFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeature", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationFeatures.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatures.Add(Me)
					Me._ApplicationID = value.ApplicationId
				Else
					Me._ApplicationID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeature", Storage:="_Feature", ThisKey:="FeatureID", OtherKey:="FeatureID", IsForeignKey:=true)>  _
	Public Property Feature() As Feature
		Get
			Return Me._Feature.Entity
		End Get
		Set
			Dim previousValue As Feature = Me._Feature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Feature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Feature.Entity = Nothing
					previousValue.ApplicationFeatures.Remove(Me)
				End If
				Me._Feature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatures.Add(Me)
					Me._FeatureID = value.FeatureID
				Else
					Me._FeatureID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Feature")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationFeatureRole")>  _
Partial Public Class ApplicationFeatureRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationFeatureRoledID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _FeatureID As System.Guid
	
	Private _RoleID As System.Guid
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _aspnet_Role As EntityRef(Of aspnet_Role)
	
	Private _Feature As EntityRef(Of Feature)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationFeatureRoledIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationFeatureRoledIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
		Me._Feature = CType(Nothing, EntityRef(Of Feature))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFeatureRoledID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationFeatureRoledID() As System.Guid
		Get
			Return Me._ApplicationFeatureRoledID
		End Get
		Set
			If ((Me._ApplicationFeatureRoledID = value)  _
						= false) Then
				Me.OnApplicationFeatureRoledIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationFeatureRoledID = value
				Me.SendPropertyChanged("ApplicationFeatureRoledID")
				Me.OnApplicationFeatureRoledIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property FeatureID() As System.Guid
		Get
			Return Me._FeatureID
		End Get
		Set
			If ((Me._FeatureID = value)  _
						= false) Then
				If Me._Feature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._FeatureID = value
				Me.SendPropertyChanged("FeatureID")
				Me.OnFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RoleID() As System.Guid
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				If Me._aspnet_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeatureRole", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationFeatureRoles.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatureRoles.Add(Me)
					Me._ApplicationID = value.ApplicationId
				Else
					Me._ApplicationID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_ApplicationFeatureRole", Storage:="_aspnet_Role", ThisKey:="RoleID", OtherKey:="RoleId", IsForeignKey:=true)>  _
	Public Property aspnet_Role() As aspnet_Role
		Get
			Return Me._aspnet_Role.Entity
		End Get
		Set
			Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Role.Entity = Nothing
					previousValue.ApplicationFeatureRoles.Remove(Me)
				End If
				Me._aspnet_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatureRoles.Add(Me)
					Me._RoleID = value.RoleId
				Else
					Me._RoleID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeatureRole", Storage:="_Feature", ThisKey:="FeatureID", OtherKey:="FeatureID", IsForeignKey:=true)>  _
	Public Property Feature() As Feature
		Get
			Return Me._Feature.Entity
		End Get
		Set
			Dim previousValue As Feature = Me._Feature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Feature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Feature.Entity = Nothing
					previousValue.ApplicationFeatureRoles.Remove(Me)
				End If
				Me._Feature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationFeatureRoles.Add(Me)
					Me._FeatureID = value.FeatureID
				Else
					Me._FeatureID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Feature")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence")>  _
Partial Public Class ApplicationGeoFence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationGeoFenceID As System.Guid
	
	Private _ApplictionID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Colour As String
	
	Private _isCircular As System.Nullable(Of Boolean)
	
	Private _CircleRadiusMetres As System.Nullable(Of Double)
	
	Private _CircleCentre As String
	
	Private _isBooking As System.Nullable(Of Boolean)
	
	Private _ApplicationGeoFenceSides As EntitySet(Of ApplicationGeoFenceSide)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnApplictionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplictionIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnColourChanging(value As String)
    End Sub
    Partial Private Sub OnColourChanged()
    End Sub
    Partial Private Sub OnisCircularChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisCircularChanged()
    End Sub
    Partial Private Sub OnCircleRadiusMetresChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircleRadiusMetresChanged()
    End Sub
    Partial Private Sub OnCircleCentreChanging(value As String)
    End Sub
    Partial Private Sub OnCircleCentreChanged()
    End Sub
    Partial Private Sub OnisBookingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBookingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationGeoFenceSides = New EntitySet(Of ApplicationGeoFenceSide)(AddressOf Me.attach_ApplicationGeoFenceSides, AddressOf Me.detach_ApplicationGeoFenceSides)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationGeoFenceID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If ((Me._ApplicationGeoFenceID = value)  _
						= false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplictionID() As System.Guid
		Get
			Return Me._ApplictionID
		End Get
		Set
			If ((Me._ApplictionID = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplictionIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplictionID = value
				Me.SendPropertyChanged("ApplictionID")
				Me.OnApplictionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>  _
	Public Property Colour() As String
		Get
			Return Me._Colour
		End Get
		Set
			If (String.Equals(Me._Colour, value) = false) Then
				Me.OnColourChanging(value)
				Me.SendPropertyChanging
				Me._Colour = value
				Me.SendPropertyChanged("Colour")
				Me.OnColourChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>  _
	Public Property isCircular() As System.Nullable(Of Boolean)
		Get
			Return Me._isCircular
		End Get
		Set
			If (Me._isCircular.Equals(value) = false) Then
				Me.OnisCircularChanging(value)
				Me.SendPropertyChanging
				Me._isCircular = value
				Me.SendPropertyChanged("isCircular")
				Me.OnisCircularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>  _
	Public Property CircleRadiusMetres() As System.Nullable(Of Double)
		Get
			Return Me._CircleRadiusMetres
		End Get
		Set
			If (Me._CircleRadiusMetres.Equals(value) = false) Then
				Me.OnCircleRadiusMetresChanging(value)
				Me.SendPropertyChanging
				Me._CircleRadiusMetres = value
				Me.SendPropertyChanged("CircleRadiusMetres")
				Me.OnCircleRadiusMetresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>  _
	Public Property CircleCentre() As String
		Get
			Return Me._CircleCentre
		End Get
		Set
			If (String.Equals(Me._CircleCentre, value) = false) Then
				Me.OnCircleCentreChanging(value)
				Me.SendPropertyChanging
				Me._CircleCentre = value
				Me.SendPropertyChanged("CircleCentre")
				Me.OnCircleCentreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBooking", DbType:="Bit")>  _
	Public Property isBooking() As System.Nullable(Of Boolean)
		Get
			Return Me._isBooking
		End Get
		Set
			If (Me._isBooking.Equals(value) = false) Then
				Me.OnisBookingChanging(value)
				Me.SendPropertyChanging
				Me._isBooking = value
				Me.SendPropertyChanged("isBooking")
				Me.OnisBookingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationGeoFence_ApplicationGeoFenceSide", Storage:="_ApplicationGeoFenceSides", ThisKey:="ApplicationGeoFenceID", OtherKey:="ApplicationGeoFenceID")>  _
	Public Property ApplicationGeoFenceSides() As EntitySet(Of ApplicationGeoFenceSide)
		Get
			Return Me._ApplicationGeoFenceSides
		End Get
		Set
			Me._ApplicationGeoFenceSides.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationGeoFence", Storage:="_aspnet_Application", ThisKey:="ApplictionID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationGeoFences.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationGeoFences.Add(Me)
					Me._ApplictionID = value.ApplicationId
				Else
					Me._ApplictionID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationGeoFenceSides(ByVal entity As ApplicationGeoFenceSide)
		Me.SendPropertyChanging
		entity.ApplicationGeoFence = Me
	End Sub
	
	Private Sub detach_ApplicationGeoFenceSides(ByVal entity As ApplicationGeoFenceSide)
		Me.SendPropertyChanging
		entity.ApplicationGeoFence = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence_20160615")>  _
Partial Public Class ApplicationGeoFence_20160615
	
	Private _ApplicationGeoFenceID As System.Guid
	
	Private _ApplictionID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Colour As String
	
	Private _isCircular As System.Nullable(Of Boolean)
	
	Private _CircleRadiusMetres As System.Nullable(Of Double)
	
	Private _CircleCentre As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationGeoFenceID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If ((Me._ApplicationGeoFenceID = value)  _
						= false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplictionID() As System.Guid
		Get
			Return Me._ApplictionID
		End Get
		Set
			If ((Me._ApplictionID = value)  _
						= false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me._DateCreated = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>  _
	Public Property Colour() As String
		Get
			Return Me._Colour
		End Get
		Set
			If (String.Equals(Me._Colour, value) = false) Then
				Me._Colour = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>  _
	Public Property isCircular() As System.Nullable(Of Boolean)
		Get
			Return Me._isCircular
		End Get
		Set
			If (Me._isCircular.Equals(value) = false) Then
				Me._isCircular = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>  _
	Public Property CircleRadiusMetres() As System.Nullable(Of Double)
		Get
			Return Me._CircleRadiusMetres
		End Get
		Set
			If (Me._CircleRadiusMetres.Equals(value) = false) Then
				Me._CircleRadiusMetres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>  _
	Public Property CircleCentre() As String
		Get
			Return Me._CircleCentre
		End Get
		Set
			If (String.Equals(Me._CircleCentre, value) = false) Then
				Me._CircleCentre = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFence_20160842")>  _
Partial Public Class ApplicationGeoFence_20160842
	
	Private _ApplicationGeoFenceID As System.Guid
	
	Private _ApplictionID As System.Guid
	
	Private _Name As String
	
	Private _Description As String
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Colour As String
	
	Private _isCircular As System.Nullable(Of Boolean)
	
	Private _CircleRadiusMetres As System.Nullable(Of Double)
	
	Private _CircleCentre As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationGeoFenceID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If ((Me._ApplicationGeoFenceID = value)  _
						= false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplictionID() As System.Guid
		Get
			Return Me._ApplictionID
		End Get
		Set
			If ((Me._ApplictionID = value)  _
						= false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me._DateCreated = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colour", DbType:="VarChar(50)")>  _
	Public Property Colour() As String
		Get
			Return Me._Colour
		End Get
		Set
			If (String.Equals(Me._Colour, value) = false) Then
				Me._Colour = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCircular", DbType:="Bit")>  _
	Public Property isCircular() As System.Nullable(Of Boolean)
		Get
			Return Me._isCircular
		End Get
		Set
			If (Me._isCircular.Equals(value) = false) Then
				Me._isCircular = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleRadiusMetres", DbType:="Float")>  _
	Public Property CircleRadiusMetres() As System.Nullable(Of Double)
		Get
			Return Me._CircleRadiusMetres
		End Get
		Set
			If (Me._CircleRadiusMetres.Equals(value) = false) Then
				Me._CircleRadiusMetres = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircleCentre", DbType:="VarChar(500)")>  _
	Public Property CircleCentre() As String
		Get
			Return Me._CircleCentre
		End Get
		Set
			If (String.Equals(Me._CircleCentre, value) = false) Then
				Me._CircleCentre = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeofenceProperty")>  _
Partial Public Class ApplicationGeofenceProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationGeoFencePropertyID As Integer
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _PropertyName As String
	
	Private _PropertyValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFencePropertyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApplicationGeoFencePropertyIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFencePropertyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ApplicationGeoFencePropertyID() As Integer
		Get
			Return Me._ApplicationGeoFencePropertyID
		End Get
		Set
			If ((Me._ApplicationGeoFencePropertyID = value)  _
						= false) Then
				Me.OnApplicationGeoFencePropertyIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFencePropertyID = value
				Me.SendPropertyChanged("ApplicationGeoFencePropertyID")
				Me.OnApplicationGeoFencePropertyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(1000)")>  _
	Public Property PropertyName() As String
		Get
			Return Me._PropertyName
		End Get
		Set
			If (String.Equals(Me._PropertyName, value) = false) Then
				Me.OnPropertyNameChanging(value)
				Me.SendPropertyChanging
				Me._PropertyName = value
				Me.SendPropertyChanged("PropertyName")
				Me.OnPropertyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="VarChar(1000)")>  _
	Public Property PropertyValue() As String
		Get
			Return Me._PropertyValue
		End Get
		Set
			If (String.Equals(Me._PropertyValue, value) = false) Then
				Me.OnPropertyValueChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValue = value
				Me.SendPropertyChanged("PropertyValue")
				Me.OnPropertyValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFenceSide")>  _
Partial Public Class ApplicationGeoFenceSide
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationGeoFenceSideID As System.Guid
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _loadOrder As Integer
	
	Private _ApplicationGeoFence As EntityRef(Of ApplicationGeoFence)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationGeoFenceSideIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationGeoFenceSideIDChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnloadOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnloadOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationGeoFence = CType(Nothing, EntityRef(Of ApplicationGeoFence))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceSideID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationGeoFenceSideID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceSideID
		End Get
		Set
			If ((Me._ApplicationGeoFenceSideID = value)  _
						= false) Then
				Me.OnApplicationGeoFenceSideIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceSideID = value
				Me.SendPropertyChanged("ApplicationGeoFenceSideID")
				Me.OnApplicationGeoFenceSideIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				If Me._ApplicationGeoFence.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me.OnLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._Latitude = value
				Me.SendPropertyChanged("Latitude")
				Me.OnLatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadOrder", DbType:="Int NOT NULL")>  _
	Public Property loadOrder() As Integer
		Get
			Return Me._loadOrder
		End Get
		Set
			If ((Me._loadOrder = value)  _
						= false) Then
				Me.OnloadOrderChanging(value)
				Me.SendPropertyChanging
				Me._loadOrder = value
				Me.SendPropertyChanged("loadOrder")
				Me.OnloadOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationGeoFence_ApplicationGeoFenceSide", Storage:="_ApplicationGeoFence", ThisKey:="ApplicationGeoFenceID", OtherKey:="ApplicationGeoFenceID", IsForeignKey:=true)>  _
	Public Property ApplicationGeoFence() As ApplicationGeoFence
		Get
			Return Me._ApplicationGeoFence.Entity
		End Get
		Set
			Dim previousValue As ApplicationGeoFence = Me._ApplicationGeoFence.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationGeoFence.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationGeoFence.Entity = Nothing
					previousValue.ApplicationGeoFenceSides.Remove(Me)
				End If
				Me._ApplicationGeoFence.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationGeoFenceSides.Add(Me)
					Me._ApplicationGeoFenceID = value.ApplicationGeoFenceID
				Else
					Me._ApplicationGeoFenceID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("ApplicationGeoFence")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationGeoFenceSide_20160615")>  _
Partial Public Class ApplicationGeoFenceSide_20160615
	
	Private _ApplicationGeoFenceSideID As System.Guid
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _loadOrder As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceSideID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationGeoFenceSideID() As System.Guid
		Get
			Return Me._ApplicationGeoFenceSideID
		End Get
		Set
			If ((Me._ApplicationGeoFenceSideID = value)  _
						= false) Then
				Me._ApplicationGeoFenceSideID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadOrder", DbType:="Int NOT NULL")>  _
	Public Property loadOrder() As Integer
		Get
			Return Me._loadOrder
		End Get
		Set
			If ((Me._loadOrder = value)  _
						= false) Then
				Me._loadOrder = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationImage")>  _
Partial Public Class ApplicationImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationImageID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Img As System.Data.Linq.Binary
	
	Private _Name As String
	
	Private _Type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationImageID() As System.Guid
		Get
			Return Me._ApplicationImageID
		End Get
		Set
			If ((Me._ApplicationImageID = value)  _
						= false) Then
				Me.OnApplicationImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationImageID = value
				Me.SendPropertyChanged("ApplicationImageID")
				Me.OnApplicationImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Img", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Img() As System.Data.Linq.Binary
		Get
			Return Me._Img
		End Get
		Set
			If (Object.Equals(Me._Img, value) = false) Then
				Me.OnImgChanging(value)
				Me.SendPropertyChanging
				Me._Img = value
				Me.SendPropertyChanged("Img")
				Me.OnImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(350)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(350)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationLocation")>  _
Partial Public Class ApplicationLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationLocationID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _Name As String
	
	Private _Longitude As String
	
	Private _Lattitude As String
	
	Private _Address As String
	
	Private _ApplicationImageID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationLocationIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnLattitudeChanging(value As String)
    End Sub
    Partial Private Sub OnLattitudeChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationLocationID() As System.Guid
		Get
			Return Me._ApplicationLocationID
		End Get
		Set
			If ((Me._ApplicationLocationID = value)  _
						= false) Then
				Me.OnApplicationLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationLocationID = value
				Me.SendPropertyChanged("ApplicationLocationID")
				Me.OnApplicationLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="VarChar(100)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lattitude", DbType:="VarChar(100)")>  _
	Public Property Lattitude() As String
		Get
			Return Me._Lattitude
		End Get
		Set
			If (String.Equals(Me._Lattitude, value) = false) Then
				Me.OnLattitudeChanging(value)
				Me.SendPropertyChanging
				Me._Lattitude = value
				Me.SendPropertyChanged("Lattitude")
				Me.OnLattitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationImageID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationImageID
		End Get
		Set
			If (Me._ApplicationImageID.Equals(value) = false) Then
				Me.OnApplicationImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationImageID = value
				Me.SendPropertyChanged("ApplicationImageID")
				Me.OnApplicationImageIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationSettingValue")>  _
Partial Public Class ApplicationSettingValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _SettingID As System.Nullable(Of System.Guid)
	
	Private _Value As String
	
	Private _ApplicationSettingValueID As System.Guid
	
	Private _ValueObj As System.Data.Linq.Binary
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _Setting As EntityRef(Of Setting)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnApplicationSettingValueIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationSettingValueIDChanged()
    End Sub
    Partial Private Sub OnValueObjChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnValueObjChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._Setting = CType(Nothing, EntityRef(Of Setting))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier")>  _
	Public Property SettingID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SettingID
		End Get
		Set
			If (Me._SettingID.Equals(value) = false) Then
				If Me._Setting.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SettingID = value
				Me.SendPropertyChanged("SettingID")
				Me.OnSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(MAX)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationSettingValueID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationSettingValueID() As System.Guid
		Get
			Return Me._ApplicationSettingValueID
		End Get
		Set
			If ((Me._ApplicationSettingValueID = value)  _
						= false) Then
				Me.OnApplicationSettingValueIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationSettingValueID = value
				Me.SendPropertyChanged("ApplicationSettingValueID")
				Me.OnApplicationSettingValueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueObj", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ValueObj() As System.Data.Linq.Binary
		Get
			Return Me._ValueObj
		End Get
		Set
			If (Object.Equals(Me._ValueObj, value) = false) Then
				Me.OnValueObjChanging(value)
				Me.SendPropertyChanging
				Me._ValueObj = value
				Me.SendPropertyChanged("ValueObj")
				Me.OnValueObjChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationSettingValue", Storage:="_aspnet_Application", ThisKey:="ApplicationID", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.ApplicationSettingValues.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationSettingValues.Add(Me)
					Me._ApplicationID = value.ApplicationId
				Else
					Me._ApplicationID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Setting_ApplicationSettingValue", Storage:="_Setting", ThisKey:="SettingID", OtherKey:="SettingID", IsForeignKey:=true)>  _
	Public Property Setting() As Setting
		Get
			Return Me._Setting.Entity
		End Get
		Set
			Dim previousValue As Setting = Me._Setting.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Setting.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Setting.Entity = Nothing
					previousValue.ApplicationSettingValues.Remove(Me)
				End If
				Me._Setting.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationSettingValues.Add(Me)
					Me._SettingID = value.SettingID
				Else
					Me._SettingID = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("Setting")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationTimeZone")>  _
Partial Public Class ApplicationTimeZone
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Guid
	
	Private _timeZoneID As String
	
	Private _timeZoneDesc As String
	
	Private _TimeZoneSerialzed As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OntimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneIDChanged()
    End Sub
    Partial Private Sub OntimeZoneDescChanging(value As String)
    End Sub
    Partial Private Sub OntimeZoneDescChanged()
    End Sub
    Partial Private Sub OnTimeZoneSerialzedChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSerialzedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZoneID", DbType:="VarChar(500)")>  _
	Public Property timeZoneID() As String
		Get
			Return Me._timeZoneID
		End Get
		Set
			If (String.Equals(Me._timeZoneID, value) = false) Then
				Me.OntimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._timeZoneID = value
				Me.SendPropertyChanged("timeZoneID")
				Me.OntimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timeZoneDesc", DbType:="VarChar(500)")>  _
	Public Property timeZoneDesc() As String
		Get
			Return Me._timeZoneDesc
		End Get
		Set
			If (String.Equals(Me._timeZoneDesc, value) = false) Then
				Me.OntimeZoneDescChanging(value)
				Me.SendPropertyChanging
				Me._timeZoneDesc = value
				Me.SendPropertyChanged("timeZoneDesc")
				Me.OntimeZoneDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSerialzed", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property TimeZoneSerialzed() As String
		Get
			Return Me._TimeZoneSerialzed
		End Get
		Set
			If (String.Equals(Me._TimeZoneSerialzed, value) = false) Then
				Me.OnTimeZoneSerialzedChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneSerialzed = value
				Me.SendPropertyChanged("TimeZoneSerialzed")
				Me.OnTimeZoneSerialzedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicle")>  _
Partial Public Class ApplicationVehicle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _Name As String
	
	Private _Registration As String
	
	Private _Notes As String
	
	Private _DeviceID As String
	
	Private _ApplicationID As System.Guid
	
	Private _VINNumber As String
	
	Private _ApplicationImageID As System.Nullable(Of System.Guid)
	
	Private _CAN_Protocol_Type As String
	
	Private _BusinessLocation As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRegistrationChanging(value As String)
    End Sub
    Partial Private Sub OnRegistrationChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnVINNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVINNumberChanged()
    End Sub
    Partial Private Sub OnApplicationImageIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationImageIDChanged()
    End Sub
    Partial Private Sub OnCAN_Protocol_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnCAN_Protocol_TypeChanged()
    End Sub
    Partial Private Sub OnBusinessLocationChanging(value As String)
    End Sub
    Partial Private Sub OnBusinessLocationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me.OnApplicationVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVehicleID = value
				Me.SendPropertyChanged("ApplicationVehicleID")
				Me.OnApplicationVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Registration", DbType:="VarChar(50)")>  _
	Public Property Registration() As String
		Get
			Return Me._Registration
		End Get
		Set
			If (String.Equals(Me._Registration, value) = false) Then
				Me.OnRegistrationChanging(value)
				Me.SendPropertyChanging
				Me._Registration = value
				Me.SendPropertyChanged("Registration")
				Me.OnRegistrationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VINNumber", DbType:="VarChar(100)")>  _
	Public Property VINNumber() As String
		Get
			Return Me._VINNumber
		End Get
		Set
			If (String.Equals(Me._VINNumber, value) = false) Then
				Me.OnVINNumberChanging(value)
				Me.SendPropertyChanging
				Me._VINNumber = value
				Me.SendPropertyChanged("VINNumber")
				Me.OnVINNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationImageID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationImageID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationImageID
		End Get
		Set
			If (Me._ApplicationImageID.Equals(value) = false) Then
				Me.OnApplicationImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationImageID = value
				Me.SendPropertyChanged("ApplicationImageID")
				Me.OnApplicationImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_Protocol_Type", DbType:="VarChar(100)")>  _
	Public Property CAN_Protocol_Type() As String
		Get
			Return Me._CAN_Protocol_Type
		End Get
		Set
			If (String.Equals(Me._CAN_Protocol_Type, value) = false) Then
				Me.OnCAN_Protocol_TypeChanging(value)
				Me.SendPropertyChanging
				Me._CAN_Protocol_Type = value
				Me.SendPropertyChanged("CAN_Protocol_Type")
				Me.OnCAN_Protocol_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessLocation", DbType:="VarChar(MAX)")>  _
	Public Property BusinessLocation() As String
		Get
			Return Me._BusinessLocation
		End Get
		Set
			If (String.Equals(Me._BusinessLocation, value) = false) Then
				Me.OnBusinessLocationChanging(value)
				Me.SendPropertyChanging
				Me._BusinessLocation = value
				Me.SendPropertyChanged("BusinessLocation")
				Me.OnBusinessLocationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicleDriverTime")>  _
Partial Public Class ApplicationVehicleDriverTime
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationVehicleDriverTimeID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _VehicleID As System.Nullable(Of System.Guid)
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Private _Notes As String
	
	Private _ApplicationDriverID As System.Guid
	
	Private _PassengerID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationVehicleDriverTimeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleDriverTimeIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
    Partial Private Sub OnStartDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateTimeChanged()
    End Sub
    Partial Private Sub OnEndDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateTimeChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnPassengerIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPassengerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationVehicleDriverTimeID() As System.Guid
		Get
			Return Me._ApplicationVehicleDriverTimeID
		End Get
		Set
			If ((Me._ApplicationVehicleDriverTimeID = value)  _
						= false) Then
				Me.OnApplicationVehicleDriverTimeIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVehicleDriverTimeID = value
				Me.SendPropertyChanged("ApplicationVehicleDriverTimeID")
				Me.OnApplicationVehicleDriverTimeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier")>  _
	Public Property VehicleID() As System.Nullable(Of System.Guid)
		Get
			Return Me._VehicleID
		End Get
		Set
			If (Me._VehicleID.Equals(value) = false) Then
				Me.OnVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._VehicleID = value
				Me.SendPropertyChanged("VehicleID")
				Me.OnVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me.OnStartDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartDateTime = value
				Me.SendPropertyChanged("StartDateTime")
				Me.OnStartDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me.OnEndDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndDateTime = value
				Me.SendPropertyChanged("EndDateTime")
				Me.OnEndDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				Me.OnApplicationDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDriverID = value
				Me.SendPropertyChanged("ApplicationDriverID")
				Me.OnApplicationDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>  _
	Public Property PassengerID() As System.Nullable(Of System.Guid)
		Get
			Return Me._PassengerID
		End Get
		Set
			If (Me._PassengerID.Equals(value) = false) Then
				Me.OnPassengerIDChanging(value)
				Me.SendPropertyChanging
				Me._PassengerID = value
				Me.SendPropertyChanged("PassengerID")
				Me.OnPassengerIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationVehicleOdometerReading")>  _
Partial Public Class ApplicationVehicleOdometerReading
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AppliationVehicleOdometerReadingID As System.Guid
	
	Private _OdometerReading As System.Nullable(Of Decimal)
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _TimeReadingTaken As System.Nullable(Of Date)
	
	Private _RecordCreatedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAppliationVehicleOdometerReadingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAppliationVehicleOdometerReadingIDChanged()
    End Sub
    Partial Private Sub OnOdometerReadingChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOdometerReadingChanged()
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationVehicleIDChanged()
    End Sub
    Partial Private Sub OnTimeReadingTakenChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTimeReadingTakenChanged()
    End Sub
    Partial Private Sub OnRecordCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRecordCreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppliationVehicleOdometerReadingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AppliationVehicleOdometerReadingID() As System.Guid
		Get
			Return Me._AppliationVehicleOdometerReadingID
		End Get
		Set
			If ((Me._AppliationVehicleOdometerReadingID = value)  _
						= false) Then
				Me.OnAppliationVehicleOdometerReadingIDChanging(value)
				Me.SendPropertyChanging
				Me._AppliationVehicleOdometerReadingID = value
				Me.SendPropertyChanged("AppliationVehicleOdometerReadingID")
				Me.OnAppliationVehicleOdometerReadingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdometerReading", DbType:="Decimal(18,2)")>  _
	Public Property OdometerReading() As System.Nullable(Of Decimal)
		Get
			Return Me._OdometerReading
		End Get
		Set
			If (Me._OdometerReading.Equals(value) = false) Then
				Me.OnOdometerReadingChanging(value)
				Me.SendPropertyChanging
				Me._OdometerReading = value
				Me.SendPropertyChanged("OdometerReading")
				Me.OnOdometerReadingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me.OnApplicationVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVehicleID = value
				Me.SendPropertyChanged("ApplicationVehicleID")
				Me.OnApplicationVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeReadingTaken", DbType:="DateTime")>  _
	Public Property TimeReadingTaken() As System.Nullable(Of Date)
		Get
			Return Me._TimeReadingTaken
		End Get
		Set
			If (Me._TimeReadingTaken.Equals(value) = false) Then
				Me.OnTimeReadingTakenChanging(value)
				Me.SendPropertyChanging
				Me._TimeReadingTaken = value
				Me.SendPropertyChanged("TimeReadingTaken")
				Me.OnTimeReadingTakenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordCreatedDate", DbType:="DateTime")>  _
	Public Property RecordCreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._RecordCreatedDate
		End Get
		Set
			If (Me._RecordCreatedDate.Equals(value) = false) Then
				Me.OnRecordCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._RecordCreatedDate = value
				Me.SendPropertyChanged("RecordCreatedDate")
				Me.OnRecordCreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Applications")>  _
Partial Public Class aspnet_Application
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationName As String
	
	Private _LoweredApplicationName As String
	
	Private _ApplicationId As System.Guid
	
	Private _Description As String
	
	Private _TimeZoneSerialisedObj As String
	
	Private _TimeZoneID As String
	
	Private _TimeZoneOffset As String
	
	Private _TimeZoneDSTOffset As String
	
	Private _TimezoneDescription As String
	
	Private _DefaultApplicationLocationID As System.Nullable(Of System.Guid)
	
	Private _ApplicationFeatures As EntitySet(Of ApplicationFeature)
	
	Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)
	
	Private _ApplicationGeoFences As EntitySet(Of ApplicationGeoFence)
	
	Private _ApplicationSettingValues As EntitySet(Of ApplicationSettingValue)
	
	Private _aspnet_Memberships As EntitySet(Of aspnet_Membership)
	
	Private _aspnet_Paths As EntitySet(Of aspnet_Path)
	
	Private _aspnet_Roles As EntitySet(Of aspnet_Role)
	
	Private _aspnet_Users As EntitySet(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTimeZoneSerialisedObjChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSerialisedObjChanged()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanged()
    End Sub
    Partial Private Sub OnTimeZoneDSTOffsetChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneDSTOffsetChanged()
    End Sub
    Partial Private Sub OnTimezoneDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnTimezoneDescriptionChanged()
    End Sub
    Partial Private Sub OnDefaultApplicationLocationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDefaultApplicationLocationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationFeatures = New EntitySet(Of ApplicationFeature)(AddressOf Me.attach_ApplicationFeatures, AddressOf Me.detach_ApplicationFeatures)
		Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
		Me._ApplicationGeoFences = New EntitySet(Of ApplicationGeoFence)(AddressOf Me.attach_ApplicationGeoFences, AddressOf Me.detach_ApplicationGeoFences)
		Me._ApplicationSettingValues = New EntitySet(Of ApplicationSettingValue)(AddressOf Me.attach_ApplicationSettingValues, AddressOf Me.detach_ApplicationSettingValues)
		Me._aspnet_Memberships = New EntitySet(Of aspnet_Membership)(AddressOf Me.attach_aspnet_Memberships, AddressOf Me.detach_aspnet_Memberships)
		Me._aspnet_Paths = New EntitySet(Of aspnet_Path)(AddressOf Me.attach_aspnet_Paths, AddressOf Me.detach_aspnet_Paths)
		Me._aspnet_Roles = New EntitySet(Of aspnet_Role)(AddressOf Me.attach_aspnet_Roles, AddressOf Me.detach_aspnet_Roles)
		Me._aspnet_Users = New EntitySet(Of aspnet_User)(AddressOf Me.attach_aspnet_Users, AddressOf Me.detach_aspnet_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredApplicationName() As String
		Get
			Return Me._LoweredApplicationName
		End Get
		Set
			If (String.Equals(Me._LoweredApplicationName, value) = false) Then
				Me.OnLoweredApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredApplicationName = value
				Me.SendPropertyChanged("LoweredApplicationName")
				Me.OnLoweredApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSerialisedObj", DbType:="VarChar(MAX)")>  _
	Public Property TimeZoneSerialisedObj() As String
		Get
			Return Me._TimeZoneSerialisedObj
		End Get
		Set
			If (String.Equals(Me._TimeZoneSerialisedObj, value) = false) Then
				Me.OnTimeZoneSerialisedObjChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneSerialisedObj = value
				Me.SendPropertyChanged("TimeZoneSerialisedObj")
				Me.OnTimeZoneSerialisedObjChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", DbType:="VarChar(100)")>  _
	Public Property TimeZoneID() As String
		Get
			Return Me._TimeZoneID
		End Get
		Set
			If (String.Equals(Me._TimeZoneID, value) = false) Then
				Me.OnTimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneID = value
				Me.SendPropertyChanged("TimeZoneID")
				Me.OnTimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneOffset", DbType:="NChar(10)")>  _
	Public Property TimeZoneOffset() As String
		Get
			Return Me._TimeZoneOffset
		End Get
		Set
			If (String.Equals(Me._TimeZoneOffset, value) = false) Then
				Me.OnTimeZoneOffsetChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneOffset = value
				Me.SendPropertyChanged("TimeZoneOffset")
				Me.OnTimeZoneOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneDSTOffset", DbType:="NChar(10)")>  _
	Public Property TimeZoneDSTOffset() As String
		Get
			Return Me._TimeZoneDSTOffset
		End Get
		Set
			If (String.Equals(Me._TimeZoneDSTOffset, value) = false) Then
				Me.OnTimeZoneDSTOffsetChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneDSTOffset = value
				Me.SendPropertyChanged("TimeZoneDSTOffset")
				Me.OnTimeZoneDSTOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimezoneDescription", DbType:="VarChar(500)")>  _
	Public Property TimezoneDescription() As String
		Get
			Return Me._TimezoneDescription
		End Get
		Set
			If (String.Equals(Me._TimezoneDescription, value) = false) Then
				Me.OnTimezoneDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._TimezoneDescription = value
				Me.SendPropertyChanged("TimezoneDescription")
				Me.OnTimezoneDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultApplicationLocationID", DbType:="UniqueIdentifier")>  _
	Public Property DefaultApplicationLocationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._DefaultApplicationLocationID
		End Get
		Set
			If (Me._DefaultApplicationLocationID.Equals(value) = false) Then
				Me.OnDefaultApplicationLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._DefaultApplicationLocationID = value
				Me.SendPropertyChanged("DefaultApplicationLocationID")
				Me.OnDefaultApplicationLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeature", Storage:="_ApplicationFeatures", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>  _
	Public Property ApplicationFeatures() As EntitySet(Of ApplicationFeature)
		Get
			Return Me._ApplicationFeatures
		End Get
		Set
			Me._ApplicationFeatures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>  _
	Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
		Get
			Return Me._ApplicationFeatureRoles
		End Get
		Set
			Me._ApplicationFeatureRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationGeoFence", Storage:="_ApplicationGeoFences", ThisKey:="ApplicationId", OtherKey:="ApplictionID")>  _
	Public Property ApplicationGeoFences() As EntitySet(Of ApplicationGeoFence)
		Get
			Return Me._ApplicationGeoFences
		End Get
		Set
			Me._ApplicationGeoFences.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_ApplicationSettingValue", Storage:="_ApplicationSettingValues", ThisKey:="ApplicationId", OtherKey:="ApplicationID")>  _
	Public Property ApplicationSettingValues() As EntitySet(Of ApplicationSettingValue)
		Get
			Return Me._ApplicationSettingValues
		End Get
		Set
			Me._ApplicationSettingValues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Memberships", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Memberships() As EntitySet(Of aspnet_Membership)
		Get
			Return Me._aspnet_Memberships
		End Get
		Set
			Me._aspnet_Memberships.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Path", Storage:="_aspnet_Paths", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Paths() As EntitySet(Of aspnet_Path)
		Get
			Return Me._aspnet_Paths
		End Get
		Set
			Me._aspnet_Paths.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Roles", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Roles() As EntitySet(Of aspnet_Role)
		Get
			Return Me._aspnet_Roles
		End Get
		Set
			Me._aspnet_Roles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Users", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Users() As EntitySet(Of aspnet_User)
		Get
			Return Me._aspnet_Users
		End Get
		Set
			Me._aspnet_Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_ApplicationGeoFences(ByVal entity As ApplicationGeoFence)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationGeoFences(ByVal entity As ApplicationGeoFence)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Memberships(ByVal entity As aspnet_Membership)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Memberships(ByVal entity As aspnet_Membership)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Paths(ByVal entity As aspnet_Path)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Paths(ByVal entity As aspnet_Path)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Roles(ByVal entity As aspnet_Role)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Roles(ByVal entity As aspnet_Role)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Membership")>  _
Partial Public Class aspnet_Membership
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _Password As String
	
	Private _PasswordFormat As Integer
	
	Private _PasswordSalt As String
	
	Private _MobilePIN As String
	
	Private _Email As String
	
	Private _LoweredEmail As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _IsApproved As Boolean
	
	Private _IsLockedOut As Boolean
	
	Private _CreateDate As Date
	
	Private _LastLoginDate As Date
	
	Private _LastPasswordChangedDate As Date
	
	Private _LastLockoutDate As Date
	
	Private _FailedPasswordAttemptCount As Integer
	
	Private _FailedPasswordAttemptWindowStart As Date
	
	Private _FailedPasswordAnswerAttemptCount As Integer
	
	Private _FailedPasswordAnswerAttemptWindowStart As Date
	
	Private _Comment As String
	
	Private _Mobile As String
	
	Private _TimeZoneSyncObj As String
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPasswordFormatChanging(value As Integer)
    End Sub
    Partial Private Sub OnPasswordFormatChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnMobilePINChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePINChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnLoweredEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredEmailChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnIsLockedOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLockedOutChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnLastLockoutDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLockoutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnTimeZoneSyncObjChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneSyncObjChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordFormat", DbType:="Int NOT NULL")>  _
	Public Property PasswordFormat() As Integer
		Get
			Return Me._PasswordFormat
		End Get
		Set
			If ((Me._PasswordFormat = value)  _
						= false) Then
				Me.OnPasswordFormatChanging(value)
				Me.SendPropertyChanging
				Me._PasswordFormat = value
				Me.SendPropertyChanged("PasswordFormat")
				Me.OnPasswordFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePIN", DbType:="NVarChar(16)")>  _
	Public Property MobilePIN() As String
		Get
			Return Me._MobilePIN
		End Get
		Set
			If (String.Equals(Me._MobilePIN, value) = false) Then
				Me.OnMobilePINChanging(value)
				Me.SendPropertyChanging
				Me._MobilePIN = value
				Me.SendPropertyChanged("MobilePIN")
				Me.OnMobilePINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredEmail", DbType:="NVarChar(256)")>  _
	Public Property LoweredEmail() As String
		Get
			Return Me._LoweredEmail
		End Get
		Set
			If (String.Equals(Me._LoweredEmail, value) = false) Then
				Me.OnLoweredEmailChanging(value)
				Me.SendPropertyChanging
				Me._LoweredEmail = value
				Me.SendPropertyChanged("LoweredEmail")
				Me.OnLoweredEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me.OnPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._PasswordQuestion = value
				Me.SendPropertyChanged("PasswordQuestion")
				Me.OnPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me.OnPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._PasswordAnswer = value
				Me.SendPropertyChanged("PasswordAnswer")
				Me.OnPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit NOT NULL")>  _
	Public Property IsApproved() As Boolean
		Get
			Return Me._IsApproved
		End Get
		Set
			If ((Me._IsApproved = value)  _
						= false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLockedOut", DbType:="Bit NOT NULL")>  _
	Public Property IsLockedOut() As Boolean
		Get
			Return Me._IsLockedOut
		End Get
		Set
			If ((Me._IsLockedOut = value)  _
						= false) Then
				Me.OnIsLockedOutChanging(value)
				Me.SendPropertyChanging
				Me._IsLockedOut = value
				Me.SendPropertyChanged("IsLockedOut")
				Me.OnIsLockedOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastPasswordChangedDate() As Date
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If ((Me._LastPasswordChangedDate = value)  _
						= false) Then
				Me.OnLastPasswordChangedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPasswordChangedDate = value
				Me.SendPropertyChanged("LastPasswordChangedDate")
				Me.OnLastPasswordChangedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockoutDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLockoutDate() As Date
		Get
			Return Me._LastLockoutDate
		End Get
		Set
			If ((Me._LastLockoutDate = value)  _
						= false) Then
				Me.OnLastLockoutDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLockoutDate = value
				Me.SendPropertyChanged("LastLockoutDate")
				Me.OnLastLockoutDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAttemptCount")
				Me.OnFailedPasswordAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
				Me.OnFailedPasswordAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAnswerAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
				Me.OnFailedPasswordAnswerAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAnswerAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart")
				Me.OnFailedPasswordAnswerAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(100)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneSyncObj", DbType:="VarChar(8000)")>  _
	Public Property TimeZoneSyncObj() As String
		Get
			Return Me._TimeZoneSyncObj
		End Get
		Set
			If (String.Equals(Me._TimeZoneSyncObj, value) = false) Then
				Me.OnTimeZoneSyncObjChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneSyncObj = value
				Me.SendPropertyChanged("TimeZoneSyncObj")
				Me.OnTimeZoneSyncObjChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Memberships.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Memberships.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_Membership = Nothing
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Membership = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Paths")>  _
Partial Public Class aspnet_Path
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _PathId As System.Guid
	
	Private _Path As String
	
	Private _LoweredPath As String
	
	Private _aspnet_PersonalizationAllUser As EntityRef(Of aspnet_PersonalizationAllUser)
	
	Private _aspnet_PersonalizationPerUsers As EntitySet(Of aspnet_PersonalizationPerUser)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnLoweredPathChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredPathChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_PersonalizationAllUser = CType(Nothing, EntityRef(Of aspnet_PersonalizationAllUser))
		Me._aspnet_PersonalizationPerUsers = New EntitySet(Of aspnet_PersonalizationPerUser)(AddressOf Me.attach_aspnet_PersonalizationPerUsers, AddressOf Me.detach_aspnet_PersonalizationPerUsers)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PathId() As System.Guid
		Get
			Return Me._PathId
		End Get
		Set
			If ((Me._PathId = value)  _
						= false) Then
				Me.OnPathIdChanging(value)
				Me.SendPropertyChanging
				Me._PathId = value
				Me.SendPropertyChanged("PathId")
				Me.OnPathIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Path() As String
		Get
			Return Me._Path
		End Get
		Set
			If (String.Equals(Me._Path, value) = false) Then
				Me.OnPathChanging(value)
				Me.SendPropertyChanging
				Me._Path = value
				Me.SendPropertyChanged("Path")
				Me.OnPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredPath", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredPath() As String
		Get
			Return Me._LoweredPath
		End Get
		Set
			If (String.Equals(Me._LoweredPath, value) = false) Then
				Me.OnLoweredPathChanging(value)
				Me.SendPropertyChanging
				Me._LoweredPath = value
				Me.SendPropertyChanged("LoweredPath")
				Me.OnLoweredPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationAllUser", Storage:="_aspnet_PersonalizationAllUser", ThisKey:="PathId", OtherKey:="PathId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_PersonalizationAllUser() As aspnet_PersonalizationAllUser
		Get
			Return Me._aspnet_PersonalizationAllUser.Entity
		End Get
		Set
			Dim previousValue As aspnet_PersonalizationAllUser = Me._aspnet_PersonalizationAllUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_PersonalizationAllUser.Entity = Nothing
					previousValue.aspnet_Path = Nothing
				End If
				Me._aspnet_PersonalizationAllUser.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_Path = Me
				End If
				Me.SendPropertyChanged("aspnet_PersonalizationAllUser")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationPerUser", Storage:="_aspnet_PersonalizationPerUsers", ThisKey:="PathId", OtherKey:="PathId")>  _
	Public Property aspnet_PersonalizationPerUsers() As EntitySet(Of aspnet_PersonalizationPerUser)
		Get
			Return Me._aspnet_PersonalizationPerUsers
		End Get
		Set
			Me._aspnet_PersonalizationPerUsers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Path", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Paths.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Paths.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_Path = Me
	End Sub
	
	Private Sub detach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_Path = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_PersonalizationAllUsers")>  _
Partial Public Class aspnet_PersonalizationAllUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PathId As System.Guid
	
	Private _PageSettings As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _aspnet_Path As EntityRef(Of aspnet_Path)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnPageSettingsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPageSettingsChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Path = CType(Nothing, EntityRef(Of aspnet_Path))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PathId() As System.Guid
		Get
			Return Me._PathId
		End Get
		Set
			If ((Me._PathId = value)  _
						= false) Then
				If Me._aspnet_Path.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPathIdChanging(value)
				Me.SendPropertyChanging
				Me._PathId = value
				Me.SendPropertyChanged("PathId")
				Me.OnPathIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageSettings", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PageSettings() As System.Data.Linq.Binary
		Get
			Return Me._PageSettings
		End Get
		Set
			If (Object.Equals(Me._PageSettings, value) = false) Then
				Me.OnPageSettingsChanging(value)
				Me.SendPropertyChanging
				Me._PageSettings = value
				Me.SendPropertyChanged("PageSettings")
				Me.OnPageSettingsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationAllUser", Storage:="_aspnet_Path", ThisKey:="PathId", OtherKey:="PathId", IsForeignKey:=true)>  _
	Public Property aspnet_Path() As aspnet_Path
		Get
			Return Me._aspnet_Path.Entity
		End Get
		Set
			Dim previousValue As aspnet_Path = Me._aspnet_Path.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Path.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Path.Entity = Nothing
					previousValue.aspnet_PersonalizationAllUser = Nothing
				End If
				Me._aspnet_Path.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_PersonalizationAllUser = Me
					Me._PathId = value.PathId
				Else
					Me._PathId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Path")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_PersonalizationPerUser")>  _
Partial Public Class aspnet_PersonalizationPerUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As System.Guid
	
	Private _PathId As System.Nullable(Of System.Guid)
	
	Private _UserId As System.Nullable(Of System.Guid)
	
	Private _PageSettings As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _aspnet_Path As EntityRef(Of aspnet_Path)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPathIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnPathIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPageSettingsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPageSettingsChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Path = CType(Nothing, EntityRef(Of aspnet_Path))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As System.Guid
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathId", DbType:="UniqueIdentifier")>  _
	Public Property PathId() As System.Nullable(Of System.Guid)
		Get
			Return Me._PathId
		End Get
		Set
			If (Me._PathId.Equals(value) = false) Then
				If Me._aspnet_Path.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPathIdChanging(value)
				Me.SendPropertyChanging
				Me._PathId = value
				Me.SendPropertyChanged("PathId")
				Me.OnPathIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier")>  _
	Public Property UserId() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageSettings", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PageSettings() As System.Data.Linq.Binary
		Get
			Return Me._PageSettings
		End Get
		Set
			If (Object.Equals(Me._PageSettings, value) = false) Then
				Me.OnPageSettingsChanging(value)
				Me.SendPropertyChanging
				Me._PageSettings = value
				Me.SendPropertyChanged("PageSettings")
				Me.OnPageSettingsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Path_aspnet_PersonalizationPerUser", Storage:="_aspnet_Path", ThisKey:="PathId", OtherKey:="PathId", IsForeignKey:=true)>  _
	Public Property aspnet_Path() As aspnet_Path
		Get
			Return Me._aspnet_Path.Entity
		End Get
		Set
			Dim previousValue As aspnet_Path = Me._aspnet_Path.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Path.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Path.Entity = Nothing
					previousValue.aspnet_PersonalizationPerUsers.Remove(Me)
				End If
				Me._aspnet_Path.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_PersonalizationPerUsers.Add(Me)
					Me._PathId = value.PathId
				Else
					Me._PathId = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("aspnet_Path")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_PersonalizationPerUser", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_PersonalizationPerUsers.Remove(Me)
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_PersonalizationPerUsers.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Profile")>  _
Partial Public Class aspnet_Profile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _PropertyNames As String
	
	Private _PropertyValuesString As String
	
	Private _PropertyValuesBinary As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPropertyNamesChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNamesChanged()
    End Sub
    Partial Private Sub OnPropertyValuesStringChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValuesStringChanged()
    End Sub
    Partial Private Sub OnPropertyValuesBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPropertyValuesBinaryChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyNames", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyNames() As String
		Get
			Return Me._PropertyNames
		End Get
		Set
			If (String.Equals(Me._PropertyNames, value) = false) Then
				Me.OnPropertyNamesChanging(value)
				Me.SendPropertyChanging
				Me._PropertyNames = value
				Me.SendPropertyChanged("PropertyNames")
				Me.OnPropertyNamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValuesString", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyValuesString() As String
		Get
			Return Me._PropertyValuesString
		End Get
		Set
			If (String.Equals(Me._PropertyValuesString, value) = false) Then
				Me.OnPropertyValuesStringChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValuesString = value
				Me.SendPropertyChanged("PropertyValuesString")
				Me.OnPropertyValuesStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValuesBinary", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyValuesBinary() As System.Data.Linq.Binary
		Get
			Return Me._PropertyValuesBinary
		End Get
		Set
			If (Object.Equals(Me._PropertyValuesBinary, value) = false) Then
				Me.OnPropertyValuesBinaryChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValuesBinary = value
				Me.SendPropertyChanged("PropertyValuesBinary")
				Me.OnPropertyValuesBinaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Profile", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_Profile = Nothing
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Profile = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Roles")>  _
Partial Public Class aspnet_Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _RoleName As String
	
	Private _LoweredRoleName As String
	
	Private _Description As String
	
	Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)
	
	Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnLoweredRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredRoleNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
		Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredRoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredRoleName() As String
		Get
			Return Me._LoweredRoleName
		End Get
		Set
			If (String.Equals(Me._LoweredRoleName, value) = false) Then
				Me.OnLoweredRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredRoleName = value
				Me.SendPropertyChanged("LoweredRoleName")
				Me.OnLoweredRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="RoleId", OtherKey:="RoleID")>  _
	Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
		Get
			Return Me._ApplicationFeatureRoles
		End Get
		Set
			Me._ApplicationFeatureRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="RoleId", OtherKey:="RoleId")>  _
	Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
		Get
			Return Me._aspnet_UsersInRoles
		End Get
		Set
			Me._aspnet_UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Roles.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Roles.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Me
	End Sub
	
	Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Nothing
	End Sub
	
	Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Me
	End Sub
	
	Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_SchemaVersions")>  _
Partial Public Class aspnet_SchemaVersion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Feature As String
	
	Private _CompatibleSchemaVersion As String
	
	Private _IsCurrentVersion As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureChanged()
    End Sub
    Partial Private Sub OnCompatibleSchemaVersionChanging(value As String)
    End Sub
    Partial Private Sub OnCompatibleSchemaVersionChanged()
    End Sub
    Partial Private Sub OnIsCurrentVersionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsCurrentVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feature", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Feature() As String
		Get
			Return Me._Feature
		End Get
		Set
			If (String.Equals(Me._Feature, value) = false) Then
				Me.OnFeatureChanging(value)
				Me.SendPropertyChanging
				Me._Feature = value
				Me.SendPropertyChanged("Feature")
				Me.OnFeatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompatibleSchemaVersion", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CompatibleSchemaVersion() As String
		Get
			Return Me._CompatibleSchemaVersion
		End Get
		Set
			If (String.Equals(Me._CompatibleSchemaVersion, value) = false) Then
				Me.OnCompatibleSchemaVersionChanging(value)
				Me.SendPropertyChanging
				Me._CompatibleSchemaVersion = value
				Me.SendPropertyChanged("CompatibleSchemaVersion")
				Me.OnCompatibleSchemaVersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCurrentVersion", DbType:="Bit NOT NULL")>  _
	Public Property IsCurrentVersion() As Boolean
		Get
			Return Me._IsCurrentVersion
		End Get
		Set
			If ((Me._IsCurrentVersion = value)  _
						= false) Then
				Me.OnIsCurrentVersionChanging(value)
				Me.SendPropertyChanging
				Me._IsCurrentVersion = value
				Me.SendPropertyChanged("IsCurrentVersion")
				Me.OnIsCurrentVersionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")>  _
Partial Public Class aspnet_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _UserName As String
	
	Private _LoweredUserName As String
	
	Private _MobileAlias As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _TimeZoneID As String
	
	Private _ApplicationLocation As System.Nullable(Of System.Guid)
	
	Private _aspnet_Membership As EntityRef(Of aspnet_Membership)
	
	Private _aspnet_PersonalizationPerUsers As EntitySet(Of aspnet_PersonalizationPerUser)
	
	Private _aspnet_Profile As EntityRef(Of aspnet_Profile)
	
	Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLoweredUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredUserNameChanged()
    End Sub
    Partial Private Sub OnMobileAliasChanging(value As String)
    End Sub
    Partial Private Sub OnMobileAliasChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    Partial Private Sub OnTimeZoneIDChanging(value As String)
    End Sub
    Partial Private Sub OnTimeZoneIDChanged()
    End Sub
    Partial Private Sub OnApplicationLocationChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationLocationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Membership = CType(Nothing, EntityRef(Of aspnet_Membership))
		Me._aspnet_PersonalizationPerUsers = New EntitySet(Of aspnet_PersonalizationPerUser)(AddressOf Me.attach_aspnet_PersonalizationPerUsers, AddressOf Me.detach_aspnet_PersonalizationPerUsers)
		Me._aspnet_Profile = CType(Nothing, EntityRef(Of aspnet_Profile))
		Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredUserName() As String
		Get
			Return Me._LoweredUserName
		End Get
		Set
			If (String.Equals(Me._LoweredUserName, value) = false) Then
				Me.OnLoweredUserNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredUserName = value
				Me.SendPropertyChanged("LoweredUserName")
				Me.OnLoweredUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>  _
	Public Property MobileAlias() As String
		Get
			Return Me._MobileAlias
		End Get
		Set
			If (String.Equals(Me._MobileAlias, value) = false) Then
				Me.OnMobileAliasChanging(value)
				Me.SendPropertyChanging
				Me._MobileAlias = value
				Me.SendPropertyChanged("MobileAlias")
				Me.OnMobileAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneID", DbType:="VarChar(100)")>  _
	Public Property TimeZoneID() As String
		Get
			Return Me._TimeZoneID
		End Get
		Set
			If (String.Equals(Me._TimeZoneID, value) = false) Then
				Me.OnTimeZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneID = value
				Me.SendPropertyChanged("TimeZoneID")
				Me.OnTimeZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationLocation", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationLocation() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationLocation
		End Get
		Set
			If (Me._ApplicationLocation.Equals(value) = false) Then
				Me.OnApplicationLocationChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationLocation = value
				Me.SendPropertyChanged("ApplicationLocation")
				Me.OnApplicationLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_Membership", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_Membership() As aspnet_Membership
		Get
			Return Me._aspnet_Membership.Entity
		End Get
		Set
			Dim previousValue As aspnet_Membership = Me._aspnet_Membership.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Membership.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Membership.Entity = Nothing
					previousValue.aspnet_User = Nothing
				End If
				Me._aspnet_Membership.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_User = Me
				End If
				Me.SendPropertyChanged("aspnet_Membership")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_PersonalizationPerUser", Storage:="_aspnet_PersonalizationPerUsers", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property aspnet_PersonalizationPerUsers() As EntitySet(Of aspnet_PersonalizationPerUser)
		Get
			Return Me._aspnet_PersonalizationPerUsers
		End Get
		Set
			Me._aspnet_PersonalizationPerUsers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Profile", Storage:="_aspnet_Profile", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_Profile() As aspnet_Profile
		Get
			Return Me._aspnet_Profile.Entity
		End Get
		Set
			Dim previousValue As aspnet_Profile = Me._aspnet_Profile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Profile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Profile.Entity = Nothing
					previousValue.aspnet_User = Nothing
				End If
				Me._aspnet_Profile.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_User = Me
				End If
				Me.SendPropertyChanged("aspnet_Profile")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
		Get
			Return Me._aspnet_UsersInRoles
		End Get
		Set
			Me._aspnet_UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Users.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Users.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_User = Me
	End Sub
	
	Private Sub detach_aspnet_PersonalizationPerUsers(ByVal entity As aspnet_PersonalizationPerUser)
		Me.SendPropertyChanging
		entity.aspnet_User = Nothing
	End Sub
	
	Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_User = Me
	End Sub
	
	Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_UsersInRoles")>  _
Partial Public Class aspnet_UsersInRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _aspnet_Role As EntityRef(Of aspnet_Role)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				If Me._aspnet_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_Role", ThisKey:="RoleId", OtherKey:="RoleId", IsForeignKey:=true)>  _
	Public Property aspnet_Role() As aspnet_Role
		Get
			Return Me._aspnet_Role.Entity
		End Get
		Set
			Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Role.Entity = Nothing
					previousValue.aspnet_UsersInRoles.Remove(Me)
				End If
				Me._aspnet_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_UsersInRoles.Add(Me)
					Me._RoleId = value.RoleId
				Else
					Me._RoleId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_UsersInRoles.Remove(Me)
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_UsersInRoles.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_WebEvent_Events")>  _
Partial Public Class aspnet_WebEvent_Event
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventId As String
	
	Private _EventTimeUtc As Date
	
	Private _EventTime As Date
	
	Private _EventType As String
	
	Private _EventSequence As Decimal
	
	Private _EventOccurrence As Decimal
	
	Private _EventCode As Integer
	
	Private _EventDetailCode As Integer
	
	Private _Message As String
	
	Private _ApplicationPath As String
	
	Private _ApplicationVirtualPath As String
	
	Private _MachineName As String
	
	Private _RequestUrl As String
	
	Private _ExceptionType As String
	
	Private _Details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventIdChanging(value As String)
    End Sub
    Partial Private Sub OnEventIdChanged()
    End Sub
    Partial Private Sub OnEventTimeUtcChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeUtcChanged()
    End Sub
    Partial Private Sub OnEventTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeChanged()
    End Sub
    Partial Private Sub OnEventTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEventTypeChanged()
    End Sub
    Partial Private Sub OnEventSequenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventSequenceChanged()
    End Sub
    Partial Private Sub OnEventOccurrenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventOccurrenceChanged()
    End Sub
    Partial Private Sub OnEventCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventCodeChanged()
    End Sub
    Partial Private Sub OnEventDetailCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventDetailCodeChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnApplicationPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationPathChanged()
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanged()
    End Sub
    Partial Private Sub OnMachineNameChanging(value As String)
    End Sub
    Partial Private Sub OnMachineNameChanged()
    End Sub
    Partial Private Sub OnRequestUrlChanging(value As String)
    End Sub
    Partial Private Sub OnRequestUrlChanged()
    End Sub
    Partial Private Sub OnExceptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnExceptionTypeChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventId", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property EventId() As String
		Get
			Return Me._EventId
		End Get
		Set
			If (String.Equals(Me._EventId, value) = false) Then
				Me.OnEventIdChanging(value)
				Me.SendPropertyChanging
				Me._EventId = value
				Me.SendPropertyChanged("EventId")
				Me.OnEventIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTimeUtc", DbType:="DateTime NOT NULL")>  _
	Public Property EventTimeUtc() As Date
		Get
			Return Me._EventTimeUtc
		End Get
		Set
			If ((Me._EventTimeUtc = value)  _
						= false) Then
				Me.OnEventTimeUtcChanging(value)
				Me.SendPropertyChanging
				Me._EventTimeUtc = value
				Me.SendPropertyChanged("EventTimeUtc")
				Me.OnEventTimeUtcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTime", DbType:="DateTime NOT NULL")>  _
	Public Property EventTime() As Date
		Get
			Return Me._EventTime
		End Get
		Set
			If ((Me._EventTime = value)  _
						= false) Then
				Me.OnEventTimeChanging(value)
				Me.SendPropertyChanging
				Me._EventTime = value
				Me.SendPropertyChanged("EventTime")
				Me.OnEventTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property EventType() As String
		Get
			Return Me._EventType
		End Get
		Set
			If (String.Equals(Me._EventType, value) = false) Then
				Me.OnEventTypeChanging(value)
				Me.SendPropertyChanging
				Me._EventType = value
				Me.SendPropertyChanged("EventType")
				Me.OnEventTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventSequence", DbType:="Decimal(19,0) NOT NULL")>  _
	Public Property EventSequence() As Decimal
		Get
			Return Me._EventSequence
		End Get
		Set
			If ((Me._EventSequence = value)  _
						= false) Then
				Me.OnEventSequenceChanging(value)
				Me.SendPropertyChanging
				Me._EventSequence = value
				Me.SendPropertyChanged("EventSequence")
				Me.OnEventSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventOccurrence", DbType:="Decimal(19,0) NOT NULL")>  _
	Public Property EventOccurrence() As Decimal
		Get
			Return Me._EventOccurrence
		End Get
		Set
			If ((Me._EventOccurrence = value)  _
						= false) Then
				Me.OnEventOccurrenceChanging(value)
				Me.SendPropertyChanging
				Me._EventOccurrence = value
				Me.SendPropertyChanged("EventOccurrence")
				Me.OnEventOccurrenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventCode", DbType:="Int NOT NULL")>  _
	Public Property EventCode() As Integer
		Get
			Return Me._EventCode
		End Get
		Set
			If ((Me._EventCode = value)  _
						= false) Then
				Me.OnEventCodeChanging(value)
				Me.SendPropertyChanging
				Me._EventCode = value
				Me.SendPropertyChanged("EventCode")
				Me.OnEventCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDetailCode", DbType:="Int NOT NULL")>  _
	Public Property EventDetailCode() As Integer
		Get
			Return Me._EventDetailCode
		End Get
		Set
			If ((Me._EventDetailCode = value)  _
						= false) Then
				Me.OnEventDetailCodeChanging(value)
				Me.SendPropertyChanging
				Me._EventDetailCode = value
				Me.SendPropertyChanged("EventDetailCode")
				Me.OnEventDetailCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NVarChar(1024)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPath", DbType:="NVarChar(256)")>  _
	Public Property ApplicationPath() As String
		Get
			Return Me._ApplicationPath
		End Get
		Set
			If (String.Equals(Me._ApplicationPath, value) = false) Then
				Me.OnApplicationPathChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationPath = value
				Me.SendPropertyChanged("ApplicationPath")
				Me.OnApplicationPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVirtualPath", DbType:="NVarChar(256)")>  _
	Public Property ApplicationVirtualPath() As String
		Get
			Return Me._ApplicationVirtualPath
		End Get
		Set
			If (String.Equals(Me._ApplicationVirtualPath, value) = false) Then
				Me.OnApplicationVirtualPathChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVirtualPath = value
				Me.SendPropertyChanged("ApplicationVirtualPath")
				Me.OnApplicationVirtualPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MachineName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property MachineName() As String
		Get
			Return Me._MachineName
		End Get
		Set
			If (String.Equals(Me._MachineName, value) = false) Then
				Me.OnMachineNameChanging(value)
				Me.SendPropertyChanging
				Me._MachineName = value
				Me.SendPropertyChanged("MachineName")
				Me.OnMachineNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestUrl", DbType:="NVarChar(1024)")>  _
	Public Property RequestUrl() As String
		Get
			Return Me._RequestUrl
		End Get
		Set
			If (String.Equals(Me._RequestUrl, value) = false) Then
				Me.OnRequestUrlChanging(value)
				Me.SendPropertyChanging
				Me._RequestUrl = value
				Me.SendPropertyChanged("RequestUrl")
				Me.OnRequestUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionType", DbType:="NVarChar(256)")>  _
	Public Property ExceptionType() As String
		Get
			Return Me._ExceptionType
		End Get
		Set
			If (String.Equals(Me._ExceptionType, value) = false) Then
				Me.OnExceptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._ExceptionType = value
				Me.SendPropertyChanged("ExceptionType")
				Me.OnExceptionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuthenticationToken")>  _
Partial Public Class AuthenticationToken
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TokenId As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _UserID As System.Guid
	
	Private _ExpiryDate As Date
	
	Private _StartDate As Date
	
	Private _TokenType As String
	
	Private _isUsedForChangePassword As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTokenIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTokenIdChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnTokenTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTokenTypeChanged()
    End Sub
    Partial Private Sub OnisUsedForChangePasswordChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisUsedForChangePasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TokenId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TokenId() As System.Guid
		Get
			Return Me._TokenId
		End Get
		Set
			If ((Me._TokenId = value)  _
						= false) Then
				Me.OnTokenIdChanging(value)
				Me.SendPropertyChanging
				Me._TokenId = value
				Me.SendPropertyChanged("TokenId")
				Me.OnTokenIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserID() As System.Guid
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="DateTime NOT NULL")>  _
	Public Property ExpiryDate() As Date
		Get
			Return Me._ExpiryDate
		End Get
		Set
			If ((Me._ExpiryDate = value)  _
						= false) Then
				Me.OnExpiryDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiryDate = value
				Me.SendPropertyChanged("ExpiryDate")
				Me.OnExpiryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TokenType", DbType:="NVarChar(150)")>  _
	Public Property TokenType() As String
		Get
			Return Me._TokenType
		End Get
		Set
			If (String.Equals(Me._TokenType, value) = false) Then
				Me.OnTokenTypeChanging(value)
				Me.SendPropertyChanging
				Me._TokenType = value
				Me.SendPropertyChanged("TokenType")
				Me.OnTokenTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isUsedForChangePassword", DbType:="Bit")>  _
	Public Property isUsedForChangePassword() As System.Nullable(Of Boolean)
		Get
			Return Me._isUsedForChangePassword
		End Get
		Set
			If (Me._isUsedForChangePassword.Equals(value) = false) Then
				Me.OnisUsedForChangePasswordChanging(value)
				Me.SendPropertyChanging
				Me._isUsedForChangePassword = value
				Me.SendPropertyChanged("isUsedForChangePassword")
				Me.OnisUsedForChangePasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_Data")>  _
Partial Public Class CAN_Data
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _arbritration_id As String
	
	Private _data As String
	
	Private _dlc As System.Nullable(Of Integer)
	
	Private _is_extended_id As System.Nullable(Of Integer)
	
	Private _is_error_frame As System.Nullable(Of Integer)
	
	Private _is_remote_frame As System.Nullable(Of Integer)
	
	Private _timestamp As System.Nullable(Of Date)
	
	Private _Id As Integer
	
	Private _DeviceID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onarbritration_idChanging(value As String)
    End Sub
    Partial Private Sub Onarbritration_idChanged()
    End Sub
    Partial Private Sub OndataChanging(value As String)
    End Sub
    Partial Private Sub OndataChanged()
    End Sub
    Partial Private Sub OndlcChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndlcChanged()
    End Sub
    Partial Private Sub Onis_extended_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_extended_idChanged()
    End Sub
    Partial Private Sub Onis_error_frameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_error_frameChanged()
    End Sub
    Partial Private Sub Onis_remote_frameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onis_remote_frameChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arbritration_id", DbType:="NChar(10)")>  _
	Public Property arbritration_id() As String
		Get
			Return Me._arbritration_id
		End Get
		Set
			If (String.Equals(Me._arbritration_id, value) = false) Then
				Me.Onarbritration_idChanging(value)
				Me.SendPropertyChanging
				Me._arbritration_id = value
				Me.SendPropertyChanged("arbritration_id")
				Me.Onarbritration_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data", DbType:="VarChar(200)")>  _
	Public Property data() As String
		Get
			Return Me._data
		End Get
		Set
			If (String.Equals(Me._data, value) = false) Then
				Me.OndataChanging(value)
				Me.SendPropertyChanging
				Me._data = value
				Me.SendPropertyChanged("data")
				Me.OndataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dlc", DbType:="Int")>  _
	Public Property dlc() As System.Nullable(Of Integer)
		Get
			Return Me._dlc
		End Get
		Set
			If (Me._dlc.Equals(value) = false) Then
				Me.OndlcChanging(value)
				Me.SendPropertyChanging
				Me._dlc = value
				Me.SendPropertyChanged("dlc")
				Me.OndlcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_extended_id", DbType:="Int")>  _
	Public Property is_extended_id() As System.Nullable(Of Integer)
		Get
			Return Me._is_extended_id
		End Get
		Set
			If (Me._is_extended_id.Equals(value) = false) Then
				Me.Onis_extended_idChanging(value)
				Me.SendPropertyChanging
				Me._is_extended_id = value
				Me.SendPropertyChanged("is_extended_id")
				Me.Onis_extended_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_error_frame", DbType:="Int")>  _
	Public Property is_error_frame() As System.Nullable(Of Integer)
		Get
			Return Me._is_error_frame
		End Get
		Set
			If (Me._is_error_frame.Equals(value) = false) Then
				Me.Onis_error_frameChanging(value)
				Me.SendPropertyChanging
				Me._is_error_frame = value
				Me.SendPropertyChanged("is_error_frame")
				Me.Onis_error_frameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_remote_frame", DbType:="Int")>  _
	Public Property is_remote_frame() As System.Nullable(Of Integer)
		Get
			Return Me._is_remote_frame
		End Get
		Set
			If (Me._is_remote_frame.Equals(value) = false) Then
				Me.Onis_remote_frameChanging(value)
				Me.SendPropertyChanging
				Me._is_remote_frame = value
				Me.SendPropertyChanged("is_remote_frame")
				Me.Onis_remote_frameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timestamp", DbType:="DateTime")>  _
	Public Property timestamp() As System.Nullable(Of Date)
		Get
			Return Me._timestamp
		End Get
		Set
			If (Me._timestamp.Equals(value) = false) Then
				Me.OntimestampChanging(value)
				Me.SendPropertyChanging
				Me._timestamp = value
				Me.SendPropertyChanged("timestamp")
				Me.OntimestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_MessageDefinitions")>  _
Partial Public Class CAN_MessageDefinition
	
	Private _Standard As String
	
	Private _PGN As System.Nullable(Of Double)
	
	Private _Parameter_Group_Label As String
	
	Private _PGN_Length As String
	
	Private _Transmission_Rate As String
	
	Private _Acronym As String
	
	Private _pos As String
	
	Private _SPN_length As System.Nullable(Of Double)
	
	Private _SPN As System.Nullable(Of Double)
	
	Private __51_CAT_793F_Haul_Trucks As String
	
	Private __0_CAT_16M_Grader As String
	
	Private __0_Komatsu_1200_Wheel_Loaders As String
	
	Private __0_Liebherr_R9400_Excavators As String
	
	Private __0_Liebherr_R996B_Excavators As String
	
	Private __0_Atlas_Copco_PV271_Drills As String
	
	Private __0_Atlas_Copco_D65_Drills As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Data_Range As String
	
	Private _Operational_Range As String
	
	Private _Resolution As String
	
	Private _Offset As System.Nullable(Of Double)
	
	Private _Units As String
	
	Private _Date_SPN_was_added_to_PGN As System.Nullable(Of Date)
	
	Private _Status_of_SPN_addition_to_PGN As String
	
	Private _Date_SPN_was_added_modified As System.Nullable(Of Date)
	
	Private _Status_of_SPN As String
	
	Private _SPN_Doc As String
	
	Private _PGN_Doc As String
	
	Private _F30 As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>  _
	Public Property Standard() As String
		Get
			Return Me._Standard
		End Get
		Set
			If (String.Equals(Me._Standard, value) = false) Then
				Me._Standard = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>  _
	Public Property PGN() As System.Nullable(Of Double)
		Get
			Return Me._PGN
		End Get
		Set
			If (Me._PGN.Equals(value) = false) Then
				Me._PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Parameter Group Label]", Storage:="_Parameter_Group_Label", DbType:="NVarChar(255)")>  _
	Public Property Parameter_Group_Label() As String
		Get
			Return Me._Parameter_Group_Label
		End Get
		Set
			If (String.Equals(Me._Parameter_Group_Label, value) = false) Then
				Me._Parameter_Group_Label = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Length]", Storage:="_PGN_Length", DbType:="NVarChar(255)")>  _
	Public Property PGN_Length() As String
		Get
			Return Me._PGN_Length
		End Get
		Set
			If (String.Equals(Me._PGN_Length, value) = false) Then
				Me._PGN_Length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Transmission Rate]", Storage:="_Transmission_Rate", DbType:="NVarChar(255)")>  _
	Public Property Transmission_Rate() As String
		Get
			Return Me._Transmission_Rate
		End Get
		Set
			If (String.Equals(Me._Transmission_Rate, value) = false) Then
				Me._Transmission_Rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acronym", DbType:="NVarChar(255)")>  _
	Public Property Acronym() As String
		Get
			Return Me._Acronym
		End Get
		Set
			If (String.Equals(Me._Acronym, value) = false) Then
				Me._Acronym = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(255)")>  _
	Public Property pos() As String
		Get
			Return Me._pos
		End Get
		Set
			If (String.Equals(Me._pos, value) = false) Then
				Me._pos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN length]", Storage:="_SPN_length", DbType:="Float")>  _
	Public Property SPN_length() As System.Nullable(Of Double)
		Get
			Return Me._SPN_length
		End Get
		Set
			If (Me._SPN_length.Equals(value) = false) Then
				Me._SPN_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>  _
	Public Property SPN() As System.Nullable(Of Double)
		Get
			Return Me._SPN
		End Get
		Set
			If (Me._SPN.Equals(value) = false) Then
				Me._SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[51 CAT 793F Haul Trucks]", Storage:="__51_CAT_793F_Haul_Trucks", DbType:="NVarChar(255)")>  _
	Public Property _51_CAT_793F_Haul_Trucks() As String
		Get
			Return Me.__51_CAT_793F_Haul_Trucks
		End Get
		Set
			If (String.Equals(Me.__51_CAT_793F_Haul_Trucks, value) = false) Then
				Me.__51_CAT_793F_Haul_Trucks = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 CAT 16M Grader]", Storage:="__0_CAT_16M_Grader", DbType:="NVarChar(255)")>  _
	Public Property _0_CAT_16M_Grader() As String
		Get
			Return Me.__0_CAT_16M_Grader
		End Get
		Set
			If (String.Equals(Me.__0_CAT_16M_Grader, value) = false) Then
				Me.__0_CAT_16M_Grader = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Komatsu 1200 Wheel Loaders]", Storage:="__0_Komatsu_1200_Wheel_Loaders", DbType:="NVarChar(255)")>  _
	Public Property _0_Komatsu_1200_Wheel_Loaders() As String
		Get
			Return Me.__0_Komatsu_1200_Wheel_Loaders
		End Get
		Set
			If (String.Equals(Me.__0_Komatsu_1200_Wheel_Loaders, value) = false) Then
				Me.__0_Komatsu_1200_Wheel_Loaders = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R9400 Excavators]", Storage:="__0_Liebherr_R9400_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R9400_Excavators() As String
		Get
			Return Me.__0_Liebherr_R9400_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R9400_Excavators, value) = false) Then
				Me.__0_Liebherr_R9400_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R996B Excavators]", Storage:="__0_Liebherr_R996B_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R996B_Excavators() As String
		Get
			Return Me.__0_Liebherr_R996B_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R996B_Excavators, value) = false) Then
				Me.__0_Liebherr_R996B_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco PV271 Drills]", Storage:="__0_Atlas_Copco_PV271_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_PV271_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_PV271_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_PV271_Drills, value) = false) Then
				Me.__0_Atlas_Copco_PV271_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco D65 Drills]", Storage:="__0_Atlas_Copco_D65_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_D65_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_D65_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_D65_Drills, value) = false) Then
				Me.__0_Atlas_Copco_D65_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Data Range]", Storage:="_Data_Range", DbType:="NVarChar(255)")>  _
	Public Property Data_Range() As String
		Get
			Return Me._Data_Range
		End Get
		Set
			If (String.Equals(Me._Data_Range, value) = false) Then
				Me._Data_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Operational Range]", Storage:="_Operational_Range", DbType:="NVarChar(255)")>  _
	Public Property Operational_Range() As String
		Get
			Return Me._Operational_Range
		End Get
		Set
			If (String.Equals(Me._Operational_Range, value) = false) Then
				Me._Operational_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolution", DbType:="NVarChar(255)")>  _
	Public Property Resolution() As String
		Get
			Return Me._Resolution
		End Get
		Set
			If (String.Equals(Me._Resolution, value) = false) Then
				Me._Resolution = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offset", DbType:="Float")>  _
	Public Property Offset() As System.Nullable(Of Double)
		Get
			Return Me._Offset
		End Get
		Set
			If (Me._Offset.Equals(value) = false) Then
				Me._Offset = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units", DbType:="NVarChar(255)")>  _
	Public Property Units() As String
		Get
			Return Me._Units
		End Get
		Set
			If (String.Equals(Me._Units, value) = false) Then
				Me._Units = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added to PGN]", Storage:="_Date_SPN_was_added_to_PGN", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_to_PGN() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_to_PGN
		End Get
		Set
			If (Me._Date_SPN_was_added_to_PGN.Equals(value) = false) Then
				Me._Date_SPN_was_added_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN addition to PGN]", Storage:="_Status_of_SPN_addition_to_PGN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN_addition_to_PGN() As String
		Get
			Return Me._Status_of_SPN_addition_to_PGN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN_addition_to_PGN, value) = false) Then
				Me._Status_of_SPN_addition_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added/modified]", Storage:="_Date_SPN_was_added_modified", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_modified() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_modified
		End Get
		Set
			If (Me._Date_SPN_was_added_modified.Equals(value) = false) Then
				Me._Date_SPN_was_added_modified = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN]", Storage:="_Status_of_SPN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN() As String
		Get
			Return Me._Status_of_SPN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN, value) = false) Then
				Me._Status_of_SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN Doc]", Storage:="_SPN_Doc", DbType:="NVarChar(255)")>  _
	Public Property SPN_Doc() As String
		Get
			Return Me._SPN_Doc
		End Get
		Set
			If (String.Equals(Me._SPN_Doc, value) = false) Then
				Me._SPN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Doc]", Storage:="_PGN_Doc", DbType:="NVarChar(255)")>  _
	Public Property PGN_Doc() As String
		Get
			Return Me._PGN_Doc
		End Get
		Set
			If (String.Equals(Me._PGN_Doc, value) = false) Then
				Me._PGN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F30", DbType:="NVarChar(255)")>  _
	Public Property F30() As String
		Get
			Return Me._F30
		End Get
		Set
			If (String.Equals(Me._F30, value) = false) Then
				Me._F30 = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CannonData")>  _
Partial Public Class CannonData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _RunNUmber As System.Nullable(Of Double)
	
	Private _RunDescription As String
	
	Private _RunDriver As System.Nullable(Of Double)
	
	Private _ServiceComments As String
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _InactiveRun As Boolean
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Double)
	
	Private _ServicePrice As System.Nullable(Of Double)
	
	Private _PerAnnumCharge As System.Nullable(Of Double)
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _AddressLine4 As String
	
	Private _Suburb As String
	
	Private _State As String
	
	Private _PostCode As System.Nullable(Of Double)
	
	Private _PhoneNo As String
	
	Private _FaxNo As String
	
	Private _SiteCeaseDate As String
	
	Private _calc_lat As String
	
	Private _calc_lng As String
	
	Private _calc_field1 As String
	
	Private _pk As Integer
	
	Private _NW_latlng As String
	
	Private _NE_latlng As String
	
	Private _SE_latlng As String
	
	Private _SW_latlng As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnRunNUmberChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRunNUmberChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanged()
    End Sub
    Partial Private Sub OnInactiveRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveRunChanged()
    End Sub
    Partial Private Sub OnServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeChanged()
    End Sub
    Partial Private Sub OnServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceDescriptionChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnServicePriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServicePriceChanged()
    End Sub
    Partial Private Sub OnPerAnnumChargeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPerAnnumChargeChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnAddressLine3Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine3Changed()
    End Sub
    Partial Private Sub OnAddressLine4Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine4Changed()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFaxNoChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNoChanged()
    End Sub
    Partial Private Sub OnSiteCeaseDateChanging(value As String)
    End Sub
    Partial Private Sub OnSiteCeaseDateChanged()
    End Sub
    Partial Private Sub Oncalc_latChanging(value As String)
    End Sub
    Partial Private Sub Oncalc_latChanged()
    End Sub
    Partial Private Sub Oncalc_lngChanging(value As String)
    End Sub
    Partial Private Sub Oncalc_lngChanged()
    End Sub
    Partial Private Sub Oncalc_field1Changing(value As String)
    End Sub
    Partial Private Sub Oncalc_field1Changed()
    End Sub
    Partial Private Sub OnpkChanging(value As Integer)
    End Sub
    Partial Private Sub OnpkChanged()
    End Sub
    Partial Private Sub OnNW_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnNW_latlngChanged()
    End Sub
    Partial Private Sub OnNE_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnNE_latlngChanged()
    End Sub
    Partial Private Sub OnSE_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnSE_latlngChanged()
    End Sub
    Partial Private Sub OnSW_latlngChanging(value As String)
    End Sub
    Partial Private Sub OnSW_latlngChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Float")>  _
	Public Property RunNUmber() As System.Nullable(Of Double)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me.OnRunNUmberChanging(value)
				Me.SendPropertyChanging
				Me._RunNUmber = value
				Me.SendPropertyChanged("RunNUmber")
				Me.OnRunNUmberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me.OnRunDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RunDescription = value
				Me.SendPropertyChanged("RunDescription")
				Me.OnRunDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Float")>  _
	Public Property RunDriver() As System.Nullable(Of Double)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me.OnRunDriverChanging(value)
				Me.SendPropertyChanging
				Me._RunDriver = value
				Me.SendPropertyChanged("RunDriver")
				Me.OnRunDriverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(255)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me.OnServiceCommentsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceComments = value
				Me.SendPropertyChanged("ServiceComments")
				Me.OnServiceCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me.OnUnitsHaveMoreThanOneRunChanging(value)
				Me.SendPropertyChanging
				Me._UnitsHaveMoreThanOneRun = value
				Me.SendPropertyChanged("UnitsHaveMoreThanOneRun")
				Me.OnUnitsHaveMoreThanOneRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me.OnInactiveRunChanging(value)
				Me.SendPropertyChanging
				Me._InactiveRun = value
				Me.SendPropertyChanged("InactiveRun")
				Me.OnInactiveRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(255)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me.OnServiceCodeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCode = value
				Me.SendPropertyChanged("ServiceCode")
				Me.OnServiceCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(255)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me.OnServiceDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ServiceDescription = value
				Me.SendPropertyChanged("ServiceDescription")
				Me.OnServiceDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>  _
	Public Property ServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me.OnServiceUnitsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUnits = value
				Me.SendPropertyChanged("ServiceUnits")
				Me.OnServiceUnitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Float")>  _
	Public Property ServicePrice() As System.Nullable(Of Double)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me.OnServicePriceChanging(value)
				Me.SendPropertyChanging
				Me._ServicePrice = value
				Me.SendPropertyChanged("ServicePrice")
				Me.OnServicePriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Float")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me.OnPerAnnumChargeChanging(value)
				Me.SendPropertyChanging
				Me._PerAnnumCharge = value
				Me.SendPropertyChanged("PerAnnumCharge")
				Me.OnPerAnnumChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(255)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me.OnAddressLine1Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine1 = value
				Me.SendPropertyChanged("AddressLine1")
				Me.OnAddressLine1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(255)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me.OnAddressLine2Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine2 = value
				Me.SendPropertyChanged("AddressLine2")
				Me.OnAddressLine2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(255)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me.OnAddressLine3Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine3 = value
				Me.SendPropertyChanged("AddressLine3")
				Me.OnAddressLine3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(255)")>  _
	Public Property AddressLine4() As String
		Get
			Return Me._AddressLine4
		End Get
		Set
			If (String.Equals(Me._AddressLine4, value) = false) Then
				Me.OnAddressLine4Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine4 = value
				Me.SendPropertyChanged("AddressLine4")
				Me.OnAddressLine4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(255)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me.OnSuburbChanging(value)
				Me.SendPropertyChanging
				Me._Suburb = value
				Me.SendPropertyChanged("Suburb")
				Me.OnSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(255)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="Float")>  _
	Public Property PostCode() As System.Nullable(Of Double)
		Get
			Return Me._PostCode
		End Get
		Set
			If (Me._PostCode.Equals(value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(255)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(255)")>  _
	Public Property FaxNo() As String
		Get
			Return Me._FaxNo
		End Get
		Set
			If (String.Equals(Me._FaxNo, value) = false) Then
				Me.OnFaxNoChanging(value)
				Me.SendPropertyChanging
				Me._FaxNo = value
				Me.SendPropertyChanged("FaxNo")
				Me.OnFaxNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="NVarChar(255)")>  _
	Public Property SiteCeaseDate() As String
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (String.Equals(Me._SiteCeaseDate, value) = false) Then
				Me.OnSiteCeaseDateChanging(value)
				Me.SendPropertyChanging
				Me._SiteCeaseDate = value
				Me.SendPropertyChanged("SiteCeaseDate")
				Me.OnSiteCeaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_lat", DbType:="VarChar(200)")>  _
	Public Property calc_lat() As String
		Get
			Return Me._calc_lat
		End Get
		Set
			If (String.Equals(Me._calc_lat, value) = false) Then
				Me.Oncalc_latChanging(value)
				Me.SendPropertyChanging
				Me._calc_lat = value
				Me.SendPropertyChanged("calc_lat")
				Me.Oncalc_latChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_lng", DbType:="VarChar(200)")>  _
	Public Property calc_lng() As String
		Get
			Return Me._calc_lng
		End Get
		Set
			If (String.Equals(Me._calc_lng, value) = false) Then
				Me.Oncalc_lngChanging(value)
				Me.SendPropertyChanging
				Me._calc_lng = value
				Me.SendPropertyChanged("calc_lng")
				Me.Oncalc_lngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calc_field1", DbType:="VarChar(200)")>  _
	Public Property calc_field1() As String
		Get
			Return Me._calc_field1
		End Get
		Set
			If (String.Equals(Me._calc_field1, value) = false) Then
				Me.Oncalc_field1Changing(value)
				Me.SendPropertyChanging
				Me._calc_field1 = value
				Me.SendPropertyChanged("calc_field1")
				Me.Oncalc_field1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pk", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property pk() As Integer
		Get
			Return Me._pk
		End Get
		Set
			If ((Me._pk = value)  _
						= false) Then
				Me.OnpkChanging(value)
				Me.SendPropertyChanging
				Me._pk = value
				Me.SendPropertyChanged("pk")
				Me.OnpkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NW_latlng", DbType:="VarChar(500)")>  _
	Public Property NW_latlng() As String
		Get
			Return Me._NW_latlng
		End Get
		Set
			If (String.Equals(Me._NW_latlng, value) = false) Then
				Me.OnNW_latlngChanging(value)
				Me.SendPropertyChanging
				Me._NW_latlng = value
				Me.SendPropertyChanged("NW_latlng")
				Me.OnNW_latlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NE_latlng", DbType:="VarChar(500)")>  _
	Public Property NE_latlng() As String
		Get
			Return Me._NE_latlng
		End Get
		Set
			If (String.Equals(Me._NE_latlng, value) = false) Then
				Me.OnNE_latlngChanging(value)
				Me.SendPropertyChanging
				Me._NE_latlng = value
				Me.SendPropertyChanged("NE_latlng")
				Me.OnNE_latlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SE_latlng", DbType:="VarChar(500)")>  _
	Public Property SE_latlng() As String
		Get
			Return Me._SE_latlng
		End Get
		Set
			If (String.Equals(Me._SE_latlng, value) = false) Then
				Me.OnSE_latlngChanging(value)
				Me.SendPropertyChanging
				Me._SE_latlng = value
				Me.SendPropertyChanged("SE_latlng")
				Me.OnSE_latlngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SW_latlng", DbType:="VarChar(500)")>  _
	Public Property SW_latlng() As String
		Get
			Return Me._SW_latlng
		End Get
		Set
			If (String.Equals(Me._SW_latlng, value) = false) Then
				Me.OnSW_latlngChanging(value)
				Me.SendPropertyChanging
				Me._SW_latlng = value
				Me.SendPropertyChanged("SW_latlng")
				Me.OnSW_latlngChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contact")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Guid
	
	Private _Forname As String
	
	Private _Surname As String
	
	Private _EmailAddress As String
	
	Private _MobileNumber As String
	
	Private _CompanyName As String
	
	Private _ContactID As System.Guid
	
	Private _Notes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFornameChanging(value As String)
    End Sub
    Partial Private Sub OnFornameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnMobileNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNumberChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Forname", DbType:="VarChar(250)")>  _
	Public Property Forname() As String
		Get
			Return Me._Forname
		End Get
		Set
			If (String.Equals(Me._Forname, value) = false) Then
				Me.OnFornameChanging(value)
				Me.SendPropertyChanging
				Me._Forname = value
				Me.SendPropertyChanged("Forname")
				Me.OnFornameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="VarChar(250)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(250)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNumber", DbType:="VarChar(50)")>  _
	Public Property MobileNumber() As String
		Get
			Return Me._MobileNumber
		End Get
		Set
			If (String.Equals(Me._MobileNumber, value) = false) Then
				Me.OnMobileNumberChanging(value)
				Me.SendPropertyChanging
				Me._MobileNumber = value
				Me.SendPropertyChanged("MobileNumber")
				Me.OnMobileNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="VarChar(300)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ContactID() As System.Guid
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Development")>  _
Partial Public Class Development
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DevelopmentID As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Notes As String
	
	Private _EstimateReleaseDate As System.Nullable(Of Date)
	
	Private _Released As System.Nullable(Of Date)
	
	Private _Status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDevelopmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDevelopmentIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnEstimateReleaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstimateReleaseDateChanged()
    End Sub
    Partial Private Sub OnReleasedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReleasedChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DevelopmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DevelopmentID() As Integer
		Get
			Return Me._DevelopmentID
		End Get
		Set
			If ((Me._DevelopmentID = value)  _
						= false) Then
				Me.OnDevelopmentIDChanging(value)
				Me.SendPropertyChanging
				Me._DevelopmentID = value
				Me.SendPropertyChanged("DevelopmentID")
				Me.OnDevelopmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NChar(10)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimateReleaseDate", DbType:="DateTime")>  _
	Public Property EstimateReleaseDate() As System.Nullable(Of Date)
		Get
			Return Me._EstimateReleaseDate
		End Get
		Set
			If (Me._EstimateReleaseDate.Equals(value) = false) Then
				Me.OnEstimateReleaseDateChanging(value)
				Me.SendPropertyChanging
				Me._EstimateReleaseDate = value
				Me.SendPropertyChanged("EstimateReleaseDate")
				Me.OnEstimateReleaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Released", DbType:="DateTime")>  _
	Public Property Released() As System.Nullable(Of Date)
		Get
			Return Me._Released
		End Get
		Set
			If (Me._Released.Equals(value) = false) Then
				Me.OnReleasedChanging(value)
				Me.SendPropertyChanging
				Me._Released = value
				Me.SendPropertyChanged("Released")
				Me.OnReleasedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(MAX)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Device")>  _
Partial Public Class Device
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DeviceID As String
	
	Private _PhoneNumber As String
	
	Private _IMEI As String
	
	Private _notes As String
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CreationDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnIMEIChanging(value As String)
    End Sub
    Partial Private Sub OnIMEIChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMEI", DbType:="VarChar(50)")>  _
	Public Property IMEI() As String
		Get
			Return Me._IMEI
		End Get
		Set
			If (String.Equals(Me._IMEI, value) = false) Then
				Me.OnIMEIChanging(value)
				Me.SendPropertyChanging
				Me._IMEI = value
				Me.SendPropertyChanged("IMEI")
				Me.OnIMEIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="VarChar(MAX)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me.OnCreationDateChanging(value)
				Me.SendPropertyChanging
				Me._CreationDate = value
				Me.SendPropertyChanged("CreationDate")
				Me.OnCreationDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Feature")>  _
Partial Public Class Feature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FeatureID As System.Guid
	
	Private _FeatureName As String
	
	Private _FeatureDescription As String
	
	Private _ApplicationFeatures As EntitySet(Of ApplicationFeature)
	
	Private _ApplicationFeatureRoles As EntitySet(Of ApplicationFeatureRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeatureIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFeatureIDChanged()
    End Sub
    Partial Private Sub OnFeatureNameChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureNameChanged()
    End Sub
    Partial Private Sub OnFeatureDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFeatureDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationFeatures = New EntitySet(Of ApplicationFeature)(AddressOf Me.attach_ApplicationFeatures, AddressOf Me.detach_ApplicationFeatures)
		Me._ApplicationFeatureRoles = New EntitySet(Of ApplicationFeatureRole)(AddressOf Me.attach_ApplicationFeatureRoles, AddressOf Me.detach_ApplicationFeatureRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FeatureID() As System.Guid
		Get
			Return Me._FeatureID
		End Get
		Set
			If ((Me._FeatureID = value)  _
						= false) Then
				Me.OnFeatureIDChanging(value)
				Me.SendPropertyChanging
				Me._FeatureID = value
				Me.SendPropertyChanged("FeatureID")
				Me.OnFeatureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureName", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property FeatureName() As String
		Get
			Return Me._FeatureName
		End Get
		Set
			If (String.Equals(Me._FeatureName, value) = false) Then
				Me.OnFeatureNameChanging(value)
				Me.SendPropertyChanging
				Me._FeatureName = value
				Me.SendPropertyChanged("FeatureName")
				Me.OnFeatureNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureDescription", DbType:="VarChar(MAX)")>  _
	Public Property FeatureDescription() As String
		Get
			Return Me._FeatureDescription
		End Get
		Set
			If (String.Equals(Me._FeatureDescription, value) = false) Then
				Me.OnFeatureDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._FeatureDescription = value
				Me.SendPropertyChanged("FeatureDescription")
				Me.OnFeatureDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeature", Storage:="_ApplicationFeatures", ThisKey:="FeatureID", OtherKey:="FeatureID")>  _
	Public Property ApplicationFeatures() As EntitySet(Of ApplicationFeature)
		Get
			Return Me._ApplicationFeatures
		End Get
		Set
			Me._ApplicationFeatures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_ApplicationFeatureRole", Storage:="_ApplicationFeatureRoles", ThisKey:="FeatureID", OtherKey:="FeatureID")>  _
	Public Property ApplicationFeatureRoles() As EntitySet(Of ApplicationFeatureRole)
		Get
			Return Me._ApplicationFeatureRoles
		End Get
		Set
			Me._ApplicationFeatureRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.Feature = Me
	End Sub
	
	Private Sub detach_ApplicationFeatures(ByVal entity As ApplicationFeature)
		Me.SendPropertyChanging
		entity.Feature = Nothing
	End Sub
	
	Private Sub attach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.Feature = Me
	End Sub
	
	Private Sub detach_ApplicationFeatureRoles(ByVal entity As ApplicationFeatureRole)
		Me.SendPropertyChanging
		entity.Feature = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetMapMarker")>  _
Partial Public Class FleetMapMarker
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FleetMapMarkerId As System.Guid
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Vehicle_ApplicationImageId As System.Nullable(Of System.Guid)
	
	Private _Home_ApplicationImageId As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFleetMapMarkerIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFleetMapMarkerIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnVehicle_ApplicationImageIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVehicle_ApplicationImageIdChanged()
    End Sub
    Partial Private Sub OnHome_ApplicationImageIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnHome_ApplicationImageIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FleetMapMarkerId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FleetMapMarkerId() As System.Guid
		Get
			Return Me._FleetMapMarkerId
		End Get
		Set
			If ((Me._FleetMapMarkerId = value)  _
						= false) Then
				Me.OnFleetMapMarkerIdChanging(value)
				Me.SendPropertyChanging
				Me._FleetMapMarkerId = value
				Me.SendPropertyChanged("FleetMapMarkerId")
				Me.OnFleetMapMarkerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_ApplicationImageId", DbType:="UniqueIdentifier")>  _
	Public Property Vehicle_ApplicationImageId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Vehicle_ApplicationImageId
		End Get
		Set
			If (Me._Vehicle_ApplicationImageId.Equals(value) = false) Then
				Me.OnVehicle_ApplicationImageIdChanging(value)
				Me.SendPropertyChanging
				Me._Vehicle_ApplicationImageId = value
				Me.SendPropertyChanged("Vehicle_ApplicationImageId")
				Me.OnVehicle_ApplicationImageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Home_ApplicationImageId", DbType:="UniqueIdentifier")>  _
	Public Property Home_ApplicationImageId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Home_ApplicationImageId
		End Get
		Set
			If (Me._Home_ApplicationImageId.Equals(value) = false) Then
				Me.OnHome_ApplicationImageIdChanging(value)
				Me.SendPropertyChanging
				Me._Home_ApplicationImageId = value
				Me.SendPropertyChanged("Home_ApplicationImageId")
				Me.OnHome_ApplicationImageIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollisionAlert")>  _
Partial Public Class GeoFenceDeviceCollisionAlert
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GeoFenceDeviceCollisionAlertID As System.Guid
	
	Private _GeoFenceDeviceCollisionID As System.Guid
	
	Private _MessageSentEmail As String
	
	Private _MessageSendText As String
	
	Private _DeliveryEmailAddresses As String
	
	Private _DeliveryTexts As String
	
	Private _DeliveryGroups As String
	
	Private _MessageSent As System.Nullable(Of Date)
	
	Private _AlertTypeID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionAlertIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionAlertIDChanged()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollisionIDChanged()
    End Sub
    Partial Private Sub OnMessageSentEmailChanging(value As String)
    End Sub
    Partial Private Sub OnMessageSentEmailChanged()
    End Sub
    Partial Private Sub OnMessageSendTextChanging(value As String)
    End Sub
    Partial Private Sub OnMessageSendTextChanged()
    End Sub
    Partial Private Sub OnDeliveryEmailAddressesChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryEmailAddressesChanged()
    End Sub
    Partial Private Sub OnDeliveryTextsChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryTextsChanged()
    End Sub
    Partial Private Sub OnDeliveryGroupsChanging(value As String)
    End Sub
    Partial Private Sub OnDeliveryGroupsChanged()
    End Sub
    Partial Private Sub OnMessageSentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMessageSentChanged()
    End Sub
    Partial Private Sub OnAlertTypeIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnAlertTypeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollisionAlertID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GeoFenceDeviceCollisionAlertID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollisionAlertID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollisionAlertID = value)  _
						= false) Then
				Me.OnGeoFenceDeviceCollisionAlertIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceDeviceCollisionAlertID = value
				Me.SendPropertyChanged("GeoFenceDeviceCollisionAlertID")
				Me.OnGeoFenceDeviceCollisionAlertIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollisionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceDeviceCollisionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollisionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollisionID = value)  _
						= false) Then
				Me.OnGeoFenceDeviceCollisionIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceDeviceCollisionID = value
				Me.SendPropertyChanged("GeoFenceDeviceCollisionID")
				Me.OnGeoFenceDeviceCollisionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSentEmail", DbType:="VarChar(MAX)")>  _
	Public Property MessageSentEmail() As String
		Get
			Return Me._MessageSentEmail
		End Get
		Set
			If (String.Equals(Me._MessageSentEmail, value) = false) Then
				Me.OnMessageSentEmailChanging(value)
				Me.SendPropertyChanging
				Me._MessageSentEmail = value
				Me.SendPropertyChanged("MessageSentEmail")
				Me.OnMessageSentEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSendText", DbType:="VarChar(MAX)")>  _
	Public Property MessageSendText() As String
		Get
			Return Me._MessageSendText
		End Get
		Set
			If (String.Equals(Me._MessageSendText, value) = false) Then
				Me.OnMessageSendTextChanging(value)
				Me.SendPropertyChanging
				Me._MessageSendText = value
				Me.SendPropertyChanged("MessageSendText")
				Me.OnMessageSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryEmailAddresses", DbType:="VarChar(MAX)")>  _
	Public Property DeliveryEmailAddresses() As String
		Get
			Return Me._DeliveryEmailAddresses
		End Get
		Set
			If (String.Equals(Me._DeliveryEmailAddresses, value) = false) Then
				Me.OnDeliveryEmailAddressesChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryEmailAddresses = value
				Me.SendPropertyChanged("DeliveryEmailAddresses")
				Me.OnDeliveryEmailAddressesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryTexts", DbType:="VarChar(MAX)")>  _
	Public Property DeliveryTexts() As String
		Get
			Return Me._DeliveryTexts
		End Get
		Set
			If (String.Equals(Me._DeliveryTexts, value) = false) Then
				Me.OnDeliveryTextsChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryTexts = value
				Me.SendPropertyChanged("DeliveryTexts")
				Me.OnDeliveryTextsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveryGroups", DbType:="VarChar(1000)")>  _
	Public Property DeliveryGroups() As String
		Get
			Return Me._DeliveryGroups
		End Get
		Set
			If (String.Equals(Me._DeliveryGroups, value) = false) Then
				Me.OnDeliveryGroupsChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryGroups = value
				Me.SendPropertyChanged("DeliveryGroups")
				Me.OnDeliveryGroupsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageSent", DbType:="Date")>  _
	Public Property MessageSent() As System.Nullable(Of Date)
		Get
			Return Me._MessageSent
		End Get
		Set
			If (Me._MessageSent.Equals(value) = false) Then
				Me.OnMessageSentChanging(value)
				Me.SendPropertyChanging
				Me._MessageSent = value
				Me.SendPropertyChanged("MessageSent")
				Me.OnMessageSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlertTypeID", DbType:="UniqueIdentifier")>  _
	Public Property AlertTypeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._AlertTypeID
		End Get
		Set
			If (Me._AlertTypeID.Equals(value) = false) Then
				Me.OnAlertTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AlertTypeID = value
				Me.SendPropertyChanged("AlertTypeID")
				Me.OnAlertTypeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollission")>  _
Partial Public Class GeoFenceDeviceCollission
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GeoFenceDeviceCollissionID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollissionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeoFenceDeviceCollissionIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationGeoFenceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GeoFenceDeviceCollissionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollissionID = value)  _
						= false) Then
				Me.OnGeoFenceDeviceCollissionIDChanging(value)
				Me.SendPropertyChanging
				Me._GeoFenceDeviceCollissionID = value
				Me.SendPropertyChanged("GeoFenceDeviceCollissionID")
				Me.OnGeoFenceDeviceCollissionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me.OnDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DeviceID = value
				Me.SendPropertyChanged("DeviceID")
				Me.OnDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me.OnApplicationGeoFenceIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationGeoFenceID = value
				Me.SendPropertyChanged("ApplicationGeoFenceID")
				Me.OnApplicationGeoFenceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeoFenceDeviceCollission_20160604")>  _
Partial Public Class GeoFenceDeviceCollission_20160604
	
	Private _GeoFenceDeviceCollissionID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceDeviceCollissionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollissionID = value)  _
						= false) Then
				Me._GeoFenceDeviceCollissionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Group]")>  _
Partial Public Class [Group]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupID As System.Guid
	
	Private _GroupName As String
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GroupID() As System.Guid
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(200)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[GroupMember.old]")>  _
Partial Public Class GroupMember_old
	
	Private _GroupMemberID As System.Guid
	
	Private _GroupID As System.Guid
	
	Private _MemberType As Integer
	
	Private _MemberID As System.Guid
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupMemberID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupMemberID() As System.Guid
		Get
			Return Me._GroupMemberID
		End Get
		Set
			If ((Me._GroupMemberID = value)  _
						= false) Then
				Me._GroupMemberID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupID() As System.Guid
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me._GroupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberType", DbType:="Int NOT NULL")>  _
	Public Property MemberType() As Integer
		Get
			Return Me._MemberType
		End Get
		Set
			If ((Me._MemberType = value)  _
						= false) Then
				Me._MemberType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property MemberID() As System.Guid
		Get
			Return Me._MemberID
		End Get
		Set
			If ((Me._MemberID = value)  _
						= false) Then
				Me._MemberID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GroupSubscriber")>  _
Partial Public Class GroupSubscriber
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupSubscriberID As System.Guid
	
	Private _GroupID As System.Guid
	
	Private _SubsciberTypeID As Integer
	
	Private _SendEmail As System.Nullable(Of Boolean)
	
	Private _SendText As System.Nullable(Of Boolean)
	
	Private _NativeID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupSubscriberIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupSubscriberIDChanged()
    End Sub
    Partial Private Sub OnGroupIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIDChanged()
    End Sub
    Partial Private Sub OnSubsciberTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubsciberTypeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNativeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubscriberID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GroupSubscriberID() As System.Guid
		Get
			Return Me._GroupSubscriberID
		End Get
		Set
			If ((Me._GroupSubscriberID = value)  _
						= false) Then
				Me.OnGroupSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubscriberID = value
				Me.SendPropertyChanged("GroupSubscriberID")
				Me.OnGroupSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupID() As System.Guid
		Get
			Return Me._GroupID
		End Get
		Set
			If ((Me._GroupID = value)  _
						= false) Then
				Me.OnGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupID = value
				Me.SendPropertyChanged("GroupID")
				Me.OnGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsciberTypeID", DbType:="Int NOT NULL")>  _
	Public Property SubsciberTypeID() As Integer
		Get
			Return Me._SubsciberTypeID
		End Get
		Set
			If ((Me._SubsciberTypeID = value)  _
						= false) Then
				Me.OnSubsciberTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubsciberTypeID = value
				Me.SendPropertyChanged("SubsciberTypeID")
				Me.OnSubsciberTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit")>  _
	Public Property SendEmail() As System.Nullable(Of Boolean)
		Get
			Return Me._SendEmail
		End Get
		Set
			If (Me._SendEmail.Equals(value) = false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit")>  _
	Public Property SendText() As System.Nullable(Of Boolean)
		Get
			Return Me._SendText
		End Get
		Set
			If (Me._SendText.Equals(value) = false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NativeID() As System.Guid
		Get
			Return Me._NativeID
		End Get
		Set
			If ((Me._NativeID = value)  _
						= false) Then
				Me.OnNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._NativeID = value
				Me.SendPropertyChanged("NativeID")
				Me.OnNativeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.j1939")>  _
Partial Public Class j1939
	
	Private _PGN As System.Nullable(Of Double)
	
	Private _Parameter_Group_Label As String
	
	Private _PGN_Length As String
	
	Private _Transmission_Rate As String
	
	Private _Acronym As String
	
	Private _pos As String
	
	Private _SPN_length As System.Nullable(Of Double)
	
	Private _SPN As System.Nullable(Of Double)
	
	Private __51_CAT_793F_Haul_Trucks As String
	
	Private __0_CAT_16M_Grader As String
	
	Private __0_Komatsu_1200_Wheel_Loaders As String
	
	Private __0_Liebherr_R9400_Excavators As String
	
	Private __0_Liebherr_R996B_Excavators As String
	
	Private __0_Atlas_Copco_PV271_Drills As String
	
	Private __0_Atlas_Copco_D65_Drills As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Data_Range As String
	
	Private _Operational_Range As String
	
	Private _Resolution As String
	
	Private _Offset As System.Nullable(Of Double)
	
	Private _Units As String
	
	Private _Date_SPN_was_added_to_PGN As System.Nullable(Of Date)
	
	Private _Status_of_SPN_addition_to_PGN As String
	
	Private _Date_SPN_was_added_modified As System.Nullable(Of Date)
	
	Private _Status_of_SPN As String
	
	Private _SPN_Doc As String
	
	Private _PGN_Doc As String
	
	Private _F29 As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>  _
	Public Property PGN() As System.Nullable(Of Double)
		Get
			Return Me._PGN
		End Get
		Set
			If (Me._PGN.Equals(value) = false) Then
				Me._PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Parameter Group Label]", Storage:="_Parameter_Group_Label", DbType:="NVarChar(255)")>  _
	Public Property Parameter_Group_Label() As String
		Get
			Return Me._Parameter_Group_Label
		End Get
		Set
			If (String.Equals(Me._Parameter_Group_Label, value) = false) Then
				Me._Parameter_Group_Label = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Length]", Storage:="_PGN_Length", DbType:="NVarChar(255)")>  _
	Public Property PGN_Length() As String
		Get
			Return Me._PGN_Length
		End Get
		Set
			If (String.Equals(Me._PGN_Length, value) = false) Then
				Me._PGN_Length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Transmission Rate]", Storage:="_Transmission_Rate", DbType:="NVarChar(255)")>  _
	Public Property Transmission_Rate() As String
		Get
			Return Me._Transmission_Rate
		End Get
		Set
			If (String.Equals(Me._Transmission_Rate, value) = false) Then
				Me._Transmission_Rate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acronym", DbType:="NVarChar(255)")>  _
	Public Property Acronym() As String
		Get
			Return Me._Acronym
		End Get
		Set
			If (String.Equals(Me._Acronym, value) = false) Then
				Me._Acronym = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pos", DbType:="NVarChar(255)")>  _
	Public Property pos() As String
		Get
			Return Me._pos
		End Get
		Set
			If (String.Equals(Me._pos, value) = false) Then
				Me._pos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN length]", Storage:="_SPN_length", DbType:="Float")>  _
	Public Property SPN_length() As System.Nullable(Of Double)
		Get
			Return Me._SPN_length
		End Get
		Set
			If (Me._SPN_length.Equals(value) = false) Then
				Me._SPN_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>  _
	Public Property SPN() As System.Nullable(Of Double)
		Get
			Return Me._SPN
		End Get
		Set
			If (Me._SPN.Equals(value) = false) Then
				Me._SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[51 CAT 793F Haul Trucks]", Storage:="__51_CAT_793F_Haul_Trucks", DbType:="NVarChar(255)")>  _
	Public Property _51_CAT_793F_Haul_Trucks() As String
		Get
			Return Me.__51_CAT_793F_Haul_Trucks
		End Get
		Set
			If (String.Equals(Me.__51_CAT_793F_Haul_Trucks, value) = false) Then
				Me.__51_CAT_793F_Haul_Trucks = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 CAT 16M Grader]", Storage:="__0_CAT_16M_Grader", DbType:="NVarChar(255)")>  _
	Public Property _0_CAT_16M_Grader() As String
		Get
			Return Me.__0_CAT_16M_Grader
		End Get
		Set
			If (String.Equals(Me.__0_CAT_16M_Grader, value) = false) Then
				Me.__0_CAT_16M_Grader = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Komatsu 1200 Wheel Loaders]", Storage:="__0_Komatsu_1200_Wheel_Loaders", DbType:="NVarChar(255)")>  _
	Public Property _0_Komatsu_1200_Wheel_Loaders() As String
		Get
			Return Me.__0_Komatsu_1200_Wheel_Loaders
		End Get
		Set
			If (String.Equals(Me.__0_Komatsu_1200_Wheel_Loaders, value) = false) Then
				Me.__0_Komatsu_1200_Wheel_Loaders = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R9400 Excavators]", Storage:="__0_Liebherr_R9400_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R9400_Excavators() As String
		Get
			Return Me.__0_Liebherr_R9400_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R9400_Excavators, value) = false) Then
				Me.__0_Liebherr_R9400_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Liebherr R996B Excavators]", Storage:="__0_Liebherr_R996B_Excavators", DbType:="NVarChar(255)")>  _
	Public Property _0_Liebherr_R996B_Excavators() As String
		Get
			Return Me.__0_Liebherr_R996B_Excavators
		End Get
		Set
			If (String.Equals(Me.__0_Liebherr_R996B_Excavators, value) = false) Then
				Me.__0_Liebherr_R996B_Excavators = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco PV271 Drills]", Storage:="__0_Atlas_Copco_PV271_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_PV271_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_PV271_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_PV271_Drills, value) = false) Then
				Me.__0_Atlas_Copco_PV271_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[0 Atlas Copco D65 Drills]", Storage:="__0_Atlas_Copco_D65_Drills", DbType:="NVarChar(255)")>  _
	Public Property _0_Atlas_Copco_D65_Drills() As String
		Get
			Return Me.__0_Atlas_Copco_D65_Drills
		End Get
		Set
			If (String.Equals(Me.__0_Atlas_Copco_D65_Drills, value) = false) Then
				Me.__0_Atlas_Copco_D65_Drills = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Data Range]", Storage:="_Data_Range", DbType:="NVarChar(255)")>  _
	Public Property Data_Range() As String
		Get
			Return Me._Data_Range
		End Get
		Set
			If (String.Equals(Me._Data_Range, value) = false) Then
				Me._Data_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Operational Range]", Storage:="_Operational_Range", DbType:="NVarChar(255)")>  _
	Public Property Operational_Range() As String
		Get
			Return Me._Operational_Range
		End Get
		Set
			If (String.Equals(Me._Operational_Range, value) = false) Then
				Me._Operational_Range = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolution", DbType:="NVarChar(255)")>  _
	Public Property Resolution() As String
		Get
			Return Me._Resolution
		End Get
		Set
			If (String.Equals(Me._Resolution, value) = false) Then
				Me._Resolution = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offset", DbType:="Float")>  _
	Public Property Offset() As System.Nullable(Of Double)
		Get
			Return Me._Offset
		End Get
		Set
			If (Me._Offset.Equals(value) = false) Then
				Me._Offset = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units", DbType:="NVarChar(255)")>  _
	Public Property Units() As String
		Get
			Return Me._Units
		End Get
		Set
			If (String.Equals(Me._Units, value) = false) Then
				Me._Units = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added to PGN]", Storage:="_Date_SPN_was_added_to_PGN", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_to_PGN() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_to_PGN
		End Get
		Set
			If (Me._Date_SPN_was_added_to_PGN.Equals(value) = false) Then
				Me._Date_SPN_was_added_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN addition to PGN]", Storage:="_Status_of_SPN_addition_to_PGN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN_addition_to_PGN() As String
		Get
			Return Me._Status_of_SPN_addition_to_PGN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN_addition_to_PGN, value) = false) Then
				Me._Status_of_SPN_addition_to_PGN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Date SPN was added/modified]", Storage:="_Date_SPN_was_added_modified", DbType:="DateTime")>  _
	Public Property Date_SPN_was_added_modified() As System.Nullable(Of Date)
		Get
			Return Me._Date_SPN_was_added_modified
		End Get
		Set
			If (Me._Date_SPN_was_added_modified.Equals(value) = false) Then
				Me._Date_SPN_was_added_modified = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Status of SPN]", Storage:="_Status_of_SPN", DbType:="NVarChar(255)")>  _
	Public Property Status_of_SPN() As String
		Get
			Return Me._Status_of_SPN
		End Get
		Set
			If (String.Equals(Me._Status_of_SPN, value) = false) Then
				Me._Status_of_SPN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[SPN Doc]", Storage:="_SPN_Doc", DbType:="NVarChar(255)")>  _
	Public Property SPN_Doc() As String
		Get
			Return Me._SPN_Doc
		End Get
		Set
			If (String.Equals(Me._SPN_Doc, value) = false) Then
				Me._SPN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PGN Doc]", Storage:="_PGN_Doc", DbType:="NVarChar(255)")>  _
	Public Property PGN_Doc() As String
		Get
			Return Me._PGN_Doc
		End Get
		Set
			If (String.Equals(Me._PGN_Doc, value) = false) Then
				Me._PGN_Doc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_F29", DbType:="NVarChar(255)")>  _
	Public Property F29() As String
		Get
			Return Me._F29
		End Get
		Set
			If (String.Equals(Me._F29, value) = false) Then
				Me._F29 = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaidFeatures")>  _
Partial Public Class PaidFeature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationPaidFeaturesID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _PaidFeatureDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationPaidFeaturesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationPaidFeaturesIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnPaidFeatureDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPaidFeatureDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPaidFeaturesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationPaidFeaturesID() As System.Guid
		Get
			Return Me._ApplicationPaidFeaturesID
		End Get
		Set
			If ((Me._ApplicationPaidFeaturesID = value)  _
						= false) Then
				Me.OnApplicationPaidFeaturesIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationPaidFeaturesID = value
				Me.SendPropertyChanged("ApplicationPaidFeaturesID")
				Me.OnApplicationPaidFeaturesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaidFeatureDescription", DbType:="NVarChar(MAX)")>  _
	Public Property PaidFeatureDescription() As String
		Get
			Return Me._PaidFeatureDescription
		End Get
		Set
			If (String.Equals(Me._PaidFeatureDescription, value) = false) Then
				Me.OnPaidFeatureDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PaidFeatureDescription = value
				Me.SendPropertyChanged("PaidFeatureDescription")
				Me.OnPaidFeatureDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Setting")>  _
Partial Public Class Setting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SettingID As System.Guid
	
	Private _Name As String
	
	Private _ApplicationSettingValues As EntitySet(Of ApplicationSettingValue)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationSettingValues = New EntitySet(Of ApplicationSettingValue)(AddressOf Me.attach_ApplicationSettingValues, AddressOf Me.detach_ApplicationSettingValues)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SettingID() As System.Guid
		Get
			Return Me._SettingID
		End Get
		Set
			If ((Me._SettingID = value)  _
						= false) Then
				Me.OnSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SettingID = value
				Me.SendPropertyChanged("SettingID")
				Me.OnSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Setting_ApplicationSettingValue", Storage:="_ApplicationSettingValues", ThisKey:="SettingID", OtherKey:="SettingID")>  _
	Public Property ApplicationSettingValues() As EntitySet(Of ApplicationSettingValue)
		Get
			Return Me._ApplicationSettingValues
		End Get
		Set
			Me._ApplicationSettingValues.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.Setting = Me
	End Sub
	
	Private Sub detach_ApplicationSettingValues(ByVal entity As ApplicationSettingValue)
		Me.SendPropertyChanging
		entity.Setting = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SimulatorSetting")>  _
Partial Public Class SimulatorSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SimulatorSettingID As System.Guid
	
	Private _SourceDeviceID As String
	
	Private _StartTime As Date
	
	Private _EndTime As Date
	
	Private _DestinationDeviceID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSimulatorSettingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSimulatorSettingIDChanged()
    End Sub
    Partial Private Sub OnSourceDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnSourceDeviceIDChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnDestinationDeviceIDChanging(value As String)
    End Sub
    Partial Private Sub OnDestinationDeviceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SimulatorSettingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SimulatorSettingID() As System.Guid
		Get
			Return Me._SimulatorSettingID
		End Get
		Set
			If ((Me._SimulatorSettingID = value)  _
						= false) Then
				Me.OnSimulatorSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SimulatorSettingID = value
				Me.SendPropertyChanged("SimulatorSettingID")
				Me.OnSimulatorSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDeviceID", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property SourceDeviceID() As String
		Get
			Return Me._SourceDeviceID
		End Get
		Set
			If (String.Equals(Me._SourceDeviceID, value) = false) Then
				Me.OnSourceDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._SourceDeviceID = value
				Me.SendPropertyChanged("SourceDeviceID")
				Me.OnSourceDeviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime NOT NULL")>  _
	Public Property StartTime() As Date
		Get
			Return Me._StartTime
		End Get
		Set
			If ((Me._StartTime = value)  _
						= false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime NOT NULL")>  _
	Public Property EndTime() As Date
		Get
			Return Me._EndTime
		End Get
		Set
			If ((Me._EndTime = value)  _
						= false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DestinationDeviceID", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DestinationDeviceID() As String
		Get
			Return Me._DestinationDeviceID
		End Get
		Set
			If (String.Equals(Me._DestinationDeviceID, value) = false) Then
				Me.OnDestinationDeviceIDChanging(value)
				Me.SendPropertyChanging
				Me._DestinationDeviceID = value
				Me.SendPropertyChanged("DestinationDeviceID")
				Me.OnDestinationDeviceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WebServiceLog")>  _
Partial Public Class WebServiceLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WebServiceLog As Integer
	
	Private _RequestMethod As String
	
	Private _login As String
	
	Private _XMLRequest As String
	
	Private _company As String
	
	Private _XMLResponse As String
	
	Private _DateLogged As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWebServiceLogChanging(value As Integer)
    End Sub
    Partial Private Sub OnWebServiceLogChanged()
    End Sub
    Partial Private Sub OnRequestMethodChanging(value As String)
    End Sub
    Partial Private Sub OnRequestMethodChanged()
    End Sub
    Partial Private Sub OnloginChanging(value As String)
    End Sub
    Partial Private Sub OnloginChanged()
    End Sub
    Partial Private Sub OnXMLRequestChanging(value As String)
    End Sub
    Partial Private Sub OnXMLRequestChanged()
    End Sub
    Partial Private Sub OncompanyChanging(value As String)
    End Sub
    Partial Private Sub OncompanyChanged()
    End Sub
    Partial Private Sub OnXMLResponseChanging(value As String)
    End Sub
    Partial Private Sub OnXMLResponseChanged()
    End Sub
    Partial Private Sub OnDateLoggedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateLoggedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebServiceLog", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WebServiceLog() As Integer
		Get
			Return Me._WebServiceLog
		End Get
		Set
			If ((Me._WebServiceLog = value)  _
						= false) Then
				Me.OnWebServiceLogChanging(value)
				Me.SendPropertyChanging
				Me._WebServiceLog = value
				Me.SendPropertyChanged("WebServiceLog")
				Me.OnWebServiceLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestMethod", DbType:="NVarChar(200)")>  _
	Public Property RequestMethod() As String
		Get
			Return Me._RequestMethod
		End Get
		Set
			If (String.Equals(Me._RequestMethod, value) = false) Then
				Me.OnRequestMethodChanging(value)
				Me.SendPropertyChanging
				Me._RequestMethod = value
				Me.SendPropertyChanged("RequestMethod")
				Me.OnRequestMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_login", DbType:="VarChar(200)")>  _
	Public Property login() As String
		Get
			Return Me._login
		End Get
		Set
			If (String.Equals(Me._login, value) = false) Then
				Me.OnloginChanging(value)
				Me.SendPropertyChanging
				Me._login = value
				Me.SendPropertyChanged("login")
				Me.OnloginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLRequest", DbType:="VarChar(MAX)")>  _
	Public Property XMLRequest() As String
		Get
			Return Me._XMLRequest
		End Get
		Set
			If (String.Equals(Me._XMLRequest, value) = false) Then
				Me.OnXMLRequestChanging(value)
				Me.SendPropertyChanging
				Me._XMLRequest = value
				Me.SendPropertyChanged("XMLRequest")
				Me.OnXMLRequestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="VarChar(200)")>  _
	Public Property company() As String
		Get
			Return Me._company
		End Get
		Set
			If (String.Equals(Me._company, value) = false) Then
				Me.OncompanyChanging(value)
				Me.SendPropertyChanging
				Me._company = value
				Me.SendPropertyChanged("company")
				Me.OncompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLResponse", DbType:="VarChar(MAX)")>  _
	Public Property XMLResponse() As String
		Get
			Return Me._XMLResponse
		End Get
		Set
			If (String.Equals(Me._XMLResponse, value) = false) Then
				Me.OnXMLResponseChanging(value)
				Me.SendPropertyChanging
				Me._XMLResponse = value
				Me.SendPropertyChanged("XMLResponse")
				Me.OnXMLResponseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLogged", DbType:="DateTime NOT NULL")>  _
	Public Property DateLogged() As Date
		Get
			Return Me._DateLogged
		End Get
		Set
			If ((Me._DateLogged = value)  _
						= false) Then
				Me.OnDateLoggedChanging(value)
				Me.SendPropertyChanging
				Me._DateLogged = value
				Me.SendPropertyChanged("DateLogged")
				Me.OnDateLoggedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ReportSchdeule")>  _
Partial Public Class ReportSchdeule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReportScheduleID As System.Guid
	
	Private _ApplicationID As System.Guid
	
	Private _ReportName As String
	
	Private _ReportType As String
	
	Private _ReportTypeSpecific As String
	
	Private _ReportTime As System.Nullable(Of Date)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _Creator As String
	
	Private _ReportParams As String
	
	Private _SubscriberID As System.Nullable(Of System.Guid)
	
	Private _Schedule As String
	
	Private _Recipients As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReportScheduleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnReportScheduleIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnReportNameChanging(value As String)
    End Sub
    Partial Private Sub OnReportNameChanged()
    End Sub
    Partial Private Sub OnReportTypeChanging(value As String)
    End Sub
    Partial Private Sub OnReportTypeChanged()
    End Sub
    Partial Private Sub OnReportTypeSpecificChanging(value As String)
    End Sub
    Partial Private Sub OnReportTypeSpecificChanged()
    End Sub
    Partial Private Sub OnReportTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReportTimeChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnCreatorChanging(value As String)
    End Sub
    Partial Private Sub OnCreatorChanged()
    End Sub
    Partial Private Sub OnReportParamsChanging(value As String)
    End Sub
    Partial Private Sub OnReportParamsChanged()
    End Sub
    Partial Private Sub OnSubscriberIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubscriberIDChanged()
    End Sub
    Partial Private Sub OnScheduleChanging(value As String)
    End Sub
    Partial Private Sub OnScheduleChanged()
    End Sub
    Partial Private Sub OnRecipientsChanging(value As String)
    End Sub
    Partial Private Sub OnRecipientsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportScheduleID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ReportScheduleID() As System.Guid
		Get
			Return Me._ReportScheduleID
		End Get
		Set
			If ((Me._ReportScheduleID = value)  _
						= false) Then
				Me.OnReportScheduleIDChanging(value)
				Me.SendPropertyChanging
				Me._ReportScheduleID = value
				Me.SendPropertyChanged("ReportScheduleID")
				Me.OnReportScheduleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportName", DbType:="VarChar(100)")>  _
	Public Property ReportName() As String
		Get
			Return Me._ReportName
		End Get
		Set
			If (String.Equals(Me._ReportName, value) = false) Then
				Me.OnReportNameChanging(value)
				Me.SendPropertyChanging
				Me._ReportName = value
				Me.SendPropertyChanged("ReportName")
				Me.OnReportNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportType", DbType:="VarChar(100)")>  _
	Public Property ReportType() As String
		Get
			Return Me._ReportType
		End Get
		Set
			If (String.Equals(Me._ReportType, value) = false) Then
				Me.OnReportTypeChanging(value)
				Me.SendPropertyChanging
				Me._ReportType = value
				Me.SendPropertyChanged("ReportType")
				Me.OnReportTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportTypeSpecific", DbType:="VarChar(100)")>  _
	Public Property ReportTypeSpecific() As String
		Get
			Return Me._ReportTypeSpecific
		End Get
		Set
			If (String.Equals(Me._ReportTypeSpecific, value) = false) Then
				Me.OnReportTypeSpecificChanging(value)
				Me.SendPropertyChanging
				Me._ReportTypeSpecific = value
				Me.SendPropertyChanged("ReportTypeSpecific")
				Me.OnReportTypeSpecificChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportTime", DbType:="DateTime")>  _
	Public Property ReportTime() As System.Nullable(Of Date)
		Get
			Return Me._ReportTime
		End Get
		Set
			If (Me._ReportTime.Equals(value) = false) Then
				Me.OnReportTimeChanging(value)
				Me.SendPropertyChanging
				Me._ReportTime = value
				Me.SendPropertyChanged("ReportTime")
				Me.OnReportTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Creator", DbType:="VarChar(500)")>  _
	Public Property Creator() As String
		Get
			Return Me._Creator
		End Get
		Set
			If (String.Equals(Me._Creator, value) = false) Then
				Me.OnCreatorChanging(value)
				Me.SendPropertyChanging
				Me._Creator = value
				Me.SendPropertyChanged("Creator")
				Me.OnCreatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportParams", DbType:="VarChar(MAX)")>  _
	Public Property ReportParams() As String
		Get
			Return Me._ReportParams
		End Get
		Set
			If (String.Equals(Me._ReportParams, value) = false) Then
				Me.OnReportParamsChanging(value)
				Me.SendPropertyChanging
				Me._ReportParams = value
				Me.SendPropertyChanged("ReportParams")
				Me.OnReportParamsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberID", DbType:="UniqueIdentifier")>  _
	Public Property SubscriberID() As System.Nullable(Of System.Guid)
		Get
			Return Me._SubscriberID
		End Get
		Set
			If (Me._SubscriberID.Equals(value) = false) Then
				Me.OnSubscriberIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberID = value
				Me.SendPropertyChanged("SubscriberID")
				Me.OnSubscriberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Schedule", DbType:="VarChar(MAX)")>  _
	Public Property Schedule() As String
		Get
			Return Me._Schedule
		End Get
		Set
			If (String.Equals(Me._Schedule, value) = false) Then
				Me.OnScheduleChanging(value)
				Me.SendPropertyChanging
				Me._Schedule = value
				Me.SendPropertyChanged("Schedule")
				Me.OnScheduleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Recipients", DbType:="VarChar(MAX)")>  _
	Public Property Recipients() As String
		Get
			Return Me._Recipients
		End Get
		Set
			If (String.Equals(Me._Recipients, value) = false) Then
				Me.OnRecipientsChanging(value)
				Me.SendPropertyChanging
				Me._Recipients = value
				Me.SendPropertyChanged("Recipients")
				Me.OnRecipientsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationBooking")>  _
Partial Public Class ApplicationBooking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationBookingId As System.Guid
	
	Private _ApplicationDriverID As System.Guid
	
	Private _ApplicationId As System.Guid
	
	Private _ArrivalTime As System.Nullable(Of Date)
	
	Private _GeofenceLeaveId As System.Guid
	
	Private _GeofenceDestinationId As System.Guid
	
	Private _IsAlert5min As System.Nullable(Of Boolean)
	
	Private _IsAlertLeaveForPickup As System.Nullable(Of Boolean)
	
	Private _ContactID As System.Guid
	
	Private _CustomerPhone As String
	
	Private _CustomerEmail As String
	
	Private _GeofenceLeave As String
	
	Private _GeofenceDestination As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _ApplicationDriver As EntityRef(Of ApplicationDriver)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationBookingIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationBookingIdChanged()
    End Sub
    Partial Private Sub OnApplicationDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationDriverIDChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnArrivalTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnArrivalTimeChanged()
    End Sub
    Partial Private Sub OnGeofenceLeaveIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeofenceLeaveIdChanged()
    End Sub
    Partial Private Sub OnGeofenceDestinationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGeofenceDestinationIdChanged()
    End Sub
    Partial Private Sub OnIsAlert5minChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlert5minChanged()
    End Sub
    Partial Private Sub OnIsAlertLeaveForPickupChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAlertLeaveForPickupChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnCustomerPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPhoneChanged()
    End Sub
    Partial Private Sub OnCustomerEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerEmailChanged()
    End Sub
    Partial Private Sub OnGeofenceLeaveChanging(value As String)
    End Sub
    Partial Private Sub OnGeofenceLeaveChanged()
    End Sub
    Partial Private Sub OnGeofenceDestinationChanging(value As String)
    End Sub
    Partial Private Sub OnGeofenceDestinationChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationDriver = CType(Nothing, EntityRef(Of ApplicationDriver))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationBookingId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationBookingId() As System.Guid
		Get
			Return Me._ApplicationBookingId
		End Get
		Set
			If ((Me._ApplicationBookingId = value)  _
						= false) Then
				Me.OnApplicationBookingIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationBookingId = value
				Me.SendPropertyChanged("ApplicationBookingId")
				Me.OnApplicationBookingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationDriverID() As System.Guid
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If ((Me._ApplicationDriverID = value)  _
						= false) Then
				If Me._ApplicationDriver.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDriverID = value
				Me.SendPropertyChanged("ApplicationDriverID")
				Me.OnApplicationDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArrivalTime", DbType:="DateTime")>  _
	Public Property ArrivalTime() As System.Nullable(Of Date)
		Get
			Return Me._ArrivalTime
		End Get
		Set
			If (Me._ArrivalTime.Equals(value) = false) Then
				Me.OnArrivalTimeChanging(value)
				Me.SendPropertyChanging
				Me._ArrivalTime = value
				Me.SendPropertyChanged("ArrivalTime")
				Me.OnArrivalTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeaveId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceLeaveId() As System.Guid
		Get
			Return Me._GeofenceLeaveId
		End Get
		Set
			If ((Me._GeofenceLeaveId = value)  _
						= false) Then
				Me.OnGeofenceLeaveIdChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceLeaveId = value
				Me.SendPropertyChanged("GeofenceLeaveId")
				Me.OnGeofenceLeaveIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestinationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeofenceDestinationId() As System.Guid
		Get
			Return Me._GeofenceDestinationId
		End Get
		Set
			If ((Me._GeofenceDestinationId = value)  _
						= false) Then
				Me.OnGeofenceDestinationIdChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceDestinationId = value
				Me.SendPropertyChanged("GeofenceDestinationId")
				Me.OnGeofenceDestinationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlert5min", DbType:="Bit")>  _
	Public Property IsAlert5min() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlert5min
		End Get
		Set
			If (Me._IsAlert5min.Equals(value) = false) Then
				Me.OnIsAlert5minChanging(value)
				Me.SendPropertyChanging
				Me._IsAlert5min = value
				Me.SendPropertyChanged("IsAlert5min")
				Me.OnIsAlert5minChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAlertLeaveForPickup", DbType:="Bit")>  _
	Public Property IsAlertLeaveForPickup() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAlertLeaveForPickup
		End Get
		Set
			If (Me._IsAlertLeaveForPickup.Equals(value) = false) Then
				Me.OnIsAlertLeaveForPickupChanging(value)
				Me.SendPropertyChanging
				Me._IsAlertLeaveForPickup = value
				Me.SendPropertyChanged("IsAlertLeaveForPickup")
				Me.OnIsAlertLeaveForPickupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ContactID() As System.Guid
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me.OnCustomerPhoneChanging(value)
				Me.SendPropertyChanging
				Me._CustomerPhone = value
				Me.SendPropertyChanged("CustomerPhone")
				Me.OnCustomerPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerEmail() As String
		Get
			Return Me._CustomerEmail
		End Get
		Set
			If (String.Equals(Me._CustomerEmail, value) = false) Then
				Me.OnCustomerEmailChanging(value)
				Me.SendPropertyChanging
				Me._CustomerEmail = value
				Me.SendPropertyChanged("CustomerEmail")
				Me.OnCustomerEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceLeave", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceLeave() As String
		Get
			Return Me._GeofenceLeave
		End Get
		Set
			If (String.Equals(Me._GeofenceLeave, value) = false) Then
				Me.OnGeofenceLeaveChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceLeave = value
				Me.SendPropertyChanged("GeofenceLeave")
				Me.OnGeofenceLeaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeofenceDestination", DbType:="NVarChar(MAX)")>  _
	Public Property GeofenceDestination() As String
		Get
			Return Me._GeofenceDestination
		End Get
		Set
			If (String.Equals(Me._GeofenceDestination, value) = false) Then
				Me.OnGeofenceDestinationChanging(value)
				Me.SendPropertyChanging
				Me._GeofenceDestination = value
				Me.SendPropertyChanged("GeofenceDestination")
				Me.OnGeofenceDestinationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationDriver_ApplicationBooking", Storage:="_ApplicationDriver", ThisKey:="ApplicationDriverID", OtherKey:="ApplicationDriverID", IsForeignKey:=true)>  _
	Public Property ApplicationDriver() As ApplicationDriver
		Get
			Return Me._ApplicationDriver.Entity
		End Get
		Set
			Dim previousValue As ApplicationDriver = Me._ApplicationDriver.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationDriver.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationDriver.Entity = Nothing
					previousValue.ApplicationBookings.Remove(Me)
				End If
				Me._ApplicationDriver.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationBookings.Add(Me)
					Me._ApplicationDriverID = value.ApplicationDriverID
				Else
					Me._ApplicationDriverID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("ApplicationDriver")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_EventDefinition")>  _
Partial Public Class CAN_EventDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CAN_EventDefinitionID As System.Guid
	
	Private _Standard As String
	
	Private _PGN As System.Nullable(Of Double)
	
	Private _SPN As System.Nullable(Of Double)
	
	Private _TriggerConditoinQualifier As String
	
	Private _TriggerConditionText As String
	
	Private _LastDateChecked As System.Nullable(Of Date)
	
	Private _deleted As Boolean
	
	Private _VehicleID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanged()
    End Sub
    Partial Private Sub OnStandardChanging(value As String)
    End Sub
    Partial Private Sub OnStandardChanged()
    End Sub
    Partial Private Sub OnPGNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPGNChanged()
    End Sub
    Partial Private Sub OnSPNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSPNChanged()
    End Sub
    Partial Private Sub OnTriggerConditoinQualifierChanging(value As String)
    End Sub
    Partial Private Sub OnTriggerConditoinQualifierChanged()
    End Sub
    Partial Private Sub OnTriggerConditionTextChanging(value As String)
    End Sub
    Partial Private Sub OnTriggerConditionTextChanged()
    End Sub
    Partial Private Sub OnLastDateCheckedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastDateCheckedChanged()
    End Sub
    Partial Private Sub OndeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OndeletedChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As String)
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventDefinitionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CAN_EventDefinitionID() As System.Guid
		Get
			Return Me._CAN_EventDefinitionID
		End Get
		Set
			If ((Me._CAN_EventDefinitionID = value)  _
						= false) Then
				Me.OnCAN_EventDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_EventDefinitionID = value
				Me.SendPropertyChanged("CAN_EventDefinitionID")
				Me.OnCAN_EventDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>  _
	Public Property Standard() As String
		Get
			Return Me._Standard
		End Get
		Set
			If (String.Equals(Me._Standard, value) = false) Then
				Me.OnStandardChanging(value)
				Me.SendPropertyChanging
				Me._Standard = value
				Me.SendPropertyChanged("Standard")
				Me.OnStandardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>  _
	Public Property PGN() As System.Nullable(Of Double)
		Get
			Return Me._PGN
		End Get
		Set
			If (Me._PGN.Equals(value) = false) Then
				Me.OnPGNChanging(value)
				Me.SendPropertyChanging
				Me._PGN = value
				Me.SendPropertyChanged("PGN")
				Me.OnPGNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>  _
	Public Property SPN() As System.Nullable(Of Double)
		Get
			Return Me._SPN
		End Get
		Set
			If (Me._SPN.Equals(value) = false) Then
				Me.OnSPNChanging(value)
				Me.SendPropertyChanging
				Me._SPN = value
				Me.SendPropertyChanged("SPN")
				Me.OnSPNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriggerConditoinQualifier", DbType:="NChar(1000)")>  _
	Public Property TriggerConditoinQualifier() As String
		Get
			Return Me._TriggerConditoinQualifier
		End Get
		Set
			If (String.Equals(Me._TriggerConditoinQualifier, value) = false) Then
				Me.OnTriggerConditoinQualifierChanging(value)
				Me.SendPropertyChanging
				Me._TriggerConditoinQualifier = value
				Me.SendPropertyChanged("TriggerConditoinQualifier")
				Me.OnTriggerConditoinQualifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriggerConditionText", DbType:="NChar(10)")>  _
	Public Property TriggerConditionText() As String
		Get
			Return Me._TriggerConditionText
		End Get
		Set
			If (String.Equals(Me._TriggerConditionText, value) = false) Then
				Me.OnTriggerConditionTextChanging(value)
				Me.SendPropertyChanging
				Me._TriggerConditionText = value
				Me.SendPropertyChanged("TriggerConditionText")
				Me.OnTriggerConditionTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastDateChecked", DbType:="Date")>  _
	Public Property LastDateChecked() As System.Nullable(Of Date)
		Get
			Return Me._LastDateChecked
		End Get
		Set
			If (Me._LastDateChecked.Equals(value) = false) Then
				Me.OnLastDateCheckedChanging(value)
				Me.SendPropertyChanging
				Me._LastDateChecked = value
				Me.SendPropertyChanged("LastDateChecked")
				Me.OnLastDateCheckedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deleted", DbType:="Bit NOT NULL")>  _
	Public Property deleted() As Boolean
		Get
			Return Me._deleted
		End Get
		Set
			If ((Me._deleted = value)  _
						= false) Then
				Me.OndeletedChanging(value)
				Me.SendPropertyChanging
				Me._deleted = value
				Me.SendPropertyChanged("deleted")
				Me.OndeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="NVarChar(50)")>  _
	Public Property VehicleID() As String
		Get
			Return Me._VehicleID
		End Get
		Set
			If (String.Equals(Me._VehicleID, value) = false) Then
				Me.OnVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._VehicleID = value
				Me.SendPropertyChanged("VehicleID")
				Me.OnVehicleIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_AlertDefinition")>  _
Partial Public Class CAN_AlertDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CAN_AlertDefinitionID As System.Guid
	
	Private _CAN_EventDefinitionID As System.Guid
	
	Private _SubscriberNativeID As System.Guid
	
	Private _SendEmail As Boolean
	
	Private _SendText As Boolean
	
	Private _TimePeriod As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionIDChanged()
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanged()
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubscriberNativeIDChanged()
    End Sub
    Partial Private Sub OnSendEmailChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSendEmailChanged()
    End Sub
    Partial Private Sub OnSendTextChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSendTextChanged()
    End Sub
    Partial Private Sub OnTimePeriodChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTimePeriodChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_AlertDefinitionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CAN_AlertDefinitionID() As System.Guid
		Get
			Return Me._CAN_AlertDefinitionID
		End Get
		Set
			If ((Me._CAN_AlertDefinitionID = value)  _
						= false) Then
				Me.OnCAN_AlertDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_AlertDefinitionID = value
				Me.SendPropertyChanged("CAN_AlertDefinitionID")
				Me.OnCAN_AlertDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventDefinitionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CAN_EventDefinitionID() As System.Guid
		Get
			Return Me._CAN_EventDefinitionID
		End Get
		Set
			If ((Me._CAN_EventDefinitionID = value)  _
						= false) Then
				Me.OnCAN_EventDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_EventDefinitionID = value
				Me.SendPropertyChanged("CAN_EventDefinitionID")
				Me.OnCAN_EventDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubscriberNativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SubscriberNativeID() As System.Guid
		Get
			Return Me._SubscriberNativeID
		End Get
		Set
			If ((Me._SubscriberNativeID = value)  _
						= false) Then
				Me.OnSubscriberNativeIDChanging(value)
				Me.SendPropertyChanging
				Me._SubscriberNativeID = value
				Me.SendPropertyChanged("SubscriberNativeID")
				Me.OnSubscriberNativeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendEmail", DbType:="Bit NOT NULL")>  _
	Public Property SendEmail() As Boolean
		Get
			Return Me._SendEmail
		End Get
		Set
			If ((Me._SendEmail = value)  _
						= false) Then
				Me.OnSendEmailChanging(value)
				Me.SendPropertyChanging
				Me._SendEmail = value
				Me.SendPropertyChanged("SendEmail")
				Me.OnSendEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SendText", DbType:="Bit NOT NULL")>  _
	Public Property SendText() As Boolean
		Get
			Return Me._SendText
		End Get
		Set
			If ((Me._SendText = value)  _
						= false) Then
				Me.OnSendTextChanging(value)
				Me.SendPropertyChanging
				Me._SendText = value
				Me.SendPropertyChanged("SendText")
				Me.OnSendTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimePeriod", DbType:="DateTime")>  _
	Public Property TimePeriod() As System.Nullable(Of Date)
		Get
			Return Me._TimePeriod
		End Get
		Set
			If (Me._TimePeriod.Equals(value) = false) Then
				Me.OnTimePeriodChanging(value)
				Me.SendPropertyChanging
				Me._TimePeriod = value
				Me.SendPropertyChanged("TimePeriod")
				Me.OnTimePeriodChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_EventOccuranceAlert")>  _
Partial Public Class CAN_EventOccuranceAlert
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CAN_EventOccuranceAlertID As System.Guid
	
	Private _CAN_EventOccuranceID As System.Guid
	
	Private _CAN_AlertDefinition As System.Guid
	
	Private _SentDate As System.Nullable(Of Date)
	
	Private _MessageContent As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_EventOccuranceAlertIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventOccuranceAlertIDChanged()
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanged()
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_AlertDefinitionChanged()
    End Sub
    Partial Private Sub OnSentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSentDateChanged()
    End Sub
    Partial Private Sub OnMessageContentChanging(value As String)
    End Sub
    Partial Private Sub OnMessageContentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventOccuranceAlertID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CAN_EventOccuranceAlertID() As System.Guid
		Get
			Return Me._CAN_EventOccuranceAlertID
		End Get
		Set
			If ((Me._CAN_EventOccuranceAlertID = value)  _
						= false) Then
				Me.OnCAN_EventOccuranceAlertIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_EventOccuranceAlertID = value
				Me.SendPropertyChanged("CAN_EventOccuranceAlertID")
				Me.OnCAN_EventOccuranceAlertIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventOccuranceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CAN_EventOccuranceID() As System.Guid
		Get
			Return Me._CAN_EventOccuranceID
		End Get
		Set
			If ((Me._CAN_EventOccuranceID = value)  _
						= false) Then
				Me.OnCAN_EventOccuranceIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_EventOccuranceID = value
				Me.SendPropertyChanged("CAN_EventOccuranceID")
				Me.OnCAN_EventOccuranceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_AlertDefinition", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CAN_AlertDefinition() As System.Guid
		Get
			Return Me._CAN_AlertDefinition
		End Get
		Set
			If ((Me._CAN_AlertDefinition = value)  _
						= false) Then
				Me.OnCAN_AlertDefinitionChanging(value)
				Me.SendPropertyChanging
				Me._CAN_AlertDefinition = value
				Me.SendPropertyChanged("CAN_AlertDefinition")
				Me.OnCAN_AlertDefinitionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SentDate", DbType:="DateTime")>  _
	Public Property SentDate() As System.Nullable(Of Date)
		Get
			Return Me._SentDate
		End Get
		Set
			If (Me._SentDate.Equals(value) = false) Then
				Me.OnSentDateChanging(value)
				Me.SendPropertyChanging
				Me._SentDate = value
				Me.SendPropertyChanged("SentDate")
				Me.OnSentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>  _
	Public Property MessageContent() As String
		Get
			Return Me._MessageContent
		End Get
		Set
			If (String.Equals(Me._MessageContent, value) = false) Then
				Me.OnMessageContentChanging(value)
				Me.SendPropertyChanging
				Me._MessageContent = value
				Me.SendPropertyChanged("MessageContent")
				Me.OnMessageContentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CanBusLogs")>  _
Partial Public Class CanBusLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CanLogId As System.Guid
	
	Private _DeviceId As String
	
	Private _PGN As System.Nullable(Of Double)
	
	Private _SPN As System.Nullable(Of Double)
	
	Private _Standard As String
	
	Private _DateLog As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCanLogIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCanLogIdChanged()
    End Sub
    Partial Private Sub OnDeviceIdChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceIdChanged()
    End Sub
    Partial Private Sub OnPGNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPGNChanged()
    End Sub
    Partial Private Sub OnSPNChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSPNChanged()
    End Sub
    Partial Private Sub OnStandardChanging(value As String)
    End Sub
    Partial Private Sub OnStandardChanged()
    End Sub
    Partial Private Sub OnDateLogChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateLogChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanLogId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CanLogId() As System.Guid
		Get
			Return Me._CanLogId
		End Get
		Set
			If ((Me._CanLogId = value)  _
						= false) Then
				Me.OnCanLogIdChanging(value)
				Me.SendPropertyChanging
				Me._CanLogId = value
				Me.SendPropertyChanged("CanLogId")
				Me.OnCanLogIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceId", DbType:="VarChar(10)")>  _
	Public Property DeviceId() As String
		Get
			Return Me._DeviceId
		End Get
		Set
			If (String.Equals(Me._DeviceId, value) = false) Then
				Me.OnDeviceIdChanging(value)
				Me.SendPropertyChanging
				Me._DeviceId = value
				Me.SendPropertyChanged("DeviceId")
				Me.OnDeviceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PGN", DbType:="Float")>  _
	Public Property PGN() As System.Nullable(Of Double)
		Get
			Return Me._PGN
		End Get
		Set
			If (Me._PGN.Equals(value) = false) Then
				Me.OnPGNChanging(value)
				Me.SendPropertyChanging
				Me._PGN = value
				Me.SendPropertyChanged("PGN")
				Me.OnPGNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPN", DbType:="Float")>  _
	Public Property SPN() As System.Nullable(Of Double)
		Get
			Return Me._SPN
		End Get
		Set
			If (Me._SPN.Equals(value) = false) Then
				Me.OnSPNChanging(value)
				Me.SendPropertyChanging
				Me._SPN = value
				Me.SendPropertyChanged("SPN")
				Me.OnSPNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="NVarChar(255)")>  _
	Public Property Standard() As String
		Get
			Return Me._Standard
		End Get
		Set
			If (String.Equals(Me._Standard, value) = false) Then
				Me.OnStandardChanging(value)
				Me.SendPropertyChanging
				Me._Standard = value
				Me.SendPropertyChanged("Standard")
				Me.OnStandardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLog", DbType:="DateTime")>  _
	Public Property DateLog() As System.Nullable(Of Date)
		Get
			Return Me._DateLog
		End Get
		Set
			If (Me._DateLog.Equals(value) = false) Then
				Me.OnDateLogChanging(value)
				Me.SendPropertyChanging
				Me._DateLog = value
				Me.SendPropertyChanged("DateLog")
				Me.OnDateLogChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CAN_EventOccurance")>  _
Partial Public Class CAN_EventOccurance
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CAN_EventOccuranceID As System.Guid
	
	Private _CAN_EventDefinitionID As System.Guid
	
	Private _TriggerCondition As String
	
	Private _OccuredDate As System.Nullable(Of Date)
	
	Private _FinishedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventOccuranceIDChanged()
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCAN_EventDefinitionIDChanged()
    End Sub
    Partial Private Sub OnTriggerConditionChanging(value As String)
    End Sub
    Partial Private Sub OnTriggerConditionChanged()
    End Sub
    Partial Private Sub OnOccuredDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOccuredDateChanged()
    End Sub
    Partial Private Sub OnFinishedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFinishedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventOccuranceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CAN_EventOccuranceID() As System.Guid
		Get
			Return Me._CAN_EventOccuranceID
		End Get
		Set
			If ((Me._CAN_EventOccuranceID = value)  _
						= false) Then
				Me.OnCAN_EventOccuranceIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_EventOccuranceID = value
				Me.SendPropertyChanged("CAN_EventOccuranceID")
				Me.OnCAN_EventOccuranceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAN_EventDefinitionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CAN_EventDefinitionID() As System.Guid
		Get
			Return Me._CAN_EventDefinitionID
		End Get
		Set
			If ((Me._CAN_EventDefinitionID = value)  _
						= false) Then
				Me.OnCAN_EventDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CAN_EventDefinitionID = value
				Me.SendPropertyChanged("CAN_EventDefinitionID")
				Me.OnCAN_EventDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriggerCondition", DbType:="NChar(10)")>  _
	Public Property TriggerCondition() As String
		Get
			Return Me._TriggerCondition
		End Get
		Set
			If (String.Equals(Me._TriggerCondition, value) = false) Then
				Me.OnTriggerConditionChanging(value)
				Me.SendPropertyChanging
				Me._TriggerCondition = value
				Me.SendPropertyChanged("TriggerCondition")
				Me.OnTriggerConditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OccuredDate", DbType:="DateTime")>  _
	Public Property OccuredDate() As System.Nullable(Of Date)
		Get
			Return Me._OccuredDate
		End Get
		Set
			If (Me._OccuredDate.Equals(value) = false) Then
				Me.OnOccuredDateChanging(value)
				Me.SendPropertyChanging
				Me._OccuredDate = value
				Me.SendPropertyChanged("OccuredDate")
				Me.OnOccuredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishedDate", DbType:="DateTime")>  _
	Public Property FinishedDate() As System.Nullable(Of Date)
		Get
			Return Me._FinishedDate
		End Get
		Set
			If (Me._FinishedDate.Equals(value) = false) Then
				Me.OnFinishedDateChanging(value)
				Me.SendPropertyChanging
				Me._FinishedDate = value
				Me.SendPropertyChanged("FinishedDate")
				Me.OnFinishedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CanBusEventOccuranceLog")>  _
Partial Public Class CanBusEventOccuranceLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CanBusEventOccuranceLogId As System.Guid
	
	Private _CanEventDefinitionId As System.Nullable(Of System.Guid)
	
	Private _CanValue As String
	
	Private _LogDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCanBusEventOccuranceLogIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCanBusEventOccuranceLogIdChanged()
    End Sub
    Partial Private Sub OnCanEventDefinitionIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCanEventDefinitionIdChanged()
    End Sub
    Partial Private Sub OnCanValueChanging(value As String)
    End Sub
    Partial Private Sub OnCanValueChanged()
    End Sub
    Partial Private Sub OnLogDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLogDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanBusEventOccuranceLogId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CanBusEventOccuranceLogId() As System.Guid
		Get
			Return Me._CanBusEventOccuranceLogId
		End Get
		Set
			If ((Me._CanBusEventOccuranceLogId = value)  _
						= false) Then
				Me.OnCanBusEventOccuranceLogIdChanging(value)
				Me.SendPropertyChanging
				Me._CanBusEventOccuranceLogId = value
				Me.SendPropertyChanged("CanBusEventOccuranceLogId")
				Me.OnCanBusEventOccuranceLogIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanEventDefinitionId", DbType:="UniqueIdentifier")>  _
	Public Property CanEventDefinitionId() As System.Nullable(Of System.Guid)
		Get
			Return Me._CanEventDefinitionId
		End Get
		Set
			If (Me._CanEventDefinitionId.Equals(value) = false) Then
				Me.OnCanEventDefinitionIdChanging(value)
				Me.SendPropertyChanging
				Me._CanEventDefinitionId = value
				Me.SendPropertyChanged("CanEventDefinitionId")
				Me.OnCanEventDefinitionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanValue", DbType:="NVarChar(50)")>  _
	Public Property CanValue() As String
		Get
			Return Me._CanValue
		End Get
		Set
			If (String.Equals(Me._CanValue, value) = false) Then
				Me.OnCanValueChanging(value)
				Me.SendPropertyChanging
				Me._CanValue = value
				Me.SendPropertyChanged("CanValue")
				Me.OnCanValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogDate", DbType:="DateTime")>  _
	Public Property LogDate() As System.Nullable(Of Date)
		Get
			Return Me._LogDate
		End Get
		Set
			If (Me._LogDate.Equals(value) = false) Then
				Me.OnLogDateChanging(value)
				Me.SendPropertyChanging
				Me._LogDate = value
				Me.SendPropertyChanged("LogDate")
				Me.OnLogDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblContractPeriods")>  _
Partial Public Class tblContractPeriod
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ContractPeriodID As System.Guid
	
	Private _Aid As Integer
	
	Private _ContractPeriodDesc As String
	
	Private _ContractPeriodMonths As System.Nullable(Of Single)
	
	Private _NumberOfYears As System.Nullable(Of Short)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContractPeriodIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnContractPeriodIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnContractPeriodDescChanging(value As String)
    End Sub
    Partial Private Sub OnContractPeriodDescChanged()
    End Sub
    Partial Private Sub OnContractPeriodMonthsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnContractPeriodMonthsChanged()
    End Sub
    Partial Private Sub OnNumberOfYearsChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnNumberOfYearsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ContractPeriodID() As System.Guid
		Get
			Return Me._ContractPeriodID
		End Get
		Set
			If ((Me._ContractPeriodID = value)  _
						= false) Then
				Me.OnContractPeriodIDChanging(value)
				Me.SendPropertyChanging
				Me._ContractPeriodID = value
				Me.SendPropertyChanged("ContractPeriodID")
				Me.OnContractPeriodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodDesc", DbType:="NVarChar(50)")>  _
	Public Property ContractPeriodDesc() As String
		Get
			Return Me._ContractPeriodDesc
		End Get
		Set
			If (String.Equals(Me._ContractPeriodDesc, value) = false) Then
				Me.OnContractPeriodDescChanging(value)
				Me.SendPropertyChanging
				Me._ContractPeriodDesc = value
				Me.SendPropertyChanged("ContractPeriodDesc")
				Me.OnContractPeriodDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodMonths", DbType:="Real")>  _
	Public Property ContractPeriodMonths() As System.Nullable(Of Single)
		Get
			Return Me._ContractPeriodMonths
		End Get
		Set
			If (Me._ContractPeriodMonths.Equals(value) = false) Then
				Me.OnContractPeriodMonthsChanging(value)
				Me.SendPropertyChanging
				Me._ContractPeriodMonths = value
				Me.SendPropertyChanged("ContractPeriodMonths")
				Me.OnContractPeriodMonthsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfYears", DbType:="SmallInt")>  _
	Public Property NumberOfYears() As System.Nullable(Of Short)
		Get
			Return Me._NumberOfYears
		End Get
		Set
			If (Me._NumberOfYears.Equals(value) = false) Then
				Me.OnNumberOfYearsChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfYears = value
				Me.SendPropertyChanged("NumberOfYears")
				Me.OnNumberOfYearsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblStates")>  _
Partial Public Class tblState
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StateID As System.Guid
	
	Private _Sid As Integer
	
	Private _StateCode As String
	
	Private _StateDesc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStateIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStateIDChanged()
    End Sub
    Partial Private Sub OnSidChanging(value As Integer)
    End Sub
    Partial Private Sub OnSidChanged()
    End Sub
    Partial Private Sub OnStateCodeChanging(value As String)
    End Sub
    Partial Private Sub OnStateCodeChanged()
    End Sub
    Partial Private Sub OnStateDescChanging(value As String)
    End Sub
    Partial Private Sub OnStateDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property StateID() As System.Guid
		Get
			Return Me._StateID
		End Get
		Set
			If ((Me._StateID = value)  _
						= false) Then
				Me.OnStateIDChanging(value)
				Me.SendPropertyChanging
				Me._StateID = value
				Me.SendPropertyChanged("StateID")
				Me.OnStateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Sid() As Integer
		Get
			Return Me._Sid
		End Get
		Set
			If ((Me._Sid = value)  _
						= false) Then
				Me.OnSidChanging(value)
				Me.SendPropertyChanging
				Me._Sid = value
				Me.SendPropertyChanged("Sid")
				Me.OnSidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="NVarChar(3)")>  _
	Public Property StateCode() As String
		Get
			Return Me._StateCode
		End Get
		Set
			If (String.Equals(Me._StateCode, value) = false) Then
				Me.OnStateCodeChanging(value)
				Me.SendPropertyChanging
				Me._StateCode = value
				Me.SendPropertyChanged("StateCode")
				Me.OnStateCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDesc", DbType:="NVarChar(30)")>  _
	Public Property StateDesc() As String
		Get
			Return Me._StateDesc
		End Get
		Set
			If (String.Equals(Me._StateDesc, value) = false) Then
				Me.OnStateDescChanging(value)
				Me.SendPropertyChanging
				Me._StateDesc = value
				Me.SendPropertyChanged("StateDesc")
				Me.OnStateDescChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMonths")>  _
Partial Public Class tblMonth
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MonthID As System.Guid
	
	Private _MonthNo As System.Nullable(Of Short)
	
	Private _MonthDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMonthIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMonthIDChanged()
    End Sub
    Partial Private Sub OnMonthNoChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMonthNoChanged()
    End Sub
    Partial Private Sub OnMonthDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnMonthDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MonthID() As System.Guid
		Get
			Return Me._MonthID
		End Get
		Set
			If ((Me._MonthID = value)  _
						= false) Then
				Me.OnMonthIDChanging(value)
				Me.SendPropertyChanging
				Me._MonthID = value
				Me.SendPropertyChanged("MonthID")
				Me.OnMonthIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthNo", DbType:="SmallInt")>  _
	Public Property MonthNo() As System.Nullable(Of Short)
		Get
			Return Me._MonthNo
		End Get
		Set
			If (Me._MonthNo.Equals(value) = false) Then
				Me.OnMonthNoChanging(value)
				Me.SendPropertyChanging
				Me._MonthNo = value
				Me.SendPropertyChanged("MonthNo")
				Me.OnMonthNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthDescription", DbType:="NVarChar(15)")>  _
	Public Property MonthDescription() As String
		Get
			Return Me._MonthDescription
		End Get
		Set
			If (String.Equals(Me._MonthDescription, value) = false) Then
				Me.OnMonthDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._MonthDescription = value
				Me.SendPropertyChanged("MonthDescription")
				Me.OnMonthDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSiteComments")>  _
Partial Public Class tblSiteComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CommentsID As System.Guid
	
	Private _Aid As Integer
	
	Private _Cid As System.Nullable(Of Short)
	
	Private _CommentDate As System.Nullable(Of Date)
	
	Private _Comments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentsIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCommentsIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnCommentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCommentDateChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentsID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CommentsID() As System.Guid
		Get
			Return Me._CommentsID
		End Get
		Set
			If ((Me._CommentsID = value)  _
						= false) Then
				Me.OnCommentsIDChanging(value)
				Me.SendPropertyChanging
				Me._CommentsID = value
				Me.SendPropertyChanged("CommentsID")
				Me.OnCommentsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="SmallInt")>  _
	Public Property Cid() As System.Nullable(Of Short)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me.OnCidChanging(value)
				Me.SendPropertyChanging
				Me._Cid = value
				Me.SendPropertyChanged("Cid")
				Me.OnCidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDate", DbType:="DateTime")>  _
	Public Property CommentDate() As System.Nullable(Of Date)
		Get
			Return Me._CommentDate
		End Get
		Set
			If (Me._CommentDate.Equals(value) = false) Then
				Me.OnCommentDateChanging(value)
				Me.SendPropertyChanging
				Me._CommentDate = value
				Me.SendPropertyChanged("CommentDate")
				Me.OnCommentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetClient")>  _
Partial Public Class FleetClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ClientID As System.Guid
	
	Private _CustomerID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _Address As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ClientID() As System.Guid
		Get
			Return Me._ClientID
		End Get
		Set
			If ((Me._ClientID = value)  _
						= false) Then
				Me.OnClientIDChanging(value)
				Me.SendPropertyChanging
				Me._ClientID = value
				Me.SendPropertyChanged("ClientID")
				Me.OnClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int")>  _
	Public Property CustomerID() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerID
		End Get
		Set
			If (Me._CustomerID.Equals(value) = false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(200)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetDocuments")>  _
Partial Public Class FleetDocument
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DocumentID As System.Guid
	
	Private _ClientID As System.Nullable(Of System.Guid)
	
	Private _RunID As System.Nullable(Of System.Guid)
	
	Private _Description As String
	
	Private _PhotoBinary As System.Data.Linq.Binary
	
	Private _CreatedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDocumentIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnDocumentIDChanged()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPhotoBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPhotoBinaryChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DocumentID() As System.Guid
		Get
			Return Me._DocumentID
		End Get
		Set
			If ((Me._DocumentID = value)  _
						= false) Then
				Me.OnDocumentIDChanging(value)
				Me.SendPropertyChanging
				Me._DocumentID = value
				Me.SendPropertyChanged("DocumentID")
				Me.OnDocumentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="UniqueIdentifier")>  _
	Public Property ClientID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ClientID
		End Get
		Set
			If (Me._ClientID.Equals(value) = false) Then
				Me.OnClientIDChanging(value)
				Me.SendPropertyChanging
				Me._ClientID = value
				Me.SendPropertyChanged("ClientID")
				Me.OnClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier")>  _
	Public Property RunID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RunID
		End Get
		Set
			If (Me._RunID.Equals(value) = false) Then
				Me.OnRunIDChanging(value)
				Me.SendPropertyChanging
				Me._RunID = value
				Me.SendPropertyChanged("RunID")
				Me.OnRunIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoBinary", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PhotoBinary() As System.Data.Linq.Binary
		Get
			Return Me._PhotoBinary
		End Get
		Set
			If (Object.Equals(Me._PhotoBinary, value) = false) Then
				Me.OnPhotoBinaryChanging(value)
				Me.SendPropertyChanging
				Me._PhotoBinary = value
				Me.SendPropertyChanged("PhotoBinary")
				Me.OnPhotoBinaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetRun")>  _
Partial Public Class FleetRun
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunID As System.Guid
	
	Private _RunName As String
	
	Private _KeyNumber As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnRunNameChanging(value As String)
    End Sub
    Partial Private Sub OnRunNameChanged()
    End Sub
    Partial Private Sub OnKeyNumberChanging(value As String)
    End Sub
    Partial Private Sub OnKeyNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RunID() As System.Guid
		Get
			Return Me._RunID
		End Get
		Set
			If ((Me._RunID = value)  _
						= false) Then
				Me.OnRunIDChanging(value)
				Me.SendPropertyChanging
				Me._RunID = value
				Me.SendPropertyChanged("RunID")
				Me.OnRunIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunName", DbType:="NVarChar(50)")>  _
	Public Property RunName() As String
		Get
			Return Me._RunName
		End Get
		Set
			If (String.Equals(Me._RunName, value) = false) Then
				Me.OnRunNameChanging(value)
				Me.SendPropertyChanging
				Me._RunName = value
				Me.SendPropertyChanged("RunName")
				Me.OnRunNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KeyNumber", DbType:="NVarChar(10)")>  _
	Public Property KeyNumber() As String
		Get
			Return Me._KeyNumber
		End Get
		Set
			If (String.Equals(Me._KeyNumber, value) = false) Then
				Me.OnKeyNumberChanging(value)
				Me.SendPropertyChanging
				Me._KeyNumber = value
				Me.SendPropertyChanged("KeyNumber")
				Me.OnKeyNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetRunClient")>  _
Partial Public Class FleetRunClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunClientID As System.Guid
	
	Private _RunID As System.Nullable(Of System.Guid)
	
	Private _ClientID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunClientIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunClientIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnClientIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnClientIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunClientID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RunClientID() As System.Guid
		Get
			Return Me._RunClientID
		End Get
		Set
			If ((Me._RunClientID = value)  _
						= false) Then
				Me.OnRunClientIDChanging(value)
				Me.SendPropertyChanging
				Me._RunClientID = value
				Me.SendPropertyChanged("RunClientID")
				Me.OnRunClientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier")>  _
	Public Property RunID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RunID
		End Get
		Set
			If (Me._RunID.Equals(value) = false) Then
				Me.OnRunIDChanging(value)
				Me.SendPropertyChanging
				Me._RunID = value
				Me.SendPropertyChanged("RunID")
				Me.OnRunIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientID", DbType:="UniqueIdentifier")>  _
	Public Property ClientID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ClientID
		End Get
		Set
			If (Me._ClientID.Equals(value) = false) Then
				Me.OnClientIDChanging(value)
				Me.SendPropertyChanging
				Me._ClientID = value
				Me.SendPropertyChanged("ClientID")
				Me.OnClientIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FleetRunCompletion")>  _
Partial Public Class FleetRunCompletion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunCompletionID As System.Guid
	
	Private _RunID As System.Guid
	
	Private _DriverID As System.Nullable(Of System.Guid)
	
	Private _DID As System.Nullable(Of Integer)
	
	Private _RunDate As System.Nullable(Of Date)
	
	Private _Notes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunCompletionIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunCompletionIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnDriverIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnDriverIDChanged()
    End Sub
    Partial Private Sub OnDIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDIDChanged()
    End Sub
    Partial Private Sub OnRunDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRunDateChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunCompletionID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RunCompletionID() As System.Guid
		Get
			Return Me._RunCompletionID
		End Get
		Set
			If ((Me._RunCompletionID = value)  _
						= false) Then
				Me.OnRunCompletionIDChanging(value)
				Me.SendPropertyChanging
				Me._RunCompletionID = value
				Me.SendPropertyChanged("RunCompletionID")
				Me.OnRunCompletionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RunID() As System.Guid
		Get
			Return Me._RunID
		End Get
		Set
			If ((Me._RunID = value)  _
						= false) Then
				Me.OnRunIDChanging(value)
				Me.SendPropertyChanging
				Me._RunID = value
				Me.SendPropertyChanged("RunID")
				Me.OnRunIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier")>  _
	Public Property DriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._DriverID
		End Get
		Set
			If (Me._DriverID.Equals(value) = false) Then
				Me.OnDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._DriverID = value
				Me.SendPropertyChanged("DriverID")
				Me.OnDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DID", DbType:="Int")>  _
	Public Property DID() As System.Nullable(Of Integer)
		Get
			Return Me._DID
		End Get
		Set
			If (Me._DID.Equals(value) = false) Then
				Me.OnDIDChanging(value)
				Me.SendPropertyChanging
				Me._DID = value
				Me.SendPropertyChanged("DID")
				Me.OnDIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDate", DbType:="DateTime")>  _
	Public Property RunDate() As System.Nullable(Of Date)
		Get
			Return Me._RunDate
		End Get
		Set
			If (Me._RunDate.Equals(value) = false) Then
				Me.OnRunDateChanging(value)
				Me.SendPropertyChanging
				Me._RunDate = value
				Me.SendPropertyChanged("RunDate")
				Me.OnRunDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VehicleLocation")>  _
Partial Public Class VehicleLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LocationID As System.Guid
	
	Private _VehicleID As System.Guid
	
	Private _BusinessLocationID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnVehicleIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnVehicleIDChanged()
    End Sub
    Partial Private Sub OnBusinessLocationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnBusinessLocationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LocationID() As System.Guid
		Get
			Return Me._LocationID
		End Get
		Set
			If ((Me._LocationID = value)  _
						= false) Then
				Me.OnLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationID = value
				Me.SendPropertyChanged("LocationID")
				Me.OnLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property VehicleID() As System.Guid
		Get
			Return Me._VehicleID
		End Get
		Set
			If ((Me._VehicleID = value)  _
						= false) Then
				Me.OnVehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._VehicleID = value
				Me.SendPropertyChanged("VehicleID")
				Me.OnVehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessLocationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property BusinessLocationID() As System.Guid
		Get
			Return Me._BusinessLocationID
		End Get
		Set
			If ((Me._BusinessLocationID = value)  _
						= false) Then
				Me.OnBusinessLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._BusinessLocationID = value
				Me.SendPropertyChanged("BusinessLocationID")
				Me.OnBusinessLocationIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vw_GetVehicleLocations")>  _
Partial Public Class vw_GetVehicleLocation
	
	Private _LocationID As System.Nullable(Of System.Guid)
	
	Private _VehicleID As System.Nullable(Of System.Guid)
	
	Private _BusinessLocationID As System.Nullable(Of System.Guid)
	
	Private _Name As String
	
	Private _DeviceID As String
	
	Private _ApplicationID As System.Guid
	
	Private _AL_Name As String
	
	Private _Address As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="UniqueIdentifier")>  _
	Public Property LocationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._LocationID
		End Get
		Set
			If (Me._LocationID.Equals(value) = false) Then
				Me._LocationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehicleID", DbType:="UniqueIdentifier")>  _
	Public Property VehicleID() As System.Nullable(Of System.Guid)
		Get
			Return Me._VehicleID
		End Get
		Set
			If (Me._VehicleID.Equals(value) = false) Then
				Me._VehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessLocationID", DbType:="UniqueIdentifier")>  _
	Public Property BusinessLocationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._BusinessLocationID
		End Get
		Set
			If (Me._BusinessLocationID.Equals(value) = false) Then
				Me._BusinessLocationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AL_Name", DbType:="VarChar(500)")>  _
	Public Property AL_Name() As String
		Get
			Return Me._AL_Name
		End Get
		Set
			If (String.Equals(Me._AL_Name, value) = false) Then
				Me._AL_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CUST")>  _
Partial Public Class CUST
	
	Private _ID As System.Nullable(Of Double)
	
	Private _CardID As String
	
	Private _CustomerName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Float")>  _
	Public Property ID() As System.Nullable(Of Double)
		Get
			Return Me._ID
		End Get
		Set
			If (Me._ID.Equals(value) = false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardID", DbType:="NVarChar(255)")>  _
	Public Property CardID() As String
		Get
			Return Me._CardID
		End Get
		Set
			If (String.Equals(Me._CardID, value) = false) Then
				Me._CardID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMYOBMatch")>  _
Partial Public Class tblMYOBMatch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MatchID As System.Guid
	
	Private _Aid As Integer
	
	Private _MYOBId As String
	
	Private _CustomerName As String
	
	Private _ImportedCustomerName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMatchIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMatchIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnMYOBIdChanging(value As String)
    End Sub
    Partial Private Sub OnMYOBIdChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnImportedCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnImportedCustomerNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MatchID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MatchID() As System.Guid
		Get
			Return Me._MatchID
		End Get
		Set
			If ((Me._MatchID = value)  _
						= false) Then
				Me.OnMatchIDChanging(value)
				Me.SendPropertyChanging
				Me._MatchID = value
				Me.SendPropertyChanged("MatchID")
				Me.OnMatchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBId", DbType:="NVarChar(MAX)")>  _
	Public Property MYOBId() As String
		Get
			Return Me._MYOBId
		End Get
		Set
			If (String.Equals(Me._MYOBId, value) = false) Then
				Me.OnMYOBIdChanging(value)
				Me.SendPropertyChanging
				Me._MYOBId = value
				Me.SendPropertyChanged("MYOBId")
				Me.OnMYOBIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportedCustomerName", DbType:="NVarChar(255)")>  _
	Public Property ImportedCustomerName() As String
		Get
			Return Me._ImportedCustomerName
		End Get
		Set
			If (String.Equals(Me._ImportedCustomerName, value) = false) Then
				Me.OnImportedCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._ImportedCustomerName = value
				Me.SendPropertyChanged("ImportedCustomerName")
				Me.OnImportedCustomerNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbZones")>  _
Partial Public Class tbZone
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ZoneID As System.Guid
	
	Private _Aid As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _AreaDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnZoneIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnZoneIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAreaDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnAreaDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ZoneID() As System.Guid
		Get
			Return Me._ZoneID
		End Get
		Set
			If ((Me._ZoneID = value)  _
						= false) Then
				Me.OnZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._ZoneID = value
				Me.SendPropertyChanged("ZoneID")
				Me.OnZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>  _
	Public Property AreaDescription() As String
		Get
			Return Me._AreaDescription
		End Get
		Set
			If (String.Equals(Me._AreaDescription, value) = false) Then
				Me.OnAreaDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._AreaDescription = value
				Me.SendPropertyChanged("AreaDescription")
				Me.OnAreaDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerAgents")>  _
Partial Public Class tblCustomerAgent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerAgentID As System.Guid
	
	Private _AID As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CustomerAgentName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerAgentIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerAgentIDChanged()
    End Sub
    Partial Private Sub OnAIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCustomerAgentNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerAgentNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustomerAgentID() As System.Guid
		Get
			Return Me._CustomerAgentID
		End Get
		Set
			If ((Me._CustomerAgentID = value)  _
						= false) Then
				Me.OnCustomerAgentIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerAgentID = value
				Me.SendPropertyChanged("CustomerAgentID")
				Me.OnCustomerAgentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AID", DbType:="Int NOT NULL")>  _
	Public Property AID() As Integer
		Get
			Return Me._AID
		End Get
		Set
			If ((Me._AID = value)  _
						= false) Then
				Me.OnAIDChanging(value)
				Me.SendPropertyChanging
				Me._AID = value
				Me.SendPropertyChanged("AID")
				Me.OnAIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentName", DbType:="NVarChar(50)")>  _
	Public Property CustomerAgentName() As String
		Get
			Return Me._CustomerAgentName
		End Get
		Set
			If (String.Equals(Me._CustomerAgentName, value) = false) Then
				Me.OnCustomerAgentNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerAgentName = value
				Me.SendPropertyChanged("CustomerAgentName")
				Me.OnCustomerAgentNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRateIncreaseReference")>  _
Partial Public Class tblRateIncreaseReference
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RateIncreaseID As System.Guid
	
	Private _Aid As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _RateIncreaseDescription As String
	
	Private _AnnualIncreaseApplies As Boolean
	
	Private _AlreadyDoneThisYear As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRateIncreaseIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRateIncreaseIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnRateIncreaseDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRateIncreaseDescriptionChanged()
    End Sub
    Partial Private Sub OnAnnualIncreaseAppliesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAnnualIncreaseAppliesChanged()
    End Sub
    Partial Private Sub OnAlreadyDoneThisYearChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAlreadyDoneThisYearChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RateIncreaseID() As System.Guid
		Get
			Return Me._RateIncreaseID
		End Get
		Set
			If ((Me._RateIncreaseID = value)  _
						= false) Then
				Me.OnRateIncreaseIDChanging(value)
				Me.SendPropertyChanging
				Me._RateIncreaseID = value
				Me.SendPropertyChanged("RateIncreaseID")
				Me.OnRateIncreaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseDescription", DbType:="NVarChar(25)")>  _
	Public Property RateIncreaseDescription() As String
		Get
			Return Me._RateIncreaseDescription
		End Get
		Set
			If (String.Equals(Me._RateIncreaseDescription, value) = false) Then
				Me.OnRateIncreaseDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RateIncreaseDescription = value
				Me.SendPropertyChanged("RateIncreaseDescription")
				Me.OnRateIncreaseDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnualIncreaseApplies", DbType:="Bit NOT NULL")>  _
	Public Property AnnualIncreaseApplies() As Boolean
		Get
			Return Me._AnnualIncreaseApplies
		End Get
		Set
			If ((Me._AnnualIncreaseApplies = value)  _
						= false) Then
				Me.OnAnnualIncreaseAppliesChanging(value)
				Me.SendPropertyChanging
				Me._AnnualIncreaseApplies = value
				Me.SendPropertyChanged("AnnualIncreaseApplies")
				Me.OnAnnualIncreaseAppliesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlreadyDoneThisYear", DbType:="Bit NOT NULL")>  _
	Public Property AlreadyDoneThisYear() As Boolean
		Get
			Return Me._AlreadyDoneThisYear
		End Get
		Set
			If ((Me._AlreadyDoneThisYear = value)  _
						= false) Then
				Me.OnAlreadyDoneThisYearChanging(value)
				Me.SendPropertyChanging
				Me._AlreadyDoneThisYear = value
				Me.SendPropertyChanged("AlreadyDoneThisYear")
				Me.OnAlreadyDoneThisYearChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblServices")>  _
Partial Public Class tblService
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ServicesID As System.Guid
	
	Private _Sid As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _CostOfService As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnServicesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnServicesIDChanged()
    End Sub
    Partial Private Sub OnSidChanging(value As Integer)
    End Sub
    Partial Private Sub OnSidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnServiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCodeChanged()
    End Sub
    Partial Private Sub OnServiceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnServiceDescriptionChanged()
    End Sub
    Partial Private Sub OnCostOfServiceChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnCostOfServiceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ServicesID() As System.Guid
		Get
			Return Me._ServicesID
		End Get
		Set
			If ((Me._ServicesID = value)  _
						= false) Then
				Me.OnServicesIDChanging(value)
				Me.SendPropertyChanging
				Me._ServicesID = value
				Me.SendPropertyChanged("ServicesID")
				Me.OnServicesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sid", DbType:="Int NOT NULL")>  _
	Public Property Sid() As Integer
		Get
			Return Me._Sid
		End Get
		Set
			If ((Me._Sid = value)  _
						= false) Then
				Me.OnSidChanging(value)
				Me.SendPropertyChanging
				Me._Sid = value
				Me.SendPropertyChanged("Sid")
				Me.OnSidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me.OnServiceCodeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceCode = value
				Me.SendPropertyChanged("ServiceCode")
				Me.OnServiceCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me.OnServiceDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ServiceDescription = value
				Me.SendPropertyChanged("ServiceDescription")
				Me.OnServiceDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostOfService", DbType:="Real")>  _
	Public Property CostOfService() As System.Nullable(Of Single)
		Get
			Return Me._CostOfService
		End Get
		Set
			If (Me._CostOfService.Equals(value) = false) Then
				Me.OnCostOfServiceChanging(value)
				Me.SendPropertyChanging
				Me._CostOfService = value
				Me.SendPropertyChanged("CostOfService")
				Me.OnCostOfServiceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblIndustryGroups")>  _
Partial Public Class tblIndustryGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IndustryID As System.Guid
	
	Private _Aid As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _IndustryDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIndustryIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIndustryIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnIndustryDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnIndustryDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IndustryID() As System.Guid
		Get
			Return Me._IndustryID
		End Get
		Set
			If ((Me._IndustryID = value)  _
						= false) Then
				Me.OnIndustryIDChanging(value)
				Me.SendPropertyChanging
				Me._IndustryID = value
				Me.SendPropertyChanged("IndustryID")
				Me.OnIndustryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryDescription", DbType:="NVarChar(50)")>  _
	Public Property IndustryDescription() As String
		Get
			Return Me._IndustryDescription
		End Get
		Set
			If (String.Equals(Me._IndustryDescription, value) = false) Then
				Me.OnIndustryDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._IndustryDescription = value
				Me.SendPropertyChanged("IndustryDescription")
				Me.OnIndustryDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPublicHolidayRegister")>  _
Partial Public Class tblPublicHolidayRegister
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _PublicHolidayDate As System.Nullable(Of Date)
	
	Private _PublicHolidayDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnPublicHolidayDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPublicHolidayDateChanged()
    End Sub
    Partial Private Sub OnPublicHolidayDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPublicHolidayDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublicHolidayDate", DbType:="DateTime")>  _
	Public Property PublicHolidayDate() As System.Nullable(Of Date)
		Get
			Return Me._PublicHolidayDate
		End Get
		Set
			If (Me._PublicHolidayDate.Equals(value) = false) Then
				Me.OnPublicHolidayDateChanging(value)
				Me.SendPropertyChanging
				Me._PublicHolidayDate = value
				Me.SendPropertyChanged("PublicHolidayDate")
				Me.OnPublicHolidayDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublicHolidayDescription", DbType:="NVarChar(50)")>  _
	Public Property PublicHolidayDescription() As String
		Get
			Return Me._PublicHolidayDescription
		End Get
		Set
			If (String.Equals(Me._PublicHolidayDescription, value) = false) Then
				Me.OnPublicHolidayDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PublicHolidayDescription = value
				Me.SendPropertyChanged("PublicHolidayDescription")
				Me.OnPublicHolidayDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserGroups")>  _
Partial Public Class tblUserGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupId As System.Guid
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _UserGroup As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserGroupChanging(value As String)
    End Sub
    Partial Private Sub OnUserGroupChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GroupId() As System.Guid
		Get
			Return Me._GroupId
		End Get
		Set
			If ((Me._GroupId = value)  _
						= false) Then
				Me.OnGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._GroupId = value
				Me.SendPropertyChanged("GroupId")
				Me.OnGroupIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroup", DbType:="NVarChar(255)")>  _
	Public Property UserGroup() As String
		Get
			Return Me._UserGroup
		End Get
		Set
			If (String.Equals(Me._UserGroup, value) = false) Then
				Me.OnUserGroupChanging(value)
				Me.SendPropertyChanging
				Me._UserGroup = value
				Me.SendPropertyChanged("UserGroup")
				Me.OnUserGroupChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblParameters")>  _
Partial Public Class tblParameter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _ParameterID As System.Guid
	
	Private _ParId As String
	
	Private _Field1 As String
	
	Private _Field2 As String
	
	Private _Field3 As String
	
	Private _Field4 As String
	
	Private _Field5 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnParameterIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnParameterIDChanged()
    End Sub
    Partial Private Sub OnParIdChanging(value As String)
    End Sub
    Partial Private Sub OnParIdChanged()
    End Sub
    Partial Private Sub OnField1Changing(value As String)
    End Sub
    Partial Private Sub OnField1Changed()
    End Sub
    Partial Private Sub OnField2Changing(value As String)
    End Sub
    Partial Private Sub OnField2Changed()
    End Sub
    Partial Private Sub OnField3Changing(value As String)
    End Sub
    Partial Private Sub OnField3Changed()
    End Sub
    Partial Private Sub OnField4Changing(value As String)
    End Sub
    Partial Private Sub OnField4Changed()
    End Sub
    Partial Private Sub OnField5Changing(value As String)
    End Sub
    Partial Private Sub OnField5Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParameterID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ParameterID() As System.Guid
		Get
			Return Me._ParameterID
		End Get
		Set
			If ((Me._ParameterID = value)  _
						= false) Then
				Me.OnParameterIDChanging(value)
				Me.SendPropertyChanging
				Me._ParameterID = value
				Me.SendPropertyChanged("ParameterID")
				Me.OnParameterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParId", DbType:="NVarChar(50)")>  _
	Public Property ParId() As String
		Get
			Return Me._ParId
		End Get
		Set
			If (String.Equals(Me._ParId, value) = false) Then
				Me.OnParIdChanging(value)
				Me.SendPropertyChanging
				Me._ParId = value
				Me.SendPropertyChanged("ParId")
				Me.OnParIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field1", DbType:="NVarChar(50)")>  _
	Public Property Field1() As String
		Get
			Return Me._Field1
		End Get
		Set
			If (String.Equals(Me._Field1, value) = false) Then
				Me.OnField1Changing(value)
				Me.SendPropertyChanging
				Me._Field1 = value
				Me.SendPropertyChanged("Field1")
				Me.OnField1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field2", DbType:="NVarChar(50)")>  _
	Public Property Field2() As String
		Get
			Return Me._Field2
		End Get
		Set
			If (String.Equals(Me._Field2, value) = false) Then
				Me.OnField2Changing(value)
				Me.SendPropertyChanging
				Me._Field2 = value
				Me.SendPropertyChanged("Field2")
				Me.OnField2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field3", DbType:="NVarChar(50)")>  _
	Public Property Field3() As String
		Get
			Return Me._Field3
		End Get
		Set
			If (String.Equals(Me._Field3, value) = false) Then
				Me.OnField3Changing(value)
				Me.SendPropertyChanging
				Me._Field3 = value
				Me.SendPropertyChanged("Field3")
				Me.OnField3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field4", DbType:="NVarChar(50)")>  _
	Public Property Field4() As String
		Get
			Return Me._Field4
		End Get
		Set
			If (String.Equals(Me._Field4, value) = false) Then
				Me.OnField4Changing(value)
				Me.SendPropertyChanging
				Me._Field4 = value
				Me.SendPropertyChanged("Field4")
				Me.OnField4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Field5", DbType:="NVarChar(50)")>  _
	Public Property Field5() As String
		Get
			Return Me._Field5
		End Get
		Set
			If (String.Equals(Me._Field5, value) = false) Then
				Me.OnField5Changing(value)
				Me.SendPropertyChanging
				Me._Field5 = value
				Me.SendPropertyChanged("Field5")
				Me.OnField5Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserSecurity")>  _
Partial Public Class tblUserSecurity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _usersecID As System.Guid
	
	Private _txtUserName As String
	
	Private _Administrator As Boolean
	
	Private _UserPassword As String
	
	Private _UserGroup As String
	
	Private _lblCustomerDetails As Boolean
	
	Private _lblSites As Boolean
	
	Private _lblMaintenance As Boolean
	
	Private _lblReports As Boolean
	
	Private _lblOtherProcesses As Boolean
	
	Private _cmdServices As Boolean
	
	Private _Toggle41 As Boolean
	
	Private _Toggle42 As Boolean
	
	Private _CmdIndustryGroups As Boolean
	
	Private _CmdInvoicingFrequency As Boolean
	
	Private _CmdPubHolReg As Boolean
	
	Private _Command50 As Boolean
	
	Private _CmdSalesPersons As Boolean
	
	Private _CmdCeaseReasons As Boolean
	
	Private _CmdPreviousSuppliers As Boolean
	
	Private _CmdCIRReasons As Boolean
	
	Private _CmdCycles As Boolean
	
	Private _CmdTurnOffAuditing As Boolean
	
	Private _CmdAuditChangeReason As Boolean
	
	Private _CmdAreas As Boolean
	
	Private _Command55 As Boolean
	
	Private _cmdUserSecurity As Boolean
	
	Private _CmdContractRenewalReport As Boolean
	
	Private _CmdQuickViewBySuburb As Boolean
	
	Private _CmdAuditReport As Boolean
	
	Private _CmdProductsReport As Boolean
	
	Private _CmdRunReport As Boolean
	
	Private _Command13 As Boolean
	
	Private _CmdCustomerSummary As Boolean
	
	Private _CmdSiteReport As Boolean
	
	Private _Command9 As Boolean
	
	Private _Command10 As Boolean
	
	Private _CmdSalesSummaryDislocations As Boolean
	
	Private _CmdDrivesLicenseExpiry As Boolean
	
	Private _Command14 As Boolean
	
	Private _cmdServiceSummary As Boolean
	
	Private _cmdRunValue As Boolean
	
	Private _cmdInvoicing As Boolean
	
	Private _cmdLengthOfService As Boolean
	
	Private _cmdRunValue2 As Boolean
	
	Private _cmdSitesWithNoContract As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnusersecIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnusersecIDChanged()
    End Sub
    Partial Private Sub OntxtUserNameChanging(value As String)
    End Sub
    Partial Private Sub OntxtUserNameChanged()
    End Sub
    Partial Private Sub OnAdministratorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAdministratorChanged()
    End Sub
    Partial Private Sub OnUserPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnUserPasswordChanged()
    End Sub
    Partial Private Sub OnUserGroupChanging(value As String)
    End Sub
    Partial Private Sub OnUserGroupChanged()
    End Sub
    Partial Private Sub OnlblCustomerDetailsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblCustomerDetailsChanged()
    End Sub
    Partial Private Sub OnlblSitesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblSitesChanged()
    End Sub
    Partial Private Sub OnlblMaintenanceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblMaintenanceChanged()
    End Sub
    Partial Private Sub OnlblReportsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblReportsChanged()
    End Sub
    Partial Private Sub OnlblOtherProcessesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnlblOtherProcessesChanged()
    End Sub
    Partial Private Sub OncmdServicesChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdServicesChanged()
    End Sub
    Partial Private Sub OnToggle41Changing(value As Boolean)
    End Sub
    Partial Private Sub OnToggle41Changed()
    End Sub
    Partial Private Sub OnToggle42Changing(value As Boolean)
    End Sub
    Partial Private Sub OnToggle42Changed()
    End Sub
    Partial Private Sub OnCmdIndustryGroupsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdIndustryGroupsChanged()
    End Sub
    Partial Private Sub OnCmdInvoicingFrequencyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdInvoicingFrequencyChanged()
    End Sub
    Partial Private Sub OnCmdPubHolRegChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdPubHolRegChanged()
    End Sub
    Partial Private Sub OnCommand50Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand50Changed()
    End Sub
    Partial Private Sub OnCmdSalesPersonsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdSalesPersonsChanged()
    End Sub
    Partial Private Sub OnCmdCeaseReasonsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCeaseReasonsChanged()
    End Sub
    Partial Private Sub OnCmdPreviousSuppliersChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdPreviousSuppliersChanged()
    End Sub
    Partial Private Sub OnCmdCIRReasonsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCIRReasonsChanged()
    End Sub
    Partial Private Sub OnCmdCyclesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCyclesChanged()
    End Sub
    Partial Private Sub OnCmdTurnOffAuditingChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdTurnOffAuditingChanged()
    End Sub
    Partial Private Sub OnCmdAuditChangeReasonChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdAuditChangeReasonChanged()
    End Sub
    Partial Private Sub OnCmdAreasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdAreasChanged()
    End Sub
    Partial Private Sub OnCommand55Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand55Changed()
    End Sub
    Partial Private Sub OncmdUserSecurityChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdUserSecurityChanged()
    End Sub
    Partial Private Sub OnCmdContractRenewalReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdContractRenewalReportChanged()
    End Sub
    Partial Private Sub OnCmdQuickViewBySuburbChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdQuickViewBySuburbChanged()
    End Sub
    Partial Private Sub OnCmdAuditReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdAuditReportChanged()
    End Sub
    Partial Private Sub OnCmdProductsReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdProductsReportChanged()
    End Sub
    Partial Private Sub OnCmdRunReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdRunReportChanged()
    End Sub
    Partial Private Sub OnCommand13Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand13Changed()
    End Sub
    Partial Private Sub OnCmdCustomerSummaryChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdCustomerSummaryChanged()
    End Sub
    Partial Private Sub OnCmdSiteReportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdSiteReportChanged()
    End Sub
    Partial Private Sub OnCommand9Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand9Changed()
    End Sub
    Partial Private Sub OnCommand10Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand10Changed()
    End Sub
    Partial Private Sub OnCmdSalesSummaryDislocationsChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdSalesSummaryDislocationsChanged()
    End Sub
    Partial Private Sub OnCmdDrivesLicenseExpiryChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCmdDrivesLicenseExpiryChanged()
    End Sub
    Partial Private Sub OnCommand14Changing(value As Boolean)
    End Sub
    Partial Private Sub OnCommand14Changed()
    End Sub
    Partial Private Sub OncmdServiceSummaryChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdServiceSummaryChanged()
    End Sub
    Partial Private Sub OncmdRunValueChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdRunValueChanged()
    End Sub
    Partial Private Sub OncmdInvoicingChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdInvoicingChanged()
    End Sub
    Partial Private Sub OncmdLengthOfServiceChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdLengthOfServiceChanged()
    End Sub
    Partial Private Sub OncmdRunValue2Changing(value As Boolean)
    End Sub
    Partial Private Sub OncmdRunValue2Changed()
    End Sub
    Partial Private Sub OncmdSitesWithNoContractChanging(value As Boolean)
    End Sub
    Partial Private Sub OncmdSitesWithNoContractChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usersecID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property usersecID() As System.Guid
		Get
			Return Me._usersecID
		End Get
		Set
			If ((Me._usersecID = value)  _
						= false) Then
				Me.OnusersecIDChanging(value)
				Me.SendPropertyChanging
				Me._usersecID = value
				Me.SendPropertyChanged("usersecID")
				Me.OnusersecIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_txtUserName", DbType:="NVarChar(255)")>  _
	Public Property txtUserName() As String
		Get
			Return Me._txtUserName
		End Get
		Set
			If (String.Equals(Me._txtUserName, value) = false) Then
				Me.OntxtUserNameChanging(value)
				Me.SendPropertyChanging
				Me._txtUserName = value
				Me.SendPropertyChanged("txtUserName")
				Me.OntxtUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Administrator", DbType:="Bit NOT NULL")>  _
	Public Property Administrator() As Boolean
		Get
			Return Me._Administrator
		End Get
		Set
			If ((Me._Administrator = value)  _
						= false) Then
				Me.OnAdministratorChanging(value)
				Me.SendPropertyChanging
				Me._Administrator = value
				Me.SendPropertyChanged("Administrator")
				Me.OnAdministratorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserPassword", DbType:="NVarChar(255)")>  _
	Public Property UserPassword() As String
		Get
			Return Me._UserPassword
		End Get
		Set
			If (String.Equals(Me._UserPassword, value) = false) Then
				Me.OnUserPasswordChanging(value)
				Me.SendPropertyChanging
				Me._UserPassword = value
				Me.SendPropertyChanged("UserPassword")
				Me.OnUserPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroup", DbType:="NVarChar(255)")>  _
	Public Property UserGroup() As String
		Get
			Return Me._UserGroup
		End Get
		Set
			If (String.Equals(Me._UserGroup, value) = false) Then
				Me.OnUserGroupChanging(value)
				Me.SendPropertyChanging
				Me._UserGroup = value
				Me.SendPropertyChanged("UserGroup")
				Me.OnUserGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblCustomerDetails", DbType:="Bit NOT NULL")>  _
	Public Property lblCustomerDetails() As Boolean
		Get
			Return Me._lblCustomerDetails
		End Get
		Set
			If ((Me._lblCustomerDetails = value)  _
						= false) Then
				Me.OnlblCustomerDetailsChanging(value)
				Me.SendPropertyChanging
				Me._lblCustomerDetails = value
				Me.SendPropertyChanged("lblCustomerDetails")
				Me.OnlblCustomerDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblSites", DbType:="Bit NOT NULL")>  _
	Public Property lblSites() As Boolean
		Get
			Return Me._lblSites
		End Get
		Set
			If ((Me._lblSites = value)  _
						= false) Then
				Me.OnlblSitesChanging(value)
				Me.SendPropertyChanging
				Me._lblSites = value
				Me.SendPropertyChanged("lblSites")
				Me.OnlblSitesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblMaintenance", DbType:="Bit NOT NULL")>  _
	Public Property lblMaintenance() As Boolean
		Get
			Return Me._lblMaintenance
		End Get
		Set
			If ((Me._lblMaintenance = value)  _
						= false) Then
				Me.OnlblMaintenanceChanging(value)
				Me.SendPropertyChanging
				Me._lblMaintenance = value
				Me.SendPropertyChanged("lblMaintenance")
				Me.OnlblMaintenanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblReports", DbType:="Bit NOT NULL")>  _
	Public Property lblReports() As Boolean
		Get
			Return Me._lblReports
		End Get
		Set
			If ((Me._lblReports = value)  _
						= false) Then
				Me.OnlblReportsChanging(value)
				Me.SendPropertyChanging
				Me._lblReports = value
				Me.SendPropertyChanged("lblReports")
				Me.OnlblReportsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lblOtherProcesses", DbType:="Bit NOT NULL")>  _
	Public Property lblOtherProcesses() As Boolean
		Get
			Return Me._lblOtherProcesses
		End Get
		Set
			If ((Me._lblOtherProcesses = value)  _
						= false) Then
				Me.OnlblOtherProcessesChanging(value)
				Me.SendPropertyChanging
				Me._lblOtherProcesses = value
				Me.SendPropertyChanged("lblOtherProcesses")
				Me.OnlblOtherProcessesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdServices", DbType:="Bit NOT NULL")>  _
	Public Property cmdServices() As Boolean
		Get
			Return Me._cmdServices
		End Get
		Set
			If ((Me._cmdServices = value)  _
						= false) Then
				Me.OncmdServicesChanging(value)
				Me.SendPropertyChanging
				Me._cmdServices = value
				Me.SendPropertyChanged("cmdServices")
				Me.OncmdServicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Toggle41", DbType:="Bit NOT NULL")>  _
	Public Property Toggle41() As Boolean
		Get
			Return Me._Toggle41
		End Get
		Set
			If ((Me._Toggle41 = value)  _
						= false) Then
				Me.OnToggle41Changing(value)
				Me.SendPropertyChanging
				Me._Toggle41 = value
				Me.SendPropertyChanged("Toggle41")
				Me.OnToggle41Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Toggle42", DbType:="Bit NOT NULL")>  _
	Public Property Toggle42() As Boolean
		Get
			Return Me._Toggle42
		End Get
		Set
			If ((Me._Toggle42 = value)  _
						= false) Then
				Me.OnToggle42Changing(value)
				Me.SendPropertyChanging
				Me._Toggle42 = value
				Me.SendPropertyChanged("Toggle42")
				Me.OnToggle42Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdIndustryGroups", DbType:="Bit NOT NULL")>  _
	Public Property CmdIndustryGroups() As Boolean
		Get
			Return Me._CmdIndustryGroups
		End Get
		Set
			If ((Me._CmdIndustryGroups = value)  _
						= false) Then
				Me.OnCmdIndustryGroupsChanging(value)
				Me.SendPropertyChanging
				Me._CmdIndustryGroups = value
				Me.SendPropertyChanged("CmdIndustryGroups")
				Me.OnCmdIndustryGroupsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdInvoicingFrequency", DbType:="Bit NOT NULL")>  _
	Public Property CmdInvoicingFrequency() As Boolean
		Get
			Return Me._CmdInvoicingFrequency
		End Get
		Set
			If ((Me._CmdInvoicingFrequency = value)  _
						= false) Then
				Me.OnCmdInvoicingFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._CmdInvoicingFrequency = value
				Me.SendPropertyChanged("CmdInvoicingFrequency")
				Me.OnCmdInvoicingFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdPubHolReg", DbType:="Bit NOT NULL")>  _
	Public Property CmdPubHolReg() As Boolean
		Get
			Return Me._CmdPubHolReg
		End Get
		Set
			If ((Me._CmdPubHolReg = value)  _
						= false) Then
				Me.OnCmdPubHolRegChanging(value)
				Me.SendPropertyChanging
				Me._CmdPubHolReg = value
				Me.SendPropertyChanged("CmdPubHolReg")
				Me.OnCmdPubHolRegChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command50", DbType:="Bit NOT NULL")>  _
	Public Property Command50() As Boolean
		Get
			Return Me._Command50
		End Get
		Set
			If ((Me._Command50 = value)  _
						= false) Then
				Me.OnCommand50Changing(value)
				Me.SendPropertyChanging
				Me._Command50 = value
				Me.SendPropertyChanged("Command50")
				Me.OnCommand50Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdSalesPersons", DbType:="Bit NOT NULL")>  _
	Public Property CmdSalesPersons() As Boolean
		Get
			Return Me._CmdSalesPersons
		End Get
		Set
			If ((Me._CmdSalesPersons = value)  _
						= false) Then
				Me.OnCmdSalesPersonsChanging(value)
				Me.SendPropertyChanging
				Me._CmdSalesPersons = value
				Me.SendPropertyChanged("CmdSalesPersons")
				Me.OnCmdSalesPersonsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCeaseReasons", DbType:="Bit NOT NULL")>  _
	Public Property CmdCeaseReasons() As Boolean
		Get
			Return Me._CmdCeaseReasons
		End Get
		Set
			If ((Me._CmdCeaseReasons = value)  _
						= false) Then
				Me.OnCmdCeaseReasonsChanging(value)
				Me.SendPropertyChanging
				Me._CmdCeaseReasons = value
				Me.SendPropertyChanged("CmdCeaseReasons")
				Me.OnCmdCeaseReasonsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdPreviousSuppliers", DbType:="Bit NOT NULL")>  _
	Public Property CmdPreviousSuppliers() As Boolean
		Get
			Return Me._CmdPreviousSuppliers
		End Get
		Set
			If ((Me._CmdPreviousSuppliers = value)  _
						= false) Then
				Me.OnCmdPreviousSuppliersChanging(value)
				Me.SendPropertyChanging
				Me._CmdPreviousSuppliers = value
				Me.SendPropertyChanged("CmdPreviousSuppliers")
				Me.OnCmdPreviousSuppliersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCIRReasons", DbType:="Bit NOT NULL")>  _
	Public Property CmdCIRReasons() As Boolean
		Get
			Return Me._CmdCIRReasons
		End Get
		Set
			If ((Me._CmdCIRReasons = value)  _
						= false) Then
				Me.OnCmdCIRReasonsChanging(value)
				Me.SendPropertyChanging
				Me._CmdCIRReasons = value
				Me.SendPropertyChanged("CmdCIRReasons")
				Me.OnCmdCIRReasonsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCycles", DbType:="Bit NOT NULL")>  _
	Public Property CmdCycles() As Boolean
		Get
			Return Me._CmdCycles
		End Get
		Set
			If ((Me._CmdCycles = value)  _
						= false) Then
				Me.OnCmdCyclesChanging(value)
				Me.SendPropertyChanging
				Me._CmdCycles = value
				Me.SendPropertyChanged("CmdCycles")
				Me.OnCmdCyclesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdTurnOffAuditing", DbType:="Bit NOT NULL")>  _
	Public Property CmdTurnOffAuditing() As Boolean
		Get
			Return Me._CmdTurnOffAuditing
		End Get
		Set
			If ((Me._CmdTurnOffAuditing = value)  _
						= false) Then
				Me.OnCmdTurnOffAuditingChanging(value)
				Me.SendPropertyChanging
				Me._CmdTurnOffAuditing = value
				Me.SendPropertyChanged("CmdTurnOffAuditing")
				Me.OnCmdTurnOffAuditingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdAuditChangeReason", DbType:="Bit NOT NULL")>  _
	Public Property CmdAuditChangeReason() As Boolean
		Get
			Return Me._CmdAuditChangeReason
		End Get
		Set
			If ((Me._CmdAuditChangeReason = value)  _
						= false) Then
				Me.OnCmdAuditChangeReasonChanging(value)
				Me.SendPropertyChanging
				Me._CmdAuditChangeReason = value
				Me.SendPropertyChanged("CmdAuditChangeReason")
				Me.OnCmdAuditChangeReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdAreas", DbType:="Bit NOT NULL")>  _
	Public Property CmdAreas() As Boolean
		Get
			Return Me._CmdAreas
		End Get
		Set
			If ((Me._CmdAreas = value)  _
						= false) Then
				Me.OnCmdAreasChanging(value)
				Me.SendPropertyChanging
				Me._CmdAreas = value
				Me.SendPropertyChanged("CmdAreas")
				Me.OnCmdAreasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command55", DbType:="Bit NOT NULL")>  _
	Public Property Command55() As Boolean
		Get
			Return Me._Command55
		End Get
		Set
			If ((Me._Command55 = value)  _
						= false) Then
				Me.OnCommand55Changing(value)
				Me.SendPropertyChanging
				Me._Command55 = value
				Me.SendPropertyChanged("Command55")
				Me.OnCommand55Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdUserSecurity", DbType:="Bit NOT NULL")>  _
	Public Property cmdUserSecurity() As Boolean
		Get
			Return Me._cmdUserSecurity
		End Get
		Set
			If ((Me._cmdUserSecurity = value)  _
						= false) Then
				Me.OncmdUserSecurityChanging(value)
				Me.SendPropertyChanging
				Me._cmdUserSecurity = value
				Me.SendPropertyChanged("cmdUserSecurity")
				Me.OncmdUserSecurityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdContractRenewalReport", DbType:="Bit NOT NULL")>  _
	Public Property CmdContractRenewalReport() As Boolean
		Get
			Return Me._CmdContractRenewalReport
		End Get
		Set
			If ((Me._CmdContractRenewalReport = value)  _
						= false) Then
				Me.OnCmdContractRenewalReportChanging(value)
				Me.SendPropertyChanging
				Me._CmdContractRenewalReport = value
				Me.SendPropertyChanged("CmdContractRenewalReport")
				Me.OnCmdContractRenewalReportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdQuickViewBySuburb", DbType:="Bit NOT NULL")>  _
	Public Property CmdQuickViewBySuburb() As Boolean
		Get
			Return Me._CmdQuickViewBySuburb
		End Get
		Set
			If ((Me._CmdQuickViewBySuburb = value)  _
						= false) Then
				Me.OnCmdQuickViewBySuburbChanging(value)
				Me.SendPropertyChanging
				Me._CmdQuickViewBySuburb = value
				Me.SendPropertyChanged("CmdQuickViewBySuburb")
				Me.OnCmdQuickViewBySuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdAuditReport", DbType:="Bit NOT NULL")>  _
	Public Property CmdAuditReport() As Boolean
		Get
			Return Me._CmdAuditReport
		End Get
		Set
			If ((Me._CmdAuditReport = value)  _
						= false) Then
				Me.OnCmdAuditReportChanging(value)
				Me.SendPropertyChanging
				Me._CmdAuditReport = value
				Me.SendPropertyChanged("CmdAuditReport")
				Me.OnCmdAuditReportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdProductsReport", DbType:="Bit NOT NULL")>  _
	Public Property CmdProductsReport() As Boolean
		Get
			Return Me._CmdProductsReport
		End Get
		Set
			If ((Me._CmdProductsReport = value)  _
						= false) Then
				Me.OnCmdProductsReportChanging(value)
				Me.SendPropertyChanging
				Me._CmdProductsReport = value
				Me.SendPropertyChanged("CmdProductsReport")
				Me.OnCmdProductsReportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdRunReport", DbType:="Bit NOT NULL")>  _
	Public Property CmdRunReport() As Boolean
		Get
			Return Me._CmdRunReport
		End Get
		Set
			If ((Me._CmdRunReport = value)  _
						= false) Then
				Me.OnCmdRunReportChanging(value)
				Me.SendPropertyChanging
				Me._CmdRunReport = value
				Me.SendPropertyChanged("CmdRunReport")
				Me.OnCmdRunReportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command13", DbType:="Bit NOT NULL")>  _
	Public Property Command13() As Boolean
		Get
			Return Me._Command13
		End Get
		Set
			If ((Me._Command13 = value)  _
						= false) Then
				Me.OnCommand13Changing(value)
				Me.SendPropertyChanging
				Me._Command13 = value
				Me.SendPropertyChanged("Command13")
				Me.OnCommand13Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdCustomerSummary", DbType:="Bit NOT NULL")>  _
	Public Property CmdCustomerSummary() As Boolean
		Get
			Return Me._CmdCustomerSummary
		End Get
		Set
			If ((Me._CmdCustomerSummary = value)  _
						= false) Then
				Me.OnCmdCustomerSummaryChanging(value)
				Me.SendPropertyChanging
				Me._CmdCustomerSummary = value
				Me.SendPropertyChanged("CmdCustomerSummary")
				Me.OnCmdCustomerSummaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdSiteReport", DbType:="Bit NOT NULL")>  _
	Public Property CmdSiteReport() As Boolean
		Get
			Return Me._CmdSiteReport
		End Get
		Set
			If ((Me._CmdSiteReport = value)  _
						= false) Then
				Me.OnCmdSiteReportChanging(value)
				Me.SendPropertyChanging
				Me._CmdSiteReport = value
				Me.SendPropertyChanged("CmdSiteReport")
				Me.OnCmdSiteReportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command9", DbType:="Bit NOT NULL")>  _
	Public Property Command9() As Boolean
		Get
			Return Me._Command9
		End Get
		Set
			If ((Me._Command9 = value)  _
						= false) Then
				Me.OnCommand9Changing(value)
				Me.SendPropertyChanging
				Me._Command9 = value
				Me.SendPropertyChanged("Command9")
				Me.OnCommand9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command10", DbType:="Bit NOT NULL")>  _
	Public Property Command10() As Boolean
		Get
			Return Me._Command10
		End Get
		Set
			If ((Me._Command10 = value)  _
						= false) Then
				Me.OnCommand10Changing(value)
				Me.SendPropertyChanging
				Me._Command10 = value
				Me.SendPropertyChanged("Command10")
				Me.OnCommand10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdSalesSummaryDislocations", DbType:="Bit NOT NULL")>  _
	Public Property CmdSalesSummaryDislocations() As Boolean
		Get
			Return Me._CmdSalesSummaryDislocations
		End Get
		Set
			If ((Me._CmdSalesSummaryDislocations = value)  _
						= false) Then
				Me.OnCmdSalesSummaryDislocationsChanging(value)
				Me.SendPropertyChanging
				Me._CmdSalesSummaryDislocations = value
				Me.SendPropertyChanged("CmdSalesSummaryDislocations")
				Me.OnCmdSalesSummaryDislocationsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CmdDrivesLicenseExpiry", DbType:="Bit NOT NULL")>  _
	Public Property CmdDrivesLicenseExpiry() As Boolean
		Get
			Return Me._CmdDrivesLicenseExpiry
		End Get
		Set
			If ((Me._CmdDrivesLicenseExpiry = value)  _
						= false) Then
				Me.OnCmdDrivesLicenseExpiryChanging(value)
				Me.SendPropertyChanging
				Me._CmdDrivesLicenseExpiry = value
				Me.SendPropertyChanged("CmdDrivesLicenseExpiry")
				Me.OnCmdDrivesLicenseExpiryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Command14", DbType:="Bit NOT NULL")>  _
	Public Property Command14() As Boolean
		Get
			Return Me._Command14
		End Get
		Set
			If ((Me._Command14 = value)  _
						= false) Then
				Me.OnCommand14Changing(value)
				Me.SendPropertyChanging
				Me._Command14 = value
				Me.SendPropertyChanged("Command14")
				Me.OnCommand14Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdServiceSummary", DbType:="Bit NOT NULL")>  _
	Public Property cmdServiceSummary() As Boolean
		Get
			Return Me._cmdServiceSummary
		End Get
		Set
			If ((Me._cmdServiceSummary = value)  _
						= false) Then
				Me.OncmdServiceSummaryChanging(value)
				Me.SendPropertyChanging
				Me._cmdServiceSummary = value
				Me.SendPropertyChanged("cmdServiceSummary")
				Me.OncmdServiceSummaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdRunValue", DbType:="Bit NOT NULL")>  _
	Public Property cmdRunValue() As Boolean
		Get
			Return Me._cmdRunValue
		End Get
		Set
			If ((Me._cmdRunValue = value)  _
						= false) Then
				Me.OncmdRunValueChanging(value)
				Me.SendPropertyChanging
				Me._cmdRunValue = value
				Me.SendPropertyChanged("cmdRunValue")
				Me.OncmdRunValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdInvoicing", DbType:="Bit NOT NULL")>  _
	Public Property cmdInvoicing() As Boolean
		Get
			Return Me._cmdInvoicing
		End Get
		Set
			If ((Me._cmdInvoicing = value)  _
						= false) Then
				Me.OncmdInvoicingChanging(value)
				Me.SendPropertyChanging
				Me._cmdInvoicing = value
				Me.SendPropertyChanged("cmdInvoicing")
				Me.OncmdInvoicingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdLengthOfService", DbType:="Bit NOT NULL")>  _
	Public Property cmdLengthOfService() As Boolean
		Get
			Return Me._cmdLengthOfService
		End Get
		Set
			If ((Me._cmdLengthOfService = value)  _
						= false) Then
				Me.OncmdLengthOfServiceChanging(value)
				Me.SendPropertyChanging
				Me._cmdLengthOfService = value
				Me.SendPropertyChanged("cmdLengthOfService")
				Me.OncmdLengthOfServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdRunValue2", DbType:="Bit NOT NULL")>  _
	Public Property cmdRunValue2() As Boolean
		Get
			Return Me._cmdRunValue2
		End Get
		Set
			If ((Me._cmdRunValue2 = value)  _
						= false) Then
				Me.OncmdRunValue2Changing(value)
				Me.SendPropertyChanging
				Me._cmdRunValue2 = value
				Me.SendPropertyChanged("cmdRunValue2")
				Me.OncmdRunValue2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmdSitesWithNoContract", DbType:="Bit NOT NULL")>  _
	Public Property cmdSitesWithNoContract() As Boolean
		Get
			Return Me._cmdSitesWithNoContract
		End Get
		Set
			If ((Me._cmdSitesWithNoContract = value)  _
						= false) Then
				Me.OncmdSitesWithNoContractChanging(value)
				Me.SendPropertyChanging
				Me._cmdSitesWithNoContract = value
				Me.SendPropertyChanged("cmdSitesWithNoContract")
				Me.OncmdSitesWithNoContractChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDriverCommentsReason")>  _
Partial Public Class tblDriverCommentsReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _CommentDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCommentDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCommentDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDescription", DbType:="NVarChar(25)")>  _
	Public Property CommentDescription() As String
		Get
			Return Me._CommentDescription
		End Get
		Set
			If (String.Equals(Me._CommentDescription, value) = false) Then
				Me.OnCommentDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CommentDescription = value
				Me.SendPropertyChanged("CommentDescription")
				Me.OnCommentDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDriverComments")>  _
Partial Public Class tblDriverComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _Did As System.Nullable(Of Short)
	
	Private _CommentDate As System.Nullable(Of Date)
	
	Private _CommentReason As System.Nullable(Of Short)
	
	Private _Comments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnDidChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnDidChanged()
    End Sub
    Partial Private Sub OnCommentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCommentDateChanged()
    End Sub
    Partial Private Sub OnCommentReasonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCommentReasonChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", DbType:="SmallInt")>  _
	Public Property Did() As System.Nullable(Of Short)
		Get
			Return Me._Did
		End Get
		Set
			If (Me._Did.Equals(value) = false) Then
				Me.OnDidChanging(value)
				Me.SendPropertyChanging
				Me._Did = value
				Me.SendPropertyChanged("Did")
				Me.OnDidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentDate", DbType:="DateTime")>  _
	Public Property CommentDate() As System.Nullable(Of Date)
		Get
			Return Me._CommentDate
		End Get
		Set
			If (Me._CommentDate.Equals(value) = false) Then
				Me.OnCommentDateChanging(value)
				Me.SendPropertyChanging
				Me._CommentDate = value
				Me.SendPropertyChanged("CommentDate")
				Me.OnCommentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentReason", DbType:="SmallInt")>  _
	Public Property CommentReason() As System.Nullable(Of Short)
		Get
			Return Me._CommentReason
		End Get
		Set
			If (Me._CommentReason.Equals(value) = false) Then
				Me.OnCommentReasonChanging(value)
				Me.SendPropertyChanging
				Me._CommentReason = value
				Me.SendPropertyChanged("CommentReason")
				Me.OnCommentReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMYOBInvoicing")>  _
Partial Public Class tblMYOBInvoicing
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _CustomerNumber As String
	
	Private _CustomerName As String
	
	Private _InvoiceNumber As String
	
	Private _InvoiceDate As System.Nullable(Of Date)
	
	Private _CustomerPurchaseOrderNumber As String
	
	Private _Quantity As System.Nullable(Of Short)
	
	Private _ProductCode As String
	
	Private _ProductDescription As String
	
	Private _AnnualPriceExGST As System.Nullable(Of Single)
	
	Private _AnnualPriceIncGST As System.Nullable(Of Single)
	
	Private _Discount As String
	
	Private _InvoiceAmountExGST As System.Nullable(Of Single)
	
	Private _InvoiceAmountIncGST As System.Nullable(Of Single)
	
	Private _Job As String
	
	Private _JournalMemo As String
	
	Private _TaxCode As String
	
	Private _GSTAmount As System.Nullable(Of Single)
	
	Private _Category As String
	
	Private _SiteName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCustomerNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNumberChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnInvoiceNumberChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceNumberChanged()
    End Sub
    Partial Private Sub OnInvoiceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvoiceDateChanged()
    End Sub
    Partial Private Sub OnCustomerPurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnProductDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnProductDescriptionChanged()
    End Sub
    Partial Private Sub OnAnnualPriceExGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnAnnualPriceExGSTChanged()
    End Sub
    Partial Private Sub OnAnnualPriceIncGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnAnnualPriceIncGSTChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As String)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnInvoiceAmountExGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnInvoiceAmountExGSTChanged()
    End Sub
    Partial Private Sub OnInvoiceAmountIncGSTChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnInvoiceAmountIncGSTChanged()
    End Sub
    Partial Private Sub OnJobChanging(value As String)
    End Sub
    Partial Private Sub OnJobChanged()
    End Sub
    Partial Private Sub OnJournalMemoChanging(value As String)
    End Sub
    Partial Private Sub OnJournalMemoChanged()
    End Sub
    Partial Private Sub OnTaxCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTaxCodeChanged()
    End Sub
    Partial Private Sub OnGSTAmountChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnGSTAmountChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerNumber", DbType:="NVarChar(50)")>  _
	Public Property CustomerNumber() As String
		Get
			Return Me._CustomerNumber
		End Get
		Set
			If (String.Equals(Me._CustomerNumber, value) = false) Then
				Me.OnCustomerNumberChanging(value)
				Me.SendPropertyChanging
				Me._CustomerNumber = value
				Me.SendPropertyChanged("CustomerNumber")
				Me.OnCustomerNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceNumber", DbType:="NVarChar(50)")>  _
	Public Property InvoiceNumber() As String
		Get
			Return Me._InvoiceNumber
		End Get
		Set
			If (String.Equals(Me._InvoiceNumber, value) = false) Then
				Me.OnInvoiceNumberChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceNumber = value
				Me.SendPropertyChanged("InvoiceNumber")
				Me.OnInvoiceNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceDate", DbType:="DateTime")>  _
	Public Property InvoiceDate() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceDate
		End Get
		Set
			If (Me._InvoiceDate.Equals(value) = false) Then
				Me.OnInvoiceDateChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceDate = value
				Me.SendPropertyChanged("InvoiceDate")
				Me.OnInvoiceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPurchaseOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property CustomerPurchaseOrderNumber() As String
		Get
			Return Me._CustomerPurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._CustomerPurchaseOrderNumber, value) = false) Then
				Me.OnCustomerPurchaseOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._CustomerPurchaseOrderNumber = value
				Me.SendPropertyChanged("CustomerPurchaseOrderNumber")
				Me.OnCustomerPurchaseOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt")>  _
	Public Property Quantity() As System.Nullable(Of Short)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50)")>  _
	Public Property ProductCode() As String
		Get
			Return Me._ProductCode
		End Get
		Set
			If (String.Equals(Me._ProductCode, value) = false) Then
				Me.OnProductCodeChanging(value)
				Me.SendPropertyChanging
				Me._ProductCode = value
				Me.SendPropertyChanged("ProductCode")
				Me.OnProductCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductDescription", DbType:="NVarChar(200)")>  _
	Public Property ProductDescription() As String
		Get
			Return Me._ProductDescription
		End Get
		Set
			If (String.Equals(Me._ProductDescription, value) = false) Then
				Me.OnProductDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ProductDescription = value
				Me.SendPropertyChanged("ProductDescription")
				Me.OnProductDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnualPriceExGST", DbType:="Real")>  _
	Public Property AnnualPriceExGST() As System.Nullable(Of Single)
		Get
			Return Me._AnnualPriceExGST
		End Get
		Set
			If (Me._AnnualPriceExGST.Equals(value) = false) Then
				Me.OnAnnualPriceExGSTChanging(value)
				Me.SendPropertyChanging
				Me._AnnualPriceExGST = value
				Me.SendPropertyChanged("AnnualPriceExGST")
				Me.OnAnnualPriceExGSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnnualPriceIncGST", DbType:="Real")>  _
	Public Property AnnualPriceIncGST() As System.Nullable(Of Single)
		Get
			Return Me._AnnualPriceIncGST
		End Get
		Set
			If (Me._AnnualPriceIncGST.Equals(value) = false) Then
				Me.OnAnnualPriceIncGSTChanging(value)
				Me.SendPropertyChanging
				Me._AnnualPriceIncGST = value
				Me.SendPropertyChanged("AnnualPriceIncGST")
				Me.OnAnnualPriceIncGSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="NVarChar(50)")>  _
	Public Property Discount() As String
		Get
			Return Me._Discount
		End Get
		Set
			If (String.Equals(Me._Discount, value) = false) Then
				Me.OnDiscountChanging(value)
				Me.SendPropertyChanging
				Me._Discount = value
				Me.SendPropertyChanged("Discount")
				Me.OnDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountExGST", DbType:="Real")>  _
	Public Property InvoiceAmountExGST() As System.Nullable(Of Single)
		Get
			Return Me._InvoiceAmountExGST
		End Get
		Set
			If (Me._InvoiceAmountExGST.Equals(value) = false) Then
				Me.OnInvoiceAmountExGSTChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceAmountExGST = value
				Me.SendPropertyChanged("InvoiceAmountExGST")
				Me.OnInvoiceAmountExGSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountIncGST", DbType:="Real")>  _
	Public Property InvoiceAmountIncGST() As System.Nullable(Of Single)
		Get
			Return Me._InvoiceAmountIncGST
		End Get
		Set
			If (Me._InvoiceAmountIncGST.Equals(value) = false) Then
				Me.OnInvoiceAmountIncGSTChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceAmountIncGST = value
				Me.SendPropertyChanged("InvoiceAmountIncGST")
				Me.OnInvoiceAmountIncGSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Job", DbType:="NVarChar(50)")>  _
	Public Property Job() As String
		Get
			Return Me._Job
		End Get
		Set
			If (String.Equals(Me._Job, value) = false) Then
				Me.OnJobChanging(value)
				Me.SendPropertyChanging
				Me._Job = value
				Me.SendPropertyChanged("Job")
				Me.OnJobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JournalMemo", DbType:="NVarChar(120)")>  _
	Public Property JournalMemo() As String
		Get
			Return Me._JournalMemo
		End Get
		Set
			If (String.Equals(Me._JournalMemo, value) = false) Then
				Me.OnJournalMemoChanging(value)
				Me.SendPropertyChanging
				Me._JournalMemo = value
				Me.SendPropertyChanged("JournalMemo")
				Me.OnJournalMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxCode", DbType:="NVarChar(50)")>  _
	Public Property TaxCode() As String
		Get
			Return Me._TaxCode
		End Get
		Set
			If (String.Equals(Me._TaxCode, value) = false) Then
				Me.OnTaxCodeChanging(value)
				Me.SendPropertyChanging
				Me._TaxCode = value
				Me.SendPropertyChanged("TaxCode")
				Me.OnTaxCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GSTAmount", DbType:="Real")>  _
	Public Property GSTAmount() As System.Nullable(Of Single)
		Get
			Return Me._GSTAmount
		End Get
		Set
			If (Me._GSTAmount.Equals(value) = false) Then
				Me.OnGSTAmountChanging(value)
				Me.SendPropertyChanging
				Me._GSTAmount = value
				Me.SendPropertyChanged("GSTAmount")
				Me.OnGSTAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(50)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomers")>  _
Partial Public Class tblCustomer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As System.Guid
	
	Private _Cid As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CustomerName As String
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _State As System.Nullable(Of Integer)
	
	Private _Suburb As String
	
	Private _PostCode As String
	
	Private _CustomerContactName As String
	
	Private _CustomerPhone As String
	
	Private _CustomerMobile As String
	
	Private _CustomerFax As String
	
	Private _CustomerComments As String
	
	Private _CustomerAgent As System.Nullable(Of Integer)
	
	Private _CustomerRating As System.Nullable(Of Short)
	
	Private _Zone As System.Nullable(Of Integer)
	
	Private _MYOBCustomerNumber As String
	
	Private _CustomerValue As System.Nullable(Of Double)
	
	Private _InactiveCustomer As Boolean
	
	Private _CustomerCommencementDate As System.Nullable(Of Date)
	
	Private _chkCustomerExcludeFuelLevy As Boolean
	
	Private _cmbRateIncrease As System.Nullable(Of Short)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As Integer)
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnStateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnCustomerContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerContactNameChanged()
    End Sub
    Partial Private Sub OnCustomerPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerPhoneChanged()
    End Sub
    Partial Private Sub OnCustomerMobileChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerMobileChanged()
    End Sub
    Partial Private Sub OnCustomerFaxChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerFaxChanged()
    End Sub
    Partial Private Sub OnCustomerCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerCommentsChanged()
    End Sub
    Partial Private Sub OnCustomerAgentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerAgentChanged()
    End Sub
    Partial Private Sub OnCustomerRatingChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCustomerRatingChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnMYOBCustomerNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMYOBCustomerNumberChanged()
    End Sub
    Partial Private Sub OnCustomerValueChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCustomerValueChanged()
    End Sub
    Partial Private Sub OnInactiveCustomerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveCustomerChanged()
    End Sub
    Partial Private Sub OnCustomerCommencementDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCustomerCommencementDateChanged()
    End Sub
    Partial Private Sub OnchkCustomerExcludeFuelLevyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnchkCustomerExcludeFuelLevyChanged()
    End Sub
    Partial Private Sub OncmbRateIncreaseChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OncmbRateIncreaseChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustomerID() As System.Guid
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me.OnCidChanging(value)
				Me.SendPropertyChanging
				Me._Cid = value
				Me.SendPropertyChanged("Cid")
				Me.OnCidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me.OnAddressLine1Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine1 = value
				Me.SendPropertyChanged("AddressLine1")
				Me.OnAddressLine1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me.OnAddressLine2Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine2 = value
				Me.SendPropertyChanged("AddressLine2")
				Me.OnAddressLine2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="Int")>  _
	Public Property State() As System.Nullable(Of Integer)
		Get
			Return Me._State
		End Get
		Set
			If (Me._State.Equals(value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me.OnSuburbChanging(value)
				Me.SendPropertyChanging
				Me._Suburb = value
				Me.SendPropertyChanged("Suburb")
				Me.OnSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>  _
	Public Property CustomerContactName() As String
		Get
			Return Me._CustomerContactName
		End Get
		Set
			If (String.Equals(Me._CustomerContactName, value) = false) Then
				Me.OnCustomerContactNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerContactName = value
				Me.SendPropertyChanged("CustomerContactName")
				Me.OnCustomerContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me.OnCustomerPhoneChanging(value)
				Me.SendPropertyChanging
				Me._CustomerPhone = value
				Me.SendPropertyChanged("CustomerPhone")
				Me.OnCustomerPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerMobile", DbType:="NVarChar(22)")>  _
	Public Property CustomerMobile() As String
		Get
			Return Me._CustomerMobile
		End Get
		Set
			If (String.Equals(Me._CustomerMobile, value) = false) Then
				Me.OnCustomerMobileChanging(value)
				Me.SendPropertyChanging
				Me._CustomerMobile = value
				Me.SendPropertyChanged("CustomerMobile")
				Me.OnCustomerMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerFax", DbType:="NVarChar(22)")>  _
	Public Property CustomerFax() As String
		Get
			Return Me._CustomerFax
		End Get
		Set
			If (String.Equals(Me._CustomerFax, value) = false) Then
				Me.OnCustomerFaxChanging(value)
				Me.SendPropertyChanging
				Me._CustomerFax = value
				Me.SendPropertyChanged("CustomerFax")
				Me.OnCustomerFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerComments", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerComments() As String
		Get
			Return Me._CustomerComments
		End Get
		Set
			If (String.Equals(Me._CustomerComments, value) = false) Then
				Me.OnCustomerCommentsChanging(value)
				Me.SendPropertyChanging
				Me._CustomerComments = value
				Me.SendPropertyChanged("CustomerComments")
				Me.OnCustomerCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgent", DbType:="Int")>  _
	Public Property CustomerAgent() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerAgent
		End Get
		Set
			If (Me._CustomerAgent.Equals(value) = false) Then
				Me.OnCustomerAgentChanging(value)
				Me.SendPropertyChanging
				Me._CustomerAgent = value
				Me.SendPropertyChanged("CustomerAgent")
				Me.OnCustomerAgentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>  _
	Public Property CustomerRating() As System.Nullable(Of Short)
		Get
			Return Me._CustomerRating
		End Get
		Set
			If (Me._CustomerRating.Equals(value) = false) Then
				Me.OnCustomerRatingChanging(value)
				Me.SendPropertyChanging
				Me._CustomerRating = value
				Me.SendPropertyChanged("CustomerRating")
				Me.OnCustomerRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>  _
	Public Property Zone() As System.Nullable(Of Integer)
		Get
			Return Me._Zone
		End Get
		Set
			If (Me._Zone.Equals(value) = false) Then
				Me.OnZoneChanging(value)
				Me.SendPropertyChanging
				Me._Zone = value
				Me.SendPropertyChanged("Zone")
				Me.OnZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>  _
	Public Property MYOBCustomerNumber() As String
		Get
			Return Me._MYOBCustomerNumber
		End Get
		Set
			If (String.Equals(Me._MYOBCustomerNumber, value) = false) Then
				Me.OnMYOBCustomerNumberChanging(value)
				Me.SendPropertyChanging
				Me._MYOBCustomerNumber = value
				Me.SendPropertyChanged("MYOBCustomerNumber")
				Me.OnMYOBCustomerNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerValue", DbType:="Float")>  _
	Public Property CustomerValue() As System.Nullable(Of Double)
		Get
			Return Me._CustomerValue
		End Get
		Set
			If (Me._CustomerValue.Equals(value) = false) Then
				Me.OnCustomerValueChanging(value)
				Me.SendPropertyChanging
				Me._CustomerValue = value
				Me.SendPropertyChanged("CustomerValue")
				Me.OnCustomerValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveCustomer", DbType:="Bit NOT NULL")>  _
	Public Property InactiveCustomer() As Boolean
		Get
			Return Me._InactiveCustomer
		End Get
		Set
			If ((Me._InactiveCustomer = value)  _
						= false) Then
				Me.OnInactiveCustomerChanging(value)
				Me.SendPropertyChanging
				Me._InactiveCustomer = value
				Me.SendPropertyChanged("InactiveCustomer")
				Me.OnInactiveCustomerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerCommencementDate", DbType:="DateTime")>  _
	Public Property CustomerCommencementDate() As System.Nullable(Of Date)
		Get
			Return Me._CustomerCommencementDate
		End Get
		Set
			If (Me._CustomerCommencementDate.Equals(value) = false) Then
				Me.OnCustomerCommencementDateChanging(value)
				Me.SendPropertyChanging
				Me._CustomerCommencementDate = value
				Me.SendPropertyChanged("CustomerCommencementDate")
				Me.OnCustomerCommencementDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkCustomerExcludeFuelLevy", DbType:="Bit NOT NULL")>  _
	Public Property chkCustomerExcludeFuelLevy() As Boolean
		Get
			Return Me._chkCustomerExcludeFuelLevy
		End Get
		Set
			If ((Me._chkCustomerExcludeFuelLevy = value)  _
						= false) Then
				Me.OnchkCustomerExcludeFuelLevyChanging(value)
				Me.SendPropertyChanging
				Me._chkCustomerExcludeFuelLevy = value
				Me.SendPropertyChanged("chkCustomerExcludeFuelLevy")
				Me.OnchkCustomerExcludeFuelLevyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>  _
	Public Property cmbRateIncrease() As System.Nullable(Of Short)
		Get
			Return Me._cmbRateIncrease
		End Get
		Set
			If (Me._cmbRateIncrease.Equals(value) = false) Then
				Me.OncmbRateIncreaseChanging(value)
				Me.SendPropertyChanging
				Me._cmbRateIncrease = value
				Me.SendPropertyChanged("cmbRateIncrease")
				Me.OncmbRateIncreaseChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblFuelLevy")>  _
Partial Public Class tblFuelLevy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _FuelLevyID As System.Guid
	
	Private _Aid As Integer
	
	Private _Code As String
	
	Private _Description As String
	
	Private _Percentage As System.Nullable(Of Single)
	
	Private _MYOBInvoiceCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnFuelLevyIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFuelLevyIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPercentageChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnPercentageChanged()
    End Sub
    Partial Private Sub OnMYOBInvoiceCodeChanging(value As String)
    End Sub
    Partial Private Sub OnMYOBInvoiceCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuelLevyID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FuelLevyID() As System.Guid
		Get
			Return Me._FuelLevyID
		End Get
		Set
			If ((Me._FuelLevyID = value)  _
						= false) Then
				Me.OnFuelLevyIDChanging(value)
				Me.SendPropertyChanging
				Me._FuelLevyID = value
				Me.SendPropertyChanged("FuelLevyID")
				Me.OnFuelLevyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(8)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(22)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Percentage", DbType:="Real")>  _
	Public Property Percentage() As System.Nullable(Of Single)
		Get
			Return Me._Percentage
		End Get
		Set
			If (Me._Percentage.Equals(value) = false) Then
				Me.OnPercentageChanging(value)
				Me.SendPropertyChanging
				Me._Percentage = value
				Me.SendPropertyChanged("Percentage")
				Me.OnPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBInvoiceCode", DbType:="NVarChar(12)")>  _
	Public Property MYOBInvoiceCode() As String
		Get
			Return Me._MYOBInvoiceCode
		End Get
		Set
			If (String.Equals(Me._MYOBInvoiceCode, value) = false) Then
				Me.OnMYOBInvoiceCodeChanging(value)
				Me.SendPropertyChanging
				Me._MYOBInvoiceCode = value
				Me.SendPropertyChanged("MYOBInvoiceCode")
				Me.OnMYOBInvoiceCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvoicingFrequency")>  _
Partial Public Class tblInvoicingFrequency
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InvoiceFrequencyID As System.Guid
	
	Private _IId As Integer
	
	Private _InvoiceId As String
	
	Private _Frequency As String
	
	Private _NoOfWeeks As System.Nullable(Of Single)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanged()
    End Sub
    Partial Private Sub OnIIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIdChanged()
    End Sub
    Partial Private Sub OnInvoiceIdChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceIdChanged()
    End Sub
    Partial Private Sub OnFrequencyChanging(value As String)
    End Sub
    Partial Private Sub OnFrequencyChanged()
    End Sub
    Partial Private Sub OnNoOfWeeksChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnNoOfWeeksChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequencyID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property InvoiceFrequencyID() As System.Guid
		Get
			Return Me._InvoiceFrequencyID
		End Get
		Set
			If ((Me._InvoiceFrequencyID = value)  _
						= false) Then
				Me.OnInvoiceFrequencyIDChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceFrequencyID = value
				Me.SendPropertyChanged("InvoiceFrequencyID")
				Me.OnInvoiceFrequencyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IId", DbType:="Int NOT NULL")>  _
	Public Property IId() As Integer
		Get
			Return Me._IId
		End Get
		Set
			If ((Me._IId = value)  _
						= false) Then
				Me.OnIIdChanging(value)
				Me.SendPropertyChanging
				Me._IId = value
				Me.SendPropertyChanged("IId")
				Me.OnIIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceId", DbType:="NVarChar(1)")>  _
	Public Property InvoiceId() As String
		Get
			Return Me._InvoiceId
		End Get
		Set
			If (String.Equals(Me._InvoiceId, value) = false) Then
				Me.OnInvoiceIdChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceId = value
				Me.SendPropertyChanged("InvoiceId")
				Me.OnInvoiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>  _
	Public Property Frequency() As String
		Get
			Return Me._Frequency
		End Get
		Set
			If (String.Equals(Me._Frequency, value) = false) Then
				Me.OnFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._Frequency = value
				Me.SendPropertyChanged("Frequency")
				Me.OnFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOfWeeks", DbType:="Real")>  _
	Public Property NoOfWeeks() As System.Nullable(Of Single)
		Get
			Return Me._NoOfWeeks
		End Get
		Set
			If (Me._NoOfWeeks.Equals(value) = false) Then
				Me.OnNoOfWeeksChanging(value)
				Me.SendPropertyChanging
				Me._NoOfWeeks = value
				Me.SendPropertyChanged("NoOfWeeks")
				Me.OnNoOfWeeksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSites")>  _
Partial Public Class tblSite
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SiteID As System.Guid
	
	Private _Cid As Integer
	
	Private _SiteName As String
	
	Private _Customer As System.Nullable(Of Short)
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _AddressLine4 As String
	
	Private _Suburb As String
	
	Private _State As String
	
	Private _PostCode As System.Nullable(Of Short)
	
	Private _PhoneNo As String
	
	Private _FaxNo As String
	
	Private _SiteContactName As String
	
	Private _SiteContactPhone As String
	
	Private _SiteContactFax As String
	
	Private _SiteContactMobile As String
	
	Private _SiteContactEmail As String
	
	Private _PostalAddressLine1 As String
	
	Private _PostalAddressLine2 As String
	
	Private _PostalSuburb As String
	
	Private _PostalState As String
	
	Private _PostalPostCode As System.Nullable(Of Short)
	
	Private _SiteStartDate As System.Nullable(Of Date)
	
	Private _SitePeriod As System.Nullable(Of Integer)
	
	Private _SiteContractExpiry As System.Nullable(Of Date)
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _SiteCeaseReason As System.Nullable(Of Integer)
	
	Private _InvoiceFrequency As System.Nullable(Of Integer)
	
	Private _InvoiceCommencing As System.Nullable(Of Date)
	
	Private _IndustryGroup As System.Nullable(Of Short)
	
	Private _PreviousSupplier As System.Nullable(Of Short)
	
	Private _LostBusinessTo As System.Nullable(Of Short)
	
	Private _SalesPerson As System.Nullable(Of Short)
	
	Private _InitialServiceAgreementNo As String
	
	Private _InvoiceMonth1 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth2 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth3 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth4 As System.Nullable(Of Integer)
	
	Private _GeneralSiteServiceComments As String
	
	Private _TotalUnits As System.Nullable(Of Double)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _Zone As System.Nullable(Of Integer)
	
	Private _SeparateInvoice As Boolean
	
	Private _PurchaseOrderNumber As String
	
	Private _chkSitesExcludeFuelLevy As Boolean
	
	Private _cmbRateIncrease As System.Nullable(Of Short)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As Integer)
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnCustomerChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCustomerChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnAddressLine3Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine3Changed()
    End Sub
    Partial Private Sub OnAddressLine4Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine4Changed()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFaxNoChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNoChanged()
    End Sub
    Partial Private Sub OnSiteContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactNameChanged()
    End Sub
    Partial Private Sub OnSiteContactPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactPhoneChanged()
    End Sub
    Partial Private Sub OnSiteContactFaxChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactFaxChanged()
    End Sub
    Partial Private Sub OnSiteContactMobileChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactMobileChanged()
    End Sub
    Partial Private Sub OnSiteContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnSiteContactEmailChanged()
    End Sub
    Partial Private Sub OnPostalAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddressLine1Changed()
    End Sub
    Partial Private Sub OnPostalAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddressLine2Changed()
    End Sub
    Partial Private Sub OnPostalSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnPostalSuburbChanged()
    End Sub
    Partial Private Sub OnPostalStateChanging(value As String)
    End Sub
    Partial Private Sub OnPostalStateChanged()
    End Sub
    Partial Private Sub OnPostalPostCodeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPostalPostCodeChanged()
    End Sub
    Partial Private Sub OnSiteStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSiteStartDateChanged()
    End Sub
    Partial Private Sub OnSitePeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSitePeriodChanged()
    End Sub
    Partial Private Sub OnSiteContractExpiryChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSiteContractExpiryChanged()
    End Sub
    Partial Private Sub OnSiteCeaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSiteCeaseDateChanged()
    End Sub
    Partial Private Sub OnSiteCeaseReasonChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteCeaseReasonChanged()
    End Sub
    Partial Private Sub OnInvoiceFrequencyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceFrequencyChanged()
    End Sub
    Partial Private Sub OnInvoiceCommencingChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInvoiceCommencingChanged()
    End Sub
    Partial Private Sub OnIndustryGroupChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnIndustryGroupChanged()
    End Sub
    Partial Private Sub OnPreviousSupplierChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPreviousSupplierChanged()
    End Sub
    Partial Private Sub OnLostBusinessToChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnLostBusinessToChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnInitialServiceAgreementNoChanging(value As String)
    End Sub
    Partial Private Sub OnInitialServiceAgreementNoChanged()
    End Sub
    Partial Private Sub OnInvoiceMonth1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth1Changed()
    End Sub
    Partial Private Sub OnInvoiceMonth2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth2Changed()
    End Sub
    Partial Private Sub OnInvoiceMonth3Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth3Changed()
    End Sub
    Partial Private Sub OnInvoiceMonth4Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceMonth4Changed()
    End Sub
    Partial Private Sub OnGeneralSiteServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnGeneralSiteServiceCommentsChanged()
    End Sub
    Partial Private Sub OnTotalUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalUnitsChanged()
    End Sub
    Partial Private Sub OnTotalAmountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalAmountChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnSeparateInvoiceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSeparateInvoiceChanged()
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnchkSitesExcludeFuelLevyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnchkSitesExcludeFuelLevyChanged()
    End Sub
    Partial Private Sub OncmbRateIncreaseChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OncmbRateIncreaseChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SiteID() As System.Guid
		Get
			Return Me._SiteID
		End Get
		Set
			If ((Me._SiteID = value)  _
						= false) Then
				Me.OnSiteIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteID = value
				Me.SendPropertyChanged("SiteID")
				Me.OnSiteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me.OnCidChanging(value)
				Me.SendPropertyChanging
				Me._Cid = value
				Me.SendPropertyChanged("Cid")
				Me.OnCidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me.OnSiteNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteName = value
				Me.SendPropertyChanged("SiteName")
				Me.OnSiteNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me.OnCustomerChanging(value)
				Me.SendPropertyChanging
				Me._Customer = value
				Me.SendPropertyChanged("Customer")
				Me.OnCustomerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me.OnAddressLine1Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine1 = value
				Me.SendPropertyChanged("AddressLine1")
				Me.OnAddressLine1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me.OnAddressLine2Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine2 = value
				Me.SendPropertyChanged("AddressLine2")
				Me.OnAddressLine2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me.OnAddressLine3Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine3 = value
				Me.SendPropertyChanged("AddressLine3")
				Me.OnAddressLine3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(50)")>  _
	Public Property AddressLine4() As String
		Get
			Return Me._AddressLine4
		End Get
		Set
			If (String.Equals(Me._AddressLine4, value) = false) Then
				Me.OnAddressLine4Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine4 = value
				Me.SendPropertyChanged("AddressLine4")
				Me.OnAddressLine4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me.OnSuburbChanging(value)
				Me.SendPropertyChanging
				Me._Suburb = value
				Me.SendPropertyChanged("Suburb")
				Me.OnSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(5)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>  _
	Public Property PostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostCode
		End Get
		Set
			If (Me._PostCode.Equals(value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(50)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(50)")>  _
	Public Property FaxNo() As String
		Get
			Return Me._FaxNo
		End Get
		Set
			If (String.Equals(Me._FaxNo, value) = false) Then
				Me.OnFaxNoChanging(value)
				Me.SendPropertyChanging
				Me._FaxNo = value
				Me.SendPropertyChanged("FaxNo")
				Me.OnFaxNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>  _
	Public Property SiteContactName() As String
		Get
			Return Me._SiteContactName
		End Get
		Set
			If (String.Equals(Me._SiteContactName, value) = false) Then
				Me.OnSiteContactNameChanging(value)
				Me.SendPropertyChanging
				Me._SiteContactName = value
				Me.SendPropertyChanged("SiteContactName")
				Me.OnSiteContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>  _
	Public Property SiteContactPhone() As String
		Get
			Return Me._SiteContactPhone
		End Get
		Set
			If (String.Equals(Me._SiteContactPhone, value) = false) Then
				Me.OnSiteContactPhoneChanging(value)
				Me.SendPropertyChanging
				Me._SiteContactPhone = value
				Me.SendPropertyChanged("SiteContactPhone")
				Me.OnSiteContactPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactFax", DbType:="NVarChar(50)")>  _
	Public Property SiteContactFax() As String
		Get
			Return Me._SiteContactFax
		End Get
		Set
			If (String.Equals(Me._SiteContactFax, value) = false) Then
				Me.OnSiteContactFaxChanging(value)
				Me.SendPropertyChanging
				Me._SiteContactFax = value
				Me.SendPropertyChanged("SiteContactFax")
				Me.OnSiteContactFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>  _
	Public Property SiteContactMobile() As String
		Get
			Return Me._SiteContactMobile
		End Get
		Set
			If (String.Equals(Me._SiteContactMobile, value) = false) Then
				Me.OnSiteContactMobileChanging(value)
				Me.SendPropertyChanging
				Me._SiteContactMobile = value
				Me.SendPropertyChanged("SiteContactMobile")
				Me.OnSiteContactMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactEmail", DbType:="NVarChar(50)")>  _
	Public Property SiteContactEmail() As String
		Get
			Return Me._SiteContactEmail
		End Get
		Set
			If (String.Equals(Me._SiteContactEmail, value) = false) Then
				Me.OnSiteContactEmailChanging(value)
				Me.SendPropertyChanging
				Me._SiteContactEmail = value
				Me.SendPropertyChanged("SiteContactEmail")
				Me.OnSiteContactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine1() As String
		Get
			Return Me._PostalAddressLine1
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine1, value) = false) Then
				Me.OnPostalAddressLine1Changing(value)
				Me.SendPropertyChanging
				Me._PostalAddressLine1 = value
				Me.SendPropertyChanged("PostalAddressLine1")
				Me.OnPostalAddressLine1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine2() As String
		Get
			Return Me._PostalAddressLine2
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine2, value) = false) Then
				Me.OnPostalAddressLine2Changing(value)
				Me.SendPropertyChanging
				Me._PostalAddressLine2 = value
				Me.SendPropertyChanged("PostalAddressLine2")
				Me.OnPostalAddressLine2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(50)")>  _
	Public Property PostalSuburb() As String
		Get
			Return Me._PostalSuburb
		End Get
		Set
			If (String.Equals(Me._PostalSuburb, value) = false) Then
				Me.OnPostalSuburbChanging(value)
				Me.SendPropertyChanging
				Me._PostalSuburb = value
				Me.SendPropertyChanged("PostalSuburb")
				Me.OnPostalSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalState", DbType:="NVarChar(6)")>  _
	Public Property PostalState() As String
		Get
			Return Me._PostalState
		End Get
		Set
			If (String.Equals(Me._PostalState, value) = false) Then
				Me.OnPostalStateChanging(value)
				Me.SendPropertyChanging
				Me._PostalState = value
				Me.SendPropertyChanged("PostalState")
				Me.OnPostalStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalPostCode", DbType:="SmallInt")>  _
	Public Property PostalPostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostalPostCode
		End Get
		Set
			If (Me._PostalPostCode.Equals(value) = false) Then
				Me.OnPostalPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalPostCode = value
				Me.SendPropertyChanged("PostalPostCode")
				Me.OnPostalPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>  _
	Public Property SiteStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteStartDate
		End Get
		Set
			If (Me._SiteStartDate.Equals(value) = false) Then
				Me.OnSiteStartDateChanging(value)
				Me.SendPropertyChanging
				Me._SiteStartDate = value
				Me.SendPropertyChanged("SiteStartDate")
				Me.OnSiteStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitePeriod", DbType:="Int")>  _
	Public Property SitePeriod() As System.Nullable(Of Integer)
		Get
			Return Me._SitePeriod
		End Get
		Set
			If (Me._SitePeriod.Equals(value) = false) Then
				Me.OnSitePeriodChanging(value)
				Me.SendPropertyChanging
				Me._SitePeriod = value
				Me.SendPropertyChanged("SitePeriod")
				Me.OnSitePeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>  _
	Public Property SiteContractExpiry() As System.Nullable(Of Date)
		Get
			Return Me._SiteContractExpiry
		End Get
		Set
			If (Me._SiteContractExpiry.Equals(value) = false) Then
				Me.OnSiteContractExpiryChanging(value)
				Me.SendPropertyChanging
				Me._SiteContractExpiry = value
				Me.SendPropertyChanged("SiteContractExpiry")
				Me.OnSiteContractExpiryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me.OnSiteCeaseDateChanging(value)
				Me.SendPropertyChanging
				Me._SiteCeaseDate = value
				Me.SendPropertyChanged("SiteCeaseDate")
				Me.OnSiteCeaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseReason", DbType:="Int")>  _
	Public Property SiteCeaseReason() As System.Nullable(Of Integer)
		Get
			Return Me._SiteCeaseReason
		End Get
		Set
			If (Me._SiteCeaseReason.Equals(value) = false) Then
				Me.OnSiteCeaseReasonChanging(value)
				Me.SendPropertyChanging
				Me._SiteCeaseReason = value
				Me.SendPropertyChanged("SiteCeaseReason")
				Me.OnSiteCeaseReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequency", DbType:="Int")>  _
	Public Property InvoiceFrequency() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceFrequency
		End Get
		Set
			If (Me._InvoiceFrequency.Equals(value) = false) Then
				Me.OnInvoiceFrequencyChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceFrequency = value
				Me.SendPropertyChanged("InvoiceFrequency")
				Me.OnInvoiceFrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>  _
	Public Property InvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceCommencing
		End Get
		Set
			If (Me._InvoiceCommencing.Equals(value) = false) Then
				Me.OnInvoiceCommencingChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceCommencing = value
				Me.SendPropertyChanged("InvoiceCommencing")
				Me.OnInvoiceCommencingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroup", DbType:="SmallInt")>  _
	Public Property IndustryGroup() As System.Nullable(Of Short)
		Get
			Return Me._IndustryGroup
		End Get
		Set
			If (Me._IndustryGroup.Equals(value) = false) Then
				Me.OnIndustryGroupChanging(value)
				Me.SendPropertyChanging
				Me._IndustryGroup = value
				Me.SendPropertyChanged("IndustryGroup")
				Me.OnIndustryGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="SmallInt")>  _
	Public Property PreviousSupplier() As System.Nullable(Of Short)
		Get
			Return Me._PreviousSupplier
		End Get
		Set
			If (Me._PreviousSupplier.Equals(value) = false) Then
				Me.OnPreviousSupplierChanging(value)
				Me.SendPropertyChanging
				Me._PreviousSupplier = value
				Me.SendPropertyChanged("PreviousSupplier")
				Me.OnPreviousSupplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LostBusinessTo", DbType:="SmallInt")>  _
	Public Property LostBusinessTo() As System.Nullable(Of Short)
		Get
			Return Me._LostBusinessTo
		End Get
		Set
			If (Me._LostBusinessTo.Equals(value) = false) Then
				Me.OnLostBusinessToChanging(value)
				Me.SendPropertyChanging
				Me._LostBusinessTo = value
				Me.SendPropertyChanged("LostBusinessTo")
				Me.OnLostBusinessToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="SmallInt")>  _
	Public Property SalesPerson() As System.Nullable(Of Short)
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (Me._SalesPerson.Equals(value) = false) Then
				Me.OnSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._SalesPerson = value
				Me.SendPropertyChanged("SalesPerson")
				Me.OnSalesPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InitialServiceAgreementNo", DbType:="NVarChar(22)")>  _
	Public Property InitialServiceAgreementNo() As String
		Get
			Return Me._InitialServiceAgreementNo
		End Get
		Set
			If (String.Equals(Me._InitialServiceAgreementNo, value) = false) Then
				Me.OnInitialServiceAgreementNoChanging(value)
				Me.SendPropertyChanging
				Me._InitialServiceAgreementNo = value
				Me.SendPropertyChanged("InitialServiceAgreementNo")
				Me.OnInitialServiceAgreementNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>  _
	Public Property InvoiceMonth1() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth1
		End Get
		Set
			If (Me._InvoiceMonth1.Equals(value) = false) Then
				Me.OnInvoiceMonth1Changing(value)
				Me.SendPropertyChanging
				Me._InvoiceMonth1 = value
				Me.SendPropertyChanged("InvoiceMonth1")
				Me.OnInvoiceMonth1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>  _
	Public Property InvoiceMonth2() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth2
		End Get
		Set
			If (Me._InvoiceMonth2.Equals(value) = false) Then
				Me.OnInvoiceMonth2Changing(value)
				Me.SendPropertyChanging
				Me._InvoiceMonth2 = value
				Me.SendPropertyChanged("InvoiceMonth2")
				Me.OnInvoiceMonth2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>  _
	Public Property InvoiceMonth3() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth3
		End Get
		Set
			If (Me._InvoiceMonth3.Equals(value) = false) Then
				Me.OnInvoiceMonth3Changing(value)
				Me.SendPropertyChanging
				Me._InvoiceMonth3 = value
				Me.SendPropertyChanged("InvoiceMonth3")
				Me.OnInvoiceMonth3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>  _
	Public Property InvoiceMonth4() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth4
		End Get
		Set
			If (Me._InvoiceMonth4.Equals(value) = false) Then
				Me.OnInvoiceMonth4Changing(value)
				Me.SendPropertyChanging
				Me._InvoiceMonth4 = value
				Me.SendPropertyChanged("InvoiceMonth4")
				Me.OnInvoiceMonth4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property GeneralSiteServiceComments() As String
		Get
			Return Me._GeneralSiteServiceComments
		End Get
		Set
			If (String.Equals(Me._GeneralSiteServiceComments, value) = false) Then
				Me.OnGeneralSiteServiceCommentsChanging(value)
				Me.SendPropertyChanging
				Me._GeneralSiteServiceComments = value
				Me.SendPropertyChanged("GeneralSiteServiceComments")
				Me.OnGeneralSiteServiceCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalUnits", DbType:="Float")>  _
	Public Property TotalUnits() As System.Nullable(Of Double)
		Get
			Return Me._TotalUnits
		End Get
		Set
			If (Me._TotalUnits.Equals(value) = false) Then
				Me.OnTotalUnitsChanging(value)
				Me.SendPropertyChanging
				Me._TotalUnits = value
				Me.SendPropertyChanged("TotalUnits")
				Me.OnTotalUnitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me.OnTotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._TotalAmount = value
				Me.SendPropertyChanged("TotalAmount")
				Me.OnTotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>  _
	Public Property Zone() As System.Nullable(Of Integer)
		Get
			Return Me._Zone
		End Get
		Set
			If (Me._Zone.Equals(value) = false) Then
				Me.OnZoneChanging(value)
				Me.SendPropertyChanging
				Me._Zone = value
				Me.SendPropertyChanged("Zone")
				Me.OnZoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeparateInvoice", DbType:="Bit NOT NULL")>  _
	Public Property SeparateInvoice() As Boolean
		Get
			Return Me._SeparateInvoice
		End Get
		Set
			If ((Me._SeparateInvoice = value)  _
						= false) Then
				Me.OnSeparateInvoiceChanging(value)
				Me.SendPropertyChanging
				Me._SeparateInvoice = value
				Me.SendPropertyChanged("SeparateInvoice")
				Me.OnSeparateInvoiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property PurchaseOrderNumber() As String
		Get
			Return Me._PurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._PurchaseOrderNumber, value) = false) Then
				Me.OnPurchaseOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseOrderNumber = value
				Me.SendPropertyChanged("PurchaseOrderNumber")
				Me.OnPurchaseOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkSitesExcludeFuelLevy", DbType:="Bit NOT NULL")>  _
	Public Property chkSitesExcludeFuelLevy() As Boolean
		Get
			Return Me._chkSitesExcludeFuelLevy
		End Get
		Set
			If ((Me._chkSitesExcludeFuelLevy = value)  _
						= false) Then
				Me.OnchkSitesExcludeFuelLevyChanging(value)
				Me.SendPropertyChanging
				Me._chkSitesExcludeFuelLevy = value
				Me.SendPropertyChanged("chkSitesExcludeFuelLevy")
				Me.OnchkSitesExcludeFuelLevyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>  _
	Public Property cmbRateIncrease() As System.Nullable(Of Short)
		Get
			Return Me._cmbRateIncrease
		End Get
		Set
			If (Me._cmbRateIncrease.Equals(value) = false) Then
				Me.OncmbRateIncreaseChanging(value)
				Me.SendPropertyChanging
				Me._cmbRateIncrease = value
				Me.SendPropertyChanged("cmbRateIncrease")
				Me.OncmbRateIncreaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerRating")>  _
Partial Public Class tblCustomerRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerRatingID As System.Guid
	
	Private _Rid As Integer
	
	Private _CustomerRating As String
	
	Private _CustomerRatingDesc As String
	
	Private _FromValue As System.Nullable(Of Integer)
	
	Private _ToValue As System.Nullable(Of Integer)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerRatingIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerRatingIDChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As Integer)
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnCustomerRatingChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerRatingChanged()
    End Sub
    Partial Private Sub OnCustomerRatingDescChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerRatingDescChanged()
    End Sub
    Partial Private Sub OnFromValueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFromValueChanged()
    End Sub
    Partial Private Sub OnToValueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnToValueChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustomerRatingID() As System.Guid
		Get
			Return Me._CustomerRatingID
		End Get
		Set
			If ((Me._CustomerRatingID = value)  _
						= false) Then
				Me.OnCustomerRatingIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerRatingID = value
				Me.SendPropertyChanged("CustomerRatingID")
				Me.OnCustomerRatingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>  _
	Public Property Rid() As Integer
		Get
			Return Me._Rid
		End Get
		Set
			If ((Me._Rid = value)  _
						= false) Then
				Me.OnRidChanging(value)
				Me.SendPropertyChanging
				Me._Rid = value
				Me.SendPropertyChanged("Rid")
				Me.OnRidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="NVarChar(22)")>  _
	Public Property CustomerRating() As String
		Get
			Return Me._CustomerRating
		End Get
		Set
			If (String.Equals(Me._CustomerRating, value) = false) Then
				Me.OnCustomerRatingChanging(value)
				Me.SendPropertyChanging
				Me._CustomerRating = value
				Me.SendPropertyChanged("CustomerRating")
				Me.OnCustomerRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingDesc", DbType:="NVarChar(50)")>  _
	Public Property CustomerRatingDesc() As String
		Get
			Return Me._CustomerRatingDesc
		End Get
		Set
			If (String.Equals(Me._CustomerRatingDesc, value) = false) Then
				Me.OnCustomerRatingDescChanging(value)
				Me.SendPropertyChanging
				Me._CustomerRatingDesc = value
				Me.SendPropertyChanged("CustomerRatingDesc")
				Me.OnCustomerRatingDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromValue", DbType:="Int")>  _
	Public Property FromValue() As System.Nullable(Of Integer)
		Get
			Return Me._FromValue
		End Get
		Set
			If (Me._FromValue.Equals(value) = false) Then
				Me.OnFromValueChanging(value)
				Me.SendPropertyChanging
				Me._FromValue = value
				Me.SendPropertyChanged("FromValue")
				Me.OnFromValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToValue", DbType:="Int")>  _
	Public Property ToValue() As System.Nullable(Of Integer)
		Get
			Return Me._ToValue
		End Get
		Set
			If (Me._ToValue.Equals(value) = false) Then
				Me.OnToValueChanging(value)
				Me.SendPropertyChanging
				Me._ToValue = value
				Me.SendPropertyChanged("ToValue")
				Me.OnToValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesPersons")>  _
Partial Public Class tblSalesPerson
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesPersonID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _SalesPerson As String
	
	Private _SalesPersonStartDate As System.Nullable(Of Date)
	
	Private _SalesPersonComments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesPersonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSalesPersonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As String)
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnSalesPersonStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSalesPersonStartDateChanged()
    End Sub
    Partial Private Sub OnSalesPersonCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnSalesPersonCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SalesPersonID() As System.Guid
		Get
			Return Me._SalesPersonID
		End Get
		Set
			If ((Me._SalesPersonID = value)  _
						= false) Then
				Me.OnSalesPersonIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesPersonID = value
				Me.SendPropertyChanged("SalesPersonID")
				Me.OnSalesPersonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>  _
	Public Property SalesPerson() As String
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (String.Equals(Me._SalesPerson, value) = false) Then
				Me.OnSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._SalesPerson = value
				Me.SendPropertyChanged("SalesPerson")
				Me.OnSalesPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonStartDate", DbType:="DateTime")>  _
	Public Property SalesPersonStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SalesPersonStartDate
		End Get
		Set
			If (Me._SalesPersonStartDate.Equals(value) = false) Then
				Me.OnSalesPersonStartDateChanging(value)
				Me.SendPropertyChanging
				Me._SalesPersonStartDate = value
				Me.SendPropertyChanged("SalesPersonStartDate")
				Me.OnSalesPersonStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonComments", DbType:="NVarChar(MAX)")>  _
	Public Property SalesPersonComments() As String
		Get
			Return Me._SalesPersonComments
		End Get
		Set
			If (String.Equals(Me._SalesPersonComments, value) = false) Then
				Me.OnSalesPersonCommentsChanging(value)
				Me.SendPropertyChanging
				Me._SalesPersonComments = value
				Me.SendPropertyChanged("SalesPersonComments")
				Me.OnSalesPersonCommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblContractCeaseReasons")>  _
Partial Public Class tblContractCeaseReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CeaseReasonID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _CeaseReasonDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCeaseReasonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCeaseReasonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCeaseReasonDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCeaseReasonDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CeaseReasonID() As System.Guid
		Get
			Return Me._CeaseReasonID
		End Get
		Set
			If ((Me._CeaseReasonID = value)  _
						= false) Then
				Me.OnCeaseReasonIDChanging(value)
				Me.SendPropertyChanging
				Me._CeaseReasonID = value
				Me.SendPropertyChanged("CeaseReasonID")
				Me.OnCeaseReasonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonDescription", DbType:="NVarChar(50)")>  _
	Public Property CeaseReasonDescription() As String
		Get
			Return Me._CeaseReasonDescription
		End Get
		Set
			If (String.Equals(Me._CeaseReasonDescription, value) = false) Then
				Me.OnCeaseReasonDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CeaseReasonDescription = value
				Me.SendPropertyChanged("CeaseReasonDescription")
				Me.OnCeaseReasonDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPreviousSuppliers")>  _
Partial Public Class tblPreviousSupplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PreviousSupplierID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _PreviousSupplier As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnPreviousSupplierChanging(value As String)
    End Sub
    Partial Private Sub OnPreviousSupplierChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PreviousSupplierID() As System.Guid
		Get
			Return Me._PreviousSupplierID
		End Get
		Set
			If ((Me._PreviousSupplierID = value)  _
						= false) Then
				Me.OnPreviousSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._PreviousSupplierID = value
				Me.SendPropertyChanged("PreviousSupplierID")
				Me.OnPreviousSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="NVarChar(50)")>  _
	Public Property PreviousSupplier() As String
		Get
			Return Me._PreviousSupplier
		End Get
		Set
			If (String.Equals(Me._PreviousSupplier, value) = false) Then
				Me.OnPreviousSupplierChanging(value)
				Me.SendPropertyChanging
				Me._PreviousSupplier = value
				Me.SendPropertyChanged("PreviousSupplier")
				Me.OnPreviousSupplierChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCIRReason")>  _
Partial Public Class tblCIRReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReasonID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CId As Integer
	
	Private _CIRReason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReasonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnReasonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCIdChanged()
    End Sub
    Partial Private Sub OnCIRReasonChanging(value As String)
    End Sub
    Partial Private Sub OnCIRReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReasonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ReasonID() As System.Guid
		Get
			Return Me._ReasonID
		End Get
		Set
			If ((Me._ReasonID = value)  _
						= false) Then
				Me.OnReasonIDChanging(value)
				Me.SendPropertyChanging
				Me._ReasonID = value
				Me.SendPropertyChanged("ReasonID")
				Me.OnReasonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int NOT NULL")>  _
	Public Property CId() As Integer
		Get
			Return Me._CId
		End Get
		Set
			If ((Me._CId = value)  _
						= false) Then
				Me.OnCIdChanging(value)
				Me.SendPropertyChanging
				Me._CId = value
				Me.SendPropertyChanged("CId")
				Me.OnCIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIRReason", DbType:="NVarChar(50)")>  _
	Public Property CIRReason() As String
		Get
			Return Me._CIRReason
		End Get
		Set
			If (String.Equals(Me._CIRReason, value) = false) Then
				Me.OnCIRReasonChanging(value)
				Me.SendPropertyChanging
				Me._CIRReason = value
				Me.SendPropertyChanged("CIRReason")
				Me.OnCIRReasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRunFortnightlyCycles")>  _
Partial Public Class tblRunFortnightlyCycle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FortnightlyCyclesID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Aid As Integer
	
	Private _CycleDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnCycleDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCycleDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FortnightlyCyclesID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FortnightlyCyclesID() As System.Guid
		Get
			Return Me._FortnightlyCyclesID
		End Get
		Set
			If ((Me._FortnightlyCyclesID = value)  _
						= false) Then
				Me.OnFortnightlyCyclesIDChanging(value)
				Me.SendPropertyChanging
				Me._FortnightlyCyclesID = value
				Me.SendPropertyChanged("FortnightlyCyclesID")
				Me.OnFortnightlyCyclesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CycleDescription", DbType:="NVarChar(50)")>  _
	Public Property CycleDescription() As String
		Get
			Return Me._CycleDescription
		End Get
		Set
			If (String.Equals(Me._CycleDescription, value) = false) Then
				Me.OnCycleDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CycleDescription = value
				Me.SendPropertyChanged("CycleDescription")
				Me.OnCycleDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRevenueChangeReason")>  _
Partial Public Class tblRevenueChangeReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RevenueChangeReasonID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Rid As Integer
	
	Private _RevenueChangeReason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As Integer)
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnRevenueChangeReasonChanging(value As String)
    End Sub
    Partial Private Sub OnRevenueChangeReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReasonID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RevenueChangeReasonID() As System.Guid
		Get
			Return Me._RevenueChangeReasonID
		End Get
		Set
			If ((Me._RevenueChangeReasonID = value)  _
						= false) Then
				Me.OnRevenueChangeReasonIDChanging(value)
				Me.SendPropertyChanging
				Me._RevenueChangeReasonID = value
				Me.SendPropertyChanged("RevenueChangeReasonID")
				Me.OnRevenueChangeReasonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>  _
	Public Property Rid() As Integer
		Get
			Return Me._Rid
		End Get
		Set
			If ((Me._Rid = value)  _
						= false) Then
				Me.OnRidChanging(value)
				Me.SendPropertyChanging
				Me._Rid = value
				Me.SendPropertyChanged("Rid")
				Me.OnRidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReason", DbType:="NVarChar(50)")>  _
	Public Property RevenueChangeReason() As String
		Get
			Return Me._RevenueChangeReason
		End Get
		Set
			If (String.Equals(Me._RevenueChangeReason, value) = false) Then
				Me.OnRevenueChangeReasonChanging(value)
				Me.SendPropertyChanging
				Me._RevenueChangeReason = value
				Me.SendPropertyChanged("RevenueChangeReason")
				Me.OnRevenueChangeReasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblServiceFrequency")>  _
Partial Public Class tblServiceFrequency
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FrequencyID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Fid As Integer
	
	Private _FrequencyDescription As String
	
	Private _Factor As System.Nullable(Of Single)
	
	Private _Periodical As Boolean
	
	Private _Notes As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFrequencyIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnFrequencyIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnFidChanging(value As Integer)
    End Sub
    Partial Private Sub OnFidChanged()
    End Sub
    Partial Private Sub OnFrequencyDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFrequencyDescriptionChanged()
    End Sub
    Partial Private Sub OnFactorChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnFactorChanged()
    End Sub
    Partial Private Sub OnPeriodicalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPeriodicalChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FrequencyID() As System.Guid
		Get
			Return Me._FrequencyID
		End Get
		Set
			If ((Me._FrequencyID = value)  _
						= false) Then
				Me.OnFrequencyIDChanging(value)
				Me.SendPropertyChanging
				Me._FrequencyID = value
				Me.SendPropertyChanged("FrequencyID")
				Me.OnFrequencyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fid", DbType:="Int NOT NULL")>  _
	Public Property Fid() As Integer
		Get
			Return Me._Fid
		End Get
		Set
			If ((Me._Fid = value)  _
						= false) Then
				Me.OnFidChanging(value)
				Me.SendPropertyChanging
				Me._Fid = value
				Me.SendPropertyChanged("Fid")
				Me.OnFidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyDescription", DbType:="NVarChar(50)")>  _
	Public Property FrequencyDescription() As String
		Get
			Return Me._FrequencyDescription
		End Get
		Set
			If (String.Equals(Me._FrequencyDescription, value) = false) Then
				Me.OnFrequencyDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._FrequencyDescription = value
				Me.SendPropertyChanged("FrequencyDescription")
				Me.OnFrequencyDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Factor", DbType:="Real")>  _
	Public Property Factor() As System.Nullable(Of Single)
		Get
			Return Me._Factor
		End Get
		Set
			If (Me._Factor.Equals(value) = false) Then
				Me.OnFactorChanging(value)
				Me.SendPropertyChanging
				Me._Factor = value
				Me.SendPropertyChanged("Factor")
				Me.OnFactorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Periodical", DbType:="Bit NOT NULL")>  _
	Public Property Periodical() As Boolean
		Get
			Return Me._Periodical
		End Get
		Set
			If ((Me._Periodical = value)  _
						= false) Then
				Me.OnPeriodicalChanging(value)
				Me.SendPropertyChanging
				Me._Periodical = value
				Me.SendPropertyChanged("Periodical")
				Me.OnPeriodicalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSiteReSignDetails")>  _
Partial Public Class tblSiteReSignDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ResignHistoryID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Cid As Integer
	
	Private _SiteCId As System.Nullable(Of Integer)
	
	Private _ReSignDate As System.Nullable(Of Date)
	
	Private _ReSignPeriod As System.Nullable(Of Short)
	
	Private _ServiceAgreementNo As String
	
	Private _SalesPerson As System.Nullable(Of Short)
	
	Private _ContractExpiryDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResignHistoryIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnResignHistoryIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As Integer)
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnSiteCIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteCIdChanged()
    End Sub
    Partial Private Sub OnReSignDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReSignDateChanged()
    End Sub
    Partial Private Sub OnReSignPeriodChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnReSignPeriodChanged()
    End Sub
    Partial Private Sub OnServiceAgreementNoChanging(value As String)
    End Sub
    Partial Private Sub OnServiceAgreementNoChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnContractExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnContractExpiryDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResignHistoryID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ResignHistoryID() As System.Guid
		Get
			Return Me._ResignHistoryID
		End Get
		Set
			If ((Me._ResignHistoryID = value)  _
						= false) Then
				Me.OnResignHistoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ResignHistoryID = value
				Me.SendPropertyChanged("ResignHistoryID")
				Me.OnResignHistoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me.OnCidChanging(value)
				Me.SendPropertyChanging
				Me._Cid = value
				Me.SendPropertyChanged("Cid")
				Me.OnCidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCId", DbType:="Int")>  _
	Public Property SiteCId() As System.Nullable(Of Integer)
		Get
			Return Me._SiteCId
		End Get
		Set
			If (Me._SiteCId.Equals(value) = false) Then
				Me.OnSiteCIdChanging(value)
				Me.SendPropertyChanging
				Me._SiteCId = value
				Me.SendPropertyChanged("SiteCId")
				Me.OnSiteCIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSignDate", DbType:="DateTime")>  _
	Public Property ReSignDate() As System.Nullable(Of Date)
		Get
			Return Me._ReSignDate
		End Get
		Set
			If (Me._ReSignDate.Equals(value) = false) Then
				Me.OnReSignDateChanging(value)
				Me.SendPropertyChanging
				Me._ReSignDate = value
				Me.SendPropertyChanged("ReSignDate")
				Me.OnReSignDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSignPeriod", DbType:="SmallInt")>  _
	Public Property ReSignPeriod() As System.Nullable(Of Short)
		Get
			Return Me._ReSignPeriod
		End Get
		Set
			If (Me._ReSignPeriod.Equals(value) = false) Then
				Me.OnReSignPeriodChanging(value)
				Me.SendPropertyChanging
				Me._ReSignPeriod = value
				Me.SendPropertyChanged("ReSignPeriod")
				Me.OnReSignPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceAgreementNo", DbType:="NVarChar(50)")>  _
	Public Property ServiceAgreementNo() As String
		Get
			Return Me._ServiceAgreementNo
		End Get
		Set
			If (String.Equals(Me._ServiceAgreementNo, value) = false) Then
				Me.OnServiceAgreementNoChanging(value)
				Me.SendPropertyChanging
				Me._ServiceAgreementNo = value
				Me.SendPropertyChanged("ServiceAgreementNo")
				Me.OnServiceAgreementNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="SmallInt")>  _
	Public Property SalesPerson() As System.Nullable(Of Short)
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (Me._SalesPerson.Equals(value) = false) Then
				Me.OnSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._SalesPerson = value
				Me.SendPropertyChanged("SalesPerson")
				Me.OnSalesPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractExpiryDate", DbType:="DateTime")>  _
	Public Property ContractExpiryDate() As System.Nullable(Of Date)
		Get
			Return Me._ContractExpiryDate
		End Get
		Set
			If (Me._ContractExpiryDate.Equals(value) = false) Then
				Me.OnContractExpiryDateChanging(value)
				Me.SendPropertyChanging
				Me._ContractExpiryDate = value
				Me.SendPropertyChanged("ContractExpiryDate")
				Me.OnContractExpiryDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCIRHistory")>  _
Partial Public Class tblCIRHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HistoryID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _NCId As Integer
	
	Private _Cid As System.Nullable(Of Short)
	
	Private _NCRDate As System.Nullable(Of Date)
	
	Private _NCRNumber As System.Nullable(Of Integer)
	
	Private _NCRDescription As String
	
	Private _NCRRecordedBY As String
	
	Private _NCRClosedBy As String
	
	Private _Driver As System.Nullable(Of Short)
	
	Private _NCRReason As System.Nullable(Of Short)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHistoryIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnHistoryIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnNCIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnNCIdChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnNCRDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNCRDateChanged()
    End Sub
    Partial Private Sub OnNCRNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNCRNumberChanged()
    End Sub
    Partial Private Sub OnNCRDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnNCRDescriptionChanged()
    End Sub
    Partial Private Sub OnNCRRecordedBYChanging(value As String)
    End Sub
    Partial Private Sub OnNCRRecordedBYChanged()
    End Sub
    Partial Private Sub OnNCRClosedByChanging(value As String)
    End Sub
    Partial Private Sub OnNCRClosedByChanged()
    End Sub
    Partial Private Sub OnDriverChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnDriverChanged()
    End Sub
    Partial Private Sub OnNCRReasonChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnNCRReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HistoryID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property HistoryID() As System.Guid
		Get
			Return Me._HistoryID
		End Get
		Set
			If ((Me._HistoryID = value)  _
						= false) Then
				Me.OnHistoryIDChanging(value)
				Me.SendPropertyChanging
				Me._HistoryID = value
				Me.SendPropertyChanged("HistoryID")
				Me.OnHistoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCId", DbType:="Int NOT NULL")>  _
	Public Property NCId() As Integer
		Get
			Return Me._NCId
		End Get
		Set
			If ((Me._NCId = value)  _
						= false) Then
				Me.OnNCIdChanging(value)
				Me.SendPropertyChanging
				Me._NCId = value
				Me.SendPropertyChanged("NCId")
				Me.OnNCIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="SmallInt")>  _
	Public Property Cid() As System.Nullable(Of Short)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me.OnCidChanging(value)
				Me.SendPropertyChanging
				Me._Cid = value
				Me.SendPropertyChanged("Cid")
				Me.OnCidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDate", DbType:="DateTime")>  _
	Public Property NCRDate() As System.Nullable(Of Date)
		Get
			Return Me._NCRDate
		End Get
		Set
			If (Me._NCRDate.Equals(value) = false) Then
				Me.OnNCRDateChanging(value)
				Me.SendPropertyChanging
				Me._NCRDate = value
				Me.SendPropertyChanged("NCRDate")
				Me.OnNCRDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRNumber", DbType:="Int")>  _
	Public Property NCRNumber() As System.Nullable(Of Integer)
		Get
			Return Me._NCRNumber
		End Get
		Set
			If (Me._NCRNumber.Equals(value) = false) Then
				Me.OnNCRNumberChanging(value)
				Me.SendPropertyChanging
				Me._NCRNumber = value
				Me.SendPropertyChanged("NCRNumber")
				Me.OnNCRNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDescription", DbType:="NVarChar(MAX)")>  _
	Public Property NCRDescription() As String
		Get
			Return Me._NCRDescription
		End Get
		Set
			If (String.Equals(Me._NCRDescription, value) = false) Then
				Me.OnNCRDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._NCRDescription = value
				Me.SendPropertyChanged("NCRDescription")
				Me.OnNCRDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRRecordedBY", DbType:="NVarChar(50)")>  _
	Public Property NCRRecordedBY() As String
		Get
			Return Me._NCRRecordedBY
		End Get
		Set
			If (String.Equals(Me._NCRRecordedBY, value) = false) Then
				Me.OnNCRRecordedBYChanging(value)
				Me.SendPropertyChanging
				Me._NCRRecordedBY = value
				Me.SendPropertyChanged("NCRRecordedBY")
				Me.OnNCRRecordedBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRClosedBy", DbType:="NVarChar(50)")>  _
	Public Property NCRClosedBy() As String
		Get
			Return Me._NCRClosedBy
		End Get
		Set
			If (String.Equals(Me._NCRClosedBy, value) = false) Then
				Me.OnNCRClosedByChanging(value)
				Me.SendPropertyChanging
				Me._NCRClosedBy = value
				Me.SendPropertyChanged("NCRClosedBy")
				Me.OnNCRClosedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver", DbType:="SmallInt")>  _
	Public Property Driver() As System.Nullable(Of Short)
		Get
			Return Me._Driver
		End Get
		Set
			If (Me._Driver.Equals(value) = false) Then
				Me.OnDriverChanging(value)
				Me.SendPropertyChanging
				Me._Driver = value
				Me.SendPropertyChanged("Driver")
				Me.OnDriverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRReason", DbType:="SmallInt")>  _
	Public Property NCRReason() As System.Nullable(Of Short)
		Get
			Return Me._NCRReason
		End Get
		Set
			If (Me._NCRReason.Equals(value) = false) Then
				Me.OnNCRReasonChanging(value)
				Me.SendPropertyChanging
				Me._NCRReason = value
				Me.SendPropertyChanged("NCRReason")
				Me.OnNCRReasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerServices")>  _
Partial Public Class tblCustomerService
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerServiceID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _ID As Integer
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _CId As System.Nullable(Of Integer)
	
	Private _ServiceFrequencyCode As System.Nullable(Of Short)
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _ServiceRun As System.Nullable(Of Short)
	
	Private _ServiceComments As String
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _ServiceFrequency1 As System.Nullable(Of Short)
	
	Private _ServiceFrequency2 As System.Nullable(Of Short)
	
	Private _ServiceFrequency3 As System.Nullable(Of Short)
	
	Private _ServiceFrequency4 As System.Nullable(Of Short)
	
	Private _ServiceFrequency5 As System.Nullable(Of Short)
	
	Private _ServiceFrequency6 As System.Nullable(Of Short)
	
	Private _ServiceFrequency7 As System.Nullable(Of Short)
	
	Private _ServiceFrequency8 As System.Nullable(Of Short)
	
	Private _ServiceSortOrderCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerServiceIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCustomerServiceIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCSidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCSidChanged()
    End Sub
    Partial Private Sub OnCIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCIdChanged()
    End Sub
    Partial Private Sub OnServiceFrequencyCodeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequencyCodeChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnServicePriceChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnServicePriceChanged()
    End Sub
    Partial Private Sub OnPerAnnumChargeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnPerAnnumChargeChanged()
    End Sub
    Partial Private Sub OnServiceRunChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceRunChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUnitsHaveMoreThanOneRunChanged()
    End Sub
    Partial Private Sub OnServiceFrequency1Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency1Changed()
    End Sub
    Partial Private Sub OnServiceFrequency2Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency2Changed()
    End Sub
    Partial Private Sub OnServiceFrequency3Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency3Changed()
    End Sub
    Partial Private Sub OnServiceFrequency4Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency4Changed()
    End Sub
    Partial Private Sub OnServiceFrequency5Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency5Changed()
    End Sub
    Partial Private Sub OnServiceFrequency6Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency6Changed()
    End Sub
    Partial Private Sub OnServiceFrequency7Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency7Changed()
    End Sub
    Partial Private Sub OnServiceFrequency8Changing(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnServiceFrequency8Changed()
    End Sub
    Partial Private Sub OnServiceSortOrderCodeChanging(value As String)
    End Sub
    Partial Private Sub OnServiceSortOrderCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServiceID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustomerServiceID() As System.Guid
		Get
			Return Me._CustomerServiceID
		End Get
		Set
			If ((Me._CustomerServiceID = value)  _
						= false) Then
				Me.OnCustomerServiceIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerServiceID = value
				Me.SendPropertyChanged("CustomerServiceID")
				Me.OnCustomerServiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me.OnCSidChanging(value)
				Me.SendPropertyChanging
				Me._CSid = value
				Me.SendPropertyChanged("CSid")
				Me.OnCSidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int")>  _
	Public Property CId() As System.Nullable(Of Integer)
		Get
			Return Me._CId
		End Get
		Set
			If (Me._CId.Equals(value) = false) Then
				Me.OnCIdChanging(value)
				Me.SendPropertyChanging
				Me._CId = value
				Me.SendPropertyChanged("CId")
				Me.OnCIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencyCode", DbType:="SmallInt")>  _
	Public Property ServiceFrequencyCode() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequencyCode
		End Get
		Set
			If (Me._ServiceFrequencyCode.Equals(value) = false) Then
				Me.OnServiceFrequencyCodeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceFrequencyCode = value
				Me.SendPropertyChanged("ServiceFrequencyCode")
				Me.OnServiceFrequencyCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me.OnServiceUnitsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUnits = value
				Me.SendPropertyChanged("ServiceUnits")
				Me.OnServiceUnitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me.OnServicePriceChanging(value)
				Me.SendPropertyChanging
				Me._ServicePrice = value
				Me.SendPropertyChanged("ServicePrice")
				Me.OnServicePriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me.OnPerAnnumChargeChanging(value)
				Me.SendPropertyChanging
				Me._PerAnnumCharge = value
				Me.SendPropertyChanged("PerAnnumCharge")
				Me.OnPerAnnumChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>  _
	Public Property ServiceRun() As System.Nullable(Of Short)
		Get
			Return Me._ServiceRun
		End Get
		Set
			If (Me._ServiceRun.Equals(value) = false) Then
				Me.OnServiceRunChanging(value)
				Me.SendPropertyChanging
				Me._ServiceRun = value
				Me.SendPropertyChanged("ServiceRun")
				Me.OnServiceRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me.OnServiceCommentsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceComments = value
				Me.SendPropertyChanged("ServiceComments")
				Me.OnServiceCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me.OnUnitsHaveMoreThanOneRunChanging(value)
				Me.SendPropertyChanging
				Me._UnitsHaveMoreThanOneRun = value
				Me.SendPropertyChanged("UnitsHaveMoreThanOneRun")
				Me.OnUnitsHaveMoreThanOneRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1", DbType:="SmallInt")>  _
	Public Property ServiceFrequency1() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency1
		End Get
		Set
			If (Me._ServiceFrequency1.Equals(value) = false) Then
				Me.OnServiceFrequency1Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency1 = value
				Me.SendPropertyChanged("ServiceFrequency1")
				Me.OnServiceFrequency1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2", DbType:="SmallInt")>  _
	Public Property ServiceFrequency2() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency2
		End Get
		Set
			If (Me._ServiceFrequency2.Equals(value) = false) Then
				Me.OnServiceFrequency2Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency2 = value
				Me.SendPropertyChanged("ServiceFrequency2")
				Me.OnServiceFrequency2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3", DbType:="SmallInt")>  _
	Public Property ServiceFrequency3() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency3
		End Get
		Set
			If (Me._ServiceFrequency3.Equals(value) = false) Then
				Me.OnServiceFrequency3Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency3 = value
				Me.SendPropertyChanged("ServiceFrequency3")
				Me.OnServiceFrequency3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4", DbType:="SmallInt")>  _
	Public Property ServiceFrequency4() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency4
		End Get
		Set
			If (Me._ServiceFrequency4.Equals(value) = false) Then
				Me.OnServiceFrequency4Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency4 = value
				Me.SendPropertyChanged("ServiceFrequency4")
				Me.OnServiceFrequency4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5", DbType:="SmallInt")>  _
	Public Property ServiceFrequency5() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency5
		End Get
		Set
			If (Me._ServiceFrequency5.Equals(value) = false) Then
				Me.OnServiceFrequency5Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency5 = value
				Me.SendPropertyChanged("ServiceFrequency5")
				Me.OnServiceFrequency5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6", DbType:="SmallInt")>  _
	Public Property ServiceFrequency6() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency6
		End Get
		Set
			If (Me._ServiceFrequency6.Equals(value) = false) Then
				Me.OnServiceFrequency6Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency6 = value
				Me.SendPropertyChanged("ServiceFrequency6")
				Me.OnServiceFrequency6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7", DbType:="SmallInt")>  _
	Public Property ServiceFrequency7() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency7
		End Get
		Set
			If (Me._ServiceFrequency7.Equals(value) = false) Then
				Me.OnServiceFrequency7Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency7 = value
				Me.SendPropertyChanged("ServiceFrequency7")
				Me.OnServiceFrequency7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8", DbType:="SmallInt")>  _
	Public Property ServiceFrequency8() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency8
		End Get
		Set
			If (Me._ServiceFrequency8.Equals(value) = false) Then
				Me.OnServiceFrequency8Changing(value)
				Me.SendPropertyChanging
				Me._ServiceFrequency8 = value
				Me.SendPropertyChanged("ServiceFrequency8")
				Me.OnServiceFrequency8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceSortOrderCode", DbType:="NVarChar(12)")>  _
	Public Property ServiceSortOrderCode() As String
		Get
			Return Me._ServiceSortOrderCode
		End Get
		Set
			If (String.Equals(Me._ServiceSortOrderCode, value) = false) Then
				Me.OnServiceSortOrderCodeChanging(value)
				Me.SendPropertyChanging
				Me._ServiceSortOrderCode = value
				Me.SendPropertyChanged("ServiceSortOrderCode")
				Me.OnServiceSortOrderCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblzGenerateRunSheets")>  _
Partial Public Class tblzGenerateRunSheet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunSheetId As System.Guid
	
	Private _Aid As Integer
	
	Private _RunNumber As System.Nullable(Of Integer)
	
	Private _RunDriver As System.Nullable(Of Integer)
	
	Private _RunDescription As String
	
	Private _Cid As System.Nullable(Of Integer)
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _ServiceUnits As System.Nullable(Of Double)
	
	Private _ProductId As System.Nullable(Of Integer)
	
	Private _ServiceComments As String
	
	Private _SortOrder As String
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunSheetIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunSheetIdChanged()
    End Sub
    Partial Private Sub OnAidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAidChanged()
    End Sub
    Partial Private Sub OnRunNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunNumberChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnCidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCidChanged()
    End Sub
    Partial Private Sub OnCSidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCSidChanged()
    End Sub
    Partial Private Sub OnServiceUnitsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnServiceUnitsChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnServiceCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnServiceCommentsChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As String)
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunSheetId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RunSheetId() As System.Guid
		Get
			Return Me._RunSheetId
		End Get
		Set
			If ((Me._RunSheetId = value)  _
						= false) Then
				Me.OnRunSheetIdChanging(value)
				Me.SendPropertyChanging
				Me._RunSheetId = value
				Me.SendPropertyChanged("RunSheetId")
				Me.OnRunSheetIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me.OnAidChanging(value)
				Me.SendPropertyChanging
				Me._Aid = value
				Me.SendPropertyChanged("Aid")
				Me.OnAidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNumber", DbType:="Int")>  _
	Public Property RunNumber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNumber
		End Get
		Set
			If (Me._RunNumber.Equals(value) = false) Then
				Me.OnRunNumberChanging(value)
				Me.SendPropertyChanging
				Me._RunNumber = value
				Me.SendPropertyChanged("RunNumber")
				Me.OnRunNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Int")>  _
	Public Property RunDriver() As System.Nullable(Of Integer)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me.OnRunDriverChanging(value)
				Me.SendPropertyChanging
				Me._RunDriver = value
				Me.SendPropertyChanged("RunDriver")
				Me.OnRunDriverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(50)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me.OnRunDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RunDescription = value
				Me.SendPropertyChanged("RunDescription")
				Me.OnRunDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>  _
	Public Property Cid() As System.Nullable(Of Integer)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me.OnCidChanging(value)
				Me.SendPropertyChanging
				Me._Cid = value
				Me.SendPropertyChanged("Cid")
				Me.OnCidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me.OnCSidChanging(value)
				Me.SendPropertyChanging
				Me._CSid = value
				Me.SendPropertyChanged("CSid")
				Me.OnCSidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>  _
	Public Property ServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me.OnServiceUnitsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUnits = value
				Me.SendPropertyChanged("ServiceUnits")
				Me.OnServiceUnitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int")>  _
	Public Property ProductId() As System.Nullable(Of Integer)
		Get
			Return Me._ProductId
		End Get
		Set
			If (Me._ProductId.Equals(value) = false) Then
				Me.OnProductIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductId = value
				Me.SendPropertyChanged("ProductId")
				Me.OnProductIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me.OnServiceCommentsChanging(value)
				Me.SendPropertyChanging
				Me._ServiceComments = value
				Me.SendPropertyChanged("ServiceComments")
				Me.OnServiceCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="NVarChar(12)")>  _
	Public Property SortOrder() As String
		Get
			Return Me._SortOrder
		End Get
		Set
			If (String.Equals(Me._SortOrder, value) = false) Then
				Me.OnSortOrderChanging(value)
				Me.SendPropertyChanging
				Me._SortOrder = value
				Me.SendPropertyChanged("SortOrder")
				Me.OnSortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRuns")>  _
Partial Public Class tblRun
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RunID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Rid As System.Nullable(Of Integer)
	
	Private _RunNUmber As System.Nullable(Of Integer)
	
	Private _RunDescription As String
	
	Private _RunDriver As System.Nullable(Of Short)
	
	Private _MondayRun As Boolean
	
	Private _TuesdayRun As Boolean
	
	Private _WednesdayRun As Boolean
	
	Private _ThursdayRun As Boolean
	
	Private _FridayRun As Boolean
	
	Private _SaturdayRun As Boolean
	
	Private _SundayRun As Boolean
	
	Private _InactiveRun As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnRunNUmberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunNUmberChanged()
    End Sub
    Partial Private Sub OnRunDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnRunDescriptionChanged()
    End Sub
    Partial Private Sub OnRunDriverChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnRunDriverChanged()
    End Sub
    Partial Private Sub OnMondayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMondayRunChanged()
    End Sub
    Partial Private Sub OnTuesdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTuesdayRunChanged()
    End Sub
    Partial Private Sub OnWednesdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnWednesdayRunChanged()
    End Sub
    Partial Private Sub OnThursdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnThursdayRunChanged()
    End Sub
    Partial Private Sub OnFridayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFridayRunChanged()
    End Sub
    Partial Private Sub OnSaturdayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSaturdayRunChanged()
    End Sub
    Partial Private Sub OnSundayRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSundayRunChanged()
    End Sub
    Partial Private Sub OnInactiveRunChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveRunChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RunID() As System.Guid
		Get
			Return Me._RunID
		End Get
		Set
			If ((Me._RunID = value)  _
						= false) Then
				Me.OnRunIDChanging(value)
				Me.SendPropertyChanging
				Me._RunID = value
				Me.SendPropertyChanged("RunID")
				Me.OnRunIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me.OnRidChanging(value)
				Me.SendPropertyChanging
				Me._Rid = value
				Me.SendPropertyChanged("Rid")
				Me.OnRidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>  _
	Public Property RunNUmber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me.OnRunNUmberChanging(value)
				Me.SendPropertyChanging
				Me._RunNUmber = value
				Me.SendPropertyChanged("RunNUmber")
				Me.OnRunNUmberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me.OnRunDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._RunDescription = value
				Me.SendPropertyChanged("RunDescription")
				Me.OnRunDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>  _
	Public Property RunDriver() As System.Nullable(Of Short)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me.OnRunDriverChanging(value)
				Me.SendPropertyChanging
				Me._RunDriver = value
				Me.SendPropertyChanged("RunDriver")
				Me.OnRunDriverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>  _
	Public Property MondayRun() As Boolean
		Get
			Return Me._MondayRun
		End Get
		Set
			If ((Me._MondayRun = value)  _
						= false) Then
				Me.OnMondayRunChanging(value)
				Me.SendPropertyChanging
				Me._MondayRun = value
				Me.SendPropertyChanged("MondayRun")
				Me.OnMondayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property TuesdayRun() As Boolean
		Get
			Return Me._TuesdayRun
		End Get
		Set
			If ((Me._TuesdayRun = value)  _
						= false) Then
				Me.OnTuesdayRunChanging(value)
				Me.SendPropertyChanging
				Me._TuesdayRun = value
				Me.SendPropertyChanged("TuesdayRun")
				Me.OnTuesdayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property WednesdayRun() As Boolean
		Get
			Return Me._WednesdayRun
		End Get
		Set
			If ((Me._WednesdayRun = value)  _
						= false) Then
				Me.OnWednesdayRunChanging(value)
				Me.SendPropertyChanging
				Me._WednesdayRun = value
				Me.SendPropertyChanged("WednesdayRun")
				Me.OnWednesdayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>  _
	Public Property ThursdayRun() As Boolean
		Get
			Return Me._ThursdayRun
		End Get
		Set
			If ((Me._ThursdayRun = value)  _
						= false) Then
				Me.OnThursdayRunChanging(value)
				Me.SendPropertyChanging
				Me._ThursdayRun = value
				Me.SendPropertyChanged("ThursdayRun")
				Me.OnThursdayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>  _
	Public Property FridayRun() As Boolean
		Get
			Return Me._FridayRun
		End Get
		Set
			If ((Me._FridayRun = value)  _
						= false) Then
				Me.OnFridayRunChanging(value)
				Me.SendPropertyChanging
				Me._FridayRun = value
				Me.SendPropertyChanged("FridayRun")
				Me.OnFridayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>  _
	Public Property SaturdayRun() As Boolean
		Get
			Return Me._SaturdayRun
		End Get
		Set
			If ((Me._SaturdayRun = value)  _
						= false) Then
				Me.OnSaturdayRunChanging(value)
				Me.SendPropertyChanging
				Me._SaturdayRun = value
				Me.SendPropertyChanged("SaturdayRun")
				Me.OnSaturdayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>  _
	Public Property SundayRun() As Boolean
		Get
			Return Me._SundayRun
		End Get
		Set
			If ((Me._SundayRun = value)  _
						= false) Then
				Me.OnSundayRunChanging(value)
				Me.SendPropertyChanging
				Me._SundayRun = value
				Me.SendPropertyChanged("SundayRun")
				Me.OnSundayRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me.OnInactiveRunChanging(value)
				Me.SendPropertyChanging
				Me._InactiveRun = value
				Me.SendPropertyChanged("InactiveRun")
				Me.OnInactiveRunChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDrivers")>  _
Partial Public Class tblDriver
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _DriverID As System.Guid
	
	Private _Did As Integer
	
	Private _DriverName As String
	
	Private _DriversLicenseNo As String
	
	Private _DriversLicenseExpiryDate As System.Nullable(Of Date)
	
	Private _Technician As System.Nullable(Of Boolean)
	
	Private _Inactive As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDriverIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnDriverIDChanged()
    End Sub
    Partial Private Sub OnDidChanging(value As Integer)
    End Sub
    Partial Private Sub OnDidChanged()
    End Sub
    Partial Private Sub OnDriverNameChanging(value As String)
    End Sub
    Partial Private Sub OnDriverNameChanged()
    End Sub
    Partial Private Sub OnDriversLicenseNoChanging(value As String)
    End Sub
    Partial Private Sub OnDriversLicenseNoChanged()
    End Sub
    Partial Private Sub OnDriversLicenseExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDriversLicenseExpiryDateChanged()
    End Sub
    Partial Private Sub OnTechnicianChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTechnicianChanged()
    End Sub
    Partial Private Sub OnInactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DriverID() As System.Guid
		Get
			Return Me._DriverID
		End Get
		Set
			If ((Me._DriverID = value)  _
						= false) Then
				Me.OnDriverIDChanging(value)
				Me.SendPropertyChanging
				Me._DriverID = value
				Me.SendPropertyChanged("DriverID")
				Me.OnDriverIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Did() As Integer
		Get
			Return Me._Did
		End Get
		Set
			If ((Me._Did = value)  _
						= false) Then
				Me.OnDidChanging(value)
				Me.SendPropertyChanging
				Me._Did = value
				Me.SendPropertyChanged("Did")
				Me.OnDidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me.OnDriverNameChanging(value)
				Me.SendPropertyChanging
				Me._DriverName = value
				Me.SendPropertyChanged("DriverName")
				Me.OnDriverNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseNo", DbType:="NVarChar(22)")>  _
	Public Property DriversLicenseNo() As String
		Get
			Return Me._DriversLicenseNo
		End Get
		Set
			If (String.Equals(Me._DriversLicenseNo, value) = false) Then
				Me.OnDriversLicenseNoChanging(value)
				Me.SendPropertyChanging
				Me._DriversLicenseNo = value
				Me.SendPropertyChanged("DriversLicenseNo")
				Me.OnDriversLicenseNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseExpiryDate", DbType:="DateTime")>  _
	Public Property DriversLicenseExpiryDate() As System.Nullable(Of Date)
		Get
			Return Me._DriversLicenseExpiryDate
		End Get
		Set
			If (Me._DriversLicenseExpiryDate.Equals(value) = false) Then
				Me.OnDriversLicenseExpiryDateChanging(value)
				Me.SendPropertyChanging
				Me._DriversLicenseExpiryDate = value
				Me.SendPropertyChanged("DriversLicenseExpiryDate")
				Me.OnDriversLicenseExpiryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Technician", DbType:="Bit")>  _
	Public Property Technician() As System.Nullable(Of Boolean)
		Get
			Return Me._Technician
		End Get
		Set
			If (Me._Technician.Equals(value) = false) Then
				Me.OnTechnicianChanging(value)
				Me.SendPropertyChanging
				Me._Technician = value
				Me.SendPropertyChanged("Technician")
				Me.OnTechnicianChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="Bit NOT NULL")>  _
	Public Property Inactive() As Boolean
		Get
			Return Me._Inactive
		End Get
		Set
			If ((Me._Inactive = value)  _
						= false) Then
				Me.OnInactiveChanging(value)
				Me.SendPropertyChanging
				Me._Inactive = value
				Me.SendPropertyChanged("Inactive")
				Me.OnInactiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRunDates")>  _
Partial Public Class tblRunDate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DRid As Integer
	
	Private _Rid As System.Nullable(Of Integer)
	
	Private _DateOfRun As System.Nullable(Of Date)
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDRidChanging(value As Integer)
    End Sub
    Partial Private Sub OnDRidChanged()
    End Sub
    Partial Private Sub OnRidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRidChanged()
    End Sub
    Partial Private Sub OnDateOfRunChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfRunChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DRid() As Integer
		Get
			Return Me._DRid
		End Get
		Set
			If ((Me._DRid = value)  _
						= false) Then
				Me.OnDRidChanging(value)
				Me.SendPropertyChanging
				Me._DRid = value
				Me.SendPropertyChanged("DRid")
				Me.OnDRidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me.OnRidChanging(value)
				Me.SendPropertyChanging
				Me._Rid = value
				Me.SendPropertyChanged("Rid")
				Me.OnRidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>  _
	Public Property DateOfRun() As System.Nullable(Of Date)
		Get
			Return Me._DateOfRun
		End Get
		Set
			If (Me._DateOfRun.Equals(value) = false) Then
				Me.OnDateOfRunChanging(value)
				Me.SendPropertyChanging
				Me._DateOfRun = value
				Me.SendPropertyChanged("DateOfRun")
				Me.OnDateOfRunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblProjectID")>  _
Partial Public Class tblProjectID
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProjectID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CustomersID As System.Nullable(Of Integer)
	
	Private _SitesID As System.Nullable(Of Integer)
	
	Private _IndustryGroupID As System.Nullable(Of Integer)
	
	Private _InvoiceFrequencyID As System.Nullable(Of Integer)
	
	Private _CustomerAgentID As System.Nullable(Of Integer)
	
	Private _CeaseReasonID As System.Nullable(Of Integer)
	
	Private _CIRReasonID As System.Nullable(Of Integer)
	
	Private _ZoneID As System.Nullable(Of Integer)
	
	Private _CustomerRatingID As System.Nullable(Of Integer)
	
	Private _RateIncreaseID As System.Nullable(Of Integer)
	
	Private _PreviousSupplierID As System.Nullable(Of Integer)
	
	Private _FortnightlyCyclesID As System.Nullable(Of Integer)
	
	Private _RevenueChangeReasonID As System.Nullable(Of Integer)
	
	Private _FrequencyID As System.Nullable(Of Integer)
	
	Private _ServicesID As System.Nullable(Of Integer)
	
	Private _SalesPersonID As System.Nullable(Of Integer)
	
	Private _FuelLevyID As System.Nullable(Of Integer)
	
	Private _RunSheetID As System.Nullable(Of Integer)
	
	Private _ReSignDetailsID As System.Nullable(Of Integer)
	
	Private _CustomerServicesID As System.Nullable(Of Integer)
	
	Private _CIRHistoryID As System.Nullable(Of Integer)
	
	Private _RunID As System.Nullable(Of Integer)
	
	Private _CommentsID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProjectIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnProjectIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnCustomersIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomersIDChanged()
    End Sub
    Partial Private Sub OnSitesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSitesIDChanged()
    End Sub
    Partial Private Sub OnIndustryGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIndustryGroupIDChanged()
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInvoiceFrequencyIDChanged()
    End Sub
    Partial Private Sub OnCustomerAgentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerAgentIDChanged()
    End Sub
    Partial Private Sub OnCeaseReasonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCeaseReasonIDChanged()
    End Sub
    Partial Private Sub OnCIRReasonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCIRReasonIDChanged()
    End Sub
    Partial Private Sub OnZoneIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnZoneIDChanged()
    End Sub
    Partial Private Sub OnCustomerRatingIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerRatingIDChanged()
    End Sub
    Partial Private Sub OnRateIncreaseIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRateIncreaseIDChanged()
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPreviousSupplierIDChanged()
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFortnightlyCyclesIDChanged()
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRevenueChangeReasonIDChanged()
    End Sub
    Partial Private Sub OnFrequencyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFrequencyIDChanged()
    End Sub
    Partial Private Sub OnServicesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnServicesIDChanged()
    End Sub
    Partial Private Sub OnSalesPersonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSalesPersonIDChanged()
    End Sub
    Partial Private Sub OnFuelLevyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFuelLevyIDChanged()
    End Sub
    Partial Private Sub OnRunSheetIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunSheetIDChanged()
    End Sub
    Partial Private Sub OnReSignDetailsIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReSignDetailsIDChanged()
    End Sub
    Partial Private Sub OnCustomerServicesIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerServicesIDChanged()
    End Sub
    Partial Private Sub OnCIRHistoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCIRHistoryIDChanged()
    End Sub
    Partial Private Sub OnRunIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRunIDChanged()
    End Sub
    Partial Private Sub OnCommentsIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCommentsIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProjectID() As System.Guid
		Get
			Return Me._ProjectID
		End Get
		Set
			If ((Me._ProjectID = value)  _
						= false) Then
				Me.OnProjectIDChanging(value)
				Me.SendPropertyChanging
				Me._ProjectID = value
				Me.SendPropertyChanged("ProjectID")
				Me.OnProjectIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomersID", DbType:="Int")>  _
	Public Property CustomersID() As System.Nullable(Of Integer)
		Get
			Return Me._CustomersID
		End Get
		Set
			If (Me._CustomersID.Equals(value) = false) Then
				Me.OnCustomersIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomersID = value
				Me.SendPropertyChanged("CustomersID")
				Me.OnCustomersIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitesID", DbType:="Int")>  _
	Public Property SitesID() As System.Nullable(Of Integer)
		Get
			Return Me._SitesID
		End Get
		Set
			If (Me._SitesID.Equals(value) = false) Then
				Me.OnSitesIDChanging(value)
				Me.SendPropertyChanging
				Me._SitesID = value
				Me.SendPropertyChanged("SitesID")
				Me.OnSitesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroupID", DbType:="Int")>  _
	Public Property IndustryGroupID() As System.Nullable(Of Integer)
		Get
			Return Me._IndustryGroupID
		End Get
		Set
			If (Me._IndustryGroupID.Equals(value) = false) Then
				Me.OnIndustryGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._IndustryGroupID = value
				Me.SendPropertyChanged("IndustryGroupID")
				Me.OnIndustryGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequencyID", DbType:="Int")>  _
	Public Property InvoiceFrequencyID() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceFrequencyID
		End Get
		Set
			If (Me._InvoiceFrequencyID.Equals(value) = false) Then
				Me.OnInvoiceFrequencyIDChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceFrequencyID = value
				Me.SendPropertyChanged("InvoiceFrequencyID")
				Me.OnInvoiceFrequencyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentID", DbType:="Int")>  _
	Public Property CustomerAgentID() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerAgentID
		End Get
		Set
			If (Me._CustomerAgentID.Equals(value) = false) Then
				Me.OnCustomerAgentIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerAgentID = value
				Me.SendPropertyChanged("CustomerAgentID")
				Me.OnCustomerAgentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonID", DbType:="Int")>  _
	Public Property CeaseReasonID() As System.Nullable(Of Integer)
		Get
			Return Me._CeaseReasonID
		End Get
		Set
			If (Me._CeaseReasonID.Equals(value) = false) Then
				Me.OnCeaseReasonIDChanging(value)
				Me.SendPropertyChanging
				Me._CeaseReasonID = value
				Me.SendPropertyChanged("CeaseReasonID")
				Me.OnCeaseReasonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIRReasonID", DbType:="Int")>  _
	Public Property CIRReasonID() As System.Nullable(Of Integer)
		Get
			Return Me._CIRReasonID
		End Get
		Set
			If (Me._CIRReasonID.Equals(value) = false) Then
				Me.OnCIRReasonIDChanging(value)
				Me.SendPropertyChanging
				Me._CIRReasonID = value
				Me.SendPropertyChanged("CIRReasonID")
				Me.OnCIRReasonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneID", DbType:="Int")>  _
	Public Property ZoneID() As System.Nullable(Of Integer)
		Get
			Return Me._ZoneID
		End Get
		Set
			If (Me._ZoneID.Equals(value) = false) Then
				Me.OnZoneIDChanging(value)
				Me.SendPropertyChanging
				Me._ZoneID = value
				Me.SendPropertyChanged("ZoneID")
				Me.OnZoneIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingID", DbType:="Int")>  _
	Public Property CustomerRatingID() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerRatingID
		End Get
		Set
			If (Me._CustomerRatingID.Equals(value) = false) Then
				Me.OnCustomerRatingIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerRatingID = value
				Me.SendPropertyChanged("CustomerRatingID")
				Me.OnCustomerRatingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseID", DbType:="Int")>  _
	Public Property RateIncreaseID() As System.Nullable(Of Integer)
		Get
			Return Me._RateIncreaseID
		End Get
		Set
			If (Me._RateIncreaseID.Equals(value) = false) Then
				Me.OnRateIncreaseIDChanging(value)
				Me.SendPropertyChanging
				Me._RateIncreaseID = value
				Me.SendPropertyChanged("RateIncreaseID")
				Me.OnRateIncreaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierID", DbType:="Int")>  _
	Public Property PreviousSupplierID() As System.Nullable(Of Integer)
		Get
			Return Me._PreviousSupplierID
		End Get
		Set
			If (Me._PreviousSupplierID.Equals(value) = false) Then
				Me.OnPreviousSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._PreviousSupplierID = value
				Me.SendPropertyChanged("PreviousSupplierID")
				Me.OnPreviousSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FortnightlyCyclesID", DbType:="Int")>  _
	Public Property FortnightlyCyclesID() As System.Nullable(Of Integer)
		Get
			Return Me._FortnightlyCyclesID
		End Get
		Set
			If (Me._FortnightlyCyclesID.Equals(value) = false) Then
				Me.OnFortnightlyCyclesIDChanging(value)
				Me.SendPropertyChanging
				Me._FortnightlyCyclesID = value
				Me.SendPropertyChanged("FortnightlyCyclesID")
				Me.OnFortnightlyCyclesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReasonID", DbType:="Int")>  _
	Public Property RevenueChangeReasonID() As System.Nullable(Of Integer)
		Get
			Return Me._RevenueChangeReasonID
		End Get
		Set
			If (Me._RevenueChangeReasonID.Equals(value) = false) Then
				Me.OnRevenueChangeReasonIDChanging(value)
				Me.SendPropertyChanging
				Me._RevenueChangeReasonID = value
				Me.SendPropertyChanged("RevenueChangeReasonID")
				Me.OnRevenueChangeReasonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyID", DbType:="Int")>  _
	Public Property FrequencyID() As System.Nullable(Of Integer)
		Get
			Return Me._FrequencyID
		End Get
		Set
			If (Me._FrequencyID.Equals(value) = false) Then
				Me.OnFrequencyIDChanging(value)
				Me.SendPropertyChanging
				Me._FrequencyID = value
				Me.SendPropertyChanged("FrequencyID")
				Me.OnFrequencyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesID", DbType:="Int")>  _
	Public Property ServicesID() As System.Nullable(Of Integer)
		Get
			Return Me._ServicesID
		End Get
		Set
			If (Me._ServicesID.Equals(value) = false) Then
				Me.OnServicesIDChanging(value)
				Me.SendPropertyChanging
				Me._ServicesID = value
				Me.SendPropertyChanged("ServicesID")
				Me.OnServicesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonID", DbType:="Int")>  _
	Public Property SalesPersonID() As System.Nullable(Of Integer)
		Get
			Return Me._SalesPersonID
		End Get
		Set
			If (Me._SalesPersonID.Equals(value) = false) Then
				Me.OnSalesPersonIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesPersonID = value
				Me.SendPropertyChanged("SalesPersonID")
				Me.OnSalesPersonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuelLevyID", DbType:="Int")>  _
	Public Property FuelLevyID() As System.Nullable(Of Integer)
		Get
			Return Me._FuelLevyID
		End Get
		Set
			If (Me._FuelLevyID.Equals(value) = false) Then
				Me.OnFuelLevyIDChanging(value)
				Me.SendPropertyChanging
				Me._FuelLevyID = value
				Me.SendPropertyChanged("FuelLevyID")
				Me.OnFuelLevyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunSheetID", DbType:="Int")>  _
	Public Property RunSheetID() As System.Nullable(Of Integer)
		Get
			Return Me._RunSheetID
		End Get
		Set
			If (Me._RunSheetID.Equals(value) = false) Then
				Me.OnRunSheetIDChanging(value)
				Me.SendPropertyChanging
				Me._RunSheetID = value
				Me.SendPropertyChanged("RunSheetID")
				Me.OnRunSheetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReSignDetailsID", DbType:="Int")>  _
	Public Property ReSignDetailsID() As System.Nullable(Of Integer)
		Get
			Return Me._ReSignDetailsID
		End Get
		Set
			If (Me._ReSignDetailsID.Equals(value) = false) Then
				Me.OnReSignDetailsIDChanging(value)
				Me.SendPropertyChanging
				Me._ReSignDetailsID = value
				Me.SendPropertyChanged("ReSignDetailsID")
				Me.OnReSignDetailsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServicesID", DbType:="Int")>  _
	Public Property CustomerServicesID() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerServicesID
		End Get
		Set
			If (Me._CustomerServicesID.Equals(value) = false) Then
				Me.OnCustomerServicesIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerServicesID = value
				Me.SendPropertyChanged("CustomerServicesID")
				Me.OnCustomerServicesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIRHistoryID", DbType:="Int")>  _
	Public Property CIRHistoryID() As System.Nullable(Of Integer)
		Get
			Return Me._CIRHistoryID
		End Get
		Set
			If (Me._CIRHistoryID.Equals(value) = false) Then
				Me.OnCIRHistoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CIRHistoryID = value
				Me.SendPropertyChanged("CIRHistoryID")
				Me.OnCIRHistoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="Int")>  _
	Public Property RunID() As System.Nullable(Of Integer)
		Get
			Return Me._RunID
		End Get
		Set
			If (Me._RunID.Equals(value) = false) Then
				Me.OnRunIDChanging(value)
				Me.SendPropertyChanging
				Me._RunID = value
				Me.SendPropertyChanged("RunID")
				Me.OnRunIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentsID", DbType:="Int")>  _
	Public Property CommentsID() As System.Nullable(Of Integer)
		Get
			Return Me._CommentsID
		End Get
		Set
			If (Me._CommentsID.Equals(value) = false) Then
				Me.OnCommentsIDChanging(value)
				Me.SendPropertyChanging
				Me._CommentsID = value
				Me.SendPropertyChanged("CommentsID")
				Me.OnCommentsIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class aspnet_Roles_GetAllRolesResult
	
	Private _RoleName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me._RoleName = value
			End If
		End Set
	End Property
End Class

Partial Public Class aspnet_UsersInRoles_AddUsersToRolesResult
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class

Partial Public Class aspnet_UsersInRoles_RemoveUsersFromRolesResult
	
	Private _Column1 As String
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="NVarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Column1() As String
		Get
			Return Me._Column1
		End Get
		Set
			If (String.Equals(Me._Column1, value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetVehiclesAndDriversFortimePeriodResult
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _Name As String
	
	Private _DeviceID As String
	
	Private _ApplicationVehicleDriverTimeID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _PassengerID As System.Nullable(Of System.Guid)
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleDriverTimeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleDriverTimeID
		End Get
		Set
			If (Me._ApplicationVehicleDriverTimeID.Equals(value) = false) Then
				Me._ApplicationVehicleDriverTimeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>  _
	Public Property PassengerID() As System.Nullable(Of System.Guid)
		Get
			Return Me._PassengerID
		End Get
		Set
			If (Me._PassengerID.Equals(value) = false) Then
				Me._PassengerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me._StartDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me._EndDateTime = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSettingsForApplicationResult
	
	Private _SettingID As System.Guid
	
	Private _ApplicationSettingValueID As System.Nullable(Of System.Guid)
	
	Private _ApplicationId As System.Guid
	
	Private _Name As String
	
	Private _ApplicationName As String
	
	Private _Value As String
	
	Private _ValueObj As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SettingID() As System.Guid
		Get
			Return Me._SettingID
		End Get
		Set
			If ((Me._SettingID = value)  _
						= false) Then
				Me._SettingID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationSettingValueID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationSettingValueID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationSettingValueID
		End Get
		Set
			If (Me._ApplicationSettingValueID.Equals(value) = false) Then
				Me._ApplicationSettingValueID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me._ApplicationName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(MAX)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueObj", DbType:="VarBinary(MAX)")>  _
	Public Property ValueObj() As System.Data.Linq.Binary
		Get
			Return Me._ValueObj
		End Get
		Set
			If (Object.Equals(Me._ValueObj, value) = false) Then
				Me._ValueObj = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSubscribersForApplicationResult
	
	Private _SubcriberType As String
	
	Private _SubcriberType_ID As Integer
	
	Private _NativeID As System.Guid
	
	Private _Name As String
	
	Private _Email As String
	
	Private _Mobile As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubcriberType", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property SubcriberType() As String
		Get
			Return Me._SubcriberType
		End Get
		Set
			If (String.Equals(Me._SubcriberType, value) = false) Then
				Me._SubcriberType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubcriberType_ID", DbType:="Int NOT NULL")>  _
	Public Property SubcriberType_ID() As Integer
		Get
			Return Me._SubcriberType_ID
		End Get
		Set
			If ((Me._SubcriberType_ID = value)  _
						= false) Then
				Me._SubcriberType_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NativeID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NativeID() As System.Guid
		Get
			Return Me._NativeID
		End Get
		Set
			If ((Me._NativeID = value)  _
						= false) Then
				Me._NativeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="VarChar(MAX)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me._Mobile = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGeoFenceCollisionsResult
	
	Private _id As System.Nullable(Of Long)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _GeoFence_Description As String
	
	Private _Vehicle_Name As String
	
	Private _GeoFence_Name As String
	
	Private _Driver_Name As String
	
	Private _GeoFence_Name1 As String
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _ApplicationVehicleID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _GeoFenceDeviceCollissionID As System.Guid
	
	Private _ApplictionID As System.Nullable(Of System.Guid)
	
	Private _PhoneNumber As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="BigInt")>  _
	Public Property id() As System.Nullable(Of Long)
		Get
			Return Me._id
		End Get
		Set
			If (Me._id.Equals(value) = false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Description", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Description() As String
		Get
			Return Me._GeoFence_Description
		End Get
		Set
			If (String.Equals(Me._GeoFence_Description, value) = false) Then
				Me._GeoFence_Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_Name", DbType:="VarChar(500)")>  _
	Public Property Vehicle_Name() As String
		Get
			Return Me._Vehicle_Name
		End Get
		Set
			If (String.Equals(Me._Vehicle_Name, value) = false) Then
				Me._Vehicle_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Name() As String
		Get
			Return Me._GeoFence_Name
		End Get
		Set
			If (String.Equals(Me._GeoFence_Name, value) = false) Then
				Me._GeoFence_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver_Name", DbType:="VarChar(MAX)")>  _
	Public Property Driver_Name() As String
		Get
			Return Me._Driver_Name
		End Get
		Set
			If (String.Equals(Me._Driver_Name, value) = false) Then
				Me._Driver_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name1", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Name1() As String
		Get
			Return Me._GeoFence_Name1
		End Get
		Set
			If (String.Equals(Me._GeoFence_Name1, value) = false) Then
				Me._GeoFence_Name1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If (Me._ApplicationVehicleID.Equals(value) = false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GeoFenceDeviceCollissionID() As System.Guid
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If ((Me._GeoFenceDeviceCollissionID = value)  _
						= false) Then
				Me._GeoFenceDeviceCollissionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier")>  _
	Public Property ApplictionID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplictionID
		End Get
		Set
			If (Me._ApplictionID.Equals(value) = false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me._PhoneNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetAssignedVehiclestoDriversResult
	
	Private _ApplicationVehicleID As System.Guid
	
	Private _Name As String
	
	Private _DeviceID As String
	
	Private _ApplicationVehicleDriverTimeID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _PassengerID As System.Nullable(Of System.Guid)
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationVehicleID() As System.Guid
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If ((Me._ApplicationVehicleID = value)  _
						= false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleDriverTimeID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleDriverTimeID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleDriverTimeID
		End Get
		Set
			If (Me._ApplicationVehicleDriverTimeID.Equals(value) = false) Then
				Me._ApplicationVehicleDriverTimeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassengerID", DbType:="UniqueIdentifier")>  _
	Public Property PassengerID() As System.Nullable(Of System.Guid)
		Get
			Return Me._PassengerID
		End Get
		Set
			If (Me._PassengerID.Equals(value) = false) Then
				Me._PassengerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me._StartDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me._EndDateTime = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetUnprocessedCollissionsForAlertTypeResult
	
	Private _id As System.Nullable(Of Long)
	
	Private _DeviceID As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _GeoFence_Description As String
	
	Private _Vehicle_Name As String
	
	Private _GeoFence_Name As String
	
	Private _Driver_Name As String
	
	Private _GeoFence_Name1 As String
	
	Private _ApplicationGeoFenceID As System.Nullable(Of System.Guid)
	
	Private _ApplicationVehicleID As System.Nullable(Of System.Guid)
	
	Private _ApplicationDriverID As System.Nullable(Of System.Guid)
	
	Private _GeoFenceDeviceCollissionID As System.Nullable(Of System.Guid)
	
	Private _ApplictionID As System.Nullable(Of System.Guid)
	
	Private _PhoneNumber As String
	
	Private _Emails As String
	
	Private _DriverName As String
	
	Private _DateSend As System.Nullable(Of Date)
	
	Private _MessageContent As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="BigInt")>  _
	Public Property id() As System.Nullable(Of Long)
		Get
			Return Me._id
		End Get
		Set
			If (Me._id.Equals(value) = false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceID", DbType:="VarChar(10)")>  _
	Public Property DeviceID() As String
		Get
			Return Me._DeviceID
		End Get
		Set
			If (String.Equals(Me._DeviceID, value) = false) Then
				Me._DeviceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Description", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Description() As String
		Get
			Return Me._GeoFence_Description
		End Get
		Set
			If (String.Equals(Me._GeoFence_Description, value) = false) Then
				Me._GeoFence_Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vehicle_Name", DbType:="VarChar(500)")>  _
	Public Property Vehicle_Name() As String
		Get
			Return Me._Vehicle_Name
		End Get
		Set
			If (String.Equals(Me._Vehicle_Name, value) = false) Then
				Me._Vehicle_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Name() As String
		Get
			Return Me._GeoFence_Name
		End Get
		Set
			If (String.Equals(Me._GeoFence_Name, value) = false) Then
				Me._GeoFence_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver_Name", DbType:="VarChar(MAX)")>  _
	Public Property Driver_Name() As String
		Get
			Return Me._Driver_Name
		End Get
		Set
			If (String.Equals(Me._Driver_Name, value) = false) Then
				Me._Driver_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFence_Name1", DbType:="VarChar(MAX)")>  _
	Public Property GeoFence_Name1() As String
		Get
			Return Me._GeoFence_Name1
		End Get
		Set
			If (String.Equals(Me._GeoFence_Name1, value) = false) Then
				Me._GeoFence_Name1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationGeoFenceID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationGeoFenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationGeoFenceID
		End Get
		Set
			If (Me._ApplicationGeoFenceID.Equals(value) = false) Then
				Me._ApplicationGeoFenceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVehicleID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationVehicleID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationVehicleID
		End Get
		Set
			If (Me._ApplicationVehicleID.Equals(value) = false) Then
				Me._ApplicationVehicleID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDriverID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationDriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationDriverID
		End Get
		Set
			If (Me._ApplicationDriverID.Equals(value) = false) Then
				Me._ApplicationDriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeoFenceDeviceCollissionID", DbType:="UniqueIdentifier")>  _
	Public Property GeoFenceDeviceCollissionID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GeoFenceDeviceCollissionID
		End Get
		Set
			If (Me._GeoFenceDeviceCollissionID.Equals(value) = false) Then
				Me._GeoFenceDeviceCollissionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplictionID", DbType:="UniqueIdentifier")>  _
	Public Property ApplictionID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplictionID
		End Get
		Set
			If (Me._ApplictionID.Equals(value) = false) Then
				Me._ApplictionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me._PhoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Emails", DbType:="VarChar(MAX)")>  _
	Public Property Emails() As String
		Get
			Return Me._Emails
		End Get
		Set
			If (String.Equals(Me._Emails, value) = false) Then
				Me._Emails = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="VarChar(500)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSend", DbType:="DateTime")>  _
	Public Property DateSend() As System.Nullable(Of Date)
		Get
			Return Me._DateSend
		End Get
		Set
			If (Me._DateSend.Equals(value) = false) Then
				Me._DateSend = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageContent", DbType:="VarChar(MAX)")>  _
	Public Property MessageContent() As String
		Get
			Return Me._MessageContent
		End Get
		Set
			If (String.Equals(Me._MessageContent, value) = false) Then
				Me._MessageContent = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetCustomerUpdateValueResult
	
	Private _CustomerName As String
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _Cid As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>  _
	Public Property Cid() As System.Nullable(Of Integer)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me._Cid = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetAllDriversResult
	
	Private _DriverID As System.Guid
	
	Private _DriverName As String
	
	Private _InActive As Integer
	
	Private _Source As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property DriverID() As System.Guid
		Get
			Return Me._DriverID
		End Get
		Set
			If ((Me._DriverID = value)  _
						= false) Then
				Me._DriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(MAX)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InActive", DbType:="Int NOT NULL")>  _
	Public Property InActive() As Integer
		Get
			Return Me._InActive
		End Get
		Set
			If ((Me._InActive = value)  _
						= false) Then
				Me._InActive = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me._Source = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetCustomersResult
	
	Private _CustomerID As System.Guid
	
	Private _Cid As Integer
	
	Private _CustomerName As String
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _State As System.Nullable(Of Integer)
	
	Private _Suburb As String
	
	Private _PostCode As String
	
	Private _CustomerContactName As String
	
	Private _CustomerPhone As String
	
	Private _CustomerMobile As String
	
	Private _CustomerFax As String
	
	Private _CustomerComments As String
	
	Private _CustomerAgent As System.Nullable(Of Integer)
	
	Private _CustomerRating As System.Nullable(Of Short)
	
	Private _Zone As System.Nullable(Of Integer)
	
	Private _MYOBCustomerNumber As String
	
	Private _CustomerValue As System.Nullable(Of Double)
	
	Private _InactiveCustomer As Boolean
	
	Private _CustomerCommencementDate As System.Nullable(Of Date)
	
	Private _chkCustomerExcludeFuelLevy As Boolean
	
	Private _cmbRateIncrease As System.Nullable(Of Short)
	
	Private _ZoneSortOrder As System.Nullable(Of Long)
	
	Private _AgentSortOrder As System.Nullable(Of Long)
	
	Private _RateIncreaseSortOrder As System.Nullable(Of Long)
	
	Private _CustomerSortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CustomerID() As System.Guid
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="Int")>  _
	Public Property State() As System.Nullable(Of Integer)
		Get
			Return Me._State
		End Get
		Set
			If (Me._State.Equals(value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>  _
	Public Property CustomerContactName() As String
		Get
			Return Me._CustomerContactName
		End Get
		Set
			If (String.Equals(Me._CustomerContactName, value) = false) Then
				Me._CustomerContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerMobile", DbType:="NVarChar(22)")>  _
	Public Property CustomerMobile() As String
		Get
			Return Me._CustomerMobile
		End Get
		Set
			If (String.Equals(Me._CustomerMobile, value) = false) Then
				Me._CustomerMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerFax", DbType:="NVarChar(22)")>  _
	Public Property CustomerFax() As String
		Get
			Return Me._CustomerFax
		End Get
		Set
			If (String.Equals(Me._CustomerFax, value) = false) Then
				Me._CustomerFax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerComments", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerComments() As String
		Get
			Return Me._CustomerComments
		End Get
		Set
			If (String.Equals(Me._CustomerComments, value) = false) Then
				Me._CustomerComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgent", DbType:="Int")>  _
	Public Property CustomerAgent() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerAgent
		End Get
		Set
			If (Me._CustomerAgent.Equals(value) = false) Then
				Me._CustomerAgent = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>  _
	Public Property CustomerRating() As System.Nullable(Of Short)
		Get
			Return Me._CustomerRating
		End Get
		Set
			If (Me._CustomerRating.Equals(value) = false) Then
				Me._CustomerRating = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>  _
	Public Property Zone() As System.Nullable(Of Integer)
		Get
			Return Me._Zone
		End Get
		Set
			If (Me._Zone.Equals(value) = false) Then
				Me._Zone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>  _
	Public Property MYOBCustomerNumber() As String
		Get
			Return Me._MYOBCustomerNumber
		End Get
		Set
			If (String.Equals(Me._MYOBCustomerNumber, value) = false) Then
				Me._MYOBCustomerNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerValue", DbType:="Float")>  _
	Public Property CustomerValue() As System.Nullable(Of Double)
		Get
			Return Me._CustomerValue
		End Get
		Set
			If (Me._CustomerValue.Equals(value) = false) Then
				Me._CustomerValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveCustomer", DbType:="Bit NOT NULL")>  _
	Public Property InactiveCustomer() As Boolean
		Get
			Return Me._InactiveCustomer
		End Get
		Set
			If ((Me._InactiveCustomer = value)  _
						= false) Then
				Me._InactiveCustomer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerCommencementDate", DbType:="DateTime")>  _
	Public Property CustomerCommencementDate() As System.Nullable(Of Date)
		Get
			Return Me._CustomerCommencementDate
		End Get
		Set
			If (Me._CustomerCommencementDate.Equals(value) = false) Then
				Me._CustomerCommencementDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkCustomerExcludeFuelLevy", DbType:="Bit NOT NULL")>  _
	Public Property chkCustomerExcludeFuelLevy() As Boolean
		Get
			Return Me._chkCustomerExcludeFuelLevy
		End Get
		Set
			If ((Me._chkCustomerExcludeFuelLevy = value)  _
						= false) Then
				Me._chkCustomerExcludeFuelLevy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>  _
	Public Property cmbRateIncrease() As System.Nullable(Of Short)
		Get
			Return Me._cmbRateIncrease
		End Get
		Set
			If (Me._cmbRateIncrease.Equals(value) = false) Then
				Me._cmbRateIncrease = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSortOrder", DbType:="BigInt")>  _
	Public Property ZoneSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ZoneSortOrder
		End Get
		Set
			If (Me._ZoneSortOrder.Equals(value) = false) Then
				Me._ZoneSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgentSortOrder", DbType:="BigInt")>  _
	Public Property AgentSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._AgentSortOrder
		End Get
		Set
			If (Me._AgentSortOrder.Equals(value) = false) Then
				Me._AgentSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateIncreaseSortOrder", DbType:="BigInt")>  _
	Public Property RateIncreaseSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._RateIncreaseSortOrder
		End Get
		Set
			If (Me._RateIncreaseSortOrder.Equals(value) = false) Then
				Me._RateIncreaseSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerSortOrder", DbType:="BigInt")>  _
	Public Property CustomerSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._CustomerSortOrder
		End Get
		Set
			If (Me._CustomerSortOrder.Equals(value) = false) Then
				Me._CustomerSortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRunDatesResult
	
	Private _RID As System.Nullable(Of Integer)
	
	Private _DateOfRun As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int")>  _
	Public Property RID() As System.Nullable(Of Integer)
		Get
			Return Me._RID
		End Get
		Set
			If (Me._RID.Equals(value) = false) Then
				Me._RID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>  _
	Public Property DateOfRun() As System.Nullable(Of Date)
		Get
			Return Me._DateOfRun
		End Get
		Set
			If (Me._DateOfRun.Equals(value) = false) Then
				Me._DateOfRun = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGenerateRunSheetsDetailResult
	
	Private _SortOrder As String
	
	Private _Cid As System.Nullable(Of Integer)
	
	Private _SiteName As String
	
	Private _Add As String
	
	Private _Suburb As String
	
	Private _SiteContactName As String
	
	Private _SiteContactPhone As String
	
	Private _SiteContactMobile As String
	
	Private _RunDriver As System.Nullable(Of Integer)
	
	Private _GeneralSiteServiceComments As String
	
	Private _RunNumber As System.Nullable(Of Integer)
	
	Private _DriverName As String
	
	Private _RunDescription As String
	
	Private _Notes As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="NVarChar(12)")>  _
	Public Property SortOrder() As String
		Get
			Return Me._SortOrder
		End Get
		Set
			If (String.Equals(Me._SortOrder, value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>  _
	Public Property Cid() As System.Nullable(Of Integer)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Add]", Storage:="_Add", DbType:="NVarChar(203)")>  _
	Public Property Add() As String
		Get
			Return Me._Add
		End Get
		Set
			If (String.Equals(Me._Add, value) = false) Then
				Me._Add = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>  _
	Public Property SiteContactName() As String
		Get
			Return Me._SiteContactName
		End Get
		Set
			If (String.Equals(Me._SiteContactName, value) = false) Then
				Me._SiteContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>  _
	Public Property SiteContactPhone() As String
		Get
			Return Me._SiteContactPhone
		End Get
		Set
			If (String.Equals(Me._SiteContactPhone, value) = false) Then
				Me._SiteContactPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>  _
	Public Property SiteContactMobile() As String
		Get
			Return Me._SiteContactMobile
		End Get
		Set
			If (String.Equals(Me._SiteContactMobile, value) = false) Then
				Me._SiteContactMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Int")>  _
	Public Property RunDriver() As System.Nullable(Of Integer)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me._RunDriver = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property GeneralSiteServiceComments() As String
		Get
			Return Me._GeneralSiteServiceComments
		End Get
		Set
			If (String.Equals(Me._GeneralSiteServiceComments, value) = false) Then
				Me._GeneralSiteServiceComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNumber", DbType:="Int")>  _
	Public Property RunNumber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNumber
		End Get
		Set
			If (Me._RunNumber.Equals(value) = false) Then
				Me._RunNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(33)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me._Notes = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGenerateRunSheetsDetailSubResult
	
	Private _Cid As System.Nullable(Of Integer)
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _SiteName As String
	
	Private _SortOrder As String
	
	Private _Add As String
	
	Private _Suburb As String
	
	Private _SiteContactName As String
	
	Private _SiteContactPhone As String
	
	Private _SiteContactMobile As String
	
	Private _ServiceDesc As String
	
	Private _ServiceUnits As System.Nullable(Of Double)
	
	Private _ServiceComments As String
	
	Private _RunDriver As System.Nullable(Of Integer)
	
	Private _DriverName As String
	
	Private _GeneralSiteServiceComments As String
	
	Private _RunNumber As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>  _
	Public Property Cid() As System.Nullable(Of Integer)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me._CSid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="NVarChar(12)")>  _
	Public Property SortOrder() As String
		Get
			Return Me._SortOrder
		End Get
		Set
			If (String.Equals(Me._SortOrder, value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Add]", Storage:="_Add", DbType:="NVarChar(101)")>  _
	Public Property Add() As String
		Get
			Return Me._Add
		End Get
		Set
			If (String.Equals(Me._Add, value) = false) Then
				Me._Add = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>  _
	Public Property SiteContactName() As String
		Get
			Return Me._SiteContactName
		End Get
		Set
			If (String.Equals(Me._SiteContactName, value) = false) Then
				Me._SiteContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>  _
	Public Property SiteContactPhone() As String
		Get
			Return Me._SiteContactPhone
		End Get
		Set
			If (String.Equals(Me._SiteContactPhone, value) = false) Then
				Me._SiteContactPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>  _
	Public Property SiteContactMobile() As String
		Get
			Return Me._SiteContactMobile
		End Get
		Set
			If (String.Equals(Me._SiteContactMobile, value) = false) Then
				Me._SiteContactMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDesc", DbType:="NVarChar(61)")>  _
	Public Property ServiceDesc() As String
		Get
			Return Me._ServiceDesc
		End Get
		Set
			If (String.Equals(Me._ServiceDesc, value) = false) Then
				Me._ServiceDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>  _
	Public Property ServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me._ServiceComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="Int")>  _
	Public Property RunDriver() As System.Nullable(Of Integer)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me._RunDriver = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property GeneralSiteServiceComments() As String
		Get
			Return Me._GeneralSiteServiceComments
		End Get
		Set
			If (String.Equals(Me._GeneralSiteServiceComments, value) = false) Then
				Me._GeneralSiteServiceComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNumber", DbType:="Int")>  _
	Public Property RunNumber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNumber
		End Get
		Set
			If (Me._RunNumber.Equals(value) = false) Then
				Me._RunNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGenerateRunSheetSummaryResult
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _SumOfServiceUnits As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me._ServiceCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfServiceUnits", DbType:="Float")>  _
	Public Property SumOfServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._SumOfServiceUnits
		End Get
		Set
			If (Me._SumOfServiceUnits.Equals(value) = false) Then
				Me._SumOfServiceUnits = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetIndustryGroupResult
	
	Private _IndustryID As System.Guid
	
	Private _Aid As Integer
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _IndustryDescription As String
	
	Private _SortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property IndustryID() As System.Guid
		Get
			Return Me._IndustryID
		End Get
		Set
			If ((Me._IndustryID = value)  _
						= false) Then
				Me._IndustryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me._Aid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryDescription", DbType:="NVarChar(50)")>  _
	Public Property IndustryDescription() As String
		Get
			Return Me._IndustryDescription
		End Get
		Set
			If (String.Equals(Me._IndustryDescription, value) = false) Then
				Me._IndustryDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>  _
	Public Property SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetPreviousInvoiceSummaryReportResult
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _CustomerName As String
	
	Private _SumOfAnnualPriceExGST As System.Nullable(Of Double)
	
	Private _SumOfInvoiceAmountExGST As System.Nullable(Of Double)
	
	Private _SumOfGSTAmount As System.Nullable(Of Double)
	
	Private _SumOfInvoiceAmountIncGST As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfAnnualPriceExGST", DbType:="Float")>  _
	Public Property SumOfAnnualPriceExGST() As System.Nullable(Of Double)
		Get
			Return Me._SumOfAnnualPriceExGST
		End Get
		Set
			If (Me._SumOfAnnualPriceExGST.Equals(value) = false) Then
				Me._SumOfAnnualPriceExGST = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfInvoiceAmountExGST", DbType:="Float")>  _
	Public Property SumOfInvoiceAmountExGST() As System.Nullable(Of Double)
		Get
			Return Me._SumOfInvoiceAmountExGST
		End Get
		Set
			If (Me._SumOfInvoiceAmountExGST.Equals(value) = false) Then
				Me._SumOfInvoiceAmountExGST = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfGSTAmount", DbType:="Float")>  _
	Public Property SumOfGSTAmount() As System.Nullable(Of Double)
		Get
			Return Me._SumOfGSTAmount
		End Get
		Set
			If (Me._SumOfGSTAmount.Equals(value) = false) Then
				Me._SumOfGSTAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfInvoiceAmountIncGST", DbType:="Float")>  _
	Public Property SumOfInvoiceAmountIncGST() As System.Nullable(Of Double)
		Get
			Return Me._SumOfInvoiceAmountIncGST
		End Get
		Set
			If (Me._SumOfInvoiceAmountIncGST.Equals(value) = false) Then
				Me._SumOfInvoiceAmountIncGST = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetMYOBFileListResult
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _MYOBCustomerNumber As String
	
	Private _SiteId As Integer
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _InvoiceCommencing As System.Nullable(Of Date)
	
	Private _InvoiceFrequency As System.Nullable(Of Integer)
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _InvoiceAddress As String
	
	Private _InvoiceAddress2 As String
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _PurchaseOrderNumber As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _SiteName1 As String
	
	Private _SeparateInvoice As Boolean
	
	Private _InvoiceMonth1 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth2 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth3 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth4 As System.Nullable(Of Integer)
	
	Private _chkSitesExcludeFuelLevy As Boolean
	
	Private _chkCustomerExcludeFuelLevy As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>  _
	Public Property MYOBCustomerNumber() As String
		Get
			Return Me._MYOBCustomerNumber
		End Get
		Set
			If (String.Equals(Me._MYOBCustomerNumber, value) = false) Then
				Me._MYOBCustomerNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteId", DbType:="Int NOT NULL")>  _
	Public Property SiteId() As Integer
		Get
			Return Me._SiteId
		End Get
		Set
			If ((Me._SiteId = value)  _
						= false) Then
				Me._SiteId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>  _
	Public Property InvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceCommencing
		End Get
		Set
			If (Me._InvoiceCommencing.Equals(value) = false) Then
				Me._InvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequency", DbType:="Int")>  _
	Public Property InvoiceFrequency() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceFrequency
		End Get
		Set
			If (Me._InvoiceFrequency.Equals(value) = false) Then
				Me._InvoiceFrequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me._UnitsHaveMoreThanOneRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAddress", DbType:="NVarChar(150)")>  _
	Public Property InvoiceAddress() As String
		Get
			Return Me._InvoiceAddress
		End Get
		Set
			If (String.Equals(Me._InvoiceAddress, value) = false) Then
				Me._InvoiceAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAddress2", DbType:="NVarChar(67)")>  _
	Public Property InvoiceAddress2() As String
		Get
			Return Me._InvoiceAddress2
		End Get
		Set
			If (String.Equals(Me._InvoiceAddress2, value) = false) Then
				Me._InvoiceAddress2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me._CSid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property PurchaseOrderNumber() As String
		Get
			Return Me._PurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._PurchaseOrderNumber, value) = false) Then
				Me._PurchaseOrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName1", DbType:="NVarChar(50)")>  _
	Public Property SiteName1() As String
		Get
			Return Me._SiteName1
		End Get
		Set
			If (String.Equals(Me._SiteName1, value) = false) Then
				Me._SiteName1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeparateInvoice", DbType:="Bit NOT NULL")>  _
	Public Property SeparateInvoice() As Boolean
		Get
			Return Me._SeparateInvoice
		End Get
		Set
			If ((Me._SeparateInvoice = value)  _
						= false) Then
				Me._SeparateInvoice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>  _
	Public Property InvoiceMonth1() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth1
		End Get
		Set
			If (Me._InvoiceMonth1.Equals(value) = false) Then
				Me._InvoiceMonth1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>  _
	Public Property InvoiceMonth2() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth2
		End Get
		Set
			If (Me._InvoiceMonth2.Equals(value) = false) Then
				Me._InvoiceMonth2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>  _
	Public Property InvoiceMonth3() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth3
		End Get
		Set
			If (Me._InvoiceMonth3.Equals(value) = false) Then
				Me._InvoiceMonth3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>  _
	Public Property InvoiceMonth4() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth4
		End Get
		Set
			If (Me._InvoiceMonth4.Equals(value) = false) Then
				Me._InvoiceMonth4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkSitesExcludeFuelLevy", DbType:="Bit NOT NULL")>  _
	Public Property chkSitesExcludeFuelLevy() As Boolean
		Get
			Return Me._chkSitesExcludeFuelLevy
		End Get
		Set
			If ((Me._chkSitesExcludeFuelLevy = value)  _
						= false) Then
				Me._chkSitesExcludeFuelLevy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkCustomerExcludeFuelLevy", DbType:="Bit NOT NULL")>  _
	Public Property chkCustomerExcludeFuelLevy() As Boolean
		Get
			Return Me._chkCustomerExcludeFuelLevy
		End Get
		Set
			If ((Me._chkCustomerExcludeFuelLevy = value)  _
						= false) Then
				Me._chkCustomerExcludeFuelLevy = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSiteListReportResult
	
	Private _Customer As System.Nullable(Of Short)
	
	Private _CustomerName As String
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _SiteID As System.Guid
	
	Private _SiteName As String
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _AddressLine4 As String
	
	Private _SubStatePC As String
	
	Private _SiteContactName As String
	
	Private _SiteContactPhone As String
	
	Private _SiteContactFax As String
	
	Private _SiteContactMobile As String
	
	Private _SiteContactEmail As String
	
	Private _Cid As Integer
	
	Private _PostalAddressLine1 As String
	
	Private _PostalAddressLine2 As String
	
	Private _PostalSubStatePC As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SiteID() As System.Guid
		Get
			Return Me._SiteID
		End Get
		Set
			If ((Me._SiteID = value)  _
						= false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me._AddressLine3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(50)")>  _
	Public Property AddressLine4() As String
		Get
			Return Me._AddressLine4
		End Get
		Set
			If (String.Equals(Me._AddressLine4, value) = false) Then
				Me._AddressLine4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubStatePC", DbType:="NVarChar(87)")>  _
	Public Property SubStatePC() As String
		Get
			Return Me._SubStatePC
		End Get
		Set
			If (String.Equals(Me._SubStatePC, value) = false) Then
				Me._SubStatePC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>  _
	Public Property SiteContactName() As String
		Get
			Return Me._SiteContactName
		End Get
		Set
			If (String.Equals(Me._SiteContactName, value) = false) Then
				Me._SiteContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>  _
	Public Property SiteContactPhone() As String
		Get
			Return Me._SiteContactPhone
		End Get
		Set
			If (String.Equals(Me._SiteContactPhone, value) = false) Then
				Me._SiteContactPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactFax", DbType:="NVarChar(50)")>  _
	Public Property SiteContactFax() As String
		Get
			Return Me._SiteContactFax
		End Get
		Set
			If (String.Equals(Me._SiteContactFax, value) = false) Then
				Me._SiteContactFax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>  _
	Public Property SiteContactMobile() As String
		Get
			Return Me._SiteContactMobile
		End Get
		Set
			If (String.Equals(Me._SiteContactMobile, value) = false) Then
				Me._SiteContactMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactEmail", DbType:="NVarChar(50)")>  _
	Public Property SiteContactEmail() As String
		Get
			Return Me._SiteContactEmail
		End Get
		Set
			If (String.Equals(Me._SiteContactEmail, value) = false) Then
				Me._SiteContactEmail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine1() As String
		Get
			Return Me._PostalAddressLine1
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine1, value) = false) Then
				Me._PostalAddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine2() As String
		Get
			Return Me._PostalAddressLine2
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine2, value) = false) Then
				Me._PostalAddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSubStatePC", DbType:="NVarChar(88)")>  _
	Public Property PostalSubStatePC() As String
		Get
			Return Me._PostalSubStatePC
		End Get
		Set
			If (String.Equals(Me._PostalSubStatePC, value) = false) Then
				Me._PostalSubStatePC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetIncludeServiceInformationReportResult
	
	Private _applicationid As System.Nullable(Of System.Guid)
	
	Private _Cid As System.Nullable(Of Integer)
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _Customer As System.Nullable(Of Short)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_applicationid", DbType:="UniqueIdentifier")>  _
	Public Property applicationid() As System.Nullable(Of System.Guid)
		Get
			Return Me._applicationid
		End Get
		Set
			If (Me._applicationid.Equals(value) = false) Then
				Me._applicationid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>  _
	Public Property Cid() As System.Nullable(Of Integer)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me._ServiceCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me._CSid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me._UnitsHaveMoreThanOneRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetAnnualAnalysisReportResult
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Frequency As String
	
	Private _CustomerName As String
	
	Private _Suburb As String
	
	Private _CustomerRating As System.Nullable(Of Short)
	
	Private _SiteName As String
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _SiteContractExpiry As System.Nullable(Of Date)
	
	Private _SiteCeaseReason As System.Nullable(Of Integer)
	
	Private _SiteStartDate As System.Nullable(Of Date)
	
	Private _CeaseReasonDescription As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _IndustryGroup As System.Nullable(Of Short)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>  _
	Public Property Frequency() As String
		Get
			Return Me._Frequency
		End Get
		Set
			If (String.Equals(Me._Frequency, value) = false) Then
				Me._Frequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>  _
	Public Property CustomerRating() As System.Nullable(Of Short)
		Get
			Return Me._CustomerRating
		End Get
		Set
			If (Me._CustomerRating.Equals(value) = false) Then
				Me._CustomerRating = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>  _
	Public Property SiteContractExpiry() As System.Nullable(Of Date)
		Get
			Return Me._SiteContractExpiry
		End Get
		Set
			If (Me._SiteContractExpiry.Equals(value) = false) Then
				Me._SiteContractExpiry = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseReason", DbType:="Int")>  _
	Public Property SiteCeaseReason() As System.Nullable(Of Integer)
		Get
			Return Me._SiteCeaseReason
		End Get
		Set
			If (Me._SiteCeaseReason.Equals(value) = false) Then
				Me._SiteCeaseReason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>  _
	Public Property SiteStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteStartDate
		End Get
		Set
			If (Me._SiteStartDate.Equals(value) = false) Then
				Me._SiteStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonDescription", DbType:="NVarChar(50)")>  _
	Public Property CeaseReasonDescription() As String
		Get
			Return Me._CeaseReasonDescription
		End Get
		Set
			If (String.Equals(Me._CeaseReasonDescription, value) = false) Then
				Me._CeaseReasonDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroup", DbType:="SmallInt")>  _
	Public Property IndustryGroup() As System.Nullable(Of Short)
		Get
			Return Me._IndustryGroup
		End Get
		Set
			If (Me._IndustryGroup.Equals(value) = false) Then
				Me._IndustryGroup = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRevenueReportByZoneResult
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _AreaDescription As String
	
	Private _CustomerName As String
	
	Private _CustomerContactName As String
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddLine2 As String
	
	Private _SuburbLine As String
	
	Private _CustomerPhone As String
	
	Private _Cid As Integer
	
	Private _Zone As System.Nullable(Of Integer)
	
	Private _Suburb As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>  _
	Public Property AreaDescription() As String
		Get
			Return Me._AreaDescription
		End Get
		Set
			If (String.Equals(Me._AreaDescription, value) = false) Then
				Me._AreaDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>  _
	Public Property CustomerContactName() As String
		Get
			Return Me._CustomerContactName
		End Get
		Set
			If (String.Equals(Me._CustomerContactName, value) = false) Then
				Me._CustomerContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddLine2", DbType:="NVarChar(50)")>  _
	Public Property AddLine2() As String
		Get
			Return Me._AddLine2
		End Get
		Set
			If (String.Equals(Me._AddLine2, value) = false) Then
				Me._AddLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SuburbLine", DbType:="NVarChar(31)")>  _
	Public Property SuburbLine() As String
		Get
			Return Me._SuburbLine
		End Get
		Set
			If (String.Equals(Me._SuburbLine, value) = false) Then
				Me._SuburbLine = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>  _
	Public Property Zone() As System.Nullable(Of Integer)
		Get
			Return Me._Zone
		End Get
		Set
			If (Me._Zone.Equals(value) = false) Then
				Me._Zone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSalesReportSuburbResult
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _Customer As System.Nullable(Of Short)
	
	Private _Cid As Integer
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _SiteName As String
	
	Private _UnitsHaveMoreThanOneRun As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit")>  _
	Public Property UnitsHaveMoreThanOneRun() As System.Nullable(Of Boolean)
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If (Me._UnitsHaveMoreThanOneRun.Equals(value) = false) Then
				Me._UnitsHaveMoreThanOneRun = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetContractCeaseReasonsResult
	
	Private _CeaseReasonID As System.Guid
	
	Private _Aid As Integer
	
	Private _CeaseReasonDescription As String
	
	Private _SortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CeaseReasonID() As System.Guid
		Get
			Return Me._CeaseReasonID
		End Get
		Set
			If ((Me._CeaseReasonID = value)  _
						= false) Then
				Me._CeaseReasonID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me._Aid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CeaseReasonDescription", DbType:="NVarChar(50)")>  _
	Public Property CeaseReasonDescription() As String
		Get
			Return Me._CeaseReasonDescription
		End Get
		Set
			If (String.Equals(Me._CeaseReasonDescription, value) = false) Then
				Me._CeaseReasonDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>  _
	Public Property SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetPreviousSupplierResult
	
	Private _PreviousSupplierID As System.Guid
	
	Private _Aid As Integer
	
	Private _PreviousSupplier As String
	
	Private _SortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property PreviousSupplierID() As System.Guid
		Get
			Return Me._PreviousSupplierID
		End Get
		Set
			If ((Me._PreviousSupplierID = value)  _
						= false) Then
				Me._PreviousSupplierID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me._Aid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="NVarChar(50)")>  _
	Public Property PreviousSupplier() As String
		Get
			Return Me._PreviousSupplier
		End Get
		Set
			If (String.Equals(Me._PreviousSupplier, value) = false) Then
				Me._PreviousSupplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>  _
	Public Property SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetFortNightlyCyclesResult
	
	Private _FortnightlyCyclesID As System.Guid
	
	Private _Aid As Integer
	
	Private _CycleDescription As String
	
	Private _SortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FortnightlyCyclesID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property FortnightlyCyclesID() As System.Guid
		Get
			Return Me._FortnightlyCyclesID
		End Get
		Set
			If ((Me._FortnightlyCyclesID = value)  _
						= false) Then
				Me._FortnightlyCyclesID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me._Aid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CycleDescription", DbType:="NVarChar(50)")>  _
	Public Property CycleDescription() As String
		Get
			Return Me._CycleDescription
		End Get
		Set
			If (String.Equals(Me._CycleDescription, value) = false) Then
				Me._CycleDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>  _
	Public Property SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRevenueChangeReasonResult
	
	Private _RevenueChangeReasonID As System.Guid
	
	Private _Rid As Integer
	
	Private _RevenueChangeReason As String
	
	Private _SortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReasonID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RevenueChangeReasonID() As System.Guid
		Get
			Return Me._RevenueChangeReasonID
		End Get
		Set
			If ((Me._RevenueChangeReasonID = value)  _
						= false) Then
				Me._RevenueChangeReasonID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int NOT NULL")>  _
	Public Property Rid() As Integer
		Get
			Return Me._Rid
		End Get
		Set
			If ((Me._Rid = value)  _
						= false) Then
				Me._Rid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReason", DbType:="NVarChar(50)")>  _
	Public Property RevenueChangeReason() As String
		Get
			Return Me._RevenueChangeReason
		End Get
		Set
			If (String.Equals(Me._RevenueChangeReason, value) = false) Then
				Me._RevenueChangeReason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="BigInt")>  _
	Public Property SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me._SortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetPerAnnumValuesReportResult
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _CustomerName As String
	
	Private _SumOfPerAnnumCharge As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfPerAnnumCharge", DbType:="Float")>  _
	Public Property SumOfPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._SumOfPerAnnumCharge
		End Get
		Set
			If (Me._SumOfPerAnnumCharge.Equals(value) = false) Then
				Me._SumOfPerAnnumCharge = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGainAndLossesBySalesPersonReportResult
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _AreaDescription As String
	
	Private _Suburb As String
	
	Private _SalesPerson As String
	
	Private _SiteName As String
	
	Private _SiteStartDate As System.Nullable(Of Date)
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _status As String
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>  _
	Public Property AreaDescription() As String
		Get
			Return Me._AreaDescription
		End Get
		Set
			If (String.Equals(Me._AreaDescription, value) = false) Then
				Me._AreaDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>  _
	Public Property SalesPerson() As String
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (String.Equals(Me._SalesPerson, value) = false) Then
				Me._SalesPerson = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>  _
	Public Property SiteStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteStartDate
		End Get
		Set
			If (Me._SiteStartDate.Equals(value) = false) Then
				Me._SiteStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSitesResult
	
	Private _SiteID As System.Guid
	
	Private _Cid As Integer
	
	Private _SiteName As String
	
	Private _Customer As System.Nullable(Of Short)
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _AddressLine4 As String
	
	Private _Suburb As String
	
	Private _State As String
	
	Private _PostCode As System.Nullable(Of Short)
	
	Private _PhoneNo As String
	
	Private _FaxNo As String
	
	Private _SiteContactName As String
	
	Private _SiteContactPhone As String
	
	Private _SiteContactFax As String
	
	Private _SiteContactMobile As String
	
	Private _SiteContactEmail As String
	
	Private _PostalAddressLine1 As String
	
	Private _PostalAddressLine2 As String
	
	Private _PostalSuburb As String
	
	Private _PostalState As String
	
	Private _PostalPostCode As System.Nullable(Of Short)
	
	Private _SiteStartDate As System.Nullable(Of Date)
	
	Private _SitePeriod As System.Nullable(Of Integer)
	
	Private _SiteContractExpiry As System.Nullable(Of Date)
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _SiteCeaseReason As System.Nullable(Of Integer)
	
	Private _InvoiceFrequency As System.Nullable(Of Integer)
	
	Private _InvoiceCommencing As System.Nullable(Of Date)
	
	Private _IndustryGroup As System.Nullable(Of Short)
	
	Private _PreviousSupplier As System.Nullable(Of Short)
	
	Private _LostBusinessTo As System.Nullable(Of Short)
	
	Private _SalesPerson As System.Nullable(Of Short)
	
	Private _InitialServiceAgreementNo As String
	
	Private _InvoiceMonth1 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth2 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth3 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth4 As System.Nullable(Of Integer)
	
	Private _GeneralSiteServiceComments As String
	
	Private _TotalUnits As System.Nullable(Of Double)
	
	Private _TotalAmount As System.Nullable(Of Double)
	
	Private _Zone As System.Nullable(Of Integer)
	
	Private _SeparateInvoice As Boolean
	
	Private _PurchaseOrderNumber As String
	
	Private _chkSitesExcludeFuelLevy As Boolean
	
	Private _cmbRateIncrease As System.Nullable(Of Short)
	
	Private _ZoneSortOrder As System.Nullable(Of Long)
	
	Private _StateSortOrder As System.Nullable(Of Long)
	
	Private _CustomerSortOrder As System.Nullable(Of Long)
	
	Private _IndustrySortOrder As System.Nullable(Of Long)
	
	Private _PreviousSupplierSortOrder As System.Nullable(Of Long)
	
	Private _SalesPersonSortOrder As System.Nullable(Of Long)
	
	Private _InitialContractPeriodSortOrder As System.Nullable(Of Long)
	
	Private _ContractCeaseReasonsSortOrder As System.Nullable(Of Long)
	
	Private _LostBusinessToSortOrder As System.Nullable(Of Long)
	
	Private _InvoicingFrequencySortOrder As System.Nullable(Of Long)
	
	Private _cmbRateIncreaseSortOrder As System.Nullable(Of Long)
	
	Private _CustomerName As String
	
	Private _CustomerRating As System.Nullable(Of Short)
	
	Private _CustomerRatingDesc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property SiteID() As System.Guid
		Get
			Return Me._SiteID
		End Get
		Set
			If ((Me._SiteID = value)  _
						= false) Then
				Me._SiteID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me._AddressLine3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine4", DbType:="NVarChar(50)")>  _
	Public Property AddressLine4() As String
		Get
			Return Me._AddressLine4
		End Get
		Set
			If (String.Equals(Me._AddressLine4, value) = false) Then
				Me._AddressLine4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(5)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me._State = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>  _
	Public Property PostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostCode
		End Get
		Set
			If (Me._PostCode.Equals(value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(50)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me._PhoneNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNo", DbType:="NVarChar(50)")>  _
	Public Property FaxNo() As String
		Get
			Return Me._FaxNo
		End Get
		Set
			If (String.Equals(Me._FaxNo, value) = false) Then
				Me._FaxNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactName", DbType:="NVarChar(50)")>  _
	Public Property SiteContactName() As String
		Get
			Return Me._SiteContactName
		End Get
		Set
			If (String.Equals(Me._SiteContactName, value) = false) Then
				Me._SiteContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>  _
	Public Property SiteContactPhone() As String
		Get
			Return Me._SiteContactPhone
		End Get
		Set
			If (String.Equals(Me._SiteContactPhone, value) = false) Then
				Me._SiteContactPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactFax", DbType:="NVarChar(50)")>  _
	Public Property SiteContactFax() As String
		Get
			Return Me._SiteContactFax
		End Get
		Set
			If (String.Equals(Me._SiteContactFax, value) = false) Then
				Me._SiteContactFax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactMobile", DbType:="NVarChar(50)")>  _
	Public Property SiteContactMobile() As String
		Get
			Return Me._SiteContactMobile
		End Get
		Set
			If (String.Equals(Me._SiteContactMobile, value) = false) Then
				Me._SiteContactMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactEmail", DbType:="NVarChar(50)")>  _
	Public Property SiteContactEmail() As String
		Get
			Return Me._SiteContactEmail
		End Get
		Set
			If (String.Equals(Me._SiteContactEmail, value) = false) Then
				Me._SiteContactEmail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine1() As String
		Get
			Return Me._PostalAddressLine1
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine1, value) = false) Then
				Me._PostalAddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine2() As String
		Get
			Return Me._PostalAddressLine2
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine2, value) = false) Then
				Me._PostalAddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(50)")>  _
	Public Property PostalSuburb() As String
		Get
			Return Me._PostalSuburb
		End Get
		Set
			If (String.Equals(Me._PostalSuburb, value) = false) Then
				Me._PostalSuburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalState", DbType:="NVarChar(6)")>  _
	Public Property PostalState() As String
		Get
			Return Me._PostalState
		End Get
		Set
			If (String.Equals(Me._PostalState, value) = false) Then
				Me._PostalState = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalPostCode", DbType:="SmallInt")>  _
	Public Property PostalPostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostalPostCode
		End Get
		Set
			If (Me._PostalPostCode.Equals(value) = false) Then
				Me._PostalPostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>  _
	Public Property SiteStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteStartDate
		End Get
		Set
			If (Me._SiteStartDate.Equals(value) = false) Then
				Me._SiteStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitePeriod", DbType:="Int")>  _
	Public Property SitePeriod() As System.Nullable(Of Integer)
		Get
			Return Me._SitePeriod
		End Get
		Set
			If (Me._SitePeriod.Equals(value) = false) Then
				Me._SitePeriod = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>  _
	Public Property SiteContractExpiry() As System.Nullable(Of Date)
		Get
			Return Me._SiteContractExpiry
		End Get
		Set
			If (Me._SiteContractExpiry.Equals(value) = false) Then
				Me._SiteContractExpiry = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseReason", DbType:="Int")>  _
	Public Property SiteCeaseReason() As System.Nullable(Of Integer)
		Get
			Return Me._SiteCeaseReason
		End Get
		Set
			If (Me._SiteCeaseReason.Equals(value) = false) Then
				Me._SiteCeaseReason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceFrequency", DbType:="Int")>  _
	Public Property InvoiceFrequency() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceFrequency
		End Get
		Set
			If (Me._InvoiceFrequency.Equals(value) = false) Then
				Me._InvoiceFrequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>  _
	Public Property InvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceCommencing
		End Get
		Set
			If (Me._InvoiceCommencing.Equals(value) = false) Then
				Me._InvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryGroup", DbType:="SmallInt")>  _
	Public Property IndustryGroup() As System.Nullable(Of Short)
		Get
			Return Me._IndustryGroup
		End Get
		Set
			If (Me._IndustryGroup.Equals(value) = false) Then
				Me._IndustryGroup = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplier", DbType:="SmallInt")>  _
	Public Property PreviousSupplier() As System.Nullable(Of Short)
		Get
			Return Me._PreviousSupplier
		End Get
		Set
			If (Me._PreviousSupplier.Equals(value) = false) Then
				Me._PreviousSupplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LostBusinessTo", DbType:="SmallInt")>  _
	Public Property LostBusinessTo() As System.Nullable(Of Short)
		Get
			Return Me._LostBusinessTo
		End Get
		Set
			If (Me._LostBusinessTo.Equals(value) = false) Then
				Me._LostBusinessTo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="SmallInt")>  _
	Public Property SalesPerson() As System.Nullable(Of Short)
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (Me._SalesPerson.Equals(value) = false) Then
				Me._SalesPerson = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InitialServiceAgreementNo", DbType:="NVarChar(22)")>  _
	Public Property InitialServiceAgreementNo() As String
		Get
			Return Me._InitialServiceAgreementNo
		End Get
		Set
			If (String.Equals(Me._InitialServiceAgreementNo, value) = false) Then
				Me._InitialServiceAgreementNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>  _
	Public Property InvoiceMonth1() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth1
		End Get
		Set
			If (Me._InvoiceMonth1.Equals(value) = false) Then
				Me._InvoiceMonth1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>  _
	Public Property InvoiceMonth2() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth2
		End Get
		Set
			If (Me._InvoiceMonth2.Equals(value) = false) Then
				Me._InvoiceMonth2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>  _
	Public Property InvoiceMonth3() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth3
		End Get
		Set
			If (Me._InvoiceMonth3.Equals(value) = false) Then
				Me._InvoiceMonth3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>  _
	Public Property InvoiceMonth4() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth4
		End Get
		Set
			If (Me._InvoiceMonth4.Equals(value) = false) Then
				Me._InvoiceMonth4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneralSiteServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property GeneralSiteServiceComments() As String
		Get
			Return Me._GeneralSiteServiceComments
		End Get
		Set
			If (String.Equals(Me._GeneralSiteServiceComments, value) = false) Then
				Me._GeneralSiteServiceComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalUnits", DbType:="Float")>  _
	Public Property TotalUnits() As System.Nullable(Of Double)
		Get
			Return Me._TotalUnits
		End Get
		Set
			If (Me._TotalUnits.Equals(value) = false) Then
				Me._TotalUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAmount", DbType:="Float")>  _
	Public Property TotalAmount() As System.Nullable(Of Double)
		Get
			Return Me._TotalAmount
		End Get
		Set
			If (Me._TotalAmount.Equals(value) = false) Then
				Me._TotalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int")>  _
	Public Property Zone() As System.Nullable(Of Integer)
		Get
			Return Me._Zone
		End Get
		Set
			If (Me._Zone.Equals(value) = false) Then
				Me._Zone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeparateInvoice", DbType:="Bit NOT NULL")>  _
	Public Property SeparateInvoice() As Boolean
		Get
			Return Me._SeparateInvoice
		End Get
		Set
			If ((Me._SeparateInvoice = value)  _
						= false) Then
				Me._SeparateInvoice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property PurchaseOrderNumber() As String
		Get
			Return Me._PurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._PurchaseOrderNumber, value) = false) Then
				Me._PurchaseOrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chkSitesExcludeFuelLevy", DbType:="Bit NOT NULL")>  _
	Public Property chkSitesExcludeFuelLevy() As Boolean
		Get
			Return Me._chkSitesExcludeFuelLevy
		End Get
		Set
			If ((Me._chkSitesExcludeFuelLevy = value)  _
						= false) Then
				Me._chkSitesExcludeFuelLevy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncrease", DbType:="SmallInt")>  _
	Public Property cmbRateIncrease() As System.Nullable(Of Short)
		Get
			Return Me._cmbRateIncrease
		End Get
		Set
			If (Me._cmbRateIncrease.Equals(value) = false) Then
				Me._cmbRateIncrease = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSortOrder", DbType:="BigInt")>  _
	Public Property ZoneSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ZoneSortOrder
		End Get
		Set
			If (Me._ZoneSortOrder.Equals(value) = false) Then
				Me._ZoneSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateSortOrder", DbType:="BigInt")>  _
	Public Property StateSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._StateSortOrder
		End Get
		Set
			If (Me._StateSortOrder.Equals(value) = false) Then
				Me._StateSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerSortOrder", DbType:="BigInt")>  _
	Public Property CustomerSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._CustomerSortOrder
		End Get
		Set
			If (Me._CustomerSortOrder.Equals(value) = false) Then
				Me._CustomerSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustrySortOrder", DbType:="BigInt")>  _
	Public Property IndustrySortOrder() As System.Nullable(Of Long)
		Get
			Return Me._IndustrySortOrder
		End Get
		Set
			If (Me._IndustrySortOrder.Equals(value) = false) Then
				Me._IndustrySortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreviousSupplierSortOrder", DbType:="BigInt")>  _
	Public Property PreviousSupplierSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._PreviousSupplierSortOrder
		End Get
		Set
			If (Me._PreviousSupplierSortOrder.Equals(value) = false) Then
				Me._PreviousSupplierSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonSortOrder", DbType:="BigInt")>  _
	Public Property SalesPersonSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._SalesPersonSortOrder
		End Get
		Set
			If (Me._SalesPersonSortOrder.Equals(value) = false) Then
				Me._SalesPersonSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InitialContractPeriodSortOrder", DbType:="BigInt")>  _
	Public Property InitialContractPeriodSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._InitialContractPeriodSortOrder
		End Get
		Set
			If (Me._InitialContractPeriodSortOrder.Equals(value) = false) Then
				Me._InitialContractPeriodSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractCeaseReasonsSortOrder", DbType:="BigInt")>  _
	Public Property ContractCeaseReasonsSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ContractCeaseReasonsSortOrder
		End Get
		Set
			If (Me._ContractCeaseReasonsSortOrder.Equals(value) = false) Then
				Me._ContractCeaseReasonsSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LostBusinessToSortOrder", DbType:="BigInt")>  _
	Public Property LostBusinessToSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._LostBusinessToSortOrder
		End Get
		Set
			If (Me._LostBusinessToSortOrder.Equals(value) = false) Then
				Me._LostBusinessToSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoicingFrequencySortOrder", DbType:="BigInt")>  _
	Public Property InvoicingFrequencySortOrder() As System.Nullable(Of Long)
		Get
			Return Me._InvoicingFrequencySortOrder
		End Get
		Set
			If (Me._InvoicingFrequencySortOrder.Equals(value) = false) Then
				Me._InvoicingFrequencySortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cmbRateIncreaseSortOrder", DbType:="BigInt")>  _
	Public Property cmbRateIncreaseSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._cmbRateIncreaseSortOrder
		End Get
		Set
			If (Me._cmbRateIncreaseSortOrder.Equals(value) = false) Then
				Me._cmbRateIncreaseSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>  _
	Public Property CustomerRating() As System.Nullable(Of Short)
		Get
			Return Me._CustomerRating
		End Get
		Set
			If (Me._CustomerRating.Equals(value) = false) Then
				Me._CustomerRating = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingDesc", DbType:="NVarChar(50)")>  _
	Public Property CustomerRatingDesc() As String
		Get
			Return Me._CustomerRatingDesc
		End Get
		Set
			If (String.Equals(Me._CustomerRatingDesc, value) = false) Then
				Me._CustomerRatingDesc = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetCustomerServicesResult
	
	Private _CustomerServiceID As System.Guid
	
	Private _ID As Integer
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _CId As System.Nullable(Of Integer)
	
	Private _ServiceFrequencyCode As System.Nullable(Of Short)
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _ServiceRun As System.Nullable(Of Short)
	
	Private _ServiceComments As String
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _ServiceFrequency1 As System.Nullable(Of Short)
	
	Private _ServiceFrequency2 As System.Nullable(Of Short)
	
	Private _ServiceFrequency3 As System.Nullable(Of Short)
	
	Private _ServiceFrequency4 As System.Nullable(Of Short)
	
	Private _ServiceFrequency5 As System.Nullable(Of Short)
	
	Private _ServiceFrequency6 As System.Nullable(Of Short)
	
	Private _ServiceFrequency7 As System.Nullable(Of Short)
	
	Private _ServiceFrequency8 As System.Nullable(Of Short)
	
	Private _ServiceSortOrderCode As String
	
	Private _ServicesSortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequencySortOrder As System.Nullable(Of Long)
	
	Private _ServiceRunSortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency1SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency2SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency3SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency4SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency5SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency6SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency7SortOrder As System.Nullable(Of Long)
	
	Private _ServiceFrequency8SortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServiceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CustomerServiceID() As System.Guid
		Get
			Return Me._CustomerServiceID
		End Get
		Set
			If ((Me._CustomerServiceID = value)  _
						= false) Then
				Me._CustomerServiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me._CSid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int")>  _
	Public Property CId() As System.Nullable(Of Integer)
		Get
			Return Me._CId
		End Get
		Set
			If (Me._CId.Equals(value) = false) Then
				Me._CId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencyCode", DbType:="SmallInt")>  _
	Public Property ServiceFrequencyCode() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequencyCode
		End Get
		Set
			If (Me._ServiceFrequencyCode.Equals(value) = false) Then
				Me._ServiceFrequencyCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>  _
	Public Property ServiceRun() As System.Nullable(Of Short)
		Get
			Return Me._ServiceRun
		End Get
		Set
			If (Me._ServiceRun.Equals(value) = false) Then
				Me._ServiceRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me._ServiceComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me._UnitsHaveMoreThanOneRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1", DbType:="SmallInt")>  _
	Public Property ServiceFrequency1() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency1
		End Get
		Set
			If (Me._ServiceFrequency1.Equals(value) = false) Then
				Me._ServiceFrequency1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2", DbType:="SmallInt")>  _
	Public Property ServiceFrequency2() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency2
		End Get
		Set
			If (Me._ServiceFrequency2.Equals(value) = false) Then
				Me._ServiceFrequency2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3", DbType:="SmallInt")>  _
	Public Property ServiceFrequency3() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency3
		End Get
		Set
			If (Me._ServiceFrequency3.Equals(value) = false) Then
				Me._ServiceFrequency3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4", DbType:="SmallInt")>  _
	Public Property ServiceFrequency4() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency4
		End Get
		Set
			If (Me._ServiceFrequency4.Equals(value) = false) Then
				Me._ServiceFrequency4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5", DbType:="SmallInt")>  _
	Public Property ServiceFrequency5() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency5
		End Get
		Set
			If (Me._ServiceFrequency5.Equals(value) = false) Then
				Me._ServiceFrequency5 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6", DbType:="SmallInt")>  _
	Public Property ServiceFrequency6() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency6
		End Get
		Set
			If (Me._ServiceFrequency6.Equals(value) = false) Then
				Me._ServiceFrequency6 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7", DbType:="SmallInt")>  _
	Public Property ServiceFrequency7() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency7
		End Get
		Set
			If (Me._ServiceFrequency7.Equals(value) = false) Then
				Me._ServiceFrequency7 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8", DbType:="SmallInt")>  _
	Public Property ServiceFrequency8() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency8
		End Get
		Set
			If (Me._ServiceFrequency8.Equals(value) = false) Then
				Me._ServiceFrequency8 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceSortOrderCode", DbType:="NVarChar(12)")>  _
	Public Property ServiceSortOrderCode() As String
		Get
			Return Me._ServiceSortOrderCode
		End Get
		Set
			If (String.Equals(Me._ServiceSortOrderCode, value) = false) Then
				Me._ServiceSortOrderCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesSortOrder", DbType:="BigInt")>  _
	Public Property ServicesSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServicesSortOrder
		End Get
		Set
			If (Me._ServicesSortOrder.Equals(value) = false) Then
				Me._ServicesSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencySortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequencySortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequencySortOrder
		End Get
		Set
			If (Me._ServiceFrequencySortOrder.Equals(value) = false) Then
				Me._ServiceFrequencySortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRunSortOrder", DbType:="BigInt")>  _
	Public Property ServiceRunSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceRunSortOrder
		End Get
		Set
			If (Me._ServiceRunSortOrder.Equals(value) = false) Then
				Me._ServiceRunSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency1SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency1SortOrder
		End Get
		Set
			If (Me._ServiceFrequency1SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency1SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency2SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency2SortOrder
		End Get
		Set
			If (Me._ServiceFrequency2SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency2SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency3SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency3SortOrder
		End Get
		Set
			If (Me._ServiceFrequency3SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency3SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency4SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency4SortOrder
		End Get
		Set
			If (Me._ServiceFrequency4SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency4SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency5SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency5SortOrder
		End Get
		Set
			If (Me._ServiceFrequency5SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency5SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency6SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency6SortOrder
		End Get
		Set
			If (Me._ServiceFrequency6SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency6SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency7SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency7SortOrder
		End Get
		Set
			If (Me._ServiceFrequency7SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency7SortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8SortOrder", DbType:="BigInt")>  _
	Public Property ServiceFrequency8SortOrder() As System.Nullable(Of Long)
		Get
			Return Me._ServiceFrequency8SortOrder
		End Get
		Set
			If (Me._ServiceFrequency8SortOrder.Equals(value) = false) Then
				Me._ServiceFrequency8SortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetCIRHistoryResult
	
	Private _HistoryID As System.Guid
	
	Private _NCId As Integer
	
	Private _Cid As System.Nullable(Of Short)
	
	Private _NCRDate As System.Nullable(Of Date)
	
	Private _NCRNumber As System.Nullable(Of Integer)
	
	Private _NCRDescription As String
	
	Private _NCRRecordedBY As String
	
	Private _NCRClosedBy As String
	
	Private _Driver As System.Nullable(Of Short)
	
	Private _NCRReason As System.Nullable(Of Short)
	
	Private _NCRReasonSortOrder As System.Nullable(Of Long)
	
	Private _DriverSortOrder As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HistoryID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property HistoryID() As System.Guid
		Get
			Return Me._HistoryID
		End Get
		Set
			If ((Me._HistoryID = value)  _
						= false) Then
				Me._HistoryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCId", DbType:="Int NOT NULL")>  _
	Public Property NCId() As Integer
		Get
			Return Me._NCId
		End Get
		Set
			If ((Me._NCId = value)  _
						= false) Then
				Me._NCId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="SmallInt")>  _
	Public Property Cid() As System.Nullable(Of Short)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDate", DbType:="DateTime")>  _
	Public Property NCRDate() As System.Nullable(Of Date)
		Get
			Return Me._NCRDate
		End Get
		Set
			If (Me._NCRDate.Equals(value) = false) Then
				Me._NCRDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRNumber", DbType:="Int")>  _
	Public Property NCRNumber() As System.Nullable(Of Integer)
		Get
			Return Me._NCRNumber
		End Get
		Set
			If (Me._NCRNumber.Equals(value) = false) Then
				Me._NCRNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRDescription", DbType:="NVarChar(MAX)")>  _
	Public Property NCRDescription() As String
		Get
			Return Me._NCRDescription
		End Get
		Set
			If (String.Equals(Me._NCRDescription, value) = false) Then
				Me._NCRDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRRecordedBY", DbType:="NVarChar(50)")>  _
	Public Property NCRRecordedBY() As String
		Get
			Return Me._NCRRecordedBY
		End Get
		Set
			If (String.Equals(Me._NCRRecordedBY, value) = false) Then
				Me._NCRRecordedBY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRClosedBy", DbType:="NVarChar(50)")>  _
	Public Property NCRClosedBy() As String
		Get
			Return Me._NCRClosedBy
		End Get
		Set
			If (String.Equals(Me._NCRClosedBy, value) = false) Then
				Me._NCRClosedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Driver", DbType:="SmallInt")>  _
	Public Property Driver() As System.Nullable(Of Short)
		Get
			Return Me._Driver
		End Get
		Set
			If (Me._Driver.Equals(value) = false) Then
				Me._Driver = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRReason", DbType:="SmallInt")>  _
	Public Property NCRReason() As System.Nullable(Of Short)
		Get
			Return Me._NCRReason
		End Get
		Set
			If (Me._NCRReason.Equals(value) = false) Then
				Me._NCRReason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCRReasonSortOrder", DbType:="BigInt")>  _
	Public Property NCRReasonSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._NCRReasonSortOrder
		End Get
		Set
			If (Me._NCRReasonSortOrder.Equals(value) = false) Then
				Me._NCRReasonSortOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverSortOrder", DbType:="BigInt")>  _
	Public Property DriverSortOrder() As System.Nullable(Of Long)
		Get
			Return Me._DriverSortOrder
		End Get
		Set
			If (Me._DriverSortOrder.Equals(value) = false) Then
				Me._DriverSortOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetContractRenewalsReportResult
	
	Private _Customer As System.Nullable(Of Short)
	
	Private _AreaDescription As String
	
	Private _SiteContractExpiry As System.Nullable(Of Date)
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _SiteStartDate As System.Nullable(Of Date)
	
	Private _ContractPeriodDesc As String
	
	Private _SiteContactPhone As String
	
	Private _CustomerContactName As String
	
	Private _CustomerPhone As String
	
	Private _ServiceUnits As System.Nullable(Of Double)
	
	Private _PerAnnumCharge As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaDescription", DbType:="NVarChar(50)")>  _
	Public Property AreaDescription() As String
		Get
			Return Me._AreaDescription
		End Get
		Set
			If (String.Equals(Me._AreaDescription, value) = false) Then
				Me._AreaDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContractExpiry", DbType:="Date")>  _
	Public Property SiteContractExpiry() As System.Nullable(Of Date)
		Get
			Return Me._SiteContractExpiry
		End Get
		Set
			If (Me._SiteContractExpiry.Equals(value) = false) Then
				Me._SiteContractExpiry = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>  _
	Public Property SiteStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteStartDate
		End Get
		Set
			If (Me._SiteStartDate.Equals(value) = false) Then
				Me._SiteStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodDesc", DbType:="NVarChar(50)")>  _
	Public Property ContractPeriodDesc() As String
		Get
			Return Me._ContractPeriodDesc
		End Get
		Set
			If (String.Equals(Me._ContractPeriodDesc, value) = false) Then
				Me._ContractPeriodDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteContactPhone", DbType:="NVarChar(50)")>  _
	Public Property SiteContactPhone() As String
		Get
			Return Me._SiteContactPhone
		End Get
		Set
			If (String.Equals(Me._SiteContactPhone, value) = false) Then
				Me._SiteContactPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>  _
	Public Property CustomerContactName() As String
		Get
			Return Me._CustomerContactName
		End Get
		Set
			If (String.Equals(Me._CustomerContactName, value) = false) Then
				Me._CustomerContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>  _
	Public Property ServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Float")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRunListingReportResult
	
	Private _RunNUmber As System.Nullable(Of Integer)
	
	Private _RunNum As String
	
	Private _RunDescription As String
	
	Private _RunDriver As System.Nullable(Of Short)
	
	Private _DriverName As String
	
	Private _MondayRun As Boolean
	
	Private _TuesdayRun As Boolean
	
	Private _WednesdayRun As Boolean
	
	Private _ThursdayRun As Boolean
	
	Private _FridayRun As Boolean
	
	Private _SaturdayRun As Boolean
	
	Private _SundayRun As Boolean
	
	Private _InactiveRun As Boolean
	
	Private _Rid As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>  _
	Public Property RunNUmber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me._RunNUmber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNum", DbType:="VarChar(8)")>  _
	Public Property RunNum() As String
		Get
			Return Me._RunNum
		End Get
		Set
			If (String.Equals(Me._RunNum, value) = false) Then
				Me._RunNum = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>  _
	Public Property RunDriver() As System.Nullable(Of Short)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me._RunDriver = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>  _
	Public Property MondayRun() As Boolean
		Get
			Return Me._MondayRun
		End Get
		Set
			If ((Me._MondayRun = value)  _
						= false) Then
				Me._MondayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property TuesdayRun() As Boolean
		Get
			Return Me._TuesdayRun
		End Get
		Set
			If ((Me._TuesdayRun = value)  _
						= false) Then
				Me._TuesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property WednesdayRun() As Boolean
		Get
			Return Me._WednesdayRun
		End Get
		Set
			If ((Me._WednesdayRun = value)  _
						= false) Then
				Me._WednesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>  _
	Public Property ThursdayRun() As Boolean
		Get
			Return Me._ThursdayRun
		End Get
		Set
			If ((Me._ThursdayRun = value)  _
						= false) Then
				Me._ThursdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>  _
	Public Property FridayRun() As Boolean
		Get
			Return Me._FridayRun
		End Get
		Set
			If ((Me._FridayRun = value)  _
						= false) Then
				Me._FridayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>  _
	Public Property SaturdayRun() As Boolean
		Get
			Return Me._SaturdayRun
		End Get
		Set
			If ((Me._SaturdayRun = value)  _
						= false) Then
				Me._SaturdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>  _
	Public Property SundayRun() As Boolean
		Get
			Return Me._SundayRun
		End Get
		Set
			If ((Me._SundayRun = value)  _
						= false) Then
				Me._SundayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me._InactiveRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me._Rid = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRunListByRunNumberReportResult
	
	Private _RunNUmber As System.Nullable(Of Integer)
	
	Private _RunNum As String
	
	Private _RunNo As String
	
	Private _RunDescription As String
	
	Private _RunDriver As System.Nullable(Of Short)
	
	Private _DriverName As String
	
	Private _MondayRun As Boolean
	
	Private _TuesdayRun As Boolean
	
	Private _WednesdayRun As Boolean
	
	Private _ThursdayRun As Boolean
	
	Private _FridayRun As Boolean
	
	Private _SaturdayRun As Boolean
	
	Private _SundayRun As Boolean
	
	Private _InactiveRun As Boolean
	
	Private _Rid As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>  _
	Public Property RunNUmber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me._RunNUmber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNum", DbType:="VarChar(8)")>  _
	Public Property RunNum() As String
		Get
			Return Me._RunNum
		End Get
		Set
			If (String.Equals(Me._RunNum, value) = false) Then
				Me._RunNum = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNo", DbType:="VarChar(10)")>  _
	Public Property RunNo() As String
		Get
			Return Me._RunNo
		End Get
		Set
			If (String.Equals(Me._RunNo, value) = false) Then
				Me._RunNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>  _
	Public Property RunDriver() As System.Nullable(Of Short)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me._RunDriver = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>  _
	Public Property MondayRun() As Boolean
		Get
			Return Me._MondayRun
		End Get
		Set
			If ((Me._MondayRun = value)  _
						= false) Then
				Me._MondayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property TuesdayRun() As Boolean
		Get
			Return Me._TuesdayRun
		End Get
		Set
			If ((Me._TuesdayRun = value)  _
						= false) Then
				Me._TuesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property WednesdayRun() As Boolean
		Get
			Return Me._WednesdayRun
		End Get
		Set
			If ((Me._WednesdayRun = value)  _
						= false) Then
				Me._WednesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>  _
	Public Property ThursdayRun() As Boolean
		Get
			Return Me._ThursdayRun
		End Get
		Set
			If ((Me._ThursdayRun = value)  _
						= false) Then
				Me._ThursdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>  _
	Public Property FridayRun() As Boolean
		Get
			Return Me._FridayRun
		End Get
		Set
			If ((Me._FridayRun = value)  _
						= false) Then
				Me._FridayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>  _
	Public Property SaturdayRun() As Boolean
		Get
			Return Me._SaturdayRun
		End Get
		Set
			If ((Me._SaturdayRun = value)  _
						= false) Then
				Me._SaturdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>  _
	Public Property SundayRun() As Boolean
		Get
			Return Me._SundayRun
		End Get
		Set
			If ((Me._SundayRun = value)  _
						= false) Then
				Me._SundayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me._InactiveRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me._Rid = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRunValuesReportResult
	
	Private _SiteName As String
	
	Private _Add As String
	
	Private _AddLastLine As String
	
	Private _ServiceDescription As String
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _ServiceRun As System.Nullable(Of Short)
	
	Private _RunDescription As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Add]", Storage:="_Add", DbType:="NVarChar(102)")>  _
	Public Property Add() As String
		Get
			Return Me._Add
		End Get
		Set
			If (String.Equals(Me._Add, value) = false) Then
				Me._Add = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddLastLine", DbType:="NVarChar(67)")>  _
	Public Property AddLastLine() As String
		Get
			Return Me._AddLastLine
		End Get
		Set
			If (String.Equals(Me._AddLastLine, value) = false) Then
				Me._AddLastLine = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>  _
	Public Property ServiceRun() As System.Nullable(Of Short)
		Get
			Return Me._ServiceRun
		End Get
		Set
			If (Me._ServiceRun.Equals(value) = false) Then
				Me._ServiceRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetRunValueSummaryReportResult
	
	Private _RunDescription As String
	
	Private _SumOfPerAnnumCharge As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SumOfPerAnnumCharge", DbType:="Float")>  _
	Public Property SumOfPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._SumOfPerAnnumCharge
		End Get
		Set
			If (Me._SumOfPerAnnumCharge.Equals(value) = false) Then
				Me._SumOfPerAnnumCharge = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetServiceSummaryReportResult
	
	Private _FrequencyDescription As String
	
	Private _ServiceDescription As String
	
	Private _ServiceCode As String
	
	Private _ServiceUnits As System.Nullable(Of Double)
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FrequencyDescription", DbType:="NVarChar(50)")>  _
	Public Property FrequencyDescription() As String
		Get
			Return Me._FrequencyDescription
		End Get
		Set
			If (String.Equals(Me._FrequencyDescription, value) = false) Then
				Me._FrequencyDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me._ServiceCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Float")>  _
	Public Property ServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetLengthOfServicesReportResult
	
	Private _Years As System.Nullable(Of Integer)
	
	Private _sitestartdate As System.Nullable(Of Date)
	
	Private _SiteName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Years", DbType:="Int")>  _
	Public Property Years() As System.Nullable(Of Integer)
		Get
			Return Me._Years
		End Get
		Set
			If (Me._Years.Equals(value) = false) Then
				Me._Years = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sitestartdate", DbType:="Date")>  _
	Public Property sitestartdate() As System.Nullable(Of Date)
		Get
			Return Me._sitestartdate
		End Get
		Set
			If (Me._sitestartdate.Equals(value) = false) Then
				Me._sitestartdate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetCustomerByCustZoneResult
	
	Private _ZoneDescription As String
	
	Private _Cid As Integer
	
	Private _CustomerName As String
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _StateCode As String
	
	Private _Suburb As String
	
	Private _PostCode As String
	
	Private _CustomerContactName As String
	
	Private _CustomerPhone As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneDescription", DbType:="NVarChar(50)")>  _
	Public Property ZoneDescription() As String
		Get
			Return Me._ZoneDescription
		End Get
		Set
			If (String.Equals(Me._ZoneDescription, value) = false) Then
				Me._ZoneDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="NVarChar(3)")>  _
	Public Property StateCode() As String
		Get
			Return Me._StateCode
		End Get
		Set
			If (String.Equals(Me._StateCode, value) = false) Then
				Me._StateCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>  _
	Public Property CustomerContactName() As String
		Get
			Return Me._CustomerContactName
		End Get
		Set
			If (String.Equals(Me._CustomerContactName, value) = false) Then
				Me._CustomerContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetCustomerContactDetailsReportResult
	
	Private _CustomerName As String
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _StateDesc As String
	
	Private _Suburb As String
	
	Private _PostCode As String
	
	Private _CustomerContactName As String
	
	Private _CustomerPhone As String
	
	Private _CustomerMobile As String
	
	Private _CustomerFax As String
	
	Private _CustomerComments As String
	
	Private _CustomerAgentName As String
	
	Private _CustomerRating As System.Nullable(Of Short)
	
	Private _CustomerRatingDesc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(58)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me._AddressLine3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDesc", DbType:="NVarChar(30)")>  _
	Public Property StateDesc() As String
		Get
			Return Me._StateDesc
		End Get
		Set
			If (String.Equals(Me._StateDesc, value) = false) Then
				Me._StateDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(22)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(4)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerContactName", DbType:="NVarChar(50)")>  _
	Public Property CustomerContactName() As String
		Get
			Return Me._CustomerContactName
		End Get
		Set
			If (String.Equals(Me._CustomerContactName, value) = false) Then
				Me._CustomerContactName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPhone", DbType:="NVarChar(22)")>  _
	Public Property CustomerPhone() As String
		Get
			Return Me._CustomerPhone
		End Get
		Set
			If (String.Equals(Me._CustomerPhone, value) = false) Then
				Me._CustomerPhone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerMobile", DbType:="NVarChar(22)")>  _
	Public Property CustomerMobile() As String
		Get
			Return Me._CustomerMobile
		End Get
		Set
			If (String.Equals(Me._CustomerMobile, value) = false) Then
				Me._CustomerMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerFax", DbType:="NVarChar(22)")>  _
	Public Property CustomerFax() As String
		Get
			Return Me._CustomerFax
		End Get
		Set
			If (String.Equals(Me._CustomerFax, value) = false) Then
				Me._CustomerFax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerComments", DbType:="NVarChar(MAX)")>  _
	Public Property CustomerComments() As String
		Get
			Return Me._CustomerComments
		End Get
		Set
			If (String.Equals(Me._CustomerComments, value) = false) Then
				Me._CustomerComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgentName", DbType:="NVarChar(50)")>  _
	Public Property CustomerAgentName() As String
		Get
			Return Me._CustomerAgentName
		End Get
		Set
			If (String.Equals(Me._CustomerAgentName, value) = false) Then
				Me._CustomerAgentName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRating", DbType:="SmallInt")>  _
	Public Property CustomerRating() As System.Nullable(Of Short)
		Get
			Return Me._CustomerRating
		End Get
		Set
			If (Me._CustomerRating.Equals(value) = false) Then
				Me._CustomerRating = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerRatingDesc", DbType:="NVarChar(50)")>  _
	Public Property CustomerRatingDesc() As String
		Get
			Return Me._CustomerRatingDesc
		End Get
		Set
			If (String.Equals(Me._CustomerRatingDesc, value) = false) Then
				Me._CustomerRatingDesc = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetIndustryListReportResult
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServiceDescription As String
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _SiteName1 As String
	
	Private _Aid As Integer
	
	Private _IndustryDescription As String
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _Frequency As String
	
	Private _InvoiceCommencing As System.Nullable(Of Date)
	
	Private _PostCode As System.Nullable(Of Short)
	
	Private _MYOBCustomerNumber As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName1", DbType:="NVarChar(50)")>  _
	Public Property SiteName1() As String
		Get
			Return Me._SiteName1
		End Get
		Set
			If (String.Equals(Me._SiteName1, value) = false) Then
				Me._SiteName1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me._Aid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryDescription", DbType:="NVarChar(50)")>  _
	Public Property IndustryDescription() As String
		Get
			Return Me._IndustryDescription
		End Get
		Set
			If (String.Equals(Me._IndustryDescription, value) = false) Then
				Me._IndustryDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me._UnitsHaveMoreThanOneRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>  _
	Public Property Frequency() As String
		Get
			Return Me._Frequency
		End Get
		Set
			If (String.Equals(Me._Frequency, value) = false) Then
				Me._Frequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>  _
	Public Property InvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceCommencing
		End Get
		Set
			If (Me._InvoiceCommencing.Equals(value) = false) Then
				Me._InvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>  _
	Public Property PostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostCode
		End Get
		Set
			If (Me._PostCode.Equals(value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MYOBCustomerNumber", DbType:="NVarChar(50)")>  _
	Public Property MYOBCustomerNumber() As String
		Get
			Return Me._MYOBCustomerNumber
		End Get
		Set
			If (String.Equals(Me._MYOBCustomerNumber, value) = false) Then
				Me._MYOBCustomerNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetDriversLicenseExpiryReportResult
	
	Private _DriverID As System.Guid
	
	Private _Did As Integer
	
	Private _DriverName As String
	
	Private _DriversLicenseNo As String
	
	Private _DriversLicenseExpiryDate As System.Nullable(Of Date)
	
	Private _Inactive As Boolean
	
	Private _Renewal As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property DriverID() As System.Guid
		Get
			Return Me._DriverID
		End Get
		Set
			If ((Me._DriverID = value)  _
						= false) Then
				Me._DriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", DbType:="Int NOT NULL")>  _
	Public Property Did() As Integer
		Get
			Return Me._Did
		End Get
		Set
			If ((Me._Did = value)  _
						= false) Then
				Me._Did = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseNo", DbType:="NVarChar(22)")>  _
	Public Property DriversLicenseNo() As String
		Get
			Return Me._DriversLicenseNo
		End Get
		Set
			If (String.Equals(Me._DriversLicenseNo, value) = false) Then
				Me._DriversLicenseNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriversLicenseExpiryDate", DbType:="DateTime")>  _
	Public Property DriversLicenseExpiryDate() As System.Nullable(Of Date)
		Get
			Return Me._DriversLicenseExpiryDate
		End Get
		Set
			If (Me._DriversLicenseExpiryDate.Equals(value) = false) Then
				Me._DriversLicenseExpiryDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="Bit NOT NULL")>  _
	Public Property Inactive() As Boolean
		Get
			Return Me._Inactive
		End Get
		Set
			If ((Me._Inactive = value)  _
						= false) Then
				Me._Inactive = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Renewal", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Renewal() As String
		Get
			Return Me._Renewal
		End Get
		Set
			If (String.Equals(Me._Renewal, value) = false) Then
				Me._Renewal = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSitesWithNoContractsReportResult
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _SitePeriod As System.Nullable(Of Integer)
	
	Private _SiteStartDate As System.Nullable(Of Date)
	
	Private _ContractPeriodDesc As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SitePeriod", DbType:="Int")>  _
	Public Property SitePeriod() As System.Nullable(Of Integer)
		Get
			Return Me._SitePeriod
		End Get
		Set
			If (Me._SitePeriod.Equals(value) = false) Then
				Me._SitePeriod = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteStartDate", DbType:="Date")>  _
	Public Property SiteStartDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteStartDate
		End Get
		Set
			If (Me._SiteStartDate.Equals(value) = false) Then
				Me._SiteStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractPeriodDesc", DbType:="NVarChar(50)")>  _
	Public Property ContractPeriodDesc() As String
		Get
			Return Me._ContractPeriodDesc
		End Get
		Set
			If (String.Equals(Me._ContractPeriodDesc, value) = false) Then
				Me._ContractPeriodDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetServiceRunDatesResult
	
	Private _ApplicationId As System.Nullable(Of System.Guid)
	
	Private _DriverName As String
	
	Private _Did As Integer
	
	Private _DateOfRun As System.Nullable(Of Date)
	
	Private _wkday As String
	
	Private _Rid As System.Nullable(Of Integer)
	
	Private _RunNUmber As System.Nullable(Of Integer)
	
	Private _RunDescription As String
	
	Private _MondayRun As Boolean
	
	Private _TuesdayRun As Boolean
	
	Private _WednesdayRun As Boolean
	
	Private _ThursdayRun As Boolean
	
	Private _FridayRun As Boolean
	
	Private _SaturdayRun As Boolean
	
	Private _SundayRun As Boolean
	
	Private _InactiveRun As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationId() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationId
		End Get
		Set
			If (Me._ApplicationId.Equals(value) = false) Then
				Me._ApplicationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverName", DbType:="NVarChar(50)")>  _
	Public Property DriverName() As String
		Get
			Return Me._DriverName
		End Get
		Set
			If (String.Equals(Me._DriverName, value) = false) Then
				Me._DriverName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Did", DbType:="Int NOT NULL")>  _
	Public Property Did() As Integer
		Get
			Return Me._Did
		End Get
		Set
			If ((Me._Did = value)  _
						= false) Then
				Me._Did = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>  _
	Public Property DateOfRun() As System.Nullable(Of Date)
		Get
			Return Me._DateOfRun
		End Get
		Set
			If (Me._DateOfRun.Equals(value) = false) Then
				Me._DateOfRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wkday", DbType:="NVarChar(30)")>  _
	Public Property wkday() As String
		Get
			Return Me._wkday
		End Get
		Set
			If (String.Equals(Me._wkday, value) = false) Then
				Me._wkday = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me._Rid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>  _
	Public Property RunNUmber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me._RunNUmber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>  _
	Public Property MondayRun() As Boolean
		Get
			Return Me._MondayRun
		End Get
		Set
			If ((Me._MondayRun = value)  _
						= false) Then
				Me._MondayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property TuesdayRun() As Boolean
		Get
			Return Me._TuesdayRun
		End Get
		Set
			If ((Me._TuesdayRun = value)  _
						= false) Then
				Me._TuesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property WednesdayRun() As Boolean
		Get
			Return Me._WednesdayRun
		End Get
		Set
			If ((Me._WednesdayRun = value)  _
						= false) Then
				Me._WednesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>  _
	Public Property ThursdayRun() As Boolean
		Get
			Return Me._ThursdayRun
		End Get
		Set
			If ((Me._ThursdayRun = value)  _
						= false) Then
				Me._ThursdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>  _
	Public Property FridayRun() As Boolean
		Get
			Return Me._FridayRun
		End Get
		Set
			If ((Me._FridayRun = value)  _
						= false) Then
				Me._FridayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>  _
	Public Property SaturdayRun() As Boolean
		Get
			Return Me._SaturdayRun
		End Get
		Set
			If ((Me._SaturdayRun = value)  _
						= false) Then
				Me._SaturdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>  _
	Public Property SundayRun() As Boolean
		Get
			Return Me._SundayRun
		End Get
		Set
			If ((Me._SundayRun = value)  _
						= false) Then
				Me._SundayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me._InactiveRun = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSitesBySiteZoneReportResult
	
	Private _Zone As String
	
	Private _Cid As Integer
	
	Private _SiteName As String
	
	Private _Customer As System.Nullable(Of Short)
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _AddressLine3 As String
	
	Private _Suburb As String
	
	Private _PostCode As System.Nullable(Of Short)
	
	Private _PostalAddressLine1 As String
	
	Private _PostalAddressLine2 As String
	
	Private _PostalSuburb As String
	
	Private _PostalPostCode As System.Nullable(Of Short)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="NVarChar(50)")>  _
	Public Property Zone() As String
		Get
			Return Me._Zone
		End Get
		Set
			If (String.Equals(Me._Zone, value) = false) Then
				Me._Zone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int NOT NULL")>  _
	Public Property Cid() As Integer
		Get
			Return Me._Cid
		End Get
		Set
			If ((Me._Cid = value)  _
						= false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="SmallInt")>  _
	Public Property Customer() As System.Nullable(Of Short)
		Get
			Return Me._Customer
		End Get
		Set
			If (Me._Customer.Equals(value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine1", DbType:="NVarChar(50)")>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me._AddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine2", DbType:="NVarChar(50)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me._AddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressLine3", DbType:="NVarChar(50)")>  _
	Public Property AddressLine3() As String
		Get
			Return Me._AddressLine3
		End Get
		Set
			If (String.Equals(Me._AddressLine3, value) = false) Then
				Me._AddressLine3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="NVarChar(50)")>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me._Suburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="SmallInt")>  _
	Public Property PostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostCode
		End Get
		Set
			If (Me._PostCode.Equals(value) = false) Then
				Me._PostCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine1", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine1() As String
		Get
			Return Me._PostalAddressLine1
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine1, value) = false) Then
				Me._PostalAddressLine1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddressLine2", DbType:="NVarChar(50)")>  _
	Public Property PostalAddressLine2() As String
		Get
			Return Me._PostalAddressLine2
		End Get
		Set
			If (String.Equals(Me._PostalAddressLine2, value) = false) Then
				Me._PostalAddressLine2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(50)")>  _
	Public Property PostalSuburb() As String
		Get
			Return Me._PostalSuburb
		End Get
		Set
			If (String.Equals(Me._PostalSuburb, value) = false) Then
				Me._PostalSuburb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalPostCode", DbType:="SmallInt")>  _
	Public Property PostalPostCode() As System.Nullable(Of Short)
		Get
			Return Me._PostalPostCode
		End Get
		Set
			If (Me._PostalPostCode.Equals(value) = false) Then
				Me._PostalPostCode = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGainsAndLossesReportResult
	
	Private _SalesPerson As String
	
	Private _Site As String
	
	Private _EffectiveDate As System.Nullable(Of Date)
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _OldServiceUnits As System.Nullable(Of Double)
	
	Private _NewServiceUnits As System.Nullable(Of Double)
	
	Private _UnitsDiff As System.Nullable(Of Double)
	
	Private _UnitType As String
	
	Private _OldPerAnnumCharge As System.Nullable(Of Double)
	
	Private _NewPerAnnumCharge As System.Nullable(Of Double)
	
	Private _PADiff As System.Nullable(Of Double)
	
	Private _PAType As String
	
	Private _ChangeDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>  _
	Public Property SalesPerson() As String
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (String.Equals(Me._SalesPerson, value) = false) Then
				Me._SalesPerson = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>  _
	Public Property Site() As String
		Get
			Return Me._Site
		End Get
		Set
			If (String.Equals(Me._Site, value) = false) Then
				Me._Site = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="Date")>  _
	Public Property EffectiveDate() As System.Nullable(Of Date)
		Get
			Return Me._EffectiveDate
		End Get
		Set
			If (Me._EffectiveDate.Equals(value) = false) Then
				Me._EffectiveDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me._ServiceCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServiceUnits", DbType:="Float")>  _
	Public Property OldServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._OldServiceUnits
		End Get
		Set
			If (Me._OldServiceUnits.Equals(value) = false) Then
				Me._OldServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServiceUnits", DbType:="Float")>  _
	Public Property NewServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._NewServiceUnits
		End Get
		Set
			If (Me._NewServiceUnits.Equals(value) = false) Then
				Me._NewServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsDiff", DbType:="Float")>  _
	Public Property UnitsDiff() As System.Nullable(Of Double)
		Get
			Return Me._UnitsDiff
		End Get
		Set
			If (Me._UnitsDiff.Equals(value) = false) Then
				Me._UnitsDiff = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitType", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property UnitType() As String
		Get
			Return Me._UnitType
		End Get
		Set
			If (String.Equals(Me._UnitType, value) = false) Then
				Me._UnitType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPerAnnumCharge", DbType:="Float")>  _
	Public Property OldPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._OldPerAnnumCharge
		End Get
		Set
			If (Me._OldPerAnnumCharge.Equals(value) = false) Then
				Me._OldPerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPerAnnumCharge", DbType:="Float")>  _
	Public Property NewPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._NewPerAnnumCharge
		End Get
		Set
			If (Me._NewPerAnnumCharge.Equals(value) = false) Then
				Me._NewPerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PADiff", DbType:="Float")>  _
	Public Property PADiff() As System.Nullable(Of Double)
		Get
			Return Me._PADiff
		End Get
		Set
			If (Me._PADiff.Equals(value) = false) Then
				Me._PADiff = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAType", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property PAType() As String
		Get
			Return Me._PAType
		End Get
		Set
			If (String.Equals(Me._PAType, value) = false) Then
				Me._PAType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>  _
	Public Property ChangeDate() As System.Nullable(Of Date)
		Get
			Return Me._ChangeDate
		End Get
		Set
			If (Me._ChangeDate.Equals(value) = false) Then
				Me._ChangeDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetGainsAndLossesPerAnnumReportResult
	
	Private _SalesPerson As String
	
	Private _Site As String
	
	Private _EffectiveDate As System.Nullable(Of Date)
	
	Private _ServiceCode As String
	
	Private _ServiceDescription As String
	
	Private _OldServiceUnits As System.Nullable(Of Double)
	
	Private _NewServiceUnits As System.Nullable(Of Double)
	
	Private _UnitsDiff As System.Nullable(Of Double)
	
	Private _UnitType As String
	
	Private _OldPerAnnumCharge As System.Nullable(Of Double)
	
	Private _NewPerAnnumCharge As System.Nullable(Of Double)
	
	Private _PADiff As System.Nullable(Of Double)
	
	Private _PAType As String
	
	Private _ChangeDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPerson", DbType:="NVarChar(50)")>  _
	Public Property SalesPerson() As String
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (String.Equals(Me._SalesPerson, value) = false) Then
				Me._SalesPerson = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>  _
	Public Property Site() As String
		Get
			Return Me._Site
		End Get
		Set
			If (String.Equals(Me._Site, value) = false) Then
				Me._Site = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="Date")>  _
	Public Property EffectiveDate() As System.Nullable(Of Date)
		Get
			Return Me._EffectiveDate
		End Get
		Set
			If (Me._EffectiveDate.Equals(value) = false) Then
				Me._EffectiveDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me._ServiceCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServiceUnits", DbType:="Float")>  _
	Public Property OldServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._OldServiceUnits
		End Get
		Set
			If (Me._OldServiceUnits.Equals(value) = false) Then
				Me._OldServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServiceUnits", DbType:="Float")>  _
	Public Property NewServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._NewServiceUnits
		End Get
		Set
			If (Me._NewServiceUnits.Equals(value) = false) Then
				Me._NewServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsDiff", DbType:="Float")>  _
	Public Property UnitsDiff() As System.Nullable(Of Double)
		Get
			Return Me._UnitsDiff
		End Get
		Set
			If (Me._UnitsDiff.Equals(value) = false) Then
				Me._UnitsDiff = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitType", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property UnitType() As String
		Get
			Return Me._UnitType
		End Get
		Set
			If (String.Equals(Me._UnitType, value) = false) Then
				Me._UnitType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPerAnnumCharge", DbType:="Float")>  _
	Public Property OldPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._OldPerAnnumCharge
		End Get
		Set
			If (Me._OldPerAnnumCharge.Equals(value) = false) Then
				Me._OldPerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPerAnnumCharge", DbType:="Float")>  _
	Public Property NewPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._NewPerAnnumCharge
		End Get
		Set
			If (Me._NewPerAnnumCharge.Equals(value) = false) Then
				Me._NewPerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PADiff", DbType:="Float")>  _
	Public Property PADiff() As System.Nullable(Of Double)
		Get
			Return Me._PADiff
		End Get
		Set
			If (Me._PADiff.Equals(value) = false) Then
				Me._PADiff = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAType", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property PAType() As String
		Get
			Return Me._PAType
		End Get
		Set
			If (String.Equals(Me._PAType, value) = false) Then
				Me._PAType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>  _
	Public Property ChangeDate() As System.Nullable(Of Date)
		Get
			Return Me._ChangeDate
		End Get
		Set
			If (Me._ChangeDate.Equals(value) = false) Then
				Me._ChangeDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetStandardAuditReportResult
	
	Private _Aid As Integer
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _Cid As System.Nullable(Of Integer)
	
	Private _Customer As String
	
	Private _Site As String
	
	Private _OldServiceUnits As System.Nullable(Of Double)
	
	Private _OldServicePrice As System.Nullable(Of Double)
	
	Private _OldPerAnnumCharge As System.Nullable(Of Double)
	
	Private _NewServiceUnits As System.Nullable(Of Double)
	
	Private _NewServicePrice As System.Nullable(Of Double)
	
	Private _NewPerAnnumCharge As System.Nullable(Of Double)
	
	Private _ChangeReasonCode As System.Nullable(Of Integer)
	
	Private _User As String
	
	Private _ChangeDate As System.Nullable(Of Date)
	
	Private _ChangeTime As System.Nullable(Of Date)
	
	Private _EffectiveDate As System.Nullable(Of Date)
	
	Private _OldContractCeasedate As System.Nullable(Of Date)
	
	Private _NewContractCeasedate As System.Nullable(Of Date)
	
	Private _OldInvoiceCommencing As System.Nullable(Of Date)
	
	Private _NewInvoiceCommencing As System.Nullable(Of Date)
	
	Private _OldInvoicingFrequency As String
	
	Private _NewInvoicingFrequency As String
	
	Private _OldContractStartDate As System.Nullable(Of Date)
	
	Private _NewContractStartDate As System.Nullable(Of Date)
	
	Private _FieldType As String
	
	Private _OldService As String
	
	Private _RevenueChangeReason As String
	
	Private _ServiceDescription As String
	
	Private _ServiceCode As String
	
	Private _EffectiveDate1 As System.Nullable(Of Date)
	
	Private _InvoiceCommencing As System.Nullable(Of Date)
	
	Private _Frequency As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _FieldType1 As String
	
	Private _CustomerName As String
	
	Private _InvoiceMonth1 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth2 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth3 As System.Nullable(Of Integer)
	
	Private _InvoiceMonth4 As System.Nullable(Of Integer)
	
	Private _PurchaseOrderNumber As String
	
	Private _SiteCeaseDate1 As System.Nullable(Of Date)
	
	Private _OldService1 As String
	
	Private _CustormerSiteCeaseDate As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aid", DbType:="Int NOT NULL")>  _
	Public Property Aid() As Integer
		Get
			Return Me._Aid
		End Get
		Set
			If ((Me._Aid = value)  _
						= false) Then
				Me._Aid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me._CSid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cid", DbType:="Int")>  _
	Public Property Cid() As System.Nullable(Of Integer)
		Get
			Return Me._Cid
		End Get
		Set
			If (Me._Cid.Equals(value) = false) Then
				Me._Cid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>  _
	Public Property Customer() As String
		Get
			Return Me._Customer
		End Get
		Set
			If (String.Equals(Me._Customer, value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>  _
	Public Property Site() As String
		Get
			Return Me._Site
		End Get
		Set
			If (String.Equals(Me._Site, value) = false) Then
				Me._Site = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServiceUnits", DbType:="Float")>  _
	Public Property OldServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._OldServiceUnits
		End Get
		Set
			If (Me._OldServiceUnits.Equals(value) = false) Then
				Me._OldServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldServicePrice", DbType:="Float")>  _
	Public Property OldServicePrice() As System.Nullable(Of Double)
		Get
			Return Me._OldServicePrice
		End Get
		Set
			If (Me._OldServicePrice.Equals(value) = false) Then
				Me._OldServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldPerAnnumCharge", DbType:="Float")>  _
	Public Property OldPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._OldPerAnnumCharge
		End Get
		Set
			If (Me._OldPerAnnumCharge.Equals(value) = false) Then
				Me._OldPerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServiceUnits", DbType:="Float")>  _
	Public Property NewServiceUnits() As System.Nullable(Of Double)
		Get
			Return Me._NewServiceUnits
		End Get
		Set
			If (Me._NewServiceUnits.Equals(value) = false) Then
				Me._NewServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewServicePrice", DbType:="Float")>  _
	Public Property NewServicePrice() As System.Nullable(Of Double)
		Get
			Return Me._NewServicePrice
		End Get
		Set
			If (Me._NewServicePrice.Equals(value) = false) Then
				Me._NewServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewPerAnnumCharge", DbType:="Float")>  _
	Public Property NewPerAnnumCharge() As System.Nullable(Of Double)
		Get
			Return Me._NewPerAnnumCharge
		End Get
		Set
			If (Me._NewPerAnnumCharge.Equals(value) = false) Then
				Me._NewPerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeReasonCode", DbType:="Int")>  _
	Public Property ChangeReasonCode() As System.Nullable(Of Integer)
		Get
			Return Me._ChangeReasonCode
		End Get
		Set
			If (Me._ChangeReasonCode.Equals(value) = false) Then
				Me._ChangeReasonCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[User]", Storage:="_User", DbType:="NVarChar(50)")>  _
	Public Property User() As String
		Get
			Return Me._User
		End Get
		Set
			If (String.Equals(Me._User, value) = false) Then
				Me._User = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>  _
	Public Property ChangeDate() As System.Nullable(Of Date)
		Get
			Return Me._ChangeDate
		End Get
		Set
			If (Me._ChangeDate.Equals(value) = false) Then
				Me._ChangeDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeTime", DbType:="DateTime")>  _
	Public Property ChangeTime() As System.Nullable(Of Date)
		Get
			Return Me._ChangeTime
		End Get
		Set
			If (Me._ChangeTime.Equals(value) = false) Then
				Me._ChangeTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate", DbType:="Date")>  _
	Public Property EffectiveDate() As System.Nullable(Of Date)
		Get
			Return Me._EffectiveDate
		End Get
		Set
			If (Me._EffectiveDate.Equals(value) = false) Then
				Me._EffectiveDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractCeasedate", DbType:="Date")>  _
	Public Property OldContractCeasedate() As System.Nullable(Of Date)
		Get
			Return Me._OldContractCeasedate
		End Get
		Set
			If (Me._OldContractCeasedate.Equals(value) = false) Then
				Me._OldContractCeasedate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractCeasedate", DbType:="Date")>  _
	Public Property NewContractCeasedate() As System.Nullable(Of Date)
		Get
			Return Me._NewContractCeasedate
		End Get
		Set
			If (Me._NewContractCeasedate.Equals(value) = false) Then
				Me._NewContractCeasedate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoiceCommencing", DbType:="Date")>  _
	Public Property OldInvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._OldInvoiceCommencing
		End Get
		Set
			If (Me._OldInvoiceCommencing.Equals(value) = false) Then
				Me._OldInvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoiceCommencing", DbType:="Date")>  _
	Public Property NewInvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._NewInvoiceCommencing
		End Get
		Set
			If (Me._NewInvoiceCommencing.Equals(value) = false) Then
				Me._NewInvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoicingFrequency", DbType:="NVarChar(22)")>  _
	Public Property OldInvoicingFrequency() As String
		Get
			Return Me._OldInvoicingFrequency
		End Get
		Set
			If (String.Equals(Me._OldInvoicingFrequency, value) = false) Then
				Me._OldInvoicingFrequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoicingFrequency", DbType:="NVarChar(22)")>  _
	Public Property NewInvoicingFrequency() As String
		Get
			Return Me._NewInvoicingFrequency
		End Get
		Set
			If (String.Equals(Me._NewInvoicingFrequency, value) = false) Then
				Me._NewInvoicingFrequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractStartDate", DbType:="Date")>  _
	Public Property OldContractStartDate() As System.Nullable(Of Date)
		Get
			Return Me._OldContractStartDate
		End Get
		Set
			If (Me._OldContractStartDate.Equals(value) = false) Then
				Me._OldContractStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractStartDate", DbType:="Date")>  _
	Public Property NewContractStartDate() As System.Nullable(Of Date)
		Get
			Return Me._NewContractStartDate
		End Get
		Set
			If (Me._NewContractStartDate.Equals(value) = false) Then
				Me._NewContractStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="NVarChar(5)")>  _
	Public Property FieldType() As String
		Get
			Return Me._FieldType
		End Get
		Set
			If (String.Equals(Me._FieldType, value) = false) Then
				Me._FieldType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldService", DbType:="NVarChar(50)")>  _
	Public Property OldService() As String
		Get
			Return Me._OldService
		End Get
		Set
			If (String.Equals(Me._OldService, value) = false) Then
				Me._OldService = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevenueChangeReason", DbType:="NVarChar(50)")>  _
	Public Property RevenueChangeReason() As String
		Get
			Return Me._RevenueChangeReason
		End Get
		Set
			If (String.Equals(Me._RevenueChangeReason, value) = false) Then
				Me._RevenueChangeReason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceDescription", DbType:="NVarChar(50)")>  _
	Public Property ServiceDescription() As String
		Get
			Return Me._ServiceDescription
		End Get
		Set
			If (String.Equals(Me._ServiceDescription, value) = false) Then
				Me._ServiceDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceCode", DbType:="NVarChar(8)")>  _
	Public Property ServiceCode() As String
		Get
			Return Me._ServiceCode
		End Get
		Set
			If (String.Equals(Me._ServiceCode, value) = false) Then
				Me._ServiceCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveDate1", DbType:="Date")>  _
	Public Property EffectiveDate1() As System.Nullable(Of Date)
		Get
			Return Me._EffectiveDate1
		End Get
		Set
			If (Me._EffectiveDate1.Equals(value) = false) Then
				Me._EffectiveDate1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>  _
	Public Property InvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceCommencing
		End Get
		Set
			If (Me._InvoiceCommencing.Equals(value) = false) Then
				Me._InvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>  _
	Public Property Frequency() As String
		Get
			Return Me._Frequency
		End Get
		Set
			If (String.Equals(Me._Frequency, value) = false) Then
				Me._Frequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType1", DbType:="NVarChar(5)")>  _
	Public Property FieldType1() As String
		Get
			Return Me._FieldType1
		End Get
		Set
			If (String.Equals(Me._FieldType1, value) = false) Then
				Me._FieldType1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth1", DbType:="Int")>  _
	Public Property InvoiceMonth1() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth1
		End Get
		Set
			If (Me._InvoiceMonth1.Equals(value) = false) Then
				Me._InvoiceMonth1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth2", DbType:="Int")>  _
	Public Property InvoiceMonth2() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth2
		End Get
		Set
			If (Me._InvoiceMonth2.Equals(value) = false) Then
				Me._InvoiceMonth2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth3", DbType:="Int")>  _
	Public Property InvoiceMonth3() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth3
		End Get
		Set
			If (Me._InvoiceMonth3.Equals(value) = false) Then
				Me._InvoiceMonth3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceMonth4", DbType:="Int")>  _
	Public Property InvoiceMonth4() As System.Nullable(Of Integer)
		Get
			Return Me._InvoiceMonth4
		End Get
		Set
			If (Me._InvoiceMonth4.Equals(value) = false) Then
				Me._InvoiceMonth4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property PurchaseOrderNumber() As String
		Get
			Return Me._PurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._PurchaseOrderNumber, value) = false) Then
				Me._PurchaseOrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate1", DbType:="Date")>  _
	Public Property SiteCeaseDate1() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate1
		End Get
		Set
			If (Me._SiteCeaseDate1.Equals(value) = false) Then
				Me._SiteCeaseDate1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldService1", DbType:="NVarChar(50)")>  _
	Public Property OldService1() As String
		Get
			Return Me._OldService1
		End Get
		Set
			If (String.Equals(Me._OldService1, value) = false) Then
				Me._OldService1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustormerSiteCeaseDate", DbType:="VarChar(36)")>  _
	Public Property CustormerSiteCeaseDate() As String
		Get
			Return Me._CustormerSiteCeaseDate
		End Get
		Set
			If (String.Equals(Me._CustormerSiteCeaseDate, value) = false) Then
				Me._CustormerSiteCeaseDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetAuditContractReportResult
	
	Private _FieldType As String
	
	Private _ChangeDate As System.Nullable(Of Date)
	
	Private _Customer As String
	
	Private _OldContractCeasedate As System.Nullable(Of Date)
	
	Private _NewContractCeasedate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="NVarChar(5)")>  _
	Public Property FieldType() As String
		Get
			Return Me._FieldType
		End Get
		Set
			If (String.Equals(Me._FieldType, value) = false) Then
				Me._FieldType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>  _
	Public Property ChangeDate() As System.Nullable(Of Date)
		Get
			Return Me._ChangeDate
		End Get
		Set
			If (Me._ChangeDate.Equals(value) = false) Then
				Me._ChangeDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>  _
	Public Property Customer() As String
		Get
			Return Me._Customer
		End Get
		Set
			If (String.Equals(Me._Customer, value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractCeasedate", DbType:="Date")>  _
	Public Property OldContractCeasedate() As System.Nullable(Of Date)
		Get
			Return Me._OldContractCeasedate
		End Get
		Set
			If (Me._OldContractCeasedate.Equals(value) = false) Then
				Me._OldContractCeasedate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractCeasedate", DbType:="Date")>  _
	Public Property NewContractCeasedate() As System.Nullable(Of Date)
		Get
			Return Me._NewContractCeasedate
		End Get
		Set
			If (Me._NewContractCeasedate.Equals(value) = false) Then
				Me._NewContractCeasedate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetAuditOfSiteDetailReportResult
	
	Private _FieldType As String
	
	Private _Customer As String
	
	Private _Site As String
	
	Private _OldContractCeasedate As System.Nullable(Of Date)
	
	Private _NewContractCeasedate As System.Nullable(Of Date)
	
	Private _OldInvoiceCommencing As System.Nullable(Of Date)
	
	Private _NewInvoiceCommencing As System.Nullable(Of Date)
	
	Private _OldInvoicingFrequency As String
	
	Private _NewInvoicingFrequency As String
	
	Private _OldContractStartDate As System.Nullable(Of Date)
	
	Private _NewContractStartDate As System.Nullable(Of Date)
	
	Private _ChangeDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="NVarChar(5)")>  _
	Public Property FieldType() As String
		Get
			Return Me._FieldType
		End Get
		Set
			If (String.Equals(Me._FieldType, value) = false) Then
				Me._FieldType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customer", DbType:="NVarChar(50)")>  _
	Public Property Customer() As String
		Get
			Return Me._Customer
		End Get
		Set
			If (String.Equals(Me._Customer, value) = false) Then
				Me._Customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Site", DbType:="NVarChar(50)")>  _
	Public Property Site() As String
		Get
			Return Me._Site
		End Get
		Set
			If (String.Equals(Me._Site, value) = false) Then
				Me._Site = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractCeasedate", DbType:="Date")>  _
	Public Property OldContractCeasedate() As System.Nullable(Of Date)
		Get
			Return Me._OldContractCeasedate
		End Get
		Set
			If (Me._OldContractCeasedate.Equals(value) = false) Then
				Me._OldContractCeasedate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractCeasedate", DbType:="Date")>  _
	Public Property NewContractCeasedate() As System.Nullable(Of Date)
		Get
			Return Me._NewContractCeasedate
		End Get
		Set
			If (Me._NewContractCeasedate.Equals(value) = false) Then
				Me._NewContractCeasedate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoiceCommencing", DbType:="Date")>  _
	Public Property OldInvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._OldInvoiceCommencing
		End Get
		Set
			If (Me._OldInvoiceCommencing.Equals(value) = false) Then
				Me._OldInvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoiceCommencing", DbType:="Date")>  _
	Public Property NewInvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._NewInvoiceCommencing
		End Get
		Set
			If (Me._NewInvoiceCommencing.Equals(value) = false) Then
				Me._NewInvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldInvoicingFrequency", DbType:="NVarChar(22)")>  _
	Public Property OldInvoicingFrequency() As String
		Get
			Return Me._OldInvoicingFrequency
		End Get
		Set
			If (String.Equals(Me._OldInvoicingFrequency, value) = false) Then
				Me._OldInvoicingFrequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewInvoicingFrequency", DbType:="NVarChar(22)")>  _
	Public Property NewInvoicingFrequency() As String
		Get
			Return Me._NewInvoicingFrequency
		End Get
		Set
			If (String.Equals(Me._NewInvoicingFrequency, value) = false) Then
				Me._NewInvoicingFrequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldContractStartDate", DbType:="Date")>  _
	Public Property OldContractStartDate() As System.Nullable(Of Date)
		Get
			Return Me._OldContractStartDate
		End Get
		Set
			If (Me._OldContractStartDate.Equals(value) = false) Then
				Me._OldContractStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewContractStartDate", DbType:="Date")>  _
	Public Property NewContractStartDate() As System.Nullable(Of Date)
		Get
			Return Me._NewContractStartDate
		End Get
		Set
			If (Me._NewContractStartDate.Equals(value) = false) Then
				Me._NewContractStartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChangeDate", DbType:="Date")>  _
	Public Property ChangeDate() As System.Nullable(Of Date)
		Get
			Return Me._ChangeDate
		End Get
		Set
			If (Me._ChangeDate.Equals(value) = false) Then
				Me._ChangeDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetInvoiceBasicCheckReportResult
	
	Private _CustomerName As String
	
	Private _SiteName As String
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Private _Frequency As String
	
	Private _InvoiceCommencing As System.Nullable(Of Date)
	
	Private _MonthDescription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Frequency", DbType:="NVarChar(22)")>  _
	Public Property Frequency() As String
		Get
			Return Me._Frequency
		End Get
		Set
			If (String.Equals(Me._Frequency, value) = false) Then
				Me._Frequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceCommencing", DbType:="Date")>  _
	Public Property InvoiceCommencing() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceCommencing
		End Get
		Set
			If (Me._InvoiceCommencing.Equals(value) = false) Then
				Me._InvoiceCommencing = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthDescription", DbType:="NVarChar(15)")>  _
	Public Property MonthDescription() As String
		Get
			Return Me._MonthDescription
		End Get
		Set
			If (String.Equals(Me._MonthDescription, value) = false) Then
				Me._MonthDescription = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetMYOBCustomerInvoiceReportResult
	
	Private _CustomerName As String
	
	Private _CustomerNumber As String
	
	Private _InvoiceNumber As String
	
	Private _InvoiceDate As System.Nullable(Of Date)
	
	Private _CustomerPurchaseOrderNumber As String
	
	Private _Quantity As System.Nullable(Of Short)
	
	Private _ProductCode As String
	
	Private _ProductDescription As String
	
	Private _InvoiceAmountExGST As System.Nullable(Of Single)
	
	Private _InvoiceAmountIncGST As System.Nullable(Of Single)
	
	Private _GSTAmount As System.Nullable(Of Single)
	
	Private _SiteName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(50)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerNumber", DbType:="NVarChar(50)")>  _
	Public Property CustomerNumber() As String
		Get
			Return Me._CustomerNumber
		End Get
		Set
			If (String.Equals(Me._CustomerNumber, value) = false) Then
				Me._CustomerNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceNumber", DbType:="NVarChar(50)")>  _
	Public Property InvoiceNumber() As String
		Get
			Return Me._InvoiceNumber
		End Get
		Set
			If (String.Equals(Me._InvoiceNumber, value) = false) Then
				Me._InvoiceNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceDate", DbType:="DateTime")>  _
	Public Property InvoiceDate() As System.Nullable(Of Date)
		Get
			Return Me._InvoiceDate
		End Get
		Set
			If (Me._InvoiceDate.Equals(value) = false) Then
				Me._InvoiceDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerPurchaseOrderNumber", DbType:="NVarChar(50)")>  _
	Public Property CustomerPurchaseOrderNumber() As String
		Get
			Return Me._CustomerPurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._CustomerPurchaseOrderNumber, value) = false) Then
				Me._CustomerPurchaseOrderNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt")>  _
	Public Property Quantity() As System.Nullable(Of Short)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me._Quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="NVarChar(50)")>  _
	Public Property ProductCode() As String
		Get
			Return Me._ProductCode
		End Get
		Set
			If (String.Equals(Me._ProductCode, value) = false) Then
				Me._ProductCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductDescription", DbType:="NVarChar(200)")>  _
	Public Property ProductDescription() As String
		Get
			Return Me._ProductDescription
		End Get
		Set
			If (String.Equals(Me._ProductDescription, value) = false) Then
				Me._ProductDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountExGST", DbType:="Real")>  _
	Public Property InvoiceAmountExGST() As System.Nullable(Of Single)
		Get
			Return Me._InvoiceAmountExGST
		End Get
		Set
			If (Me._InvoiceAmountExGST.Equals(value) = false) Then
				Me._InvoiceAmountExGST = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceAmountIncGST", DbType:="Real")>  _
	Public Property InvoiceAmountIncGST() As System.Nullable(Of Single)
		Get
			Return Me._InvoiceAmountIncGST
		End Get
		Set
			If (Me._InvoiceAmountIncGST.Equals(value) = false) Then
				Me._InvoiceAmountIncGST = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GSTAmount", DbType:="Real")>  _
	Public Property GSTAmount() As System.Nullable(Of Single)
		Get
			Return Me._GSTAmount
		End Get
		Set
			If (Me._GSTAmount.Equals(value) = false) Then
				Me._GSTAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="NVarChar(50)")>  _
	Public Property SiteName() As String
		Get
			Return Me._SiteName
		End Get
		Set
			If (String.Equals(Me._SiteName, value) = false) Then
				Me._SiteName = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetNotCompletedRunResult
	
	Private _RunID As System.Guid
	
	Private _RunName As String
	
	Private _RunCompletionID As System.Nullable(Of System.Guid)
	
	Private _DriverID As System.Nullable(Of System.Guid)
	
	Private _RunDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RunID() As System.Guid
		Get
			Return Me._RunID
		End Get
		Set
			If ((Me._RunID = value)  _
						= false) Then
				Me._RunID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunName", DbType:="NVarChar(50)")>  _
	Public Property RunName() As String
		Get
			Return Me._RunName
		End Get
		Set
			If (String.Equals(Me._RunName, value) = false) Then
				Me._RunName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunCompletionID", DbType:="UniqueIdentifier")>  _
	Public Property RunCompletionID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RunCompletionID
		End Get
		Set
			If (Me._RunCompletionID.Equals(value) = false) Then
				Me._RunCompletionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DriverID", DbType:="UniqueIdentifier")>  _
	Public Property DriverID() As System.Nullable(Of System.Guid)
		Get
			Return Me._DriverID
		End Get
		Set
			If (Me._DriverID.Equals(value) = false) Then
				Me._DriverID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDate", DbType:="DateTime")>  _
	Public Property RunDate() As System.Nullable(Of Date)
		Get
			Return Me._RunDate
		End Get
		Set
			If (Me._RunDate.Equals(value) = false) Then
				Me._RunDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetTblRunsResult
	
	Private _RunID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Rid As System.Nullable(Of Integer)
	
	Private _RunNUmber As System.Nullable(Of Integer)
	
	Private _RunDescription As String
	
	Private _RunDriver As System.Nullable(Of Short)
	
	Private _MondayRun As Boolean
	
	Private _TuesdayRun As Boolean
	
	Private _WednesdayRun As Boolean
	
	Private _ThursdayRun As Boolean
	
	Private _FridayRun As Boolean
	
	Private _SaturdayRun As Boolean
	
	Private _SundayRun As Boolean
	
	Private _InactiveRun As Boolean
	
	Private _InactiveRun1 As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RunID() As System.Guid
		Get
			Return Me._RunID
		End Get
		Set
			If ((Me._RunID = value)  _
						= false) Then
				Me._RunID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me._Rid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>  _
	Public Property RunNUmber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me._RunNUmber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDriver", DbType:="SmallInt")>  _
	Public Property RunDriver() As System.Nullable(Of Short)
		Get
			Return Me._RunDriver
		End Get
		Set
			If (Me._RunDriver.Equals(value) = false) Then
				Me._RunDriver = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MondayRun", DbType:="Bit NOT NULL")>  _
	Public Property MondayRun() As Boolean
		Get
			Return Me._MondayRun
		End Get
		Set
			If ((Me._MondayRun = value)  _
						= false) Then
				Me._MondayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TuesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property TuesdayRun() As Boolean
		Get
			Return Me._TuesdayRun
		End Get
		Set
			If ((Me._TuesdayRun = value)  _
						= false) Then
				Me._TuesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WednesdayRun", DbType:="Bit NOT NULL")>  _
	Public Property WednesdayRun() As Boolean
		Get
			Return Me._WednesdayRun
		End Get
		Set
			If ((Me._WednesdayRun = value)  _
						= false) Then
				Me._WednesdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThursdayRun", DbType:="Bit NOT NULL")>  _
	Public Property ThursdayRun() As Boolean
		Get
			Return Me._ThursdayRun
		End Get
		Set
			If ((Me._ThursdayRun = value)  _
						= false) Then
				Me._ThursdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FridayRun", DbType:="Bit NOT NULL")>  _
	Public Property FridayRun() As Boolean
		Get
			Return Me._FridayRun
		End Get
		Set
			If ((Me._FridayRun = value)  _
						= false) Then
				Me._FridayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaturdayRun", DbType:="Bit NOT NULL")>  _
	Public Property SaturdayRun() As Boolean
		Get
			Return Me._SaturdayRun
		End Get
		Set
			If ((Me._SaturdayRun = value)  _
						= false) Then
				Me._SaturdayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SundayRun", DbType:="Bit NOT NULL")>  _
	Public Property SundayRun() As Boolean
		Get
			Return Me._SundayRun
		End Get
		Set
			If ((Me._SundayRun = value)  _
						= false) Then
				Me._SundayRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun() As Boolean
		Get
			Return Me._InactiveRun
		End Get
		Set
			If ((Me._InactiveRun = value)  _
						= false) Then
				Me._InactiveRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveRun1", DbType:="Bit NOT NULL")>  _
	Public Property InactiveRun1() As Boolean
		Get
			Return Me._InactiveRun1
		End Get
		Set
			If ((Me._InactiveRun1 = value)  _
						= false) Then
				Me._InactiveRun1 = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSitesAndCustomerServicesResult
	
	Private _CustomerServiceID As System.Guid
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _ID As Integer
	
	Private _CSid As System.Nullable(Of Integer)
	
	Private _CId As System.Nullable(Of Integer)
	
	Private _ServiceFrequencyCode As System.Nullable(Of Short)
	
	Private _ServiceUnits As System.Nullable(Of Single)
	
	Private _ServicePrice As System.Nullable(Of Single)
	
	Private _PerAnnumCharge As System.Nullable(Of Single)
	
	Private _ServiceRun As System.Nullable(Of Short)
	
	Private _ServiceComments As String
	
	Private _UnitsHaveMoreThanOneRun As Boolean
	
	Private _ServiceFrequency1 As System.Nullable(Of Short)
	
	Private _ServiceFrequency2 As System.Nullable(Of Short)
	
	Private _ServiceFrequency3 As System.Nullable(Of Short)
	
	Private _ServiceFrequency4 As System.Nullable(Of Short)
	
	Private _ServiceFrequency5 As System.Nullable(Of Short)
	
	Private _ServiceFrequency6 As System.Nullable(Of Short)
	
	Private _ServiceFrequency7 As System.Nullable(Of Short)
	
	Private _ServiceFrequency8 As System.Nullable(Of Short)
	
	Private _ServiceSortOrderCode As String
	
	Private _ServiceRun1 As System.Nullable(Of Short)
	
	Private _SiteCeaseDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerServiceID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property CustomerServiceID() As System.Guid
		Get
			Return Me._CustomerServiceID
		End Get
		Set
			If ((Me._CustomerServiceID = value)  _
						= false) Then
				Me._CustomerServiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CSid", DbType:="Int")>  _
	Public Property CSid() As System.Nullable(Of Integer)
		Get
			Return Me._CSid
		End Get
		Set
			If (Me._CSid.Equals(value) = false) Then
				Me._CSid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CId", DbType:="Int")>  _
	Public Property CId() As System.Nullable(Of Integer)
		Get
			Return Me._CId
		End Get
		Set
			If (Me._CId.Equals(value) = false) Then
				Me._CId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequencyCode", DbType:="SmallInt")>  _
	Public Property ServiceFrequencyCode() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequencyCode
		End Get
		Set
			If (Me._ServiceFrequencyCode.Equals(value) = false) Then
				Me._ServiceFrequencyCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnits", DbType:="Real")>  _
	Public Property ServiceUnits() As System.Nullable(Of Single)
		Get
			Return Me._ServiceUnits
		End Get
		Set
			If (Me._ServiceUnits.Equals(value) = false) Then
				Me._ServiceUnits = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicePrice", DbType:="Real")>  _
	Public Property ServicePrice() As System.Nullable(Of Single)
		Get
			Return Me._ServicePrice
		End Get
		Set
			If (Me._ServicePrice.Equals(value) = false) Then
				Me._ServicePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerAnnumCharge", DbType:="Real")>  _
	Public Property PerAnnumCharge() As System.Nullable(Of Single)
		Get
			Return Me._PerAnnumCharge
		End Get
		Set
			If (Me._PerAnnumCharge.Equals(value) = false) Then
				Me._PerAnnumCharge = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun", DbType:="SmallInt")>  _
	Public Property ServiceRun() As System.Nullable(Of Short)
		Get
			Return Me._ServiceRun
		End Get
		Set
			If (Me._ServiceRun.Equals(value) = false) Then
				Me._ServiceRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceComments", DbType:="NVarChar(MAX)")>  _
	Public Property ServiceComments() As String
		Get
			Return Me._ServiceComments
		End Get
		Set
			If (String.Equals(Me._ServiceComments, value) = false) Then
				Me._ServiceComments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsHaveMoreThanOneRun", DbType:="Bit NOT NULL")>  _
	Public Property UnitsHaveMoreThanOneRun() As Boolean
		Get
			Return Me._UnitsHaveMoreThanOneRun
		End Get
		Set
			If ((Me._UnitsHaveMoreThanOneRun = value)  _
						= false) Then
				Me._UnitsHaveMoreThanOneRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency1", DbType:="SmallInt")>  _
	Public Property ServiceFrequency1() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency1
		End Get
		Set
			If (Me._ServiceFrequency1.Equals(value) = false) Then
				Me._ServiceFrequency1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency2", DbType:="SmallInt")>  _
	Public Property ServiceFrequency2() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency2
		End Get
		Set
			If (Me._ServiceFrequency2.Equals(value) = false) Then
				Me._ServiceFrequency2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency3", DbType:="SmallInt")>  _
	Public Property ServiceFrequency3() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency3
		End Get
		Set
			If (Me._ServiceFrequency3.Equals(value) = false) Then
				Me._ServiceFrequency3 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency4", DbType:="SmallInt")>  _
	Public Property ServiceFrequency4() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency4
		End Get
		Set
			If (Me._ServiceFrequency4.Equals(value) = false) Then
				Me._ServiceFrequency4 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency5", DbType:="SmallInt")>  _
	Public Property ServiceFrequency5() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency5
		End Get
		Set
			If (Me._ServiceFrequency5.Equals(value) = false) Then
				Me._ServiceFrequency5 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency6", DbType:="SmallInt")>  _
	Public Property ServiceFrequency6() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency6
		End Get
		Set
			If (Me._ServiceFrequency6.Equals(value) = false) Then
				Me._ServiceFrequency6 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency7", DbType:="SmallInt")>  _
	Public Property ServiceFrequency7() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency7
		End Get
		Set
			If (Me._ServiceFrequency7.Equals(value) = false) Then
				Me._ServiceFrequency7 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceFrequency8", DbType:="SmallInt")>  _
	Public Property ServiceFrequency8() As System.Nullable(Of Short)
		Get
			Return Me._ServiceFrequency8
		End Get
		Set
			If (Me._ServiceFrequency8.Equals(value) = false) Then
				Me._ServiceFrequency8 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceSortOrderCode", DbType:="NVarChar(12)")>  _
	Public Property ServiceSortOrderCode() As String
		Get
			Return Me._ServiceSortOrderCode
		End Get
		Set
			If (String.Equals(Me._ServiceSortOrderCode, value) = false) Then
				Me._ServiceSortOrderCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceRun1", DbType:="SmallInt")>  _
	Public Property ServiceRun1() As System.Nullable(Of Short)
		Get
			Return Me._ServiceRun1
		End Get
		Set
			If (Me._ServiceRun1.Equals(value) = false) Then
				Me._ServiceRun1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCeaseDate", DbType:="Date")>  _
	Public Property SiteCeaseDate() As System.Nullable(Of Date)
		Get
			Return Me._SiteCeaseDate
		End Get
		Set
			If (Me._SiteCeaseDate.Equals(value) = false) Then
				Me._SiteCeaseDate = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetSpecificDatesResult
	
	Private _DRid As Integer
	
	Private _Rid As System.Nullable(Of Integer)
	
	Private _DateOfRun As System.Nullable(Of Date)
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _DateOfRun1 As System.Nullable(Of Date)
	
	Private _Rid1 As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DRid", DbType:="Int NOT NULL")>  _
	Public Property DRid() As Integer
		Get
			Return Me._DRid
		End Get
		Set
			If ((Me._DRid = value)  _
						= false) Then
				Me._DRid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me._Rid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>  _
	Public Property DateOfRun() As System.Nullable(Of Date)
		Get
			Return Me._DateOfRun
		End Get
		Set
			If (Me._DateOfRun.Equals(value) = false) Then
				Me._DateOfRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun1", DbType:="DateTime")>  _
	Public Property DateOfRun1() As System.Nullable(Of Date)
		Get
			Return Me._DateOfRun1
		End Get
		Set
			If (Me._DateOfRun1.Equals(value) = false) Then
				Me._DateOfRun1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid1", DbType:="Int")>  _
	Public Property Rid1() As System.Nullable(Of Integer)
		Get
			Return Me._Rid1
		End Get
		Set
			If (Me._Rid1.Equals(value) = false) Then
				Me._Rid1 = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_GetUnAssignedRunsResult
	
	Private _ApplicationID As System.Nullable(Of System.Guid)
	
	Private _Rid As System.Nullable(Of Integer)
	
	Private _DateOfRun As System.Nullable(Of Date)
	
	Private _RunNUmber As System.Nullable(Of Integer)
	
	Private _RunDescription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier")>  _
	Public Property ApplicationID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rid", DbType:="Int")>  _
	Public Property Rid() As System.Nullable(Of Integer)
		Get
			Return Me._Rid
		End Get
		Set
			If (Me._Rid.Equals(value) = false) Then
				Me._Rid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfRun", DbType:="DateTime")>  _
	Public Property DateOfRun() As System.Nullable(Of Date)
		Get
			Return Me._DateOfRun
		End Get
		Set
			If (Me._DateOfRun.Equals(value) = false) Then
				Me._DateOfRun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunNUmber", DbType:="Int")>  _
	Public Property RunNUmber() As System.Nullable(Of Integer)
		Get
			Return Me._RunNUmber
		End Get
		Set
			If (Me._RunNUmber.Equals(value) = false) Then
				Me._RunNUmber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RunDescription", DbType:="NVarChar(255)")>  _
	Public Property RunDescription() As String
		Get
			Return Me._RunDescription
		End Get
		Set
			If (String.Equals(Me._RunDescription, value) = false) Then
				Me._RunDescription = value
			End If
		End Set
	End Property
End Class
